{
  "name": "HumanEval_158_find_max",
  "language": "php",
  "prompt": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n",
  "tests": "function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpxzmkt0nr.php:16\nStack trace:\n#0 /tmp/tmpxzmkt0nr.php(32): find_max(Array)\n#1 /tmp/tmpxzmkt0nr.php(36): candidate(Array)\n#2 /tmp/tmpxzmkt0nr.php(48): test()\n#3 {main}\n  thrown in /tmp/tmpxzmkt0nr.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp_64_tiu1.php:15\nStack trace:\n#0 /tmp/tmp_64_tiu1.php(26): find_max(Array)\n#1 /tmp/tmp_64_tiu1.php(30): candidate(Array)\n#2 /tmp/tmp_64_tiu1.php(42): test()\n#3 {main}\n  thrown in /tmp/tmp_64_tiu1.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $max_index = 0;\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n        }\n    }\n    $max = $words[$max_index];\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpv2y5ov0f.php:17\nStack trace:\n#0 /tmp/tmpv2y5ov0f.php(34): find_max(Array)\n#1 /tmp/tmpv2y5ov0f.php(38): candidate(Array)\n#2 /tmp/tmpv2y5ov0f.php(50): test()\n#3 {main}\n  thrown in /tmp/tmpv2y5ov0f.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpuvxymnew.php:16\nStack trace:\n#0 /tmp/tmpuvxymnew.php(27): find_max(Array)\n#1 /tmp/tmpuvxymnew.php(31): candidate(Array)\n#2 /tmp/tmpuvxymnew.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpuvxymnew.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_str = \"\";\n    $count = 0;\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] != ' ') {\n                $count++;\n            }\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_str = $words[$i];\n        }\n    }\n    return $max_str;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpbffj1b6x.php:16\nStack trace:\n#0 /tmp/tmpbffj1b6x.php(32): find_max(Array)\n#1 /tmp/tmpbffj1b6x.php(36): candidate(Array)\n#2 /tmp/tmpbffj1b6x.php(48): test()\n#3 {main}\n  thrown in /tmp/tmpbffj1b6x.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $words.sort();\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught ArgumentCountError: sort() expects at least 1 argument, 0 given in /tmp/tmpnow_atz2.php:15\nStack trace:\n#0 /tmp/tmpnow_atz2.php(15): sort()\n#1 /tmp/tmpnow_atz2.php(27): find_max(Array)\n#2 /tmp/tmpnow_atz2.php(31): candidate(Array)\n#3 /tmp/tmpnow_atz2.php(43): test()\n#4 {main}\n  thrown in /tmp/tmpnow_atz2.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n        }\n    }\n    return $words[$max_index];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpt_gkre7y.php:16\nStack trace:\n#0 /tmp/tmpt_gkre7y.php(27): find_max(Array)\n#1 /tmp/tmpt_gkre7y.php(31): candidate(Array)\n#2 /tmp/tmpt_gkre7y.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpt_gkre7y.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $max_count = 0;\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp5j581rqh.php:17\nStack trace:\n#0 /tmp/tmp5j581rqh.php(28): find_max(Array)\n#1 /tmp/tmp5j581rqh.php(32): candidate(Array)\n#2 /tmp/tmp5j581rqh.php(44): test()\n#3 {main}\n  thrown in /tmp/tmp5j581rqh.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_word = \"\";\n    $max_count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpdi2mad27.php:17\nStack trace:\n#0 /tmp/tmpdi2mad27.php(29): find_max(Array)\n#1 /tmp/tmpdi2mad27.php(33): candidate(Array)\n#2 /tmp/tmpdi2mad27.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpdi2mad27.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_string = \"\";\n    for($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if($count > $max) {\n            $max = $count;\n            $max_string = $words[$i];\n        }\n    }\n    return $max_string;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpcu_8u4mw.php:15\nStack trace:\n#0 /tmp/tmpcu_8u4mw.php(26): find_max(Array)\n#1 /tmp/tmpcu_8u4mw.php(30): candidate(Array)\n#2 /tmp/tmpcu_8u4mw.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpcu_8u4mw.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $words.sort();\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught ArgumentCountError: sort() expects at least 1 argument, 0 given in /tmp/tmpred2trlh.php:15\nStack trace:\n#0 /tmp/tmpred2trlh.php(15): sort()\n#1 /tmp/tmpred2trlh.php(27): find_max(Array)\n#2 /tmp/tmpred2trlh.php(31): candidate(Array)\n#3 /tmp/tmpred2trlh.php(43): test()\n#4 {main}\n  thrown in /tmp/tmpred2trlh.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != \"\") {\n                $count++;\n            }\n        }\n        if ($count > $max.length) {\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpzhcf9i8m.php:15\nStack trace:\n#0 /tmp/tmpzhcf9i8m.php(30): find_max(Array)\n#1 /tmp/tmpzhcf9i8m.php(34): candidate(Array)\n#2 /tmp/tmpzhcf9i8m.php(46): test()\n#3 {main}\n  thrown in /tmp/tmpzhcf9i8m.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_word = \"\";\n    for ( $i = 0; $i < $words.length; $i++ ) {\n        $count = count_unique($words[$i]);\n        if ( $count > $max ) {\n            $max = $count;\n            $max_index = $i;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpuoll7amn.php:16\nStack trace:\n#0 /tmp/tmpuoll7amn.php(28): find_max(Array)\n#1 /tmp/tmpuoll7amn.php(32): candidate(Array)\n#2 /tmp/tmpuoll7amn.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpuoll7amn.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_word = \"\";\n    $count = 0;\n    $index = 0;\n    $word = \"\";\n    for ($index = 0; $index < $words.length; $index++) {\n        $word = $words[$index];\n        $count = 0;\n        for ($index = 0; $index < $word.length; $index++) {\n            if ($word.substr($index, 1) == $word.substr($index, 1).toLowerCase()) {\n                $count++;\n            }\n        }\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $index;\n            $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp7q6z1mbh.php:20\nStack trace:\n#0 /tmp/tmp7q6z1mbh.php(38): find_max(Array)\n#1 /tmp/tmp7q6z1mbh.php(42): candidate(Array)\n#2 /tmp/tmp7q6z1mbh.php(54): test()\n#3 {main}\n  thrown in /tmp/tmp7q6z1mbh.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    var max = $words[0];\n    var max_count = $words[0].length;\n    for (var i = 1; i < $words.length; i++) {\n        if ($words[i].length > max_count) {\n            max = $words[i];\n            max_count = $words[i].length;\n        }\n    }\n    return max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nParse error: syntax error, unexpected token \"var\" in /tmp/tmp86llaffn.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $count = 0;\n    $first = true;\n    for($i = 0; $i < $words.length; $i++) {\n        if($count == 0) {\n            $max = $words[$i];\n            $count = 1;\n        } else if($count > 0 && $words[$i] == $max) {\n            $count++;\n        } else if($count > 0 && $words[$i] != $max) {\n            $count = 1;\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp7wf69sga.php:16\nStack trace:\n#0 /tmp/tmp7wf69sga.php(31): find_max(Array)\n#1 /tmp/tmp7wf69sga.php(35): candidate(Array)\n#2 /tmp/tmp7wf69sga.php(47): test()\n#3 {main}\n  thrown in /tmp/tmp7wf69sga.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_str = \"\";\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != ' ') {\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_str = $words[$i];\n        }\n    }\n    return $max_str;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpj9c_rmbw.php:16\nStack trace:\n#0 /tmp/tmpj9c_rmbw.php(32): find_max(Array)\n#1 /tmp/tmpj9c_rmbw.php(36): candidate(Array)\n#2 /tmp/tmpj9c_rmbw.php(48): test()\n#3 {main}\n  thrown in /tmp/tmpj9c_rmbw.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $count = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_index_count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n            $max_index_count = $count;\n        }\n    }\n    return $words[$max_index];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpkfyv46r5.php:18\nStack trace:\n#0 /tmp/tmpkfyv46r5.php(30): find_max(Array)\n#1 /tmp/tmpkfyv46r5.php(34): candidate(Array)\n#2 /tmp/tmpkfyv46r5.php(46): test()\n#3 {main}\n  thrown in /tmp/tmpkfyv46r5.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n        }\n    }\n    return $words[$max_index];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpt_gkre7y.php:16\nStack trace:\n#0 /tmp/tmpt_gkre7y.php(27): find_max(Array)\n#1 /tmp/tmpt_gkre7y.php(31): candidate(Array)\n#2 /tmp/tmpt_gkre7y.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpt_gkre7y.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] == \" \") {\n                $count++;\n            }\n        }\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpjlpv5v7x.php:16\nStack trace:\n#0 /tmp/tmpjlpv5v7x.php(32): find_max(Array)\n#1 /tmp/tmpjlpv5v7x.php(36): candidate(Array)\n#2 /tmp/tmpjlpv5v7x.php(48): test()\n#3 {main}\n  thrown in /tmp/tmpjlpv5v7x.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_count_index = 0;\n    $max_count_count = 0;\n    $max_count_count_index = 0;\n    $max_count_count_count = 0;\n    $max_count_count_count_index = 0;\n    $max_count_count_count_count = 0;\n    $max_count_count_count_count_index = 0;\n    $max_count_count_count_count_count = 0;\n    $max_count_count_count_count_count_index = 0;\n    $max_count_count_count_count_count_count = 0;\n    $max_count_count_count_count_count_count_index = 0;\n    $max_count_count_count_count_count_count_count = 0;\n    $max_count_count_count_count_count_count_count_index = 0;\n    $max_count_count_count_count_count_count_count_count = 0;\n    $max_count_count_count_count_count_count_count_count_index = 0;\n    $max_count_count_count_count_count_count_count_count_count = 0;\n    $max_count_count_count_count_count_count_count_count_count_index = 0;\n    $max_count_count_count_count_count_count_count_count_count_count = 0;\n    $max_count_count_count_count_count_count_count_count_count_count_index = 0;\n    $max_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $max_count_count_count_count_count_count_count_count_count_count_count_index = 0;\n    $max_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $max_count_count_count_count_count_count_count_count_count_count_count\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpjz_2oh9z.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $max_count = 0;\n    $count = 0;\n    $i = 0;\n    while ($i < count($words)) {\n        $word = $words[$i];\n        $count = count_chars($word);\n        if ($count > $max_count) {\n            $max_word = $word;\n            $max_count = $count;\n        }\n        $i++;\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2zw1gi8a.php:35\nStack trace:\n#0 /tmp/tmp2zw1gi8a.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp2zw1gi8a.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $count = 0;\n    $index = 0;\n    $word = \"\";\n    for ($index = 0; $index < $words.length; $index++) {\n        $word = $words[$index];\n        $count = 0;\n        for ($index = 0; $index < $word.length; $index++) {\n            if ($word.substr($index, 1) != $word.substr($index, 1).toLowerCase()) {\n                $count++;\n            }\n        }\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $index;\n        }\n    }\n    return $max_index == 0 ? $max : $words[$max_index];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpasb_p4wy.php:19\nStack trace:\n#0 /tmp/tmpasb_p4wy.php(36): find_max(Array)\n#1 /tmp/tmpasb_p4wy.php(40): candidate(Array)\n#2 /tmp/tmpasb_p4wy.php(52): test()\n#3 {main}\n  thrown in /tmp/tmpasb_p4wy.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_count_index = 0;\n    $max_count_count = 0;\n    $max_count_count_index = 0;\n    $max_count_count_count = 0;\n    $max_count_count_count_index = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        $count_index = 0;\n        $count_count = 0;\n        $count_count_index = 0;\n        $count_count_count = 0;\n        $count_count_count_index = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] == ' ') {\n                continue;\n            }\n            $count++;\n            $count_index++;\n            $count_count++;\n            $count_count_index++;\n            $count_count_count++;\n            $count_count_count_index++;\n        }\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_count_index = $i;\n            $max_count_count = $count_count;\n            $max_count_count_index = $count_count_index;\n            $max_count_count_count = $count_count_count;\n            $max_count_count_count_index = $count_count_count_index;\n        }\n    }\n    if ($max_count == $max_count_count) {\n        return $words[$max_count_index];\n    }\n    if ($max_count == $max_count_count_count) {\n        return $words[$max_count_count_index];\n    }\n    if ($max_count == $max_count_count_count_index) {\n        return $words[$max_count_count_count_index];\n    }\n    if ($max_count == $max_count_count_count_count) {\n        return $words[$\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmp17k1a7tj.php on line 59\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max) {\n            $max = $count;\n            $max_index = $i;\n        }\n    }\n    return $words[$max_index];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpu6cl51ij.php:16\nStack trace:\n#0 /tmp/tmpu6cl51ij.php(27): find_max(Array)\n#1 /tmp/tmpu6cl51ij.php(31): candidate(Array)\n#2 /tmp/tmpu6cl51ij.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpu6cl51ij.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = '';\n    $max_count = 0;\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != ' ') {\n                $count++;\n            }\n        }\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp9xa3dacx.php:16\nStack trace:\n#0 /tmp/tmp9xa3dacx.php(32): find_max(Array)\n#1 /tmp/tmp9xa3dacx.php(36): candidate(Array)\n#2 /tmp/tmp9xa3dacx.php(48): test()\n#3 {main}\n  thrown in /tmp/tmp9xa3dacx.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    $count_word = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        $count_word = \"\";\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($count_word.indexOf($words[$i][$j]) == -1) {\n                $count_word += $words[$i][$j];\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp2d8r77o_.php:17\nStack trace:\n#0 /tmp/tmp2d8r77o_.php(35): find_max(Array)\n#1 /tmp/tmp2d8r77o_.php(39): candidate(Array)\n#2 /tmp/tmp2d8r77o_.php(51): test()\n#3 {main}\n  thrown in /tmp/tmp2d8r77o_.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_str = \"\";\n    $count = 0;\n    $count_str = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        $count_str = \"\";\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($count_str.indexOf($words[$i][$j]) == -1) {\n                $count_str += $words[$i][$j];\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_str = $words[$i];\n        }\n    }\n    return $max_str;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpei_0d87o.php:17\nStack trace:\n#0 /tmp/tmpei_0d87o.php(35): find_max(Array)\n#1 /tmp/tmpei_0d87o.php(39): candidate(Array)\n#2 /tmp/tmpei_0d87o.php(51): test()\n#3 {main}\n  thrown in /tmp/tmpei_0d87o.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $words.sort();\n    for($i=0; $i<$words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if($count > $max_count) {\n            $max_count = $count;\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught ArgumentCountError: sort() expects at least 1 argument, 0 given in /tmp/tmpqjgipmu1.php:15\nStack trace:\n#0 /tmp/tmpqjgipmu1.php(15): sort()\n#1 /tmp/tmpqjgipmu1.php(27): find_max(Array)\n#2 /tmp/tmpqjgipmu1.php(31): candidate(Array)\n#3 /tmp/tmpqjgipmu1.php(43): test()\n#4 {main}\n  thrown in /tmp/tmpqjgipmu1.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpdco_nfio.php:15\nStack trace:\n#0 /tmp/tmpdco_nfio.php(26): find_max(Array)\n#1 /tmp/tmpdco_nfio.php(30): candidate(Array)\n#2 /tmp/tmpdco_nfio.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpdco_nfio.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpdco_nfio.php:15\nStack trace:\n#0 /tmp/tmpdco_nfio.php(26): find_max(Array)\n#1 /tmp/tmpdco_nfio.php(30): candidate(Array)\n#2 /tmp/tmpdco_nfio.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpdco_nfio.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $count = 0;\n    $i = 0;\n    while($i < $words.length) {\n        $count = 0;\n        while($i < $words.length && $count < $words[$i].length()) {\n            $count += $words[$i].charCodeAt($count);\n            $i++;\n        }\n        if($count > $max.length) {\n            $max = $words[$i-1];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpo0zmk6st.php:16\nStack trace:\n#0 /tmp/tmpo0zmk6st.php(30): find_max(Array)\n#1 /tmp/tmpo0zmk6st.php(34): candidate(Array)\n#2 /tmp/tmpo0zmk6st.php(46): test()\n#3 {main}\n  thrown in /tmp/tmpo0zmk6st.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_str = \"\";\n    $count = 0;\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_str = $words[$i];\n        }\n    }\n    return $max_str;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpxxdhw45z.php:16\nStack trace:\n#0 /tmp/tmpxxdhw45z.php(31): find_max(Array)\n#1 /tmp/tmpxxdhw45z.php(35): candidate(Array)\n#2 /tmp/tmpxxdhw45z.php(47): test()\n#3 {main}\n  thrown in /tmp/tmpxxdhw45z.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    $count_word = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        $count_word = \"\";\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($count_word.indexOf($words[$i][$j]) == -1) {\n                $count_word += $words[$i][$j];\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp2d8r77o_.php:17\nStack trace:\n#0 /tmp/tmp2d8r77o_.php(35): find_max(Array)\n#1 /tmp/tmp2d8r77o_.php(39): candidate(Array)\n#2 /tmp/tmp2d8r77o_.php(51): test()\n#3 {main}\n  thrown in /tmp/tmp2d8r77o_.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_str = \"\";\n    $count = 0;\n    $count_str = \"\";\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n    $m = 0;\n    $n = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x = 0;\n    $y = 0;\n    $z = 0;\n    $a = 0;\n    $b = 0;\n    $c = 0;\n    $d = 0;\n    $e = 0;\n    $f = 0;\n    $g = 0;\n    $h = 0;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n    $m = 0;\n    $n = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x = 0;\n    $y = 0;\n    $z = 0;\n    $a = 0;\n    $b = 0;\n    $c = 0;\n    $d = 0;\n    $e = 0;\n    $f = 0;\n    $g = 0;\n    $h = 0;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n    $m = 0;\n    $n = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x = 0;\n    $y =\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp2yx1xcue.php on line 86\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if ($count > $max.length) {\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp6_rx79nh.php:15\nStack trace:\n#0 /tmp/tmp6_rx79nh.php(30): find_max(Array)\n#1 /tmp/tmp6_rx79nh.php(34): candidate(Array)\n#2 /tmp/tmp6_rx79nh.php(46): test()\n#3 {main}\n  thrown in /tmp/tmp6_rx79nh.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    var max = \"\";\n    var max_count = 0;\n    for (var i = 0; i < $words.length; i++) {\n        var count = 0;\n        for (var j = 0; j < $words[i].length; j++) {\n            if ($words[i][j] != \" \") {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max = $words[i];\n            max_count = count;\n        }\n    }\n    return max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nParse error: syntax error, unexpected token \"var\" in /tmp/tmpjpvhe51k.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_string = \"\";\n    $count = 0;\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] == ' ') {\n                $count++;\n            }\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_string = $words[$i];\n        }\n    }\n    return $max_string;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpvr_dvqsa.php:16\nStack trace:\n#0 /tmp/tmpvr_dvqsa.php(32): find_max(Array)\n#1 /tmp/tmpvr_dvqsa.php(36): candidate(Array)\n#2 /tmp/tmpvr_dvqsa.php(48): test()\n#3 {main}\n  thrown in /tmp/tmpvr_dvqsa.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] == ' ') {\n                $count++;\n            }\n        }\n        if ($count > $max.length) {\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp_fy55byj.php:15\nStack trace:\n#0 /tmp/tmp_fy55byj.php(30): find_max(Array)\n#1 /tmp/tmp_fy55byj.php(34): candidate(Array)\n#2 /tmp/tmp_fy55byj.php(46): test()\n#3 {main}\n  thrown in /tmp/tmp_fy55byj.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpdco_nfio.php:15\nStack trace:\n#0 /tmp/tmpdco_nfio.php(26): find_max(Array)\n#1 /tmp/tmpdco_nfio.php(30): candidate(Array)\n#2 /tmp/tmpdco_nfio.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpdco_nfio.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_string = \"\";\n    $max_count = 0;\n    $count = 0;\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if($count > $max_count) {\n            $max_count = $count;\n            $max_string = $words[$i];\n        }\n    }\n    return $max_string;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmprw9te9f3.php:17\nStack trace:\n#0 /tmp/tmprw9te9f3.php(33): find_max(Array)\n#1 /tmp/tmprw9te9f3.php(37): candidate(Array)\n#2 /tmp/tmprw9te9f3.php(49): test()\n#3 {main}\n  thrown in /tmp/tmprw9te9f3.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n        }\n    }\n    return $words[$max_index];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpzf5k8y23.php:16\nStack trace:\n#0 /tmp/tmpzf5k8y23.php(27): find_max(Array)\n#1 /tmp/tmpzf5k8y23.php(31): candidate(Array)\n#2 /tmp/tmpzf5k8y23.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpzf5k8y23.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_str = \"\";\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_str = $words[$i];\n        }\n    }\n    return $max_str;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp2bv58kx4.php:16\nStack trace:\n#0 /tmp/tmp2bv58kx4.php(32): find_max(Array)\n#1 /tmp/tmp2bv58kx4.php(36): candidate(Array)\n#2 /tmp/tmp2bv58kx4.php(48): test()\n#3 {main}\n  thrown in /tmp/tmp2bv58kx4.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = '';\n    $max_count = 0;\n    $words.sort();\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] != ' ') {\n                $count++;\n            }\n        }\n        if($count > $max_count) {\n            $max_count = $count;\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught ArgumentCountError: sort() expects at least 1 argument, 0 given in /tmp/tmpyo6uft3_.php:15\nStack trace:\n#0 /tmp/tmpyo6uft3_.php(15): sort()\n#1 /tmp/tmpyo6uft3_.php(32): find_max(Array)\n#2 /tmp/tmpyo6uft3_.php(36): candidate(Array)\n#3 /tmp/tmpyo6uft3_.php(48): test()\n#4 {main}\n  thrown in /tmp/tmpyo6uft3_.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    $count_word = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        $count_word = \"\";\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($count_word.indexOf($words[$i][$j]) == -1) {\n                $count_word += $words[$i][$j];\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp2d8r77o_.php:17\nStack trace:\n#0 /tmp/tmp2d8r77o_.php(35): find_max(Array)\n#1 /tmp/tmp2d8r77o_.php(39): candidate(Array)\n#2 /tmp/tmp2d8r77o_.php(51): test()\n#3 {main}\n  thrown in /tmp/tmp2d8r77o_.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    $count_word = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        $count_word = \"\";\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($count_word.indexOf($words[$i][$j]) == -1) {\n                $count_word += $words[$i][$j];\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp2d8r77o_.php:17\nStack trace:\n#0 /tmp/tmp2d8r77o_.php(35): find_max(Array)\n#1 /tmp/tmp2d8r77o_.php(39): candidate(Array)\n#2 /tmp/tmp2d8r77o_.php(51): test()\n#3 {main}\n  thrown in /tmp/tmp2d8r77o_.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $count = 0;\n    $i = 0;\n    while ($i < count($words)) {\n        $word = $words[$i];\n        $count = count_unique($word);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max = $word;\n        }\n        $i++;\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function count_unique() in /tmp/tmphiamygbi.php:18\nStack trace:\n#0 /tmp/tmphiamygbi.php(29): find_max(Array)\n#1 /tmp/tmphiamygbi.php(33): candidate(Array)\n#2 /tmp/tmphiamygbi.php(45): test()\n#3 {main}\n  thrown in /tmp/tmphiamygbi.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = '';\n    $count = 0;\n    foreach($words as $word) {\n        $count = count_unique($word);\n        if($count > $max) {\n            $max = $word;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function count_unique() in /tmp/tmp1h5aiuc0.php:16\nStack trace:\n#0 /tmp/tmp1h5aiuc0.php(25): find_max(Array)\n#1 /tmp/tmp1h5aiuc0.php(29): candidate(Array)\n#2 /tmp/tmp1h5aiuc0.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp1h5aiuc0.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_string = \"\";\n    $max_count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_string = $words[$i];\n        }\n    }\n    return $max_string;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp_rdpq3u_.php:16\nStack trace:\n#0 /tmp/tmp_rdpq3u_.php(27): find_max(Array)\n#1 /tmp/tmp_rdpq3u_.php(31): candidate(Array)\n#2 /tmp/tmp_rdpq3u_.php(43): test()\n#3 {main}\n  thrown in /tmp/tmp_rdpq3u_.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpxzmkt0nr.php:16\nStack trace:\n#0 /tmp/tmpxzmkt0nr.php(32): find_max(Array)\n#1 /tmp/tmpxzmkt0nr.php(36): candidate(Array)\n#2 /tmp/tmpxzmkt0nr.php(48): test()\n#3 {main}\n  thrown in /tmp/tmpxzmkt0nr.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $max_index = 0;\n    $count = 0;\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n        }\n    }\n    $max = $words[$max_index];\n    return $max;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp_srw41z1.php:17\nStack trace:\n#0 /tmp/tmp_srw41z1.php(33): find_max(Array)\n#1 /tmp/tmp_srw41z1.php(37): candidate(Array)\n#2 /tmp/tmp_srw41z1.php(49): test()\n#3 {main}\n  thrown in /tmp/tmp_srw41z1.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $words.sort();\n    for ($i = 0; $i < $words.length; $i++) {\n        if ($words[$i] == \"\") {\n            continue;\n        }\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught ArgumentCountError: sort() expects at least 1 argument, 0 given in /tmp/tmpcxvcuvn5.php:15\nStack trace:\n#0 /tmp/tmpcxvcuvn5.php(15): sort()\n#1 /tmp/tmpcxvcuvn5.php(30): find_max(Array)\n#2 /tmp/tmpcxvcuvn5.php(34): candidate(Array)\n#3 /tmp/tmpcxvcuvn5.php(46): test()\n#4 {main}\n  thrown in /tmp/tmpcxvcuvn5.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    $count_word = \"\";\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        $count_word = \"\";\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($count_word.indexOf($words[$i][$j]) == -1) {\n                $count_word += $words[$i][$j];\n                $count++;\n            }\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpcyoy21zk.php:17\nStack trace:\n#0 /tmp/tmpcyoy21zk.php(35): find_max(Array)\n#1 /tmp/tmpcyoy21zk.php(39): candidate(Array)\n#2 /tmp/tmpcyoy21zk.php(51): test()\n#3 {main}\n  thrown in /tmp/tmpcyoy21zk.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp400ewypq.php:16\nStack trace:\n#0 /tmp/tmp400ewypq.php(32): find_max(Array)\n#1 /tmp/tmp400ewypq.php(36): candidate(Array)\n#2 /tmp/tmp400ewypq.php(48): test()\n#3 {main}\n  thrown in /tmp/tmp400ewypq.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $count = 0;\n    $count_index = 0;\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] == ' ') {\n                $count++;\n            }\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_index = $i;\n        }\n        if($count == $max) {\n            if($words[$i] < $words[$max_index]) {\n                $max_index = $i;\n            }\n        }\n    }\n    return $words[$max_index];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpgowc329t.php:17\nStack trace:\n#0 /tmp/tmpgowc329t.php(38): find_max(Array)\n#1 /tmp/tmpgowc329t.php(42): candidate(Array)\n#2 /tmp/tmpgowc329t.php(54): test()\n#3 {main}\n  thrown in /tmp/tmpgowc329t.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    $count_word = \"\";\n    for($i=0; $i<$words.length; $i++) {\n        $count = 0;\n        $count_word = \"\";\n        for($j=0; $j<$words[$i].length; $j++) {\n            if($count_word.indexOf($words[$i][$j]) == -1) {\n                $count_word += $words[$i][$j];\n                $count++;\n            }\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmptksnxckb.php:17\nStack trace:\n#0 /tmp/tmptksnxckb.php(35): find_max(Array)\n#1 /tmp/tmptksnxckb.php(39): candidate(Array)\n#2 /tmp/tmptksnxckb.php(51): test()\n#3 {main}\n  thrown in /tmp/tmptksnxckb.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $count = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_index_count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index_count = $i;\n        }\n        if ($count == $max_count) {\n            if ($words[$i] > $max) {\n                $max = $words[$i];\n                $max_index = $i;\n            }\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp2ctw1poh.php:18\nStack trace:\n#0 /tmp/tmp2ctw1poh.php(35): find_max(Array)\n#1 /tmp/tmp2ctw1poh.php(39): candidate(Array)\n#2 /tmp/tmp2ctw1poh.php(51): test()\n#3 {main}\n  thrown in /tmp/tmp2ctw1poh.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    $count_word = \"\";\n    $i = 0;\n    while($i < $words.length) {\n        $count = 0;\n        $count_word = \"\";\n        $j = 0;\n        while($j < $words[$i].length) {\n            if($words[$i][$j] != \" \") {\n                $count++;\n                $count_word += $words[$i][$j];\n            }\n            $j++;\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n        $i++;\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp1lfr8q88.php:18\nStack trace:\n#0 /tmp/tmp1lfr8q88.php(39): find_max(Array)\n#1 /tmp/tmp1lfr8q88.php(43): candidate(Array)\n#2 /tmp/tmp1lfr8q88.php(55): test()\n#3 {main}\n  thrown in /tmp/tmp1lfr8q88.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $max_index = 0;\n    $words.sort();\n    for ($i = 0; $i < $words.length; $i++) {\n        if ($words[$i].length > $max_count) {\n            $max_count = $words[$i].length;\n            $max_index = $i;\n        }\n    }\n    return $words[$max_index];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught ArgumentCountError: sort() expects at least 1 argument, 0 given in /tmp/tmpkitstmh5.php:16\nStack trace:\n#0 /tmp/tmpkitstmh5.php(16): sort()\n#1 /tmp/tmpkitstmh5.php(27): find_max(Array)\n#2 /tmp/tmpkitstmh5.php(31): candidate(Array)\n#3 /tmp/tmpkitstmh5.php(43): test()\n#4 {main}\n  thrown in /tmp/tmpkitstmh5.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $max_count = 0;\n    $words.sort();\n    for($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if($count > $max_count) {\n            $max_count = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught ArgumentCountError: sort() expects at least 1 argument, 0 given in /tmp/tmpx1w1li5n.php:16\nStack trace:\n#0 /tmp/tmpx1w1li5n.php(16): sort()\n#1 /tmp/tmpx1w1li5n.php(27): find_max(Array)\n#2 /tmp/tmpx1w1li5n.php(31): candidate(Array)\n#3 /tmp/tmpx1w1li5n.php(43): test()\n#4 {main}\n  thrown in /tmp/tmpx1w1li5n.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_str = \"\";\n    $count = 0;\n    $i = 0;\n    while ($i < $words.length) {\n        $count = 0;\n        $str = $words[$i];\n        for ($j = 0; $j < $str.length; $j++) {\n            $count += $str.charCodeAt($j);\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_str = $str;\n        }\n        $i++;\n    }\n    return $max_str;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp6nvdj2fl.php:17\nStack trace:\n#0 /tmp/tmp6nvdj2fl.php(33): find_max(Array)\n#1 /tmp/tmp6nvdj2fl.php(37): candidate(Array)\n#2 /tmp/tmp6nvdj2fl.php(49): test()\n#3 {main}\n  thrown in /tmp/tmp6nvdj2fl.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_word = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp79r6lwat.php:17\nStack trace:\n#0 /tmp/tmp79r6lwat.php(29): find_max(Array)\n#1 /tmp/tmp79r6lwat.php(33): candidate(Array)\n#2 /tmp/tmp79r6lwat.php(45): test()\n#3 {main}\n  thrown in /tmp/tmp79r6lwat.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    $count_word = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        $count_word = \"\";\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($count_word.indexOf($words[$i][$j]) == -1) {\n                $count_word += $words[$i][$j];\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp2d8r77o_.php:17\nStack trace:\n#0 /tmp/tmp2d8r77o_.php(35): find_max(Array)\n#1 /tmp/tmp2d8r77o_.php(39): candidate(Array)\n#2 /tmp/tmp2d8r77o_.php(51): test()\n#3 {main}\n  thrown in /tmp/tmp2d8r77o_.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n        }\n    }\n    $max = $words[$max_index];\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpst5yc4pw.php:16\nStack trace:\n#0 /tmp/tmpst5yc4pw.php(33): find_max(Array)\n#1 /tmp/tmpst5yc4pw.php(37): candidate(Array)\n#2 /tmp/tmpst5yc4pw.php(49): test()\n#3 {main}\n  thrown in /tmp/tmpst5yc4pw.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_str = \"\";\n    $count = 0;\n    $count_str = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        $count_str = \"\";\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($count_str.indexOf($words[$i][$j]) == -1) {\n                $count_str += $words[$i][$j];\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_str = $words[$i];\n        }\n    }\n    return $max_str;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpei_0d87o.php:17\nStack trace:\n#0 /tmp/tmpei_0d87o.php(35): find_max(Array)\n#1 /tmp/tmpei_0d87o.php(39): candidate(Array)\n#2 /tmp/tmpei_0d87o.php(51): test()\n#3 {main}\n  thrown in /tmp/tmpei_0d87o.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $words.sort();\n    for($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught ArgumentCountError: sort() expects at least 1 argument, 0 given in /tmp/tmpw8me30fe.php:15\nStack trace:\n#0 /tmp/tmpw8me30fe.php(15): sort()\n#1 /tmp/tmpw8me30fe.php(27): find_max(Array)\n#2 /tmp/tmpw8me30fe.php(31): candidate(Array)\n#3 /tmp/tmpw8me30fe.php(43): test()\n#4 {main}\n  thrown in /tmp/tmpw8me30fe.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $words.sort();\n    for($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught ArgumentCountError: sort() expects at least 1 argument, 0 given in /tmp/tmpw8me30fe.php:15\nStack trace:\n#0 /tmp/tmpw8me30fe.php(15): sort()\n#1 /tmp/tmpw8me30fe.php(27): find_max(Array)\n#2 /tmp/tmpw8me30fe.php(31): candidate(Array)\n#3 /tmp/tmpw8me30fe.php(43): test()\n#4 {main}\n  thrown in /tmp/tmpw8me30fe.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n        }\n    }\n    return $words[$max_index];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpt_gkre7y.php:16\nStack trace:\n#0 /tmp/tmpt_gkre7y.php(27): find_max(Array)\n#1 /tmp/tmpt_gkre7y.php(31): candidate(Array)\n#2 /tmp/tmpt_gkre7y.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpt_gkre7y.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_str = \"\";\n    $count = 0;\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] == ' ') {\n                continue;\n            }\n            $count++;\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_str = $words[$i];\n        }\n    }\n    return $max_str;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpih187zid.php:16\nStack trace:\n#0 /tmp/tmpih187zid.php(33): find_max(Array)\n#1 /tmp/tmpih187zid.php(37): candidate(Array)\n#2 /tmp/tmpih187zid.php(49): test()\n#3 {main}\n  thrown in /tmp/tmpih187zid.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_word = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $word = $words[$i];\n        $count = count_unique($word);\n        if ($count > $max) {\n            $max = $count;\n            $max_index = $i;\n            $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpleu0g8ie.php:16\nStack trace:\n#0 /tmp/tmpleu0g8ie.php(29): find_max(Array)\n#1 /tmp/tmpleu0g8ie.php(33): candidate(Array)\n#2 /tmp/tmpleu0g8ie.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpleu0g8ie.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $max_count = 0;\n    for($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if($count > $max_count) {\n            $max_count = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp1x0bb9_f.php:16\nStack trace:\n#0 /tmp/tmp1x0bb9_f.php(27): find_max(Array)\n#1 /tmp/tmp1x0bb9_f.php(31): candidate(Array)\n#2 /tmp/tmp1x0bb9_f.php(43): test()\n#3 {main}\n  thrown in /tmp/tmp1x0bb9_f.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $count = 0;\n    $result = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_index = $i;\n        }\n    }\n    $result = $words[$max_index];\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpaop15kad.php:17\nStack trace:\n#0 /tmp/tmpaop15kad.php(34): find_max(Array)\n#1 /tmp/tmpaop15kad.php(38): candidate(Array)\n#2 /tmp/tmpaop15kad.php(50): test()\n#3 {main}\n  thrown in /tmp/tmpaop15kad.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_str = \"\";\n    $count = 0;\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_str = $words[$i];\n        }\n    }\n    return $max_str;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp1m250tzm.php:16\nStack trace:\n#0 /tmp/tmp1m250tzm.php(32): find_max(Array)\n#1 /tmp/tmp1m250tzm.php(36): candidate(Array)\n#2 /tmp/tmp1m250tzm.php(48): test()\n#3 {main}\n  thrown in /tmp/tmp1m250tzm.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpxzmkt0nr.php:16\nStack trace:\n#0 /tmp/tmpxzmkt0nr.php(32): find_max(Array)\n#1 /tmp/tmpxzmkt0nr.php(36): candidate(Array)\n#2 /tmp/tmpxzmkt0nr.php(48): test()\n#3 {main}\n  thrown in /tmp/tmpxzmkt0nr.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_str = \"\";\n    $count = 0;\n    for($i=0; $i<$words.length; $i++) {\n        $count = 0;\n        for($j=0; $j<$words[$i].length; $j++) {\n            if($words[$i][$j] !== \" \") {\n                $count++;\n            }\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_str = $words[$i];\n        }\n    }\n    return $max_str;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmplntuy7e1.php:16\nStack trace:\n#0 /tmp/tmplntuy7e1.php(32): find_max(Array)\n#1 /tmp/tmplntuy7e1.php(36): candidate(Array)\n#2 /tmp/tmplntuy7e1.php(48): test()\n#3 {main}\n  thrown in /tmp/tmplntuy7e1.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_string = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max) {\n            $max = $count;\n            $max_string = $words[$i];\n        }\n    }\n    return $max_string;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp2n17nk5r.php:15\nStack trace:\n#0 /tmp/tmp2n17nk5r.php(26): find_max(Array)\n#1 /tmp/tmp2n17nk5r.php(30): candidate(Array)\n#2 /tmp/tmp2n17nk5r.php(42): test()\n#3 {main}\n  thrown in /tmp/tmp2n17nk5r.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpdco_nfio.php:15\nStack trace:\n#0 /tmp/tmpdco_nfio.php(26): find_max(Array)\n#1 /tmp/tmpdco_nfio.php(30): candidate(Array)\n#2 /tmp/tmpdco_nfio.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpdco_nfio.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $words.sort();\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught ArgumentCountError: sort() expects at least 1 argument, 0 given in /tmp/tmpnow_atz2.php:15\nStack trace:\n#0 /tmp/tmpnow_atz2.php(15): sort()\n#1 /tmp/tmpnow_atz2.php(27): find_max(Array)\n#2 /tmp/tmpnow_atz2.php(31): candidate(Array)\n#3 /tmp/tmpnow_atz2.php(43): test()\n#4 {main}\n  thrown in /tmp/tmpnow_atz2.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = '';\n    $count = 0;\n    $result = '';\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != ' ') {\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $result = $words[$i];\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp4rsuz7d2.php:16\nStack trace:\n#0 /tmp/tmp4rsuz7d2.php(32): find_max(Array)\n#1 /tmp/tmp4rsuz7d2.php(36): candidate(Array)\n#2 /tmp/tmp4rsuz7d2.php(48): test()\n#3 {main}\n  thrown in /tmp/tmp4rsuz7d2.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $count = 0;\n    $i = 0;\n    while($i < $words.length) {\n        $count = 0;\n        $j = 0;\n        while($j < $words[$i].length) {\n            if($words[$i][$j] != $words[$i][$j]) {\n                $count++;\n            }\n            $j++;\n        }\n        if($count > $max.length) {\n            $max = $words[$i];\n        }\n        $i++;\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpsrlq3bky.php:16\nStack trace:\n#0 /tmp/tmpsrlq3bky.php(34): find_max(Array)\n#1 /tmp/tmpsrlq3bky.php(38): candidate(Array)\n#2 /tmp/tmpsrlq3bky.php(50): test()\n#3 {main}\n  thrown in /tmp/tmpsrlq3bky.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $count = 0;\n    $max_count = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n        }\n    }\n    $max = $words[$max_index];\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmprvnmv67o.php:17\nStack trace:\n#0 /tmp/tmprvnmv67o.php(34): find_max(Array)\n#1 /tmp/tmprvnmv67o.php(38): candidate(Array)\n#2 /tmp/tmprvnmv67o.php(50): test()\n#3 {main}\n  thrown in /tmp/tmprvnmv67o.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n        }\n    }\n    return $words[$max_index];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpt_gkre7y.php:16\nStack trace:\n#0 /tmp/tmpt_gkre7y.php(27): find_max(Array)\n#1 /tmp/tmpt_gkre7y.php(31): candidate(Array)\n#2 /tmp/tmpt_gkre7y.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpt_gkre7y.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $words.sort();\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught ArgumentCountError: sort() expects at least 1 argument, 0 given in /tmp/tmpnow_atz2.php:15\nStack trace:\n#0 /tmp/tmpnow_atz2.php(15): sort()\n#1 /tmp/tmpnow_atz2.php(27): find_max(Array)\n#2 /tmp/tmpnow_atz2.php(31): candidate(Array)\n#3 /tmp/tmpnow_atz2.php(43): test()\n#4 {main}\n  thrown in /tmp/tmpnow_atz2.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $count = 0;\n    $count_index = 0;\n    $result = \"\";\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        $count_index = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($count_index == 0) {\n                $count_index = $j;\n            }\n            if($words[$i][$j] == $words[$i][$count_index]) {\n                $count++;\n            }\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_index = $count_index;\n            $result = $words[$i];\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp8tn0jmpp.php:18\nStack trace:\n#0 /tmp/tmp8tn0jmpp.php(38): find_max(Array)\n#1 /tmp/tmp8tn0jmpp.php(42): candidate(Array)\n#2 /tmp/tmp8tn0jmpp.php(54): test()\n#3 {main}\n  thrown in /tmp/tmp8tn0jmpp.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = '';\n    $max_count = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        $word = $words[$i];\n        for ($j = 0; $j < $word.length; $j++) {\n            if ($word.substr($j, 1) in $max) {\n                $count++;\n            }\n        }\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n        }\n    }\n    return $words[$max_index];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nParse error: syntax error, unexpected identifier \"in\" in /tmp/tmpm45c49r6.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n        }\n    }\n    return $words[$max_index];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpt_gkre7y.php:16\nStack trace:\n#0 /tmp/tmpt_gkre7y.php(27): find_max(Array)\n#1 /tmp/tmpt_gkre7y.php(31): candidate(Array)\n#2 /tmp/tmpt_gkre7y.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpt_gkre7y.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $count = 0;\n    $index = 0;\n    $word = \"\";\n    for ($index = 0; $index < $words.length; $index++) {\n        $word = $words[$index];\n        $count = count_unique($word);\n        if ($count > $max) {\n            $max = $count;\n            $max_index = $index;\n        }\n    }\n    return $words[$max_index];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmph9p_x0tg.php:18\nStack trace:\n#0 /tmp/tmph9p_x0tg.php(30): find_max(Array)\n#1 /tmp/tmph9p_x0tg.php(34): candidate(Array)\n#2 /tmp/tmph9p_x0tg.php(46): test()\n#3 {main}\n  thrown in /tmp/tmph9p_x0tg.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n        }\n    }\n    return $words[$max_index];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpt_gkre7y.php:16\nStack trace:\n#0 /tmp/tmpt_gkre7y.php(27): find_max(Array)\n#1 /tmp/tmpt_gkre7y.php(31): candidate(Array)\n#2 /tmp/tmpt_gkre7y.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpt_gkre7y.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if ($count > $max.length) {\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp6_rx79nh.php:15\nStack trace:\n#0 /tmp/tmp6_rx79nh.php(30): find_max(Array)\n#1 /tmp/tmp6_rx79nh.php(34): candidate(Array)\n#2 /tmp/tmp6_rx79nh.php(46): test()\n#3 {main}\n  thrown in /tmp/tmp6_rx79nh.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpxzmkt0nr.php:16\nStack trace:\n#0 /tmp/tmpxzmkt0nr.php(32): find_max(Array)\n#1 /tmp/tmpxzmkt0nr.php(36): candidate(Array)\n#2 /tmp/tmpxzmkt0nr.php(48): test()\n#3 {main}\n  thrown in /tmp/tmpxzmkt0nr.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $count = 0;\n    $i = 0;\n    while ($i < count($words)) {\n        $word = $words[$i];\n        $count = count($word);\n        if ($count > $max) {\n            $max = $count;\n        }\n        $i++;\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be of type Countable|array, string given in /tmp/tmp6x7l7303.php:18\nStack trace:\n#0 /tmp/tmp6x7l7303.php(28): find_max(Array)\n#1 /tmp/tmp6x7l7303.php(32): candidate(Array)\n#2 /tmp/tmp6x7l7303.php(44): test()\n#3 {main}\n  thrown in /tmp/tmp6x7l7303.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    var max = $words[0];\n    var max_count = 0;\n    for (var i = 0; i < $words.length; i++) {\n        if ($words[i].length > max_count) {\n            max = $words[i];\n            max_count = $words[i].length;\n        }\n    }\n    return max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nParse error: syntax error, unexpected token \"var\" in /tmp/tmpiz4ubvdb.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_word = \"\";\n    for ( $i = 0; $i < $words.length; $i++ ) {\n        $count = 0;\n        for ( $j = 0; $j < $words[$i].length; $j++ ) {\n            if ( $words[$i][$j] == ' ' ) {\n                continue;\n            }\n            $count++;\n        }\n        if ( $count > $max_count ) {\n            $max_count = $count;\n            $max_index = $i;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpspnw5n5a.php:17\nStack trace:\n#0 /tmp/tmpspnw5n5a.php(35): find_max(Array)\n#1 /tmp/tmpspnw5n5a.php(39): candidate(Array)\n#2 /tmp/tmpspnw5n5a.php(51): test()\n#3 {main}\n  thrown in /tmp/tmpspnw5n5a.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if ($count > $max.length) {\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp6_rx79nh.php:15\nStack trace:\n#0 /tmp/tmp6_rx79nh.php(30): find_max(Array)\n#1 /tmp/tmp6_rx79nh.php(34): candidate(Array)\n#2 /tmp/tmp6_rx79nh.php(46): test()\n#3 {main}\n  thrown in /tmp/tmp6_rx79nh.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if ($count > $max.length) {\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp6_rx79nh.php:15\nStack trace:\n#0 /tmp/tmp6_rx79nh.php(30): find_max(Array)\n#1 /tmp/tmp6_rx79nh.php(34): candidate(Array)\n#2 /tmp/tmp6_rx79nh.php(46): test()\n#3 {main}\n  thrown in /tmp/tmp6_rx79nh.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_string = \"\";\n    $max_count = 0;\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_string = $words[$i];\n        }\n    }\n    return $max_string;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmplev4gjuc.php:17\nStack trace:\n#0 /tmp/tmplev4gjuc.php(33): find_max(Array)\n#1 /tmp/tmplev4gjuc.php(37): candidate(Array)\n#2 /tmp/tmplev4gjuc.php(49): test()\n#3 {main}\n  thrown in /tmp/tmplev4gjuc.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $count = 0;\n    $count_index = 0;\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] == ' ') {\n                continue;\n            }\n            $count++;\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_index = $i;\n        }\n        if($count == $max) {\n            if($words[$i] < $words[$max_index]) {\n                $max_index = $i;\n            }\n        }\n    }\n    return $words[$max_index];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp4xj_99f0.php:17\nStack trace:\n#0 /tmp/tmp4xj_99f0.php(39): find_max(Array)\n#1 /tmp/tmp4xj_99f0.php(43): candidate(Array)\n#2 /tmp/tmp4xj_99f0.php(55): test()\n#3 {main}\n  thrown in /tmp/tmp4xj_99f0.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    $count_word = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        $count_word = \"\";\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($count_word.indexOf($words[$i][$j]) == -1) {\n                $count_word += $words[$i][$j];\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp2d8r77o_.php:17\nStack trace:\n#0 /tmp/tmp2d8r77o_.php(35): find_max(Array)\n#1 /tmp/tmp2d8r77o_.php(39): candidate(Array)\n#2 /tmp/tmp2d8r77o_.php(51): test()\n#3 {main}\n  thrown in /tmp/tmp2d8r77o_.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_str = \"\";\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] == ' ') {\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_str = $words[$i];\n        }\n    }\n    return $max_str;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpm7xn9t5e.php:16\nStack trace:\n#0 /tmp/tmpm7xn9t5e.php(32): find_max(Array)\n#1 /tmp/tmpm7xn9t5e.php(36): candidate(Array)\n#2 /tmp/tmpm7xn9t5e.php(48): test()\n#3 {main}\n  thrown in /tmp/tmpm7xn9t5e.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_word = \"\";\n    $count = 0;\n    for ( $i = 0; $i < $words.length; $i++ ) {\n        $count = 0;\n        for ( $j = 0; $j < $words[$i].length; $j++ ) {\n            if ( $words[$i][$j] != \" \" ) {\n                $count++;\n            }\n        }\n        if ( $count > $max ) {\n            $max = $count;\n            $max_index = $i;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmps_imerql.php:17\nStack trace:\n#0 /tmp/tmps_imerql.php(34): find_max(Array)\n#1 /tmp/tmps_imerql.php(38): candidate(Array)\n#2 /tmp/tmps_imerql.php(50): test()\n#3 {main}\n  thrown in /tmp/tmps_imerql.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $words.sort();\n    for($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if($count > $max_count) {\n            $max = $words[$i];\n            $max_count = $count;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught ArgumentCountError: sort() expects at least 1 argument, 0 given in /tmp/tmpz7ezkp7v.php:15\nStack trace:\n#0 /tmp/tmpz7ezkp7v.php(15): sort()\n#1 /tmp/tmpz7ezkp7v.php(27): find_max(Array)\n#2 /tmp/tmpz7ezkp7v.php(31): candidate(Array)\n#3 /tmp/tmpz7ezkp7v.php(43): test()\n#4 {main}\n  thrown in /tmp/tmpz7ezkp7v.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $count = 0;\n    $count_max = 0;\n    $count_max_index = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if ($count > $count_max) {\n            $count_max = $count;\n            $count_max_index = $i;\n        }\n    }\n    return $words[$count_max_index];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp1u8ixibp.php:17\nStack trace:\n#0 /tmp/tmp1u8ixibp.php(33): find_max(Array)\n#1 /tmp/tmp1u8ixibp.php(37): candidate(Array)\n#2 /tmp/tmp1u8ixibp.php(49): test()\n#3 {main}\n  thrown in /tmp/tmp1u8ixibp.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $count = 0;\n    $count_index = 0;\n    for ( $i = 0; $i < $words.length; $i++ ) {\n        $count = 0;\n        for ( $j = 0; $j < $words[$i].length; $j++ ) {\n            if ( $words[$i][$j] != ' ' ) {\n                $count++;\n            }\n        }\n        if ( $count > $max ) {\n            $max = $count;\n            $max_index = $i;\n        }\n        if ( $count == $max ) {\n            if ( $i < $max_index ) {\n                $max_index = $i;\n            }\n        }\n    }\n    return $words[$max_index];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpgid2j3pa.php:17\nStack trace:\n#0 /tmp/tmpgid2j3pa.php(38): find_max(Array)\n#1 /tmp/tmpgid2j3pa.php(42): candidate(Array)\n#2 /tmp/tmpgid2j3pa.php(54): test()\n#3 {main}\n  thrown in /tmp/tmpgid2j3pa.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = '';\n    $max_count = 0;\n    $count = 0;\n    foreach($words as $word) {\n        $count = count_unique($word);\n        if($count > $max_count) {\n            $max_count = $count;\n            $max = $word;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function count_unique() in /tmp/tmpqmbc2tae.php:17\nStack trace:\n#0 /tmp/tmpqmbc2tae.php(27): find_max(Array)\n#1 /tmp/tmpqmbc2tae.php(31): candidate(Array)\n#2 /tmp/tmpqmbc2tae.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpqmbc2tae.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $count = 0;\n    $result = \"\";\n    for ( $i = 0; $i < $words.length; $i++ ) {\n        $count = 0;\n        for ( $j = 0; $j < $words[$i].length; $j++ ) {\n            if ( $words[$i][$j] == ' ' ) {\n                continue;\n            }\n            $count++;\n        }\n        if ( $count > $max ) {\n            $max = $count;\n            $max_index = $i;\n        }\n    }\n    $result = $words[$max_index];\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpvf3x3r7t.php:17\nStack trace:\n#0 /tmp/tmpvf3x3r7t.php(35): find_max(Array)\n#1 /tmp/tmpvf3x3r7t.php(39): candidate(Array)\n#2 /tmp/tmpvf3x3r7t.php(51): test()\n#3 {main}\n  thrown in /tmp/tmpvf3x3r7t.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp400ewypq.php:16\nStack trace:\n#0 /tmp/tmp400ewypq.php(32): find_max(Array)\n#1 /tmp/tmp400ewypq.php(36): candidate(Array)\n#2 /tmp/tmp400ewypq.php(48): test()\n#3 {main}\n  thrown in /tmp/tmp400ewypq.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = '';\n    $count = 0;\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] !== ' ') {\n                $count++;\n            }\n        }\n        if($count > $max.length) {\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpg34l1l9a.php:15\nStack trace:\n#0 /tmp/tmpg34l1l9a.php(30): find_max(Array)\n#1 /tmp/tmpg34l1l9a.php(34): candidate(Array)\n#2 /tmp/tmpg34l1l9a.php(46): test()\n#3 {main}\n  thrown in /tmp/tmpg34l1l9a.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $words.sort(function($a, $b) {\n        return strcmp($a, $b);\n    });\n    for ( $i = 0; $i < $words.length; $i++ ) {\n        $count = 0;\n        for ( $j = 0; $j < $words[$i].length; $j++ ) {\n            if ( $words[$i][$j] != ' ' ) {\n                $count++;\n            }\n        }\n        if ( $count > $max_count ) {\n            $max_count = $count;\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: sort(): Argument #1 ($array) cannot be passed by reference in /tmp/tmp6_nvgxa6.php:17\nStack trace:\n#0 /tmp/tmp6_nvgxa6.php(34): find_max(Array)\n#1 /tmp/tmp6_nvgxa6.php(38): candidate(Array)\n#2 /tmp/tmp6_nvgxa6.php(50): test()\n#3 {main}\n  thrown in /tmp/tmp6_nvgxa6.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $count = 0;\n    $i = 0;\n    while($i < $words.length) {\n        $count = 0;\n        $j = 0;\n        while($j < $words[$i].length) {\n            if($words[$i][$j] != \" \") {\n                $count++;\n            }\n            $j++;\n        }\n        if($count > $max.length) {\n            $max = $words[$i];\n        }\n        $i++;\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpxqlplhwk.php:16\nStack trace:\n#0 /tmp/tmpxqlplhwk.php(34): find_max(Array)\n#1 /tmp/tmpxqlplhwk.php(38): candidate(Array)\n#2 /tmp/tmpxqlplhwk.php(50): test()\n#3 {main}\n  thrown in /tmp/tmpxqlplhwk.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $words.sort();\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught ArgumentCountError: sort() expects at least 1 argument, 0 given in /tmp/tmpred2trlh.php:15\nStack trace:\n#0 /tmp/tmpred2trlh.php(15): sort()\n#1 /tmp/tmpred2trlh.php(27): find_max(Array)\n#2 /tmp/tmpred2trlh.php(31): candidate(Array)\n#3 /tmp/tmpred2trlh.php(43): test()\n#4 {main}\n  thrown in /tmp/tmpred2trlh.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpdco_nfio.php:15\nStack trace:\n#0 /tmp/tmpdco_nfio.php(26): find_max(Array)\n#1 /tmp/tmpdco_nfio.php(30): candidate(Array)\n#2 /tmp/tmpdco_nfio.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpdco_nfio.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $count = 0;\n    $i = 0;\n    while($i < $words.length) {\n        $count = 0;\n        while($i < $words.length) {\n            if($words[$i] == $words[$i+1]) {\n                $count++;\n            }\n            $i++;\n        }\n        if($count > $max.length) {\n            $max = $words[$i];\n        }\n        $i++;\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpeob84t0k.php:16\nStack trace:\n#0 /tmp/tmpeob84t0k.php(33): find_max(Array)\n#1 /tmp/tmpeob84t0k.php(37): candidate(Array)\n#2 /tmp/tmpeob84t0k.php(49): test()\n#3 {main}\n  thrown in /tmp/tmpeob84t0k.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $words.sort();\n    for($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if($count > $max_count) {\n            $max_count = $count;\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught ArgumentCountError: sort() expects at least 1 argument, 0 given in /tmp/tmpwtiy_3q_.php:15\nStack trace:\n#0 /tmp/tmpwtiy_3q_.php(15): sort()\n#1 /tmp/tmpwtiy_3q_.php(27): find_max(Array)\n#2 /tmp/tmpwtiy_3q_.php(31): candidate(Array)\n#3 /tmp/tmpwtiy_3q_.php(43): test()\n#4 {main}\n  thrown in /tmp/tmpwtiy_3q_.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $max_count = 0;\n    $count = 0;\n    foreach($words as $word) {\n        $count = count_unique($word);\n        if($count > $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function count_unique() in /tmp/tmpkrubpw6e.php:18\nStack trace:\n#0 /tmp/tmpkrubpw6e.php(28): find_max(Array)\n#1 /tmp/tmpkrubpw6e.php(32): candidate(Array)\n#2 /tmp/tmpkrubpw6e.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpkrubpw6e.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_string = \"\";\n    $count = 0;\n    $count_string = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        $count_string = \"\";\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($count_string.indexOf($words[$i][$j]) == -1) {\n                $count_string += $words[$i][$j];\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_string = $words[$i];\n        }\n    }\n    return $max_string;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpvwkgwosa.php:17\nStack trace:\n#0 /tmp/tmpvwkgwosa.php(35): find_max(Array)\n#1 /tmp/tmpvwkgwosa.php(39): candidate(Array)\n#2 /tmp/tmpvwkgwosa.php(51): test()\n#3 {main}\n  thrown in /tmp/tmpvwkgwosa.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp_64_tiu1.php:15\nStack trace:\n#0 /tmp/tmp_64_tiu1.php(26): find_max(Array)\n#1 /tmp/tmp_64_tiu1.php(30): candidate(Array)\n#2 /tmp/tmp_64_tiu1.php(42): test()\n#3 {main}\n  thrown in /tmp/tmp_64_tiu1.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_str = \"\";\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != \"\") {\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_str = $words[$i];\n        }\n    }\n    return $max_str;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp7vtzdb0h.php:16\nStack trace:\n#0 /tmp/tmp7vtzdb0h.php(32): find_max(Array)\n#1 /tmp/tmp7vtzdb0h.php(36): candidate(Array)\n#2 /tmp/tmp7vtzdb0h.php(48): test()\n#3 {main}\n  thrown in /tmp/tmp7vtzdb0h.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    $i = 0;\n    while($i < $words.length) {\n        $count = 0;\n        $word = $words[$i];\n        for($j = 0; $j < $word.length; $j++) {\n            if($count == 0) {\n                $count = 1;\n                $max_word = $word;\n            } else if($word[$j] == $max_word[$j]) {\n                $count++;\n            } else {\n                $count = 1;\n                $max_word = $word;\n            }\n        }\n        $i++;\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpckfv7ack.php:17\nStack trace:\n#0 /tmp/tmpckfv7ack.php(37): find_max(Array)\n#1 /tmp/tmpckfv7ack.php(41): candidate(Array)\n#2 /tmp/tmpckfv7ack.php(53): test()\n#3 {main}\n  thrown in /tmp/tmpckfv7ack.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if ($count > $max.length) {\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp6_rx79nh.php:15\nStack trace:\n#0 /tmp/tmp6_rx79nh.php(30): find_max(Array)\n#1 /tmp/tmp6_rx79nh.php(34): candidate(Array)\n#2 /tmp/tmp6_rx79nh.php(46): test()\n#3 {main}\n  thrown in /tmp/tmp6_rx79nh.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $words.sort();\n    for($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught ArgumentCountError: sort() expects at least 1 argument, 0 given in /tmp/tmpw8me30fe.php:15\nStack trace:\n#0 /tmp/tmpw8me30fe.php(15): sort()\n#1 /tmp/tmpw8me30fe.php(27): find_max(Array)\n#2 /tmp/tmpw8me30fe.php(31): candidate(Array)\n#3 /tmp/tmpw8me30fe.php(43): test()\n#4 {main}\n  thrown in /tmp/tmpw8me30fe.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    $count_word = \"\";\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n    $m = 0;\n    $n = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x = 0;\n    $y = 0;\n    $z = 0;\n    $a = 0;\n    $b = 0;\n    $c = 0;\n    $d = 0;\n    $e = 0;\n    $f = 0;\n    $g = 0;\n    $h = 0;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n    $m = 0;\n    $n = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x = 0;\n    $y = 0;\n    $z = 0;\n    $a = 0;\n    $b = 0;\n    $c = 0;\n    $d = 0;\n    $e = 0;\n    $f = 0;\n    $g = 0;\n    $h = 0;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n    $m = 0;\n    $n = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x = 0;\n    $y =\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpqs88krnn.php on line 86\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_count_index = 0;\n    $max_count_count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != ' ') {\n                $count++;\n            }\n        }\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_count_index = $i;\n            $max_count_count = $count;\n        }\n        if ($count == $max_count) {\n            if ($i < $max_index) {\n                $max_index = $i;\n                $max_count_index = $i;\n                $max_count_count = $count;\n            }\n        }\n    }\n    return $words[$max_index];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpx91uenfd.php:18\nStack trace:\n#0 /tmp/tmpx91uenfd.php(42): find_max(Array)\n#1 /tmp/tmpx91uenfd.php(46): candidate(Array)\n#2 /tmp/tmpx91uenfd.php(58): test()\n#3 {main}\n  thrown in /tmp/tmpx91uenfd.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] == ' ') {\n                $count++;\n            }\n        }\n        if ($count > $max.length) {\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp_fy55byj.php:15\nStack trace:\n#0 /tmp/tmp_fy55byj.php(30): find_max(Array)\n#1 /tmp/tmp_fy55byj.php(34): candidate(Array)\n#2 /tmp/tmp_fy55byj.php(46): test()\n#3 {main}\n  thrown in /tmp/tmp_fy55byj.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_word = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max) {\n            $max = $count;\n            $max_index = $i;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpgyisxb5b.php:16\nStack trace:\n#0 /tmp/tmpgyisxb5b.php(28): find_max(Array)\n#1 /tmp/tmpgyisxb5b.php(32): candidate(Array)\n#2 /tmp/tmpgyisxb5b.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpgyisxb5b.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $max_index = 0;\n    for ( $i = 0; $i < $words.length; $i++ ) {\n        $count = count_unique($words[$i]);\n        if ( $count > $max_count ) {\n            $max_count = $count;\n            $max_index = $i;\n        }\n    }\n    return $words[$max_index];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmprmx8dyct.php:16\nStack trace:\n#0 /tmp/tmprmx8dyct.php(27): find_max(Array)\n#1 /tmp/tmprmx8dyct.php(31): candidate(Array)\n#2 /tmp/tmprmx8dyct.php(43): test()\n#3 {main}\n  thrown in /tmp/tmprmx8dyct.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_word = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpx3pt23rx.php:17\nStack trace:\n#0 /tmp/tmpx3pt23rx.php(28): find_max(Array)\n#1 /tmp/tmpx3pt23rx.php(32): candidate(Array)\n#2 /tmp/tmpx3pt23rx.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpx3pt23rx.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_str = \"\";\n    $count = 0;\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_str = $words[$i];\n        }\n    }\n    return $max_str;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp1m250tzm.php:16\nStack trace:\n#0 /tmp/tmp1m250tzm.php(32): find_max(Array)\n#1 /tmp/tmp1m250tzm.php(36): candidate(Array)\n#2 /tmp/tmp1m250tzm.php(48): test()\n#3 {main}\n  thrown in /tmp/tmp1m250tzm.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $count = 0;\n    $i = 0;\n    while($i < $words.length) {\n        $count = 0;\n        $j = 0;\n        while($j < $words[$i].length) {\n            if($words[$i][$j] != \" \") {\n                $count++;\n            }\n            $j++;\n        }\n        if($count > $count) {\n            $max = $words[$i];\n        }\n        $i++;\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmplm1ecaqd.php:16\nStack trace:\n#0 /tmp/tmplm1ecaqd.php(34): find_max(Array)\n#1 /tmp/tmplm1ecaqd.php(38): candidate(Array)\n#2 /tmp/tmplm1ecaqd.php(50): test()\n#3 {main}\n  thrown in /tmp/tmplm1ecaqd.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_word = \"\";\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_index = $i;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpxxof6vbz.php:17\nStack trace:\n#0 /tmp/tmpxxof6vbz.php(34): find_max(Array)\n#1 /tmp/tmpxxof6vbz.php(38): candidate(Array)\n#2 /tmp/tmpxxof6vbz.php(50): test()\n#3 {main}\n  thrown in /tmp/tmpxxof6vbz.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $count = 0;\n    $index = 0;\n    $max_word = \"\";\n    $max_count = 0;\n    $max_index = 0;\n    for ($index = 0; $index < $words.length; $index++) {\n        $count = 0;\n        for ($index2 = 0; $index2 < $words[$index].length; $index2++) {\n            if ($words[$index][$index2] != \" \") {\n                $count++;\n            }\n        }\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $index;\n        }\n    }\n    $max_word = $words[$max_index];\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp7rqruicn.php:20\nStack trace:\n#0 /tmp/tmp7rqruicn.php(37): find_max(Array)\n#1 /tmp/tmp7rqruicn.php(41): candidate(Array)\n#2 /tmp/tmp7rqruicn.php(53): test()\n#3 {main}\n  thrown in /tmp/tmp7rqruicn.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $count = 0;\n    $words.sort();\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] == $words[$i][$j].toLowerCase()) {\n                $count++;\n            }\n        }\n        if($count > $max.length) {\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught ArgumentCountError: sort() expects at least 1 argument, 0 given in /tmp/tmp6q_u_en7.php:15\nStack trace:\n#0 /tmp/tmp6q_u_en7.php(15): sort()\n#1 /tmp/tmp6q_u_en7.php(30): find_max(Array)\n#2 /tmp/tmp6q_u_en7.php(34): candidate(Array)\n#3 /tmp/tmp6q_u_en7.php(46): test()\n#4 {main}\n  thrown in /tmp/tmp6q_u_en7.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_word = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max) {\n            $max = $count;\n            $max_index = $i;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpgyisxb5b.php:16\nStack trace:\n#0 /tmp/tmpgyisxb5b.php(28): find_max(Array)\n#1 /tmp/tmpgyisxb5b.php(32): candidate(Array)\n#2 /tmp/tmpgyisxb5b.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpgyisxb5b.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_word = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp79r6lwat.php:17\nStack trace:\n#0 /tmp/tmp79r6lwat.php(29): find_max(Array)\n#1 /tmp/tmp79r6lwat.php(33): candidate(Array)\n#2 /tmp/tmp79r6lwat.php(45): test()\n#3 {main}\n  thrown in /tmp/tmp79r6lwat.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_word = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp79r6lwat.php:17\nStack trace:\n#0 /tmp/tmp79r6lwat.php(29): find_max(Array)\n#1 /tmp/tmp79r6lwat.php(33): candidate(Array)\n#2 /tmp/tmp79r6lwat.php(45): test()\n#3 {main}\n  thrown in /tmp/tmp79r6lwat.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = '';\n    $max_count = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n        }\n    }\n    return $words[$max_index];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpg4c4pyaz.php:16\nStack trace:\n#0 /tmp/tmpg4c4pyaz.php(27): find_max(Array)\n#1 /tmp/tmpg4c4pyaz.php(31): candidate(Array)\n#2 /tmp/tmpg4c4pyaz.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpg4c4pyaz.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_str = \"\";\n    $count = 0;\n    $count_str = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        $count_str = \"\";\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($count_str.indexOf($words[$i][$j]) == -1) {\n                $count_str += $words[$i][$j];\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_str = $words[$i];\n        }\n    }\n    return $max_str;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpei_0d87o.php:17\nStack trace:\n#0 /tmp/tmpei_0d87o.php(35): find_max(Array)\n#1 /tmp/tmpei_0d87o.php(39): candidate(Array)\n#2 /tmp/tmpei_0d87o.php(51): test()\n#3 {main}\n  thrown in /tmp/tmpei_0d87o.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    $count_word = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        $count_word = \"\";\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != \" \") {\n                $count++;\n                $count_word += $words[$i][$j];\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n        if ($count == $max) {\n            if ($count_word < $max_word) {\n                $max_word = $count_word;\n            }\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpv2bssphr.php:17\nStack trace:\n#0 /tmp/tmpv2bssphr.php(40): find_max(Array)\n#1 /tmp/tmpv2bssphr.php(44): candidate(Array)\n#2 /tmp/tmpv2bssphr.php(56): test()\n#3 {main}\n  thrown in /tmp/tmpv2bssphr.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] != ' ') {\n                $count++;\n            }\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpukhpv1vp.php:16\nStack trace:\n#0 /tmp/tmpukhpv1vp.php(32): find_max(Array)\n#1 /tmp/tmpukhpv1vp.php(36): candidate(Array)\n#2 /tmp/tmpukhpv1vp.php(48): test()\n#3 {main}\n  thrown in /tmp/tmpukhpv1vp.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $max_index = 0;\n    $count = 0;\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n        }\n    }\n    return $words[$max_index];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpnzbvlgcl.php:17\nStack trace:\n#0 /tmp/tmpnzbvlgcl.php(33): find_max(Array)\n#1 /tmp/tmpnzbvlgcl.php(37): candidate(Array)\n#2 /tmp/tmpnzbvlgcl.php(49): test()\n#3 {main}\n  thrown in /tmp/tmpnzbvlgcl.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_word = \"\";\n    for ( $i = 0; $i < $words.length; $i++ ) {\n        $count = count_unique($words[$i]);\n        if ( $count > $max ) {\n            $max = $count;\n            $max_index = $i;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpuoll7amn.php:16\nStack trace:\n#0 /tmp/tmpuoll7amn.php(28): find_max(Array)\n#1 /tmp/tmpuoll7amn.php(32): candidate(Array)\n#2 /tmp/tmpuoll7amn.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpuoll7amn.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max_count = 0\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpk_iqfanc.php on line 71\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_word = \"\";\n    for ( $i = 0; $i < $words.length; $i++ ) {\n        $count = count_unique($words[$i]);\n        if ( $count > $max ) {\n            $max = $count;\n            $max_index = $i;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpuoll7amn.php:16\nStack trace:\n#0 /tmp/tmpuoll7amn.php(28): find_max(Array)\n#1 /tmp/tmpuoll7amn.php(32): candidate(Array)\n#2 /tmp/tmpuoll7amn.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpuoll7amn.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_str = \"\";\n    $count = 0;\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] == ' ') {\n                continue;\n            }\n            $count++;\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_str = $words[$i];\n        }\n    }\n    return $max_str;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpih187zid.php:16\nStack trace:\n#0 /tmp/tmpih187zid.php(33): find_max(Array)\n#1 /tmp/tmpih187zid.php(37): candidate(Array)\n#2 /tmp/tmpih187zid.php(49): test()\n#3 {main}\n  thrown in /tmp/tmpih187zid.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] == ' ') {\n                continue;\n            }\n            $count++;\n        }\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpz5adl5n4.php:16\nStack trace:\n#0 /tmp/tmpz5adl5n4.php(33): find_max(Array)\n#1 /tmp/tmpz5adl5n4.php(37): candidate(Array)\n#2 /tmp/tmpz5adl5n4.php(49): test()\n#3 {main}\n  thrown in /tmp/tmpz5adl5n4.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    $word = \"\";\n    $count = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max = 0;\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    $word = \"\";\n    $count = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max = 0;\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    $word = \"\";\n    $count = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max = 0;\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    $word = \"\";\n    $count = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max = 0;\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    $word = \"\";\n    $count = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max = 0;\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    $word = \"\";\n    $count = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max = 0;\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    $word = \"\";\n    $count = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max = 0;\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    $word = \"\";\n    $count = 0;\n    $max_count = 0;\n    $max_index = 0;\n    $max = 0;\n    $count = 0;\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nParse error: Unclosed '{' on line 12 in /tmp/tmp49oy9hys.php on line 99\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $max_count = 0;\n    $count = 0;\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] == ' ') {\n                $count++;\n            }\n        }\n        if($count > $max_count) {\n            $max_count = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpmyie8kwq.php:17\nStack trace:\n#0 /tmp/tmpmyie8kwq.php(33): find_max(Array)\n#1 /tmp/tmpmyie8kwq.php(37): candidate(Array)\n#2 /tmp/tmpmyie8kwq.php(49): test()\n#3 {main}\n  thrown in /tmp/tmpmyie8kwq.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = '';\n    $count = 0;\n    $max_count = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != ' ') {\n                $count++;\n            }\n        }\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n        }\n    }\n    $max = $words[$max_index];\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpd5l9g903.php:17\nStack trace:\n#0 /tmp/tmpd5l9g903.php(34): find_max(Array)\n#1 /tmp/tmpd5l9g903.php(38): candidate(Array)\n#2 /tmp/tmpd5l9g903.php(50): test()\n#3 {main}\n  thrown in /tmp/tmpd5l9g903.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $words.sort();\n    for($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if($count > $max_count) {\n            $max_count = $count;\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught ArgumentCountError: sort() expects at least 1 argument, 0 given in /tmp/tmpwtiy_3q_.php:15\nStack trace:\n#0 /tmp/tmpwtiy_3q_.php(15): sort()\n#1 /tmp/tmpwtiy_3q_.php(27): find_max(Array)\n#2 /tmp/tmpwtiy_3q_.php(31): candidate(Array)\n#3 /tmp/tmpwtiy_3q_.php(43): test()\n#4 {main}\n  thrown in /tmp/tmpwtiy_3q_.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_word = \"\";\n    $words.sort();\n    for($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if($count > $max) {\n            $max = $count;\n            $max_index = $i;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught ArgumentCountError: sort() expects at least 1 argument, 0 given in /tmp/tmp9al5bl4_.php:16\nStack trace:\n#0 /tmp/tmp9al5bl4_.php(16): sort()\n#1 /tmp/tmp9al5bl4_.php(29): find_max(Array)\n#2 /tmp/tmp9al5bl4_.php(33): candidate(Array)\n#3 /tmp/tmp9al5bl4_.php(45): test()\n#4 {main}\n  thrown in /tmp/tmp9al5bl4_.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpxzmkt0nr.php:16\nStack trace:\n#0 /tmp/tmpxzmkt0nr.php(32): find_max(Array)\n#1 /tmp/tmpxzmkt0nr.php(36): candidate(Array)\n#2 /tmp/tmpxzmkt0nr.php(48): test()\n#3 {main}\n  thrown in /tmp/tmpxzmkt0nr.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_word = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max) {\n            $max = $count;\n            $max_index = $i;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpgyisxb5b.php:16\nStack trace:\n#0 /tmp/tmpgyisxb5b.php(28): find_max(Array)\n#1 /tmp/tmpgyisxb5b.php(32): candidate(Array)\n#2 /tmp/tmpgyisxb5b.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpgyisxb5b.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $max_count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmptghwod7_.php:16\nStack trace:\n#0 /tmp/tmptghwod7_.php(27): find_max(Array)\n#1 /tmp/tmptghwod7_.php(31): candidate(Array)\n#2 /tmp/tmptghwod7_.php(43): test()\n#3 {main}\n  thrown in /tmp/tmptghwod7_.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] == ' ') {\n                $count = 0;\n            } else {\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpd36o9hcp.php:16\nStack trace:\n#0 /tmp/tmpd36o9hcp.php(34): find_max(Array)\n#1 /tmp/tmpd36o9hcp.php(38): candidate(Array)\n#2 /tmp/tmpd36o9hcp.php(50): test()\n#3 {main}\n  thrown in /tmp/tmpd36o9hcp.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $words.sort();\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught ArgumentCountError: sort() expects at least 1 argument, 0 given in /tmp/tmpred2trlh.php:15\nStack trace:\n#0 /tmp/tmpred2trlh.php(15): sort()\n#1 /tmp/tmpred2trlh.php(27): find_max(Array)\n#2 /tmp/tmpred2trlh.php(31): candidate(Array)\n#3 /tmp/tmpred2trlh.php(43): test()\n#4 {main}\n  thrown in /tmp/tmpred2trlh.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $words.sort();\n    for($i=0; $i<$words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if($count > $max_count) {\n            $max_count = $count;\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught ArgumentCountError: sort() expects at least 1 argument, 0 given in /tmp/tmpqjgipmu1.php:15\nStack trace:\n#0 /tmp/tmpqjgipmu1.php(15): sort()\n#1 /tmp/tmpqjgipmu1.php(27): find_max(Array)\n#2 /tmp/tmpqjgipmu1.php(31): candidate(Array)\n#3 /tmp/tmpqjgipmu1.php(43): test()\n#4 {main}\n  thrown in /tmp/tmpqjgipmu1.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = '';\n    $count = 0;\n    $i = 0;\n    while($i < $words.length) {\n        $count = 0;\n        $j = 0;\n        while($j < $words[$i].length) {\n            if($words[$i][$j] != ' ') {\n                $count++;\n            }\n            $j++;\n        }\n        if($count > $max.length) {\n            $max = $words[$i];\n        }\n        $i++;\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp49v_pt16.php:16\nStack trace:\n#0 /tmp/tmp49v_pt16.php(34): find_max(Array)\n#1 /tmp/tmp49v_pt16.php(38): candidate(Array)\n#2 /tmp/tmp49v_pt16.php(50): test()\n#3 {main}\n  thrown in /tmp/tmp49v_pt16.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_str = \"\";\n    $count = 0;\n    $count_str = \"\";\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        $count_str = \"\";\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($count_str.indexOf($words[$i][$j]) == -1) {\n                $count_str += $words[$i][$j];\n                $count++;\n            }\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_str = $words[$i];\n        }\n    }\n    return $max_str;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpz6tsjcez.php:17\nStack trace:\n#0 /tmp/tmpz6tsjcez.php(35): find_max(Array)\n#1 /tmp/tmpz6tsjcez.php(39): candidate(Array)\n#2 /tmp/tmpz6tsjcez.php(51): test()\n#3 {main}\n  thrown in /tmp/tmpz6tsjcez.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_word = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max) {\n            $max = $count;\n            $max_index = $i;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpgyisxb5b.php:16\nStack trace:\n#0 /tmp/tmpgyisxb5b.php(28): find_max(Array)\n#1 /tmp/tmpgyisxb5b.php(32): candidate(Array)\n#2 /tmp/tmpgyisxb5b.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpgyisxb5b.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_word = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp79r6lwat.php:17\nStack trace:\n#0 /tmp/tmp79r6lwat.php(29): find_max(Array)\n#1 /tmp/tmp79r6lwat.php(33): candidate(Array)\n#2 /tmp/tmp79r6lwat.php(45): test()\n#3 {main}\n  thrown in /tmp/tmp79r6lwat.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $count = 0;\n    $result = \"\";\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if($count > $max.length) {\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp2tibqali.php:16\nStack trace:\n#0 /tmp/tmp2tibqali.php(31): find_max(Array)\n#1 /tmp/tmp2tibqali.php(35): candidate(Array)\n#2 /tmp/tmp2tibqali.php(47): test()\n#3 {main}\n  thrown in /tmp/tmp2tibqali.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_str = \"\";\n    $count = 0;\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] != ' ') {\n                $count++;\n            }\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_str = $words[$i];\n        }\n    }\n    return $max_str;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpbffj1b6x.php:16\nStack trace:\n#0 /tmp/tmpbffj1b6x.php(32): find_max(Array)\n#1 /tmp/tmpbffj1b6x.php(36): candidate(Array)\n#2 /tmp/tmpbffj1b6x.php(48): test()\n#3 {main}\n  thrown in /tmp/tmpbffj1b6x.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_word = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max) {\n            $max = $count;\n            $max_index = $i;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpgyisxb5b.php:16\nStack trace:\n#0 /tmp/tmpgyisxb5b.php(28): find_max(Array)\n#1 /tmp/tmpgyisxb5b.php(32): candidate(Array)\n#2 /tmp/tmpgyisxb5b.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpgyisxb5b.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $count = 0;\n    $words.sort();\n    for($i = 0; $i < $words.length; $i++) {\n        if($count == 0) {\n            $max = $words[$i];\n            $count = 1;\n        } else if($max.length < $words[$i].length) {\n            $max = $words[$i];\n            $count = 1;\n        } else if($max.length == $words[$i].length) {\n            $count++;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught ArgumentCountError: sort() expects at least 1 argument, 0 given in /tmp/tmppjberia5.php:15\nStack trace:\n#0 /tmp/tmppjberia5.php(15): sort()\n#1 /tmp/tmppjberia5.php(31): find_max(Array)\n#2 /tmp/tmppjberia5.php(35): candidate(Array)\n#3 /tmp/tmppjberia5.php(47): test()\n#4 {main}\n  thrown in /tmp/tmppjberia5.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_word = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp79r6lwat.php:17\nStack trace:\n#0 /tmp/tmp79r6lwat.php(29): find_max(Array)\n#1 /tmp/tmp79r6lwat.php(33): candidate(Array)\n#2 /tmp/tmp79r6lwat.php(45): test()\n#3 {main}\n  thrown in /tmp/tmp79r6lwat.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $max_count = 0;\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpod86dntk.php:17\nStack trace:\n#0 /tmp/tmpod86dntk.php(33): find_max(Array)\n#1 /tmp/tmpod86dntk.php(37): candidate(Array)\n#2 /tmp/tmpod86dntk.php(49): test()\n#3 {main}\n  thrown in /tmp/tmpod86dntk.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n        }\n    }\n    return $words[$max_index];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpt_gkre7y.php:16\nStack trace:\n#0 /tmp/tmpt_gkre7y.php(27): find_max(Array)\n#1 /tmp/tmpt_gkre7y.php(31): candidate(Array)\n#2 /tmp/tmpt_gkre7y.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpt_gkre7y.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_word = \"\";\n    $max_count = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        $word = $words[$i];\n        for ($j = 0; $j < $word.length; $j++) {\n            if ($word.substr($j, 1) in $words) {\n                $count++;\n            }\n        }\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n            $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nParse error: syntax error, unexpected identifier \"in\" in /tmp/tmpn76cfenj.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    var max = $words[0];\n    var max_count = $words[0].length;\n    for (var i = 1; i < $words.length; i++) {\n        if ($words[i].length > max_count) {\n            max = $words[i];\n            max_count = $words[i].length;\n        }\n    }\n    return max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nParse error: syntax error, unexpected token \"var\" in /tmp/tmp86llaffn.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] !== \"\") {\n                $count++;\n            }\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpa9_xndgj.php:16\nStack trace:\n#0 /tmp/tmpa9_xndgj.php(32): find_max(Array)\n#1 /tmp/tmpa9_xndgj.php(36): candidate(Array)\n#2 /tmp/tmpa9_xndgj.php(48): test()\n#3 {main}\n  thrown in /tmp/tmpa9_xndgj.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_str = \"\";\n    $count = 0;\n    $count_str = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        $count_str = \"\";\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($count_str.indexOf($words[$i][$j]) == -1) {\n                $count_str += $words[$i][$j];\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_str = $words[$i];\n        }\n    }\n    return $max_str;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpei_0d87o.php:17\nStack trace:\n#0 /tmp/tmpei_0d87o.php(35): find_max(Array)\n#1 /tmp/tmpei_0d87o.php(39): candidate(Array)\n#2 /tmp/tmpei_0d87o.php(51): test()\n#3 {main}\n  thrown in /tmp/tmpei_0d87o.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    $count_word = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        $count_word = \"\";\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($count_word.indexOf($words[$i][$j]) == -1) {\n                $count_word += $words[$i][$j];\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp2d8r77o_.php:17\nStack trace:\n#0 /tmp/tmp2d8r77o_.php(35): find_max(Array)\n#1 /tmp/tmp2d8r77o_.php(39): candidate(Array)\n#2 /tmp/tmp2d8r77o_.php(51): test()\n#3 {main}\n  thrown in /tmp/tmp2d8r77o_.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_string = \"\";\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_string = $words[$i];\n        }\n    }\n    return $max_string;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmplmnv1r1n.php:16\nStack trace:\n#0 /tmp/tmplmnv1r1n.php(32): find_max(Array)\n#1 /tmp/tmplmnv1r1n.php(36): candidate(Array)\n#2 /tmp/tmplmnv1r1n.php(48): test()\n#3 {main}\n  thrown in /tmp/tmplmnv1r1n.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_word = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max) {\n            $max = $count;\n            $max_index = $i;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpgyisxb5b.php:16\nStack trace:\n#0 /tmp/tmpgyisxb5b.php(28): find_max(Array)\n#1 /tmp/tmpgyisxb5b.php(32): candidate(Array)\n#2 /tmp/tmpgyisxb5b.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpgyisxb5b.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_string = \"\";\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_string = $words[$i];\n        }\n    }\n    return $max_string;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmplmnv1r1n.php:16\nStack trace:\n#0 /tmp/tmplmnv1r1n.php(32): find_max(Array)\n#1 /tmp/tmplmnv1r1n.php(36): candidate(Array)\n#2 /tmp/tmplmnv1r1n.php(48): test()\n#3 {main}\n  thrown in /tmp/tmplmnv1r1n.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $words.sort();\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught ArgumentCountError: sort() expects at least 1 argument, 0 given in /tmp/tmpnow_atz2.php:15\nStack trace:\n#0 /tmp/tmpnow_atz2.php(15): sort()\n#1 /tmp/tmpnow_atz2.php(27): find_max(Array)\n#2 /tmp/tmpnow_atz2.php(31): candidate(Array)\n#3 /tmp/tmpnow_atz2.php(43): test()\n#4 {main}\n  thrown in /tmp/tmpnow_atz2.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_str = \"\";\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_str = $words[$i];\n        }\n    }\n    return $max_str;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp2bv58kx4.php:16\nStack trace:\n#0 /tmp/tmp2bv58kx4.php(32): find_max(Array)\n#1 /tmp/tmp2bv58kx4.php(36): candidate(Array)\n#2 /tmp/tmp2bv58kx4.php(48): test()\n#3 {main}\n  thrown in /tmp/tmp2bv58kx4.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    $result = \"\";\n    $result_index = 0;\n    $result_count = 0;\n    $result_max = 0;\n    $result_max_index = 0;\n    $result_max_count = 0;\n    $result_max_max = 0;\n    $result_max_max_index = 0;\n    $result_max_max_count = 0;\n    $result_max_max_max = 0;\n    $result_max_max_max_index = 0;\n    $result_max_max_max_count = 0;\n    $result_max_max_max_max = 0;\n    $result_max_max_max_max_index = 0;\n    $result_max_max_max_max_count = 0;\n    $result_max_max_max_max_max = 0;\n    $result_max_max_max_max_max_index = 0;\n    $result_max_max_max_max_max_count = 0;\n    $result_max_max_max_max_max_max = 0;\n    $result_max_max_max_max_max_max_index = 0;\n    $result_max_max_max_max_max_max_count = 0;\n    $result_max_max_max_max_max_max_max = 0;\n    $result_max_max_max_max_max_max_max_index = 0;\n    $result_max_max_max_max_max_max_max_count = 0;\n    $result_max_max_max_max_max_max_max_max = 0;\n    $result_max_max_max_max_max_max_max_max_index = 0;\n    $result_max_max_max_max_max_max_max_max_count = 0;\n    $result_max_max_max_max_max_max_max_max_max = 0;\n    $result_max_max_max\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmptonvc9of.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $max_count = 0;\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] == ' ') {\n                continue;\n            }\n            $count++;\n        }\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp7zheawth.php:17\nStack trace:\n#0 /tmp/tmp7zheawth.php(34): find_max(Array)\n#1 /tmp/tmp7zheawth.php(38): candidate(Array)\n#2 /tmp/tmp7zheawth.php(50): test()\n#3 {main}\n  thrown in /tmp/tmp7zheawth.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n        }\n    }\n    return $words[$max_index];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpj3vbuflj.php:16\nStack trace:\n#0 /tmp/tmpj3vbuflj.php(32): find_max(Array)\n#1 /tmp/tmpj3vbuflj.php(36): candidate(Array)\n#2 /tmp/tmpj3vbuflj.php(48): test()\n#3 {main}\n  thrown in /tmp/tmpj3vbuflj.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $count = 0;\n    $index = 0;\n    $result = '';\n    foreach($words as $word) {\n        $count = count_unique($word);\n        if($count > $max) {\n            $max = $count;\n            $max_index = $index;\n        }\n        $index++;\n    }\n    $result = $words[$max_index];\n    return $result;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function count_unique() in /tmp/tmpjkeo2qh4.php:19\nStack trace:\n#0 /tmp/tmpjkeo2qh4.php(30): find_max(Array)\n#1 /tmp/tmpjkeo2qh4.php(34): candidate(Array)\n#2 /tmp/tmpjkeo2qh4.php(46): test()\n#3 {main}\n  thrown in /tmp/tmpjkeo2qh4.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    $count_word = \"\";\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        $count_word = \"\";\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($count_word.indexOf($words[$i][$j]) == -1) {\n                $count_word += $words[$i][$j];\n                $count++;\n            }\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpcyoy21zk.php:17\nStack trace:\n#0 /tmp/tmpcyoy21zk.php(35): find_max(Array)\n#1 /tmp/tmpcyoy21zk.php(39): candidate(Array)\n#2 /tmp/tmpcyoy21zk.php(51): test()\n#3 {main}\n  thrown in /tmp/tmpcyoy21zk.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = '';\n    $max_count = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n        }\n    }\n    return $words[$max_index];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpg4c4pyaz.php:16\nStack trace:\n#0 /tmp/tmpg4c4pyaz.php(27): find_max(Array)\n#1 /tmp/tmpg4c4pyaz.php(31): candidate(Array)\n#2 /tmp/tmpg4c4pyaz.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpg4c4pyaz.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_string = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n            $max_string = $words[$i];\n        }\n    }\n    return $max_string;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp3213j2e2.php:17\nStack trace:\n#0 /tmp/tmp3213j2e2.php(29): find_max(Array)\n#1 /tmp/tmp3213j2e2.php(33): candidate(Array)\n#2 /tmp/tmp3213j2e2.php(45): test()\n#3 {main}\n  thrown in /tmp/tmp3213j2e2.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_str = \"\";\n    $count = 0;\n    $count_str = \"\";\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n    $m = 0;\n    $n = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x = 0;\n    $y = 0;\n    $z = 0;\n    $z_str = \"\";\n    $z_count = 0;\n    $z_count_str = \"\";\n    $z_i = 0;\n    $z_j = 0;\n    $z_k = 0;\n    $z_l = 0;\n    $z_m = 0;\n    $z_n = 0;\n    $z_o = 0;\n    $z_p = 0;\n    $z_q = 0;\n    $z_r = 0;\n    $z_s = 0;\n    $z_t = 0;\n    $z_u = 0;\n    $z_v = 0;\n    $z_w = 0;\n    $z_x = 0;\n    $z_y = 0;\n    $z_z = 0;\n    $z_z_str = \"\";\n    $z_z_count = 0;\n    $z_z_count_str = \"\";\n    $z_z_i = 0;\n    $z_z_j = 0;\n    $z_z_k = 0;\n    $z_z_l = 0;\n    $z_z_m = 0;\n    $z_z_n = 0;\n    $z_z_o = 0;\n    $z_z_p = 0;\n    $z_z_q = 0;\n    $z_z_r = 0;\n    $z_z_s = 0;\n    $z_z_t\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpbx1pni96.php on line 71\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpxzmkt0nr.php:16\nStack trace:\n#0 /tmp/tmpxzmkt0nr.php(32): find_max(Array)\n#1 /tmp/tmpxzmkt0nr.php(36): candidate(Array)\n#2 /tmp/tmpxzmkt0nr.php(48): test()\n#3 {main}\n  thrown in /tmp/tmpxzmkt0nr.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    $count_word = \"\";\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        $count_word = \"\";\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($count_word.indexOf($words[$i][$j]) == -1) {\n                $count_word += $words[$i][$j];\n                $count++;\n            }\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp1iv53_zi.php:17\nStack trace:\n#0 /tmp/tmp1iv53_zi.php(34): find_max(Array)\n#1 /tmp/tmp1iv53_zi.php(38): candidate(Array)\n#2 /tmp/tmp1iv53_zi.php(50): test()\n#3 {main}\n  thrown in /tmp/tmp1iv53_zi.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_str = \"\";\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] == ' ') {\n                continue;\n            }\n            $count++;\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_str = $words[$i];\n        }\n    }\n    return $max_str;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpjroqckdj.php:16\nStack trace:\n#0 /tmp/tmpjroqckdj.php(33): find_max(Array)\n#1 /tmp/tmpjroqckdj.php(37): candidate(Array)\n#2 /tmp/tmpjroqckdj.php(49): test()\n#3 {main}\n  thrown in /tmp/tmpjroqckdj.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_str = \"\";\n    $count = 0;\n    $count_str = \"\";\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        $count_str = \"\";\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($count_str.indexOf($words[$i][$j]) == -1) {\n                $count_str += $words[$i][$j];\n                $count++;\n            }\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_str = $words[$i];\n        }\n    }\n    return $max_str;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpz6tsjcez.php:17\nStack trace:\n#0 /tmp/tmpz6tsjcez.php(35): find_max(Array)\n#1 /tmp/tmpz6tsjcez.php(39): candidate(Array)\n#2 /tmp/tmpz6tsjcez.php(51): test()\n#3 {main}\n  thrown in /tmp/tmpz6tsjcez.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_str = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max) {\n            $max = $count;\n            $max_str = $words[$i];\n        }\n    }\n    return $max_str;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpf674yyhj.php:15\nStack trace:\n#0 /tmp/tmpf674yyhj.php(26): find_max(Array)\n#1 /tmp/tmpf674yyhj.php(30): candidate(Array)\n#2 /tmp/tmpf674yyhj.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpf674yyhj.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] == ' ') {\n                continue;\n            }\n            $count++;\n        }\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpz5adl5n4.php:16\nStack trace:\n#0 /tmp/tmpz5adl5n4.php(33): find_max(Array)\n#1 /tmp/tmpz5adl5n4.php(37): candidate(Array)\n#2 /tmp/tmpz5adl5n4.php(49): test()\n#3 {main}\n  thrown in /tmp/tmpz5adl5n4.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_word = \"\";\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_index = $i;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpxxof6vbz.php:17\nStack trace:\n#0 /tmp/tmpxxof6vbz.php(34): find_max(Array)\n#1 /tmp/tmpxxof6vbz.php(38): candidate(Array)\n#2 /tmp/tmpxxof6vbz.php(50): test()\n#3 {main}\n  thrown in /tmp/tmpxxof6vbz.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $max_count = 0;\n    $words_count = 0;\n    $words_count_array = array();\n    $words_count_array = $words;\n    for ($i = 0; $i < $words_count_array.length; $i++) {\n        $count = count_unique($words_count_array[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_word = $words_count_array[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpmcc1ac4b.php:19\nStack trace:\n#0 /tmp/tmpmcc1ac4b.php(30): find_max(Array)\n#1 /tmp/tmpmcc1ac4b.php(34): candidate(Array)\n#2 /tmp/tmpmcc1ac4b.php(46): test()\n#3 {main}\n  thrown in /tmp/tmpmcc1ac4b.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_word = \"\";\n    $count = 0;\n    $index = 0;\n    $word = \"\";\n    $count_word = \"\";\n    for ($index = 0; $index < $words.length; $index++) {\n        $word = $words[$index];\n        $count_word = $word.length;\n        $count = 0;\n        for ($index = 0; $index < $words.length; $index++) {\n            $count_word = $words[$index];\n            $count = 0;\n            for ($index = 0; $index < $words.length; $index++) {\n                $count_word = $words[$index];\n                if ($count_word == $word) {\n                    $count++;\n                }\n            }\n            if ($count > $max_count) {\n                $max_count = $count;\n                $max_index = $index;\n                $max_word = $word;\n            }\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpno6kg1di.php:21\nStack trace:\n#0 /tmp/tmpno6kg1di.php(45): find_max(Array)\n#1 /tmp/tmpno6kg1di.php(49): candidate(Array)\n#2 /tmp/tmpno6kg1di.php(61): test()\n#3 {main}\n  thrown in /tmp/tmpno6kg1di.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    var max = $words[0];\n    for (var i = 1; i < $words.length; i++) {\n        if ($words[i].length > max.length) {\n            max = $words[i];\n        }\n    }\n    return max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nParse error: syntax error, unexpected token \"var\" in /tmp/tmpcgsd8ev9.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_index = 0;\n    $max_count = 0;\n    $max_word = \"\";\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp79r6lwat.php:17\nStack trace:\n#0 /tmp/tmp79r6lwat.php(29): find_max(Array)\n#1 /tmp/tmp79r6lwat.php(33): candidate(Array)\n#2 /tmp/tmp79r6lwat.php(45): test()\n#3 {main}\n  thrown in /tmp/tmp79r6lwat.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    for($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for($j = 0; $j < $words[$i].length; $j++) {\n            if($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpxzmkt0nr.php:16\nStack trace:\n#0 /tmp/tmpxzmkt0nr.php(32): find_max(Array)\n#1 /tmp/tmpxzmkt0nr.php(36): candidate(Array)\n#2 /tmp/tmpxzmkt0nr.php(48): test()\n#3 {main}\n  thrown in /tmp/tmpxzmkt0nr.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $max_count = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = count_unique($words[$i]);\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_index = $i;\n        }\n    }\n    return $words[$max_index];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpt_gkre7y.php:16\nStack trace:\n#0 /tmp/tmpt_gkre7y.php(27): find_max(Array)\n#1 /tmp/tmpt_gkre7y.php(31): candidate(Array)\n#2 /tmp/tmpt_gkre7y.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpt_gkre7y.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    $count = 0;\n    for($i=0; $i<$words.length; $i++) {\n        $count = 0;\n        for($j=0; $j<$words[$i].length; $j++) {\n            if($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if($count > $max) {\n            $max = $count;\n            $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpu8q73yti.php:16\nStack trace:\n#0 /tmp/tmpu8q73yti.php(32): find_max(Array)\n#1 /tmp/tmpu8q73yti.php(36): candidate(Array)\n#2 /tmp/tmpu8q73yti.php(48): test()\n#3 {main}\n  thrown in /tmp/tmpu8q73yti.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = \"\";\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] == \" \") {\n                $count++;\n            }\n        }\n        if ($count > $max.length) {\n            $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmplwjslhql.php:15\nStack trace:\n#0 /tmp/tmplwjslhql.php(30): find_max(Array)\n#1 /tmp/tmplwjslhql.php(34): candidate(Array)\n#2 /tmp/tmplwjslhql.php(46): test()\n#3 {main}\n  thrown in /tmp/tmplwjslhql.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_str = \"\";\n    $count = 0;\n    for ($i = 0; $i < $words.length; $i++) {\n        $count = 0;\n        for ($j = 0; $j < $words[$i].length; $j++) {\n            if ($words[$i][$j] != \" \") {\n                $count++;\n            }\n        }\n        if ($count > $max) {\n            $max = $count;\n            $max_str = $words[$i];\n        }\n    }\n    return $max_str;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp2bv58kx4.php:16\nStack trace:\n#0 /tmp/tmp2bv58kx4.php(32): find_max(Array)\n#1 /tmp/tmp2bv58kx4.php(36): candidate(Array)\n#2 /tmp/tmp2bv58kx4.php(48): test()\n#3 {main}\n  thrown in /tmp/tmp2bv58kx4.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}