{
  "name": "HumanEval_58_common",
  "language": "php",
  "prompt": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n",
  "tests": "function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l2);\n    $l\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmprujxf707.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph3386mjq.php:20\nStack trace:\n#0 /tmp/tmph3386mjq.php(26): test()\n#1 {main}\n  thrown in /tmp/tmph3386mjq.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpfkofaaqg.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    return array_flip($l1);\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fgitqeb.php:23\nStack trace:\n#0 /tmp/tmp1fgitqeb.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1fgitqeb.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmpzamh_itp.php:14\nStack trace:\n#0 /tmp/tmpzamh_itp.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmpzamh_itp.php(23): common(Array, Array)\n#2 /tmp/tmpzamh_itp.php(27): candidate(Array, Array)\n#3 /tmp/tmpzamh_itp.php(33): test()\n#4 {main}\n  thrown in /tmp/tmpzamh_itp.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpfkofaaqg.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n\t$l1 = array_flip($l1);\n\t$l2 = array_flip($l2);\n\t$l1 = array_keys($l1);\n\t$l2 = array_keys($l2);\n\t$l1 = array_intersect($l1, $l2);\n\t$l1 = array_uniq($l1);\n\treturn $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_uniq() in /tmp/tmp4t_2ctt0.php:13\nStack trace:\n#0 /tmp/tmp4t_2ctt0.php(18): common(Array, Array)\n#1 /tmp/tmp4t_2ctt0.php(22): candidate(Array, Array)\n#2 /tmp/tmp4t_2ctt0.php(28): test()\n#3 {main}\n  thrown in /tmp/tmp4t_2ctt0.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    return array_flip($l1);\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fgitqeb.php:23\nStack trace:\n#0 /tmp/tmp1fgitqeb.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1fgitqeb.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: Unclosed '{' on line 7 in /tmp/tmpgyosax1o.php on line 46\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpi0cay0m8.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_sort($l1);\n    $l2 = array_sort($l2);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpx38_069b.php:8\nStack trace:\n#0 /tmp/tmpx38_069b.php(15): common(Array, Array)\n#1 /tmp/tmpx38_069b.php(19): candidate(Array, Array)\n#2 /tmp/tmpx38_069b.php(25): test()\n#3 {main}\n  thrown in /tmp/tmpx38_069b.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpi0cay0m8.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n\t$l1 = array_keys($l1);\n\t$l2 = array_keys($l2);\n\t$l1 = array_intersect($l1, $l2);\n\t$l1 = array_intersect($l1, array_keys(array_diff($l1, $l2)));\n\treturn $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqttxxv8x.php:20\nStack trace:\n#0 /tmp/tmpqttxxv8x.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpqttxxv8x.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpi0cay0m8.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpi0cay0m8.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_sort($l1);\n    $l2 = array_sort($l2);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpx38_069b.php:8\nStack trace:\n#0 /tmp/tmpx38_069b.php(15): common(Array, Array)\n#1 /tmp/tmpx38_069b.php(19): candidate(Array, Array)\n#2 /tmp/tmpx38_069b.php(25): test()\n#3 {main}\n  thrown in /tmp/tmpx38_069b.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    $l1 = array_intersect_key($l1, array_flip($l1));\n    $l1 = array_intersect_ukey($l1, array_flip($l1));\n    $l1 = array_intersect_key($l1, array_flip($l1));\n    $l1 = array_intersect_ukey($l1, array_flip($l1));\n    $l1 = array_intersect_key($l1, array_flip($l1));\n    $l1 = array_intersect_ukey($l1, array_flip($l1));\n    $l1 = array_intersect_key($l1, array_flip($l1));\n    $l1 = array_intersect_ukey($l1, array_flip($l1));\n    $l1 = array_intersect_key($l1, array_flip($l1));\n    $l1 = array_intersect_ukey($l1, array_flip($l1));\n    $l1 = array_intersect_key($l1, array_flip($l1));\n    $l1 = array_intersect_ukey($l1, array_flip($l1));\n    $l1 = array_intersect_key($l1, array_flip($l1));\n    $l1 = array_intersect_ukey($l1, array_flip($l1));\n    $l1 = array_intersect_key($l1,\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmps3u84ion.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, $l1);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuuf10c69.php:20\nStack trace:\n#0 /tmp/tmpuuf10c69.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpuuf10c69.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpi0cay0m8.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpefnmy5l7.php:24\nStack trace:\n#0 /tmp/tmpefnmy5l7.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpefnmy5l7.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array(0));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwp3rlbhq.php:20\nStack trace:\n#0 /tmp/tmpwp3rlbhq.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpwp3rlbhq.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    return array_flip($l1);\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzu4c3pxj.php:24\nStack trace:\n#0 /tmp/tmpzu4c3pxj.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzu4c3pxj.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_keys(array_diff($l1, $l2)));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr1_eq_kj.php:20\nStack trace:\n#0 /tmp/tmpr1_eq_kj.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpr1_eq_kj.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: Unclosed '{' on line 7 in /tmp/tmpd1ssthay.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_keys($l1));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq_nlw8jd.php:23\nStack trace:\n#0 /tmp/tmpq_nlw8jd.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpq_nlw8jd.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmpl6tnuuyj.php:14\nStack trace:\n#0 /tmp/tmpl6tnuuyj.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmpl6tnuuyj.php(27): common(Array, Array)\n#2 /tmp/tmpl6tnuuyj.php(31): candidate(Array, Array)\n#3 /tmp/tmpl6tnuuyj.php(37): test()\n#4 {main}\n  thrown in /tmp/tmpl6tnuuyj.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpi0cay0m8.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_sort($l1);\n    $l2 = array_sort($l2);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpx38_069b.php:8\nStack trace:\n#0 /tmp/tmpx38_069b.php(15): common(Array, Array)\n#1 /tmp/tmpx38_069b.php(19): candidate(Array, Array)\n#2 /tmp/tmpx38_069b.php(25): test()\n#3 {main}\n  thrown in /tmp/tmpx38_069b.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \":\" in /tmp/tmp9gb890ew.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_intersect($l1, $l1);\n    return array_diff($l1, $l1);\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxttiip2d.php:23\nStack trace:\n#0 /tmp/tmpxttiip2d.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpxttiip2d.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsbgv3gi.php:20\nStack trace:\n#0 /tmp/tmpzsbgv3gi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpzsbgv3gi.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_keys(array_diff($l1, $l2)));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr1_eq_kj.php:20\nStack trace:\n#0 /tmp/tmpr1_eq_kj.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpr1_eq_kj.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \":\" in /tmp/tmp9gb890ew.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmpcpyhisaj.php:14\nStack trace:\n#0 /tmp/tmpcpyhisaj.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmpcpyhisaj.php(24): common(Array, Array)\n#2 /tmp/tmpcpyhisaj.php(28): candidate(Array, Array)\n#3 /tmp/tmpcpyhisaj.php(34): test()\n#4 {main}\n  thrown in /tmp/tmpcpyhisaj.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: Unclosed '{' on line 7 in /tmp/tmpd1ssthay.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpi0cay0m8.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_unshift($l1, 0);\n    $l1 = array_sort($l1);\n    $l1 = array_unshift($l1, 0);\n    $l1 = array_unique($l1);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpdzdbd734.php:16\nStack trace:\n#0 /tmp/tmpdzdbd734.php(23): common(1, Array)\n#1 /tmp/tmpdzdbd734.php(27): candidate(Array, Array)\n#2 /tmp/tmpdzdbd734.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpdzdbd734.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmpvrfe4kvi.php:14\nStack trace:\n#0 /tmp/tmpvrfe4kvi.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmpvrfe4kvi.php(21): common(Array, Array)\n#2 /tmp/tmpvrfe4kvi.php(25): candidate(Array, Array)\n#3 /tmp/tmpvrfe4kvi.php(31): test()\n#4 {main}\n  thrown in /tmp/tmpvrfe4kvi.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_sort($l1);\n    $l2 = array_sort($l2);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpx38_069b.php:8\nStack trace:\n#0 /tmp/tmpx38_069b.php(15): common(Array, Array)\n#1 /tmp/tmpx38_069b.php(19): candidate(Array, Array)\n#2 /tmp/tmpx38_069b.php(25): test()\n#3 {main}\n  thrown in /tmp/tmpx38_069b.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_sort($l1);\n    $l2 = array_sort($l2);\n    $result = array();\n    $i = 0;\n    while ($i < min($l1.length, $l2.length)) {\n        if ($l1[$i] == $l2[$i]) {\n            $result[$i] = $l1[$i];\n            $i++;\n        } else {\n            break;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmp2xje02kb.php:8\nStack trace:\n#0 /tmp/tmp2xje02kb.php(24): common(Array, Array)\n#1 /tmp/tmp2xje02kb.php(28): candidate(Array, Array)\n#2 /tmp/tmp2xje02kb.php(34): test()\n#3 {main}\n  thrown in /tmp/tmp2xje02kb.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpi0cay0m8.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_sort($l1);\n    $l2 = array_sort($l2);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpx38_069b.php:8\nStack trace:\n#0 /tmp/tmpx38_069b.php(15): common(Array, Array)\n#1 /tmp/tmpx38_069b.php(19): candidate(Array, Array)\n#2 /tmp/tmpx38_069b.php(25): test()\n#3 {main}\n  thrown in /tmp/tmpx38_069b.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key_unique_key\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpe8fq28t6.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_intersect($l1, $l1);\n    $l1 = array_diff($l1, $l1);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpodo5d0is.php:24\nStack trace:\n#0 /tmp/tmpodo5d0is.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpodo5d0is.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp2upx5a64.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    return array_flip($l1);\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp18iu7yu0.php:25\nStack trace:\n#0 /tmp/tmp18iu7yu0.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp18iu7yu0.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmp71vks3zi.php:14\nStack trace:\n#0 /tmp/tmp71vks3zi.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmp71vks3zi.php(20): common(Array, Array)\n#2 /tmp/tmp71vks3zi.php(24): candidate(Array, Array)\n#3 /tmp/tmp71vks3zi.php(30): test()\n#4 {main}\n  thrown in /tmp/tmp71vks3zi.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_uniq($l1);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_uniq() in /tmp/tmpxpjk_xz9.php:13\nStack trace:\n#0 /tmp/tmpxpjk_xz9.php(19): common(Array, Array)\n#1 /tmp/tmpxpjk_xz9.php(23): candidate(Array, Array)\n#2 /tmp/tmpxpjk_xz9.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpxpjk_xz9.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpfkofaaqg.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsbgv3gi.php:20\nStack trace:\n#0 /tmp/tmpzsbgv3gi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpzsbgv3gi.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpi0cay0m8.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_uniq($l1);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_uniq() in /tmp/tmpg12_vmij.php:11\nStack trace:\n#0 /tmp/tmpg12_vmij.php(16): common(Array, Array)\n#1 /tmp/tmpg12_vmij.php(20): candidate(Array, Array)\n#2 /tmp/tmpg12_vmij.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpg12_vmij.php on line 11\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpi0cay0m8.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unique($l1);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpafftay9b.php:20\nStack trace:\n#0 /tmp/tmpafftay9b.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpafftay9b.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmpw6e_0uwr.php:14\nStack trace:\n#0 /tmp/tmpw6e_0uwr.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmpw6e_0uwr.php(22): common(Array, Array)\n#2 /tmp/tmpw6e_0uwr.php(26): candidate(Array, Array)\n#3 /tmp/tmpw6e_0uwr.php(32): test()\n#4 {main}\n  thrown in /tmp/tmpw6e_0uwr.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsbgv3gi.php:20\nStack trace:\n#0 /tmp/tmpzsbgv3gi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpzsbgv3gi.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpjf6soume.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsbgv3gi.php:20\nStack trace:\n#0 /tmp/tmpzsbgv3gi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpzsbgv3gi.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_as_set($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_rec($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_rec_as_set($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_rec_as_set_rec($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_rec_as_set_rec_as_set($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_rec_as_set_rec_as_set_rec($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_rec_as_set_rec_as_set_rec_as_set($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_rec_as_set_rec_as_set_rec_as_set_rec($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_rec_as_set_rec_as_set_rec_as_set_rec_as_set($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_rec_as_set_rec_as_set_rec_as_set_rec_as_set_rec($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmpdkaefhvd.php:14\nStack trace:\n#0 /tmp/tmpdkaefhvd.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmpdkaefhvd.php(29): common(Array, Array)\n#2 /tmp/tmpdkaefhvd.php(33): candidate(Array, Array)\n#3 /tmp/tmpdkaefhvd.php(39): test()\n#4 {main}\n  thrown in /tmp/tmpdkaefhvd.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n\t$l1 = array_keys($l1);\n\t$l2 = array_keys($l2);\n\t$l1 = array_intersect($l1, $l2);\n\t$l1 = array_intersect($l1, array_keys(array_diff($l1, $l2)));\n\treturn $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqttxxv8x.php:20\nStack trace:\n#0 /tmp/tmpqttxxv8x.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpqttxxv8x.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: Unclosed '{' on line 7 in /tmp/tmpd1ssthay.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip(array_keys($l1)));\n    $l1 = array_diff($l1, array_flip(array_keys($l2)));\n    $l1 = array_diff($l1, array_flip(array_intersect($l1, $l2)));\n    $l1 = array_diff($l1, array_flip(array_intersect($l2, $l1)));\n    $l1 = array_diff($l1, array_flip(array_intersect($l1, $l2)));\n    $l1 = array_diff($l1, array_flip(array_intersect($l2, $l1)));\n    $l1 = array_diff($l1, array_flip(array_intersect($l2, $l1)));\n    $l1 = array_diff($l1, array_flip(array_intersect($l1, $l2)));\n    $l1 = array_diff($l1, array_flip(array_intersect($l2, $l1)));\n    $l1 = array_diff($l1, array_flip(array_intersect($l1, $l2)));\n    $l1 = array_diff($l1, array_flip(array_intersect($l2, $l1)));\n    $l1 = array_diff($l1, array_flip(array_intersect($l1, $l2)));\n    $l1 = array_diff($l1, array_flip(array_\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmp96awceg7.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_as($l1, $l2);\n    $l1 = array_intersect_ukey_as_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_as($l1, $l2);\n    $l1 = array_intersect_ukey_rec_as_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_as($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_as_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_rec_as($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_rec_as_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_rec_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_rec_rec_as($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_rec_rec_as_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp_pwm5_37.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpjf6soume.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp76qxlsuc.php:24\nStack trace:\n#0 /tmp/tmp76qxlsuc.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp76qxlsuc.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_keys(array_diff($l1, $l2)));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr1_eq_kj.php:20\nStack trace:\n#0 /tmp/tmpr1_eq_kj.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpr1_eq_kj.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    return array_flip($l1);\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsm3ylfnm.php:24\nStack trace:\n#0 /tmp/tmpsm3ylfnm.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpsm3ylfnm.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmpw6e_0uwr.php:14\nStack trace:\n#0 /tmp/tmpw6e_0uwr.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmpw6e_0uwr.php(22): common(Array, Array)\n#2 /tmp/tmpw6e_0uwr.php(26): candidate(Array, Array)\n#3 /tmp/tmpw6e_0uwr.php(32): test()\n#4 {main}\n  thrown in /tmp/tmpw6e_0uwr.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = $l1 || [];\n    $l2 = $l2 || [];\n    $l1 = $l1.sort();\n    $l2 = $l2.sort();\n    var $l = [];\n    var $i = 0;\n    var $j = 0;\n    while ($i < $l1.length && $j < $l2.length) {\n        if ($l1[$i] == $l2[$j]) {\n            $l.push($l1[$i]);\n            $i++;\n            $j++;\n        } else if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n    return $l;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"var\" in /tmp/tmp9l0o9u64.php on line 12\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \":\" in /tmp/tmpusymtuvh.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_uniq($l1);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_uniq() in /tmp/tmpxpjk_xz9.php:13\nStack trace:\n#0 /tmp/tmpxpjk_xz9.php(19): common(Array, Array)\n#1 /tmp/tmpxpjk_xz9.php(23): candidate(Array, Array)\n#2 /tmp/tmpxpjk_xz9.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpxpjk_xz9.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t$l1 = array_intersect($l1, $l2);\n\t$l1 = array_intersect($l1, array_keys(array_intersect($l1, $l2)));\n\treturn $l1;\n}\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2rfj09qa.php:19\nStack trace:\n#0 /tmp/tmp2rfj09qa.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp2rfj09qa.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsbgv3gi.php:20\nStack trace:\n#0 /tmp/tmpzsbgv3gi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpzsbgv3gi.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_uniq($l1);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_uniq() in /tmp/tmpqh48mo4n.php:13\nStack trace:\n#0 /tmp/tmpqh48mo4n.php(18): common(Array, Array)\n#1 /tmp/tmpqh48mo4n.php(22): candidate(Array, Array)\n#2 /tmp/tmpqh48mo4n.php(28): test()\n#3 {main}\n  thrown in /tmp/tmpqh48mo4n.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array(0));\n    $l1 = array_intersect($l1, array(''));\n    $l1 = array_intersect($l1, array());\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdk8_titk.php:22\nStack trace:\n#0 /tmp/tmpdk8_titk.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpdk8_titk.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpll1dxows.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key_unique_key\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpe8fq28t6.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsbgv3gi.php:20\nStack trace:\n#0 /tmp/tmpzsbgv3gi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpzsbgv3gi.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_as_set($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_alnum($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_alnum_ignorecase($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_ignorecase($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_ignorecase_alnum($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_ignorecase_alnum_ignorecase($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_ignorecase_ignorecase($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_ignorecase_ignorecase_alnum($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_ignorecase_ignorecase_alnum_ignorecase($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_ignorecase_ignorecase_ignorecase($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_ignorecase_ignorecase_ignorecase_alnum($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_ignorecase_ignorecase_ignorecase_alnum_ignorecase($l1, $l2);\n    $l1 = array_intersect\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmppcucbxc7.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $result = array();\n    foreach($l1 as $i1) {\n        if (isset($l2[$i1]) && $l2[$i1] == $l1[$i1]) {\n            $result[] = $i1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe95xiph7.php:22\nStack trace:\n#0 /tmp/tmpe95xiph7.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpe95xiph7.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_sort($l1);\n    $l2 = array_sort($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unique($l1);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpkdfdpz8n.php:8\nStack trace:\n#0 /tmp/tmpkdfdpz8n.php(16): common(Array, Array)\n#1 /tmp/tmpkdfdpz8n.php(20): candidate(Array, Array)\n#2 /tmp/tmpkdfdpz8n.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpkdfdpz8n.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array(0));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwp3rlbhq.php:20\nStack trace:\n#0 /tmp/tmpwp3rlbhq.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpwp3rlbhq.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key_unique_key\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpe8fq28t6.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: Unclosed '{' on line 7 in /tmp/tmpd1ssthay.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmpcpyhisaj.php:14\nStack trace:\n#0 /tmp/tmpcpyhisaj.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmpcpyhisaj.php(24): common(Array, Array)\n#2 /tmp/tmpcpyhisaj.php(28): candidate(Array, Array)\n#3 /tmp/tmpcpyhisaj.php(34): test()\n#4 {main}\n  thrown in /tmp/tmpcpyhisaj.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpfkofaaqg.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_sort($l1);\n    $l2 = array_sort($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_uniq($l1);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpsgq1j7fp.php:8\nStack trace:\n#0 /tmp/tmpsgq1j7fp.php(16): common(Array, Array)\n#1 /tmp/tmpsgq1j7fp.php(20): candidate(Array, Array)\n#2 /tmp/tmpsgq1j7fp.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpsgq1j7fp.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: Unclosed '{' on line 7 in /tmp/tmpgyosax1o.php on line 46\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    return array_flip($l1);\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fgitqeb.php:23\nStack trace:\n#0 /tmp/tmp1fgitqeb.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1fgitqeb.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = $l1 || [];\n    $l2 = $l2 || [];\n    $l1 = $l1.sort();\n    $l2 = $l2.sort();\n    var $l = [];\n    var $i = 0;\n    var $j = 0;\n    while ($i < $l1.length && $j < $l2.length) {\n        if ($l1[$i] == $l2[$j]) {\n            $l.push($l1[$i]);\n            $i++;\n            $j++;\n        } else if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n    return $l;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"var\" in /tmp/tmp9l0o9u64.php on line 12\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsbgv3gi.php:20\nStack trace:\n#0 /tmp/tmpzsbgv3gi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpzsbgv3gi.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsbgv3gi.php:20\nStack trace:\n#0 /tmp/tmpzsbgv3gi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpzsbgv3gi.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_keys(array_diff($l1, $l2)));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr1_eq_kj.php:20\nStack trace:\n#0 /tmp/tmpr1_eq_kj.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpr1_eq_kj.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmpw6e_0uwr.php:14\nStack trace:\n#0 /tmp/tmpw6e_0uwr.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmpw6e_0uwr.php(22): common(Array, Array)\n#2 /tmp/tmpw6e_0uwr.php(26): candidate(Array, Array)\n#3 /tmp/tmpw6e_0uwr.php(32): test()\n#4 {main}\n  thrown in /tmp/tmpw6e_0uwr.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = $l1 || [];\n    $l2 = $l2 || [];\n    $l1 = $l1.sort();\n    $l2 = $l2.sort();\n    $l1 = $l1.filter(function($i) {\n        return $l2.indexOf($i) !== -1;\n    });\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught ArgumentCountError: sort() expects at least 1 argument, 0 given in /tmp/tmpzxknltqu.php:10\nStack trace:\n#0 /tmp/tmpzxknltqu.php(10): sort()\n#1 /tmp/tmpzxknltqu.php(19): common(true, true)\n#2 /tmp/tmpzxknltqu.php(23): candidate(Array, Array)\n#3 /tmp/tmpzxknltqu.php(29): test()\n#4 {main}\n  thrown in /tmp/tmpzxknltqu.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_uniq($l1);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_uniq() in /tmp/tmpqh48mo4n.php:13\nStack trace:\n#0 /tmp/tmpqh48mo4n.php(18): common(Array, Array)\n#1 /tmp/tmpqh48mo4n.php(22): candidate(Array, Array)\n#2 /tmp/tmpqh48mo4n.php(28): test()\n#3 {main}\n  thrown in /tmp/tmpqh48mo4n.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_sort($l1);\n    $l2 = array_sort($l2);\n    $result = array();\n    $i = 0;\n    while ($i < $l1.length && $i < $l2.length) {\n        if ($l1[$i] == $l2[$i]) {\n            $result[$i] = $l1[$i];\n            $i++;\n        } else {\n            break;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmp6b5313ra.php:8\nStack trace:\n#0 /tmp/tmp6b5313ra.php(24): common(Array, Array)\n#1 /tmp/tmp6b5313ra.php(28): candidate(Array, Array)\n#2 /tmp/tmp6b5313ra.php(34): test()\n#3 {main}\n  thrown in /tmp/tmp6b5313ra.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_sort($l1);\n    $l2 = array_sort($l2);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpx38_069b.php:8\nStack trace:\n#0 /tmp/tmpx38_069b.php(15): common(Array, Array)\n#1 /tmp/tmpx38_069b.php(19): candidate(Array, Array)\n#2 /tmp/tmpx38_069b.php(25): test()\n#3 {main}\n  thrown in /tmp/tmpx38_069b.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsbgv3gi.php:20\nStack trace:\n#0 /tmp/tmpzsbgv3gi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpzsbgv3gi.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmp71vks3zi.php:14\nStack trace:\n#0 /tmp/tmp71vks3zi.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmp71vks3zi.php(20): common(Array, Array)\n#2 /tmp/tmp71vks3zi.php(24): candidate(Array, Array)\n#3 /tmp/tmp71vks3zi.php(30): test()\n#4 {main}\n  thrown in /tmp/tmp71vks3zi.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key_unique_key\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpe8fq28t6.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: Unclosed '{' on line 7 in /tmp/tmpd1ssthay.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpi0cay0m8.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsbgv3gi.php:20\nStack trace:\n#0 /tmp/tmpzsbgv3gi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpzsbgv3gi.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_sort($l1);\n    $l2 = array_sort($l2);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpx38_069b.php:8\nStack trace:\n#0 /tmp/tmpx38_069b.php(15): common(Array, Array)\n#1 /tmp/tmpx38_069b.php(19): candidate(Array, Array)\n#2 /tmp/tmpx38_069b.php(25): test()\n#3 {main}\n  thrown in /tmp/tmpx38_069b.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_intersect($l1, $l2);\n    return array_diff($l1, $l2);\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvy4svk6d.php:23\nStack trace:\n#0 /tmp/tmpvy4svk6d.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvy4svk6d.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsljndgd.php:19\nStack trace:\n#0 /tmp/tmpzsljndgd.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpzsljndgd.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_diff($l1, $l2));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkpr9m_l9.php:20\nStack trace:\n#0 /tmp/tmpkpr9m_l9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpkpr9m_l9.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpzm62j20o.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_diff($l1, $l2));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkpr9m_l9.php:20\nStack trace:\n#0 /tmp/tmpkpr9m_l9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpkpr9m_l9.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpzm62j20o.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmpw6e_0uwr.php:14\nStack trace:\n#0 /tmp/tmpw6e_0uwr.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmpw6e_0uwr.php(22): common(Array, Array)\n#2 /tmp/tmpw6e_0uwr.php(26): candidate(Array, Array)\n#3 /tmp/tmpw6e_0uwr.php(32): test()\n#4 {main}\n  thrown in /tmp/tmpw6e_0uwr.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmpqp_l_pk0.php:14\nStack trace:\n#0 /tmp/tmpqp_l_pk0.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmpqp_l_pk0.php(21): common(Array, Array)\n#2 /tmp/tmpqp_l_pk0.php(25): candidate(Array, Array)\n#3 /tmp/tmpqp_l_pk0.php(31): test()\n#4 {main}\n  thrown in /tmp/tmpqp_l_pk0.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_unshift($l1, 0);\n    $l1 = array_sort($l1);\n    $l1 = array_unshift($l1, 0);\n    $l1 = array_unique($l1);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpdzdbd734.php:16\nStack trace:\n#0 /tmp/tmpdzdbd734.php(23): common(1, Array)\n#1 /tmp/tmpdzdbd734.php(27): candidate(Array, Array)\n#2 /tmp/tmpdzdbd734.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpdzdbd734.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_keys($l1));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpovua0k3l.php:21\nStack trace:\n#0 /tmp/tmpovua0k3l.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpovua0k3l.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_uniq($l1);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_uniq() in /tmp/tmpqh48mo4n.php:13\nStack trace:\n#0 /tmp/tmpqh48mo4n.php(18): common(Array, Array)\n#1 /tmp/tmpqh48mo4n.php(22): candidate(Array, Array)\n#2 /tmp/tmpqh48mo4n.php(28): test()\n#3 {main}\n  thrown in /tmp/tmpqh48mo4n.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_diff($l1, $l2));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkpr9m_l9.php:20\nStack trace:\n#0 /tmp/tmpkpr9m_l9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpkpr9m_l9.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_diff($l1, $l2));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkpr9m_l9.php:20\nStack trace:\n#0 /tmp/tmpkpr9m_l9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpkpr9m_l9.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_keys(array_diff($l1, $l2)));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr1_eq_kj.php:20\nStack trace:\n#0 /tmp/tmpr1_eq_kj.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpr1_eq_kj.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpjf6soume.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpi0cay0m8.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: Unclosed '{' on line 7 in /tmp/tmpd1ssthay.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmpcpyhisaj.php:14\nStack trace:\n#0 /tmp/tmpcpyhisaj.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmpcpyhisaj.php(24): common(Array, Array)\n#2 /tmp/tmpcpyhisaj.php(28): candidate(Array, Array)\n#3 /tmp/tmpcpyhisaj.php(34): test()\n#4 {main}\n  thrown in /tmp/tmpcpyhisaj.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi3k82o3w.php:24\nStack trace:\n#0 /tmp/tmpi3k82o3w.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpi3k82o3w.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_as_set($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_rec($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_rec_as_set($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_rec_as_set_rec($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmpdy6tyg1s.php:14\nStack trace:\n#0 /tmp/tmpdy6tyg1s.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmpdy6tyg1s.php(23): common(Array, Array)\n#2 /tmp/tmpdy6tyg1s.php(27): candidate(Array, Array)\n#3 /tmp/tmpdy6tyg1s.php(33): test()\n#4 {main}\n  thrown in /tmp/tmpdy6tyg1s.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpfkofaaqg.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    return array_flip($l1);\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmp82a6t6m6.php:14\nStack trace:\n#0 /tmp/tmp82a6t6m6.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmp82a6t6m6.php(19): common(Array, Array)\n#2 /tmp/tmp82a6t6m6.php(23): candidate(Array, Array)\n#3 /tmp/tmp82a6t6m6.php(29): test()\n#4 {main}\n  thrown in /tmp/tmp82a6t6m6.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_diff($l1, $l2));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkpr9m_l9.php:20\nStack trace:\n#0 /tmp/tmpkpr9m_l9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpkpr9m_l9.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmp71vks3zi.php:14\nStack trace:\n#0 /tmp/tmp71vks3zi.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmp71vks3zi.php(20): common(Array, Array)\n#2 /tmp/tmp71vks3zi.php(24): candidate(Array, Array)\n#3 /tmp/tmp71vks3zi.php(30): test()\n#4 {main}\n  thrown in /tmp/tmp71vks3zi.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $result = array();\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    foreach($l1 as $i1) {\n        if (isset($l2[$i1])) {\n            $result[] = $l2[$i1];\n        }\n    }\n    return array_flip($result);\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr6k96qdg.php:24\nStack trace:\n#0 /tmp/tmpr6k96qdg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpr6k96qdg.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmpzamh_itp.php:14\nStack trace:\n#0 /tmp/tmpzamh_itp.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmpzamh_itp.php(23): common(Array, Array)\n#2 /tmp/tmpzamh_itp.php(27): candidate(Array, Array)\n#3 /tmp/tmpzamh_itp.php(33): test()\n#4 {main}\n  thrown in /tmp/tmpzamh_itp.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_as($l1, $l2);\n    $l1 = array_intersect_ukey_as_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_as($l1, $l2);\n    $l1 = array_intersect_ukey_rec_as_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_as($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_as_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_rec_as($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_rec_as_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_rec_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_rec_rec_as($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_rec_rec_as_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp_pwm5_37.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: Unclosed '{' on line 7 in /tmp/tmpd1ssthay.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: Unclosed '{' on line 7 in /tmp/tmpd1ssthay.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n\t$l1 = array_keys($l1);\n\t$l2 = array_keys($l2);\n\t$l1 = array_intersect($l1, $l2);\n\t$l1 = array_diff($l1, $l2);\n\treturn $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzdpjk2s6.php:20\nStack trace:\n#0 /tmp/tmpzdpjk2s6.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpzdpjk2s6.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmnj3a3n1.php:28\nStack trace:\n#0 /tmp/tmpmnj3a3n1.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmnj3a3n1.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_diff($l1, $l2));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkpr9m_l9.php:20\nStack trace:\n#0 /tmp/tmpkpr9m_l9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpkpr9m_l9.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_uniq($l1);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_uniq() in /tmp/tmpxpjk_xz9.php:13\nStack trace:\n#0 /tmp/tmpxpjk_xz9.php(19): common(Array, Array)\n#1 /tmp/tmpxpjk_xz9.php(23): candidate(Array, Array)\n#2 /tmp/tmpxpjk_xz9.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpxpjk_xz9.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpi0cay0m8.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmp9b5x7cjs.php:14\nStack trace:\n#0 /tmp/tmp9b5x7cjs.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmp9b5x7cjs.php(20): common(Array, Array)\n#2 /tmp/tmp9b5x7cjs.php(24): candidate(Array, Array)\n#3 /tmp/tmp9b5x7cjs.php(30): test()\n#4 {main}\n  thrown in /tmp/tmp9b5x7cjs.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_uniq($l1);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_uniq() in /tmp/tmpg12_vmij.php:11\nStack trace:\n#0 /tmp/tmpg12_vmij.php(16): common(Array, Array)\n#1 /tmp/tmpg12_vmij.php(20): candidate(Array, Array)\n#2 /tmp/tmpg12_vmij.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpg12_vmij.php on line 11\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t$l1 = array_intersect($l1, $l2);\n\t$l1 = array_unique($l1);\n\treturn $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgz6v2btr.php:20\nStack trace:\n#0 /tmp/tmpgz6v2btr.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpgz6v2btr.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \":\" in /tmp/tmpusymtuvh.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpi0cay0m8.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpi0cay0m8.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsbgv3gi.php:20\nStack trace:\n#0 /tmp/tmpzsbgv3gi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpzsbgv3gi.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, $l1);\n    return array_flip($l1);\n}\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf1d2v1dq.php:23\nStack trace:\n#0 /tmp/tmpf1d2v1dq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpf1d2v1dq.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpd6j4dnwm.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    return $l1;\n}\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmpv4_ofh4m.php:14\nStack trace:\n#0 /tmp/tmpv4_ofh4m.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmpv4_ofh4m.php(28): common(Array, Array)\n#2 /tmp/tmpv4_ofh4m.php(32): candidate(Array, Array)\n#3 /tmp/tmpv4_ofh4m.php(38): test()\n#4 {main}\n  thrown in /tmp/tmpv4_ofh4m.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    return array_flip($l1);\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsm3ylfnm.php:24\nStack trace:\n#0 /tmp/tmpsm3ylfnm.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpsm3ylfnm.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_sort($l1);\n    $l1 = array_uniq($l1);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpt2_9qju2.php:11\nStack trace:\n#0 /tmp/tmpt2_9qju2.php(17): common(Array, Array)\n#1 /tmp/tmpt2_9qju2.php(21): candidate(Array, Array)\n#2 /tmp/tmpt2_9qju2.php(27): test()\n#3 {main}\n  thrown in /tmp/tmpt2_9qju2.php on line 11\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_as($l1, $l2);\n    $l1 = array_intersect_ukey_as_sorted($l1, $l2);\n    $l1 = array_intersect_ukey_as_sorted_s($l1, $l2);\n    $l1 = array_intersect_ukey_as_sorted_s_k($l1, $l2);\n    $l1 = array_intersect_ukey_as_sorted_s_k_c($l1, $l2);\n    $l1 = array_intersect_ukey_as_sorted_s_k_c_d($l1, $l2);\n    $l1 = array_intersect_ukey_as_sorted_s_k_c_d_e($l1, $l2);\n    $l1 = array_intersect_ukey_as_sorted_s_k_c_d_e_f($l1, $l2);\n    $l1 = array_intersect_ukey_as_sorted_s_k_c_d_e_f_g($l1, $l2);\n    $l1 = array_intersect_ukey_as_sorted_s_k_c_d_e_f_g_h($l1, $l2);\n    $l1 = array_intersect_ukey_as_sorted_s_k_c_d_e_f_g_h_i($l1, $l2);\n    $l1 = array_intersect_ukey_as_sorted_s_k_c_d_\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpvhln4g1v.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsbgv3gi.php:20\nStack trace:\n#0 /tmp/tmpzsbgv3gi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpzsbgv3gi.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpjf6soume.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmpw6e_0uwr.php:14\nStack trace:\n#0 /tmp/tmpw6e_0uwr.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmpw6e_0uwr.php(22): common(Array, Array)\n#2 /tmp/tmpw6e_0uwr.php(26): candidate(Array, Array)\n#3 /tmp/tmpw6e_0uwr.php(32): test()\n#4 {main}\n  thrown in /tmp/tmpw6e_0uwr.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array(0));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwp3rlbhq.php:20\nStack trace:\n#0 /tmp/tmpwp3rlbhq.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpwp3rlbhq.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unique($l1);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpafftay9b.php:20\nStack trace:\n#0 /tmp/tmpafftay9b.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpafftay9b.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpfkofaaqg.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_uniq($l1);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_uniq() in /tmp/tmpxpjk_xz9.php:13\nStack trace:\n#0 /tmp/tmpxpjk_xz9.php(19): common(Array, Array)\n#1 /tmp/tmpxpjk_xz9.php(23): candidate(Array, Array)\n#2 /tmp/tmpxpjk_xz9.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpxpjk_xz9.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmp71vks3zi.php:14\nStack trace:\n#0 /tmp/tmp71vks3zi.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmp71vks3zi.php(20): common(Array, Array)\n#2 /tmp/tmp71vks3zi.php(24): candidate(Array, Array)\n#3 /tmp/tmp71vks3zi.php(30): test()\n#4 {main}\n  thrown in /tmp/tmp71vks3zi.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmp71vks3zi.php:14\nStack trace:\n#0 /tmp/tmp71vks3zi.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmp71vks3zi.php(20): common(Array, Array)\n#2 /tmp/tmp71vks3zi.php(24): candidate(Array, Array)\n#3 /tmp/tmp71vks3zi.php(30): test()\n#4 {main}\n  thrown in /tmp/tmp71vks3zi.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_keys($l2));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6vlyjmwz.php:20\nStack trace:\n#0 /tmp/tmp6vlyjmwz.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp6vlyjmwz.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = $l1 || [];\n    $l2 = $l2 || [];\n    $l1 = $l1.sort();\n    $l2 = $l2.sort();\n    var $i = 0, $j = 0, $c = [];\n    while ($i < $l1.length && $j < $l2.length) {\n        if ($l1[$i] == $l2[$j]) {\n            $c.push($l1[$i]);\n            $i++;\n            $j++;\n        } else if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"var\" in /tmp/tmprm3032if.php on line 12\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpefnmy5l7.php:24\nStack trace:\n#0 /tmp/tmpefnmy5l7.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpefnmy5l7.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpzm62j20o.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_unshift($l1, 0);\n    $l1 = array_sort($l1);\n    $l1 = array_unshift($l1, 0);\n    $l1 = array_flip($l1);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpwqik953f.php:16\nStack trace:\n#0 /tmp/tmpwqik953f.php(23): common(1, Array)\n#1 /tmp/tmpwqik953f.php(27): candidate(Array, Array)\n#2 /tmp/tmpwqik953f.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpwqik953f.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmpzamh_itp.php:14\nStack trace:\n#0 /tmp/tmpzamh_itp.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmpzamh_itp.php(23): common(Array, Array)\n#2 /tmp/tmpzamh_itp.php(27): candidate(Array, Array)\n#3 /tmp/tmpzamh_itp.php(33): test()\n#4 {main}\n  thrown in /tmp/tmpzamh_itp.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpzm62j20o.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_keys($l2));\n    $l1 = array_intersect($l1, array_keys($l1));\n    return $l1;\n}\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjxm2x32y.php:20\nStack trace:\n#0 /tmp/tmpjxm2x32y.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpjxm2x32y.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n\t$l1 = array_flip($l1);\n\t$l2 = array_flip($l2);\n\t$l1 = array_keys($l1);\n\t$l2 = array_keys($l2);\n\t$l1 = array_intersect($l1, $l2);\n\t$l1 = array_intersect_key($l1, $l2);\n\t$l1 = array_intersect_ukey($l1, $l2);\n\t$l1 = array_intersect_ukey_unique($l1, $l2);\n\t$l1 = array_intersect_key_unique($l1, $l2);\n\t$l1 = array_intersect_ukey_unique($l1, $l2);\n\t$l1 = array_intersect_ukey_unique_key($l1, $l2);\n\t$l1 = array_intersect_key_unique_key($l1, $l2);\n\t$l1 = array_intersect_ukey_unique_key($l1, $l2);\n\t$l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n\t$l1 = array_intersect_key_unique_key_unique($l1, $l2);\n\t$l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n\t$l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n\t$l1 = array_intersect_key_unique_key_unique_key($l1, $l2);\n\t$l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n\t$l1 = array_intersect_ukey_unique_key_unique_key_unique($l1, $l2);\n\t$l1 = array_intersect_key_unique_key_unique_key_unique($l1, $l2);\n\t$l1 = array_intersect_ukey_unique_key_unique_key_unique($l1, $l2);\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: Unclosed '{' on line 7 in /tmp/tmp05mslj86.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t$l1 = array_intersect($l1, $l2);\n\t$l1 = array_unique($l1);\n\treturn $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgz6v2btr.php:20\nStack trace:\n#0 /tmp/tmpgz6v2btr.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpgz6v2btr.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_diff($l1, $l2));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkpr9m_l9.php:20\nStack trace:\n#0 /tmp/tmpkpr9m_l9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpkpr9m_l9.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmpzamh_itp.php:14\nStack trace:\n#0 /tmp/tmpzamh_itp.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmpzamh_itp.php(23): common(Array, Array)\n#2 /tmp/tmpzamh_itp.php(27): candidate(Array, Array)\n#3 /tmp/tmpzamh_itp.php(33): test()\n#4 {main}\n  thrown in /tmp/tmpzamh_itp.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n\t$result = array();\n\t$i = 0;\n\twhile ($i < $l1.length) {\n\t\tif ($l2.indexOf($l1[$i]) > -1) {\n\t\t\t$result[$i] = $l1[$i];\n\t\t}\n\t\t$i++;\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpaozl0zph.php:10\nStack trace:\n#0 /tmp/tmpaozl0zph.php(20): common(Array, Array)\n#1 /tmp/tmpaozl0zph.php(24): candidate(Array, Array)\n#2 /tmp/tmpaozl0zph.php(30): test()\n#3 {main}\n  thrown in /tmp/tmpaozl0zph.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_as($l1, $l2);\n    $l1 = array_intersect_ukey_as_u($l1, $l2);\n    $l1 = array_intersect_ukey_as_u_u($l1, $l2);\n    $l1 = array_intersect_ukey_as_u_u_u($l1, $l2);\n    $l1 = array_intersect_ukey_as_u_u_u_u($l1, $l2);\n    $l1 = array_intersect_ukey_as_u_u_u_u_u($l1, $l2);\n    $l1 = array_intersect_ukey_as_u_u_u_u_u_u($l1, $l2);\n    $l1 = array_intersect_ukey_as_u_u_u_u_u_u_u($l1, $l2);\n    $l1 = array_intersect_ukey_as_u_u_u_u_u_u_u_u($l1, $l2);\n    $l1 = array_intersect_ukey_as_u_u_u_u_u_u_u_u_u($l1, $l2);\n    $l1 = array_intersect_ukey_as_u_u_u_u_u_u_u_u_u_u($l1, $l2);\n    $l1 = array_intersect_ukey_as_u_u_u_u_u_u_u_u_u_u_u\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmph0ui67_z.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, $l1);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, $l1);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, $l1);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, $l1);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, $l1);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, $l1);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, $l1);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmppbq55xuq.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_asort($l1, $l2);\n    return array_flip($l1);\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmp8swdac8o.php:14\nStack trace:\n#0 /tmp/tmp8swdac8o.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmp8swdac8o.php(20): common(Array, Array)\n#2 /tmp/tmp8swdac8o.php(24): candidate(Array, Array)\n#3 /tmp/tmp8swdac8o.php(30): test()\n#4 {main}\n  thrown in /tmp/tmp8swdac8o.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpzm62j20o.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmp3jdojk51.php:14\nStack trace:\n#0 /tmp/tmp3jdojk51.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmp3jdojk51.php(29): common(Array, Array)\n#2 /tmp/tmp3jdojk51.php(33): candidate(Array, Array)\n#3 /tmp/tmp3jdojk51.php(39): test()\n#4 {main}\n  thrown in /tmp/tmp3jdojk51.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_keys(array_diff($l1, $l2)));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr1_eq_kj.php:20\nStack trace:\n#0 /tmp/tmpr1_eq_kj.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpr1_eq_kj.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_uniq($l1);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_uniq() in /tmp/tmpqh48mo4n.php:13\nStack trace:\n#0 /tmp/tmpqh48mo4n.php(18): common(Array, Array)\n#1 /tmp/tmpqh48mo4n.php(22): candidate(Array, Array)\n#2 /tmp/tmpqh48mo4n.php(28): test()\n#3 {main}\n  thrown in /tmp/tmpqh48mo4n.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $result = array();\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    foreach($l1 as $i1) {\n        if (isset($l2[$i1])) {\n            $result[] = $l2[$i1];\n        }\n    }\n    return array_flip($result);\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr6k96qdg.php:24\nStack trace:\n#0 /tmp/tmpr6k96qdg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpr6k96qdg.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key_unique_key\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpe8fq28t6.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    $l1 = array_diff($l1, array_keys($l1));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfimzl98d.php:26\nStack trace:\n#0 /tmp/tmpfimzl98d.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpfimzl98d.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpd6j4dnwm.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_sort($l1);\n    $l2 = array_sort($l2);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpx38_069b.php:8\nStack trace:\n#0 /tmp/tmpx38_069b.php(15): common(Array, Array)\n#1 /tmp/tmpx38_069b.php(19): candidate(Array, Array)\n#2 /tmp/tmpx38_069b.php(25): test()\n#3 {main}\n  thrown in /tmp/tmpx38_069b.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_uniq($l1);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_uniq() in /tmp/tmpqh48mo4n.php:13\nStack trace:\n#0 /tmp/tmpqh48mo4n.php(18): common(Array, Array)\n#1 /tmp/tmpqh48mo4n.php(22): candidate(Array, Array)\n#2 /tmp/tmpqh48mo4n.php(28): test()\n#3 {main}\n  thrown in /tmp/tmpqh48mo4n.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmp71vks3zi.php:14\nStack trace:\n#0 /tmp/tmp71vks3zi.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmp71vks3zi.php(20): common(Array, Array)\n#2 /tmp/tmp71vks3zi.php(24): candidate(Array, Array)\n#3 /tmp/tmp71vks3zi.php(30): test()\n#4 {main}\n  thrown in /tmp/tmp71vks3zi.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array(0));\n    $l1 = array_intersect($l1, array(''));\n    $l1 = array_intersect($l1, array());\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdk8_titk.php:22\nStack trace:\n#0 /tmp/tmpdk8_titk.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpdk8_titk.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_keys($l1));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq_nlw8jd.php:23\nStack trace:\n#0 /tmp/tmpq_nlw8jd.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpq_nlw8jd.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    return array_flip($l1);\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmpygmyvirn.php:14\nStack trace:\n#0 /tmp/tmpygmyvirn.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmpygmyvirn.php(25): common(Array, Array)\n#2 /tmp/tmpygmyvirn.php(29): candidate(Array, Array)\n#3 /tmp/tmpygmyvirn.php(35): test()\n#4 {main}\n  thrown in /tmp/tmpygmyvirn.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = $l1 || [];\n    $l2 = $l2 || [];\n    $l1 = $l1.sort();\n    $l2 = $l2.sort();\n    var $i1 = 0, $i2 = 0, $c = [];\n    while ($i1 < $l1.length && $i2 < $l2.length) {\n        if ($l1[$i1] == $l2[$i2]) {\n            $c.push($l1[$i1]);\n            $i1++;\n            $i2++;\n        } else if ($l1[$i1] < $l2[$i2]) {\n            $i1++;\n        } else {\n            $i2++;\n        }\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"var\" in /tmp/tmpeh5akgn1.php on line 12\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: Unclosed '{' on line 7 in /tmp/tmpd1ssthay.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught TypeError: array_intersect_ukey(): Argument #2 must be a valid callback, array must have exactly two members in /tmp/tmpsz_p7hmh.php:14\nStack trace:\n#0 /tmp/tmpsz_p7hmh.php(14): array_intersect_ukey(Array, Array)\n#1 /tmp/tmpsz_p7hmh.php(28): common(Array, Array)\n#2 /tmp/tmpsz_p7hmh.php(32): candidate(Array, Array)\n#3 /tmp/tmpsz_p7hmh.php(38): test()\n#4 {main}\n  thrown in /tmp/tmpsz_p7hmh.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key_unique_key\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpe8fq28t6.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpkt447pea.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, $l1);\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuuf10c69.php:20\nStack trace:\n#0 /tmp/tmpuuf10c69.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpuuf10c69.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_keys(array_diff($l1, $l2)));\n    return $l1;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr1_eq_kj.php:20\nStack trace:\n#0 /tmp/tmpr1_eq_kj.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpr1_eq_kj.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_unshift($l1, \"\");\n    $l2 = array_unshift($l2, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpgyrkz1e2.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293472,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpfkofaaqg.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}