{
  "name": "HumanEval_20_find_closest_elements",
  "language": "php",
  "prompt": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n",
  "tests": "function candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min_diff = 9999999999999999;\n    $min_index_1 = 0;\n    $min_index_2 = 0;\n    foreach($numbers as $number) {\n        $diff = abs($number - $numbers[0]);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_index_1 = 0;\n            $min_index_2 = 0;\n        }\n        foreach($numbers as $number2) {\n            if ($number2 != $number) {\n                $diff = abs($number - $number2);\n                if ($diff < $min_diff) {\n                    $min_diff = $diff;\n                    $min_index_1 = $number;\n                    $min_index_2 = $number2;\n                }\n            }\n        }\n    }\n    return array($min_index_1, $min_index_2);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe3vugo_9.php:38\nStack trace:\n#0 /tmp/tmpe3vugo_9.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpe3vugo_9.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min_number = min($numbers);\n    $min_index = $numbers.index($min_number);\n    $max_number = max($numbers);\n    $max_index = $numbers.index($max_number);\n    $min_index_next = $min_index + 1;\n    $max_index_next = $max_index + 1;\n    if ($min_index_next > $max_index_next) {\n        return array($min_number, $max_number);\n    }\n    $min_next_number = $numbers[$min_index_next];\n    $max_next_number = $numbers[$max_index_next];\n    $min_next_index = $numbers.index($min_next_number);\n    $max_next_index = $numbers.index($max_next_number);\n    if ($min_next_index > $max_next_index) {\n        return array($min_number, $max_number);\n    }\n    $min_next_next_number = $numbers[$min_next_index_next];\n    $max_next_next_number = $numbers[$max_next_index_next];\n    $min_next_next_index = $numbers.index($min_next_next_number);\n    $max_next_next_index = $numbers.index($max_next_next_number);\n    if ($min_next_next_index > $max_next_next_index) {\n        return array($min_number, $max_number);\n    }\n    $min_next_next_next_number = $numbers[$min_next_next_index_next];\n    $max_next_next_next_number = $numbers[$max_next_next_index_next];\n    $min_next_next_next_index = $numbers.index($min_next_next_next_number);\n    $max_next_next_next_index = $numbers.index($max_next_next_next_number);\n    if ($min_\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpozy633km.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpsffeqb1t.php:13\nStack trace:\n#0 /tmp/tmpsffeqb1t.php(27): find_closest_elements(Array)\n#1 /tmp/tmpsffeqb1t.php(31): candidate(Array)\n#2 /tmp/tmpsffeqb1t.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpsffeqb1t.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = $numbers[0];\n    $max_value = $numbers[0];\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n        if ($numbers[$i] < $min_value) {\n            $min_value = $numbers[$i];\n        }\n        if ($numbers[$i] > $max_value) {\n            $max_value = $numbers[$i];\n        }\n    }\n    $min_index_2 = $min_index;\n    $max_index_2 = $max_index;\n    $min_value_2 = $min_value;\n    $max_value_2 = $max_value;\n    $min_index_3 = $min_index;\n    $max_index_3 = $max_index;\n    $min_value_3 = $min_value;\n    $max_value_3 = $max_value;\n    $min_index_4 = $min_index;\n    $max_index_4 = $max_index;\n    $min_value_4 = $min_value;\n    $max_value_4 = $max_value;\n    $min_index_5 = $min_index;\n    $max_index_5 = $max_index;\n    $min_value_5 = $min_value;\n    $max_value_5 = $max_value;\n    $min_index_6 = $min_index;\n    $max_index_6 = $max_index;\n    $min_value_6 = $min_value;\n    $max_value_6 =\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp9u7w_w1q.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value_index = $numbers.index($min_value);\n    $max_value_index = $numbers.index($max_value);\n    $min_value_index_opposite = $numbers.index($max_value);\n    $max_value_index_opposite = $numbers.index($min_value);\n    $min_value_opposite = $numbers[$min_value_index_opposite];\n    $max_value_opposite = $numbers[$max_value_index_opposite];\n    $min_value_opposite_index = $numbers.index($min_value_opposite);\n    $max_value_opposite_index = $numbers.index($max_value_opposite);\n    $min_value_opposite_index_opposite = $numbers.index($max_value_opposite_index);\n    $max_value_opposite_index_opposite = $numbers.index($min_value_opposite_index_opposite);\n    $min_value_opposite_opposite = $numbers[$min_value_opposite_index_opposite];\n    $max_value_opposite_opposite = $numbers[$max_value_opposite_index_opposite];\n    $min_value_opposite_opposite_index = $numbers.index($min_value_opposite_opposite);\n    $max_value_opposite_opposite_index = $numbers.index($max_value_opposite_opposite);\n    $min_value_opposite_opposite_index_opposite = $numbers.index($min_value_opposite_opposite_index);\n    $max_value_opposite_opposite_index_opp\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp9chpr4fm.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    foreach ($numbers as $value) {\n        if ($value < $min) {\n            $min = $value;\n            $min_index = $numbers.index($value);\n        }\n        if ($value > $max) {\n            $max = $value;\n            $max_index = $numbers.index($value);\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp44jzq6_y.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp44jzq6_y.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp44jzq6_y.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp44jzq6_y.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp44jzq6_y.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp44jzq6_y.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmp44jzq6_y.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmp44jzq6_y.php on line 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp44jzq6_y.php:32\nStack trace:\n#0 /tmp/tmp44jzq6_y.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp44jzq6_y.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = 9999999999999999;\n    $max = 0;\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < count($numbers); $i++) {\n        $value = $numbers[$i];\n        if ($value < $min) {\n            $min = $value;\n            $min_index = $i;\n        }\n        if ($value > $max) {\n            $max = $value;\n            $max_index = $i;\n        }\n    }\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    if ($min_value == $max_value) {\n        return array($min_value, $max_value);\n    }\n    $diff = abs($max_value - $min_value);\n    $diff_index = $max_index;\n    for ($i = 0; $i < count($numbers); $i++) {\n        $value = $numbers[$i];\n        if ($value < $min_value) {\n            $diff = abs($max_value - $value);\n            $diff_index = $i;\n        }\n        if ($value > $max_value) {\n            $diff = abs($value - $min_value);\n            $diff_index = $i;\n        }\n    }\n    $min_value = $numbers[$diff_index];\n    $max_value = $numbers[$diff_index];\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_gdk930u.php:52\nStack trace:\n#0 /tmp/tmp_gdk930u.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp_gdk930u.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value - $max_value;\n    $max_value = $max_value - $min_value;\n    $min_value = $min_value / 2;\n    $max_value = $max_value / 2;\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    $min_value = $min_value + $max_value;\n    $max_value = $max_value + $min_value;\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmr4qvztr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmr4qvztr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmr4qvztr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmr4qvztr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmr4qvztr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmr4qvztr.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmpmr4qvztr.php:10\nStack trace:\n#0 /tmp/tmpmr4qvztr.php(10): min(Array)\n#1 /tmp/tmpmr4qvztr.php(34): find_closest_elements(Array)\n#2 /tmp/tmpmr4qvztr.php(38): candidate(Array)\n#3 /tmp/tmpmr4qvztr.php(45): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min_diff = 9999999999999999;\n    $min_index = 0;\n    $min_value = 0;\n    $max_diff = 0;\n    $max_index = 0;\n    $max_value = 0;\n    foreach ($numbers as $value) {\n        $diff = abs($value - $min_value);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $max_index;\n            $min_value = $max_value;\n        }\n        $diff = abs($value - $max_value);\n        if ($diff < $max_diff) {\n            $max_diff = $diff;\n            $max_index = $min_index;\n            $max_value = $min_value;\n        }\n    }\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpcujeuon8.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpcujeuon8.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpcujeuon8.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpcujeuon8.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpcujeuon8.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpcujeuon8.php on line 9\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcujeuon8.php:38\nStack trace:\n#0 /tmp/tmpcujeuon8.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpcujeuon8.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value_index = $numbers.index($min_value);\n    $max_value_index = $numbers.index($max_value);\n    $min_value_index_plus_one = $min_value_index + 1;\n    $max_value_index_minus_one = $max_value_index - 1;\n    $min_value_index_plus_one_index = $numbers.index($numbers[$min_value_index_plus_one]);\n    $max_value_index_minus_one_index = $numbers.index($numbers[$max_value_index_minus_one]);\n    $min_value_index_plus_one_index_plus_one = $numbers.index($numbers[$min_value_index_plus_one_index + 1]);\n    $max_value_index_minus_one_index_minus_one = $numbers.index($numbers[$max_value_index_minus_one_index - 1]);\n    $closest_min_value = $numbers[$min_value_index_plus_one_index_plus_one];\n    $closest_max_value = $numbers[$max_value_index_minus_one_index_minus_one];\n    $closest_min_value_index = $numbers.index($closest_min_value);\n    $closest_max_value_index = $numbers.index($closest_max_value);\n    $closest_min_value_index_plus_one = $numbers.index($numbers[$closest_min_value_index + 1]);\n    $closest_max_value_index_minus_one = $numbers.index\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpzt6brto2.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value_index = $numbers.index($min_value);\n    $max_value_index = $numbers.index($max_value);\n    $min_value_index_plus_one = $min_value_index + 1;\n    $max_value_index_minus_one = $max_value_index - 1;\n    $min_value_index_minus_one = $min_value_index - 1;\n    $max_value_index_plus_one = $max_value_index + 1;\n    $min_value_index_plus_two = $min_value_index + 2;\n    $max_value_index_minus_two = $max_value_index - 2;\n    $min_value_index_minus_two = $min_value_index - 2;\n    $max_value_index_plus_two = $max_value_index + 2;\n    $min_value_index_plus_three = $min_value_index + 3;\n    $max_value_index_minus_three = $max_value_index - 3;\n    $min_value_index_minus_three = $min_value_index - 3;\n    $max_value_index_plus_three = $max_value_index + 3;\n    $min_value_index_plus_four = $min_value_index + 4;\n    $max_value_index_minus_four = $max_value_index - 4;\n    $min_value_index_minus_four = $min_value_index - 4;\n    $max_value_index_plus_four = $max_value_index + 4;\n    $min_value_index_plus_five = $min_value_index + 5;\n    $max_\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpx2g1edyh.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index_next = $min_index + 1;\n    $max_index_next = $max_index - 1;\n    $min_value_next = $numbers[$min_index_next];\n    $max_value_next = $numbers[$max_index_next];\n    $min_value_next_next = $numbers[$min_index_next + 1];\n    $max_value_next_next = $numbers[$max_index_next - 1];\n    $min_value_next_next_next = $numbers[$min_index_next + 2];\n    $max_value_next_next_next = $numbers[$max_index_next - 2];\n    $min_value_next_next_next_next = $numbers[$min_index_next + 3];\n    $max_value_next_next_next_next = $numbers[$max_index_next - 3];\n    $min_value_next_next_next_next_next = $numbers[$min_index_next + 4];\n    $max_value_next_next_next_next_next = $numbers[$max_index_next - 4];\n    $min_value_next_next_next_next_next_next = $numbers[$min_index_next + 5];\n    $max_value_next_next_next_next_next_next = $numbers[$max_index_next - 5];\n    $min_value_next_next_next_next_next_next_next = $numbers[$min_index_next + 6];\n    $max_value_next_next_next_next_next_next_next = $numbers[$max_index_next\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"]\" in /tmp/tmpbxtous50.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    $min_index = array_flip($min_index);\n    $max_index = array_flip($max_index);\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmp1_r4nhyb.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmp1_r4nhyb.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp1_r4nhyb.php:14\nStack trace:\n#0 /tmp/tmp1_r4nhyb.php(30): find_closest_elements(Array)\n#1 /tmp/tmp1_r4nhyb.php(34): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min_diff = 9999999999999999;\n    $min_index = 0;\n    $min_value = 0;\n    $max_diff = 0;\n    $max_index = 0;\n    $max_value = 0;\n    foreach ($numbers as $value) {\n        $diff = abs($value - $min_value);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $max_index;\n            $min_value = $max_value;\n        }\n        $diff = abs($value - $max_value);\n        if ($diff < $max_diff) {\n            $max_diff = $diff;\n            $max_index = $min_index;\n            $max_value = $min_value;\n        }\n    }\n    $min_index = array_flip($min_index);\n    $max_index = array_flip($max_index);\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpbci17smh.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpbci17smh.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpbci17smh.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpbci17smh.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpbci17smh.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpbci17smh.php on line 9\n\nFatal error: Uncaught TypeError: array_flip(): Argument #1 ($array) must be of type array, int given in /tmp/tmpbci17smh.php:30\nStack trace:\n#0 /tmp/tmpbci17smh.php(30): array_flip(0)\n#1 /tmp/tmpbci17smh.php(36): find_closest_elements(Array)\n#2 /tmp/tmpbci17smh.php(40): candidate(Array)\n#3 /tmp/tmpbci17smh.php(47): test()\n#4 {main}\n  thrown in",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ( $i = 0; $i < $numbers.length; $i++ ) {\n        if ( $numbers[$i] < $min ) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ( $numbers[$i] > $max ) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    $min_index = $min_index + 1;\n    $max_index = $max_index + 1;\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpupy68v7i.php:13\nStack trace:\n#0 /tmp/tmpupy68v7i.php(29): find_closest_elements(Array)\n#1 /tmp/tmpupy68v7i.php(33): candidate(Array)\n#2 /tmp/tmpupy68v7i.php(40): test()\n#3 {main}\n  thrown in /tmp/tmpupy68v7i.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min_diff = 999999999999999999;\n    $min_index = 0;\n    $min_value = 0;\n    $max_diff = 0;\n    $max_index = 0;\n    $max_value = 0;\n    foreach($numbers as $value) {\n        $diff = abs($value - $min_value);\n        if($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $max_index;\n            $min_value = $max_value;\n        }\n        $diff = abs($value - $max_value);\n        if($diff < $max_diff) {\n            $max_diff = $diff;\n            $max_index = $min_index;\n            $max_value = $min_value;\n        }\n    }\n    $min_index = array_flip($min_index);\n    $max_index = array_flip($max_index);\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp90025io1.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp90025io1.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp90025io1.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp90025io1.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp90025io1.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp90025io1.php on line 9\n\nFatal error: Uncaught TypeError: array_flip(): Argument #1 ($array) must be of type array, int given in /tmp/tmp90025io1.php:30\nStack trace:\n#0 /tmp/tmp90025io1.php(30): array_flip(0)\n#1 /tmp/tmp90025io1.php(36): find_closest_elements(Array)\n#2 /tmp/tmp90025io1.php(40): candidate(Array)\n#3 /tmp/tmp90025io1.php(47): test()\n#4 {main}\n  thrown in",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $closest_min = $min;\n    $closest_max = $max;\n    if ($min_index > $max_index) {\n        $closest_min = $max;\n        $closest_max = $min;\n    }\n    $closest_min_index = $numbers.index($closest_min);\n    $closest_max_index = $numbers.index($closest_max);\n    if ($closest_min_index > $closest_max_index) {\n        $closest_min_index = $closest_max_index;\n        $closest_max_index = $closest_min_index;\n    }\n    $closest_min_value = $numbers[$closest_min_index];\n    $closest_max_value = $numbers[$closest_max_index];\n    return array($closest_min, $closest_max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpq0jp0kt_.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpq0jp0kt_.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpq0jp0kt_.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpq0jp0kt_.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpq0jp0kt_.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpq0jp0kt_.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmpq0jp0kt_.php:10\nStack trace:\n#0 /tmp/tmpq0jp0kt_.php(10): min(Array)\n#1 /tmp/tmpq0jp0kt_.php(34): find_closest_elements(Array)\n#2 /tmp/tmpq0jp0kt_.php(38): candidate(Array)\n#3 /tmp/tmpq0jp0kt_.php(45): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($numbers[$min_index], $numbers[$max_index]);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp4dwle2i7.php:13\nStack trace:\n#0 /tmp/tmp4dwle2i7.php(27): find_closest_elements(Array)\n#1 /tmp/tmp4dwle2i7.php(31): candidate(Array)\n#2 /tmp/tmp4dwle2i7.php(38): test()\n#3 {main}\n  thrown in /tmp/tmp4dwle2i7.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value_index = $numbers.index($min_value);\n    $max_value_index = $numbers.index($max_value);\n    $min_value_index_opposite = $numbers.index($max_value);\n    $max_value_index_opposite = $numbers.index($min_value);\n    $min_value_opposite = $numbers[$min_value_index_opposite];\n    $max_value_opposite = $numbers[$max_value_index_opposite];\n    $min_value_opposite_index = $numbers.index($min_value_opposite);\n    $max_value_opposite_index = $numbers.index($max_value_opposite);\n    $min_value_opposite_index_opposite = $numbers.index($max_value_opposite_index);\n    $max_value_opposite_index_opposite = $numbers.index($min_value_opposite_index_opposite);\n    $min_value_opposite_opposite = $numbers[$min_value_opposite_index_opposite];\n    $max_value_opposite_opposite = $numbers[$max_value_opposite_index_opposite];\n    $min_value_opposite_opposite_index = $numbers.index($min_value_opposite_opposite);\n    $max_value_opposite_opposite_index = $numbers.index($max_value_opposite_opposite);\n    $min_value_opposite_opposite_index_opposite = $numbers.index($min_value_opposite_opposite_index);\n    $max_value_opposite_opposite_index_opp\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp9chpr4fm.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value_index = $numbers.index($min_value);\n    $max_value_index = $numbers.index($max_value);\n    $min_value_index_opposite = $numbers.index($max_value);\n    $max_value_index_opposite = $numbers.index($min_value);\n    if ($min_value_index_opposite == $max_value_index_opposite) {\n        $closest_pair = array($min_value, $max_value);\n    } else if ($min_value_index_opposite < $max_value_index_opposite) {\n        $closest_pair = array($min_value, $max_value);\n    } else {\n        $closest_pair = array($max_value, $min_value);\n    }\n    return $closest_pair;\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp93cx_qza.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp93cx_qza.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp93cx_qza.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp93cx_qza.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp93cx_qza.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp93cx_qza.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmp93cx_qza.php:10\nStack trace:\n#0 /tmp/tmp93cx_qza.php(10): min(Array)\n#1 /tmp/tmp93cx_qza.php(31): find_closest_elements(Array)\n#2 /tmp/tmp93cx_qza.php(35): candidate(Array)\n#3 /tmp/tmp93cx_qza.php(42): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    foreach ($numbers as $number) {\n        if ($number < $min) {\n            $min = $number;\n            $min_index = $numbers.index($number);\n        }\n        if ($number > $max) {\n            $max = $number;\n            $max_index = $numbers.index($number);\n        }\n    }\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_index = $min_index - 1;\n    $max_index = $max_index + 1;\n    if ($min_index < 0) {\n        $min_index = 0;\n    }\n    if ($max_index > $numbers.length - 1) {\n        $max_index = $numbers.length - 1;\n    }\n    return array($numbers[$min_index], $numbers[$max_index]);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp26druoa_.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp26druoa_.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp26druoa_.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp26druoa_.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp26druoa_.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp26druoa_.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmp26druoa_.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmp26druoa_.php on line 11\n\nFatal error: Uncaught Error: Call to undefined function index() in /tmp/tmp26druoa_.php:24\nStack trace:\n#0 /tmp/tmp26druoa_.php(38): find_closest_elements(Array)\n#1 /tmp/tmp26druoa_.php(42): candidate(Array)\n#2 ",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $minnfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpgb4tjgg9.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    $min_index = $min_index + 1;\n    $max_index = $max_index + 1;\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4jxtd2_6.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4jxtd2_6.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4jxtd2_6.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4jxtd2_6.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4jxtd2_6.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4jxtd2_6.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmp4jxtd2_6.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmp4jxtd2_6.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp4jxtd2_6.php:14\nStack trace:\n#0 /tmp/tmp4jxtd2_6.php(30): find_closest_elements(Array)\n#1 /tmp/tmp4jxtd2_6.php(34): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min_diffnfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpbn5_d6j2.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpsffeqb1t.php:13\nStack trace:\n#0 /tmp/tmpsffeqb1t.php(27): find_closest_elements(Array)\n#1 /tmp/tmpsffeqb1t.php(31): candidate(Array)\n#2 /tmp/tmpsffeqb1t.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpsffeqb1t.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpaomrd90_.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpaomrd90_.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpaomrd90_.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpaomrd90_.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpaomrd90_.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpaomrd90_.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmpaomrd90_.php:10\nStack trace:\n#0 /tmp/tmpaomrd90_.php(10): min(Array)\n#1 /tmp/tmpaomrd90_.php(26): find_closest_elements(Array)\n#2 /tmp/tmpaomrd90_.php(30): candidate(Array)\n#3 /tmp/tmpaomrd90_.php(37): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min_number = min($numbers);\n    $max_number = max($numbers);\n    $min_index = $numbers.index($min_number);\n    $max_index = $numbers.index($max_number);\n    $min_index = $min_index < $max_index ? $min_index : $max_index;\n    $max_index = $min_index > $max_index ? $min_index : $max_index;\n    return array($numbers[$min_index], $numbers[$max_index]);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpxjv6qy73.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpxjv6qy73.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpxjv6qy73.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpxjv6qy73.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpxjv6qy73.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpxjv6qy73.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmpxjv6qy73.php:10\nStack trace:\n#0 /tmp/tmpxjv6qy73.php(10): min(Array)\n#1 /tmp/tmpxjv6qy73.php(20): find_closest_elements(Array)\n#2 /tmp/tmpxjv6qy73.php(24): candidate(Array)\n#3 /tmp/tmpxjv6qy73.php(31): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $closest = array(\n        $min_value,\n        $max_value\n    );\n    $closest_index = $numbers.index($closest);\n    $closest_value = $numbers[$closest_index];\n    $closest_index_1 = $closest_index + 1;\n    $closest_value_1 = $numbers[$closest_index_1];\n    if ($closest_value_1 > $max_value) {\n        $closest_index_1 = $closest_index - 1;\n        $closest_value_1 = $numbers[$closest_index_1];\n    }\n    $closest_index_2 = $closest_index + 2;\n    $closest_value_2 = $numbers[$closest_index_2];\n    if ($closest_value_2 > $max_value) {\n        $closest_index_2 = $closest_index - 2;\n        $closest_value_2 = $numbers[$closest_index_2];\n    }\n    $closest_index_3 = $closest_index + 3;\n    $closest_value_3 = $numbers[$closest_index_3];\n    if ($closest_value_3 > $max_value) {\n        $closest_index_3 = $closest_index - 3;\n        $closest_value_3 = $numbers[$closest_index_3];\n    }\n    $closest_index_4 = $closest_index + 4;\n    $closest\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpq95zze2f.php on line 42\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    $min_index = array_flip($min_index);\n    $max_index = array_flip($max_index);\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmp1_r4nhyb.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmp1_r4nhyb.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp1_r4nhyb.php:14\nStack trace:\n#0 /tmp/tmp1_r4nhyb.php(30): find_closest_elements(Array)\n#1 /tmp/tmp1_r4nhyb.php(34): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value_index = $numbers.index($min_value);\n    $max_value_index = $numbers.index($max_value);\n    $min_value_index_plus_1 = $min_value_index + 1;\n    $max_value_index_plus_1 = $max_value_index + 1;\n    $min_value_index_minus_1 = $min_value_index - 1;\n    $max_value_index_minus_1 = $max_value_index - 1;\n    $min_value_index_plus_2 = $min_value_index + 2;\n    $max_value_index_plus_2 = $max_value_index + 2;\n    $min_value_index_minus_2 = $min_value_index - 2;\n    $max_value_index_minus_2 = $max_value_index - 2;\n    $min_value_index_plus_3 = $min_value_index + 3;\n    $max_value_index_plus_3 = $max_value_index + 3;\n    $min_value_index_minus_3 = $min_value_index - 3;\n    $max_value_index_minus_3 = $max_value_index - 3;\n    $min_value_index_plus_4 = $min_value_index + 4;\n    $max_value_index_plus_4 = $max_value_index + 4;\n    $min_value_index_minus_4 = $min_value_index - 4;\n    $max_value_index_minus_4 = $max_value_index - 4;\n    $min_value_index_plus_5 = $min_value_index + 5;\n    $max_\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpz636kplt.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min_index = 0;\n    $min_value = $numbers[0];\n    $max_index = 0;\n    $max_value = $numbers[0];\n    foreach ($numbers as $value) {\n        if ($value < $min_value) {\n            $min_value = $value;\n            $min_index = $max_index;\n        }\n        if ($value > $max_value) {\n            $max_value = $value;\n            $max_index = $min_index;\n        }\n    }\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmphlhxu64b.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = abs($min_value - $max_value);\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpvl24k_8_.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    foreach($numbers as $value) {\n        if ($value < $min) {\n            $min = $value;\n            $min_index = $numbers.index($value);\n        }\n        if ($value > $max) {\n            $max = $value;\n            $max_index = $numbers.index($value);\n        }\n    }\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppcqjmfux.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppcqjmfux.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppcqjmfux.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppcqjmfux.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppcqjmfux.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppcqjmfux.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmppcqjmfux.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmppcqjmfux.php on line 11\n\nFatal error: Uncaught Error: Call to undefined function index() in /tmp/tmppcqjmfux.php:24\nStack trace:\n#0 /tmp/tmppcqjmfux.php(30): find_closest_elements(Array)\n#1 /tmp/tmppcqjmfux.php(34): candidate(Array)\n#2 ",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value_index = $numbers.index($min_value);\n    $max_value_index = $numbers.index($max_value);\n    $min_value_index_plus_one = $min_value_index + 1;\n    $max_value_index_plus_one = $max_value_index + 1;\n    $min_value_index_minus_one = $min_value_index - 1;\n    $max_value_index_minus_one = $max_value_index - 1;\n    $min_value_index_plus_two = $min_value_index + 2;\n    $max_value_index_plus_two = $max_value_index + 2;\n    $min_value_index_minus_two = $min_value_index - 2;\n    $max_value_index_minus_two = $max_value_index - 2;\n    $min_value_index_plus_three = $min_value_index + 3;\n    $max_value_index_plus_three = $max_value_index + 3;\n    $min_value_index_minus_three = $min_value_index - 3;\n    $max_value_index_minus_three = $max_value_index - 3;\n    $min_value_index_plus_four = $min_value_index + 4;\n    $max_value_index_plus_four = $max_value_index + 4;\n    $min_value_index_minus_four = $min_value_index - 4;\n    $max_value_index_minus_four = $max_value_index - 4;\n    $min_value_index_plus_five = $min_value_index + 5;\n    $max_\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpu60r3ai1.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpfkafy41x.php:14\nStack trace:\n#0 /tmp/tmpfkafy41x.php(28): find_closest_elements(Array)\n#1 /tmp/tmpfkafy41x.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ( $i = 0; $i < $numbers.length; $i++ ) {\n        if ( $numbers[$i] < $min ) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ( $numbers[$i] > $max ) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($numbers[$min_index], $numbers[$max_index]);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpail8f7pe.php:13\nStack trace:\n#0 /tmp/tmpail8f7pe.php(27): find_closest_elements(Array)\n#1 /tmp/tmpail8f7pe.php(31): candidate(Array)\n#2 /tmp/tmpail8f7pe.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpail8f7pe.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    $min_index_2 = $min_index;\n    $max_index_2 = $max_index;\n    $min_index_3 = $min_index;\n    $max_index_3 = $max_index;\n    $min_index_4 = $min_index;\n    $max_index_4 = $max_index;\n    $min_index_5 = $min_index;\n    $max_index_5 = $max_index;\n    $min_index_6 = $min_index;\n    $max_index_6 = $max_index;\n    $min_index_7 = $min_index;\n    $max_index_7 = $max_index;\n    $min_index_8 = $min_index;\n    $max_index_8 = $max_index;\n    $min_index_9 = $min_index;\n    $max_index_9 = $max_index;\n    $min_index_10 = $min_index;\n    $max_index_10 = $max_index;\n    $min_index_11 = $min_index;\n    $max_index_11 = $max_index;\n    $min_index_12 = $min_index;\n    $max_index_12 = $max_index;\n    $min_index_13 = $min_index;\n    $max_index_13 = $max_index;\n    $min_index_14 = $min_index;\n    $max_index_14 = $max_index;\n    $min_\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpo2qrhtpc.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    $min_index = $min_index + 1;\n    $max_index = $max_index + 1;\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4jxtd2_6.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4jxtd2_6.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4jxtd2_6.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4jxtd2_6.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4jxtd2_6.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4jxtd2_6.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmp4jxtd2_6.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmp4jxtd2_6.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp4jxtd2_6.php:14\nStack trace:\n#0 /tmp/tmp4jxtd2_6.php(30): find_closest_elements(Array)\n#1 /tmp/tmp4jxtd2_6.php(34): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpsffeqb1t.php:13\nStack trace:\n#0 /tmp/tmpsffeqb1t.php(27): find_closest_elements(Array)\n#1 /tmp/tmpsffeqb1t.php(31): candidate(Array)\n#2 /tmp/tmpsffeqb1t.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpsffeqb1t.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = 9999999999999999;\n    $min_index = 0;\n    $max = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_value_index = 0;\n    $max_value_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        $value = $numbers[$i];\n        if ($value < $min) {\n            $min = $value;\n            $min_index = $i;\n        }\n        if ($value > $max) {\n            $max = $value;\n            $max_index = $i;\n        }\n        if ($value < $min_value) {\n            $min_value = $value;\n            $min_value_index = $i;\n        }\n        if ($value > $max_value) {\n            $max_value = $value;\n            $max_value_index = $i;\n        }\n    }\n    $min_value = $numbers[$min_value_index];\n    $max_value = $numbers[$max_value_index];\n    $min_index = $min_value_index;\n    $max_index = $max_value_index;\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmps8vwa3kp.php:17\nStack trace:\n#0 /tmp/tmps8vwa3kp.php(44): find_closest_elements(Array)\n#1 /tmp/tmps8vwa3kp.php(48): candidate(Array)\n#2 /tmp/tmps8vwa3kp.php(55): test()\n#3 {main}\n  thrown in /tmp/tmps8vwa3kp.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpfkafy41x.php:14\nStack trace:\n#0 /tmp/tmpfkafy41x.php(28): find_closest_elements(Array)\n#1 /tmp/tmpfkafy41x.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = 9999999999999999;\n    $max = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_value_index = 0;\n    $max_value_index = 0;\n    $min_value_value = 0;\n    $max_value_value = 0;\n    $min_value_value_index = 0;\n    $max_value_value_index = 0;\n    $min_value_value_value = 0;\n    $max_value_value_value = 0;\n    $min_value_value_value_index = 0;\n    $max_value_value_value_index = 0;\n    $min_value_value_value_value = 0;\n    $max_value_value_value_value = 0;\n    $min_value_value_value_value_index = 0;\n    $max_value_value_value_value_index = 0;\n    $min_value_value_value_value_value = 0;\n    $max_value_value_value_value_value = 0;\n    $min_value_value_value_value_value_index = 0;\n    $max_value_value_value_value_value_index = 0;\n    $min_value_value_value_value_value_value = 0;\n    $max_value_value_value_value_value_value = 0;\n    $min_value_value_value_value_value_value_index = 0;\n    $max_value_value_value_value_value_value_index = 0;\n    $min_value_value_value_value_value_value_value = 0;\n    $max_value_value_value_value_value_value_value = 0;\n    $min_value_value_value_value_value_value_value_index = 0;\n    $max_value_value_value_value_value_value_value_index = 0;\n    $min_value_value_value_value_value_value_value_value = 0;\n    $max_value\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmple8_9vjf.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpaomrd90_.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpaomrd90_.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpaomrd90_.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpaomrd90_.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpaomrd90_.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpaomrd90_.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmpaomrd90_.php:10\nStack trace:\n#0 /tmp/tmpaomrd90_.php(10): min(Array)\n#1 /tmp/tmpaomrd90_.php(26): find_closest_elements(Array)\n#2 /tmp/tmpaomrd90_.php(30): candidate(Array)\n#3 /tmp/tmpaomrd90_.php(37): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = abs($min_value - $max_value);\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = abs($min_value - $numbers[$min_index]);\n    $max_value = abs($max_value - $numbers[$max_index]);\n    $min_value = min($min_value, $max_value);\n    $max_value = max($min_value, $max_value);\n    $min_index = $min_index - 1;\n    $max_index = $max_index + 1;\n    $min_value = abs($min_value - $numbers[$min_index]);\n    $max_value = abs($max_value - $numbers[$max_index]);\n    $min_value = min($min_value, $max_value);\n    $max_value = max($min_value, $max_value);\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = abs($min_value - $numbers[$min_index]);\n    $max_value = abs($max_value - $numbers[$max_index]);\n    $min_value = min($min_value, $max_value);\n    $max_value = max($min_value, $max_value);\n    $min_index = $min_index - 1;\n    $max_index = $max_index + 1;\n    $min_value = abs($min_value - $numbers[$min_index]);\n    $max_value = abs($max_value - $numbers[$max_index]);\n    $\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmp7l7sl06j.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = 9999999999999999;\n    $max = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_value_index = 0;\n    $max_value_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value_index = $min_index;\n    $max_value_index = $max_index;\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    while ($min_index < $max_index) {\n        $mid = $min_index + (($max_index - $min_index) / 2);\n        if ($numbers[$mid] > $min_value) {\n            $min_index = $mid + 1;\n        } else {\n            $max_index = $mid;\n        }\n    }\n    while ($max_index > $min_index) {\n        $mid = $max_index - (($max_index - $min_index) / 2);\n        if ($numbers[$mid] < $max_value) {\n            $max_index = $mid;\n        } else {\n            $min_index = $mid + 1;\n        }\n    }\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value_index = $min_index;\n    $max_value_index = $max_index;\n    $min_index = $min\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpkfl7eyby.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ( $i = 0; $i < $numbers.length; $i++ ) {\n        if ( $numbers[$i] < $min ) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ( $numbers[$i] > $max ) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpqthxc41r.php:13\nStack trace:\n#0 /tmp/tmpqthxc41r.php(27): find_closest_elements(Array)\n#1 /tmp/tmpqthxc41r.php(31): candidate(Array)\n#2 /tmp/tmpqthxc41r.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpqthxc41r.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min_diff = 9999999999999999;\n    $min_index = 0;\n    $min_value = 0;\n    $max_diff = 0;\n    $max_index = 0;\n    $max_value = 0;\n    foreach($numbers as $value) {\n        $diff = abs($value - $min_value);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $max_index;\n            $min_value = $max_value;\n        }\n        $diff = abs($value - $max_value);\n        if ($diff < $max_diff) {\n            $max_diff = $diff;\n            $max_index = $min_index;\n            $max_value = $min_value;\n        }\n    }\n    $min_index = array_flip($min_index);\n    $max_index = array_flip($max_index);\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpq6icj23t.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpq6icj23t.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpq6icj23t.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpq6icj23t.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpq6icj23t.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpq6icj23t.php on line 9\n\nFatal error: Uncaught TypeError: array_flip(): Argument #1 ($array) must be of type array, int given in /tmp/tmpq6icj23t.php:30\nStack trace:\n#0 /tmp/tmpq6icj23t.php(30): array_flip(0)\n#1 /tmp/tmpq6icj23t.php(36): find_closest_elements(Array)\n#2 /tmp/tmpq6icj23t.php(40): candidate(Array)\n#3 /tmp/tmpq6icj23t.php(47): test()\n#4 {main}\n  thrown in",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = $numbers[0];\n    $max_value = $numbers[0];\n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n            $min_value = $numbers[$i];\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n            $max_value = $numbers[$i];\n        }\n    }\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_9j2nu4l.php:35\nStack trace:\n#0 /tmp/tmp_9j2nu4l.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_9j2nu4l.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpfkafy41x.php:14\nStack trace:\n#0 /tmp/tmpfkafy41x.php(28): find_closest_elements(Array)\n#1 /tmp/tmpfkafy41x.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ( $i = 0; $i < $numbers.length; $i++ ) {\n        if ( $numbers[$i] < $min ) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ( $numbers[$i] > $max ) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpqthxc41r.php:13\nStack trace:\n#0 /tmp/tmpqthxc41r.php(27): find_closest_elements(Array)\n#1 /tmp/tmpqthxc41r.php(31): candidate(Array)\n#2 /tmp/tmpqthxc41r.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpqthxc41r.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value - $max_value;\n    $max_value = $max_value - $min_value;\n    $min_value = $min_value / 2;\n    $max_value = $max_value / 2;\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    $min_value = $min_value + $max_value;\n    $max_value = $max_value + $min_value;\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmr4qvztr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmr4qvztr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmr4qvztr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmr4qvztr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmr4qvztr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmr4qvztr.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmpmr4qvztr.php:10\nStack trace:\n#0 /tmp/tmpmr4qvztr.php(10): min(Array)\n#1 /tmp/tmpmr4qvztr.php(34): find_closest_elements(Array)\n#2 /tmp/tmpmr4qvztr.php(38): candidate(Array)\n#3 /tmp/tmpmr4qvztr.php(45): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min_diffnfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp1zen1_4p.php on line 11\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpka6n0dvv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min_diff = 999999999999999999;\n    $min_index = 0;\n    $min_value = 0;\n    $max_diff = 0;\n    $max_index = 0;\n    $max_value = 0;\n    foreach($numbers as $value) {\n        $diff = abs($value - $min_value);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $max_index;\n            $min_value = $max_value;\n        }\n        $diff = abs($value - $max_value);\n        if ($diff < $max_diff) {\n            $max_diff = $diff;\n            $max_index = $min_index;\n            $max_value = $min_value;\n        }\n    }\n    $min_index = array_flip($min_index);\n    $max_index = array_flip($max_index);\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpjkn0tj17.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpjkn0tj17.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpjkn0tj17.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpjkn0tj17.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpjkn0tj17.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpjkn0tj17.php on line 9\n\nFatal error: Uncaught TypeError: array_flip(): Argument #1 ($array) must be of type array, int given in /tmp/tmpjkn0tj17.php:30\nStack trace:\n#0 /tmp/tmpjkn0tj17.php(30): array_flip(0)\n#1 /tmp/tmpjkn0tj17.php(36): find_closest_elements(Array)\n#2 /tmp/tmpjkn0tj17.php(40): candidate(Array)\n#3 /tmp/tmpjkn0tj17.php(47): test()\n#4 {main}\n  thrown in",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min_index = 0;\n    $min_value = $numbers[0];\n    $max_index = 0;\n    $max_value = $numbers[0];\n    foreach($numbers as $value) {\n        if ($value < $min_value) {\n            $min_value = $value;\n            $min_index = $max_index;\n        }\n        if ($value > $max_value) {\n            $max_value = $value;\n            $max_index = $min_index;\n        }\n    }\n    return array($numbers[$min_index], $numbers[$max_index]);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1flptepx.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1flptepx.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1flptepx.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1flptepx.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1flptepx.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1flptepx.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmp1flptepx.php on line 11\n\nWarning: Undefined array key 0 in /tmp/tmp1flptepx.php on line 13\n\nWarning: Undefined array key 0 in /tmp/tmp1flptepx.php on line 24\n\nWarning: Undefined array key 0 in /tmp/tmp1flptepx.php on line 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1flptepx.php:32\nStac",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpsffeqb1t.php:13\nStack trace:\n#0 /tmp/tmpsffeqb1t.php(27): find_closest_elements(Array)\n#1 /tmp/tmpsffeqb1t.php(31): candidate(Array)\n#2 /tmp/tmpsffeqb1t.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpsffeqb1t.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpfkafy41x.php:14\nStack trace:\n#0 /tmp/tmpfkafy41x.php(28): find_closest_elements(Array)\n#1 /tmp/tmpfkafy41x.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpfkafy41x.php:14\nStack trace:\n#0 /tmp/tmpfkafy41x.php(28): find_closest_elements(Array)\n#1 /tmp/tmpfkafy41x.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value_index = $numbers.index($min_value);\n    $max_value_index = $numbers.index($max_value);\n    $min_value_index_diff = abs($min_value_index - $max_value_index);\n    $max_value_index_diff = abs($max_value_index - $min_value_index);\n    if ($min_value_index_diff > $max_value_index_diff) {\n        $temp = $min_value;\n        $min_value = $max_value;\n        $max_value = $temp;\n    }\n    $closest_pair = array($min_value, $max_value);\n    $closest_pair_index = $numbers.index($closest_pair[0]);\n    $closest_pair_index_diff = abs($closest_pair_index - $max_value_index);\n    $closest_pair_index_diff_diff = abs($closest_pair_index_diff - $min_value_index_diff);\n    if ($closest_pair_index_diff_diff > 0) {\n        $temp = $closest_pair[0];\n        $closest_pair[0] = $closest_pair[1];\n        $closest_pair[1] = $temp;\n    }\n    return $closest_pair;\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpc_23cgla.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpc_23cgla.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpc_23cgla.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpc_23cgla.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpc_23cgla.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpc_23cgla.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmpc_23cgla.php:10\nStack trace:\n#0 /tmp/tmpc_23cgla.php(10): min(Array)\n#1 /tmp/tmpc_23cgla.php(38): find_closest_elements(Array)\n#2 /tmp/tmpc_23cgla.php(42): candidate(Array)\n#3 /tmp/tmpc_23cgla.php(49): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers - $min;\n    $max_index = $numbers - $max;\n    $min_index = abs($min_index);\n    $max_index = abs($max_index);\n    $min_index = $min_index < $max_index ? $min_index : $max_index;\n    $max_index = $min_index > $max_index ? $min_index : $max_index;\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpe5f1aaga.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpe5f1aaga.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpe5f1aaga.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpe5f1aaga.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpe5f1aaga.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpe5f1aaga.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmpe5f1aaga.php:10\nStack trace:\n#0 /tmp/tmpe5f1aaga.php(10): min(Array)\n#1 /tmp/tmpe5f1aaga.php(22): find_closest_elements(Array)\n#2 /tmp/tmpe5f1aaga.php(26): candidate(Array)\n#3 /tmp/tmpe5f1aaga.php(33): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($numbers[$min_index], $numbers[$max_index]);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4qmk5q16.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4qmk5q16.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4qmk5q16.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4qmk5q16.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4qmk5q16.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4qmk5q16.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmp4qmk5q16.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmp4qmk5q16.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp4qmk5q16.php:14\nStack trace:\n#0 /tmp/tmp4qmk5q16.php(28): find_closest_elements(Array)\n#1 /tmp/tmp4qmk5q16.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min_diff = 9999999999999999;\n    $min_index = 0;\n    $min_value = 0;\n    $max_diff = 0;\n    $max_index = 0;\n    $max_value = 0;\n    $count = 0;\n    $index = 0;\n    $value = 0;\n    $diff = 0;\n    $result = array();\n    $result[0] = 0;\n    $result[1] = 0;\n    foreach($numbers as $number) {\n        $count++;\n        $index = $count - 1;\n        $value = $number;\n        $diff = abs($value - $result[0]);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $index;\n            $min_value = $value;\n        }\n        $diff = abs($value - $result[1]);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $index;\n            $min_value = $value;\n        }\n        $diff = abs($value - $result[0]);\n        if ($diff > $max_diff) {\n            $max_diff = $diff;\n            $max_index = $index;\n            $max_value = $value;\n        }\n        $diff = abs($value - $result[1]);\n        if ($diff > $max_diff) {\n            $max_diff = $diff;\n            $max_index = $index;\n            $max_value = $value;\n        }\n        $result[0] = $value;\n        $result[1] = $value;\n    }\n    $result[0] = $min_value;\n    $result[1] = $max_value;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_jlshjv8.php:63\nStack trace:\n#0 /tmp/tmp_jlshjv8.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp_jlshjv8.php on line 63\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpfkafy41x.php:14\nStack trace:\n#0 /tmp/tmpfkafy41x.php(28): find_closest_elements(Array)\n#1 /tmp/tmpfkafy41x.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value + ($max_value - $min_value) / 2;\n    $max_value = $max_value - ($max_value - $min_value) / 2;\n    $min_index = $min_index - 1;\n    $max_index = $max_index + 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value + ($max_value - $min_value) / 2;\n    $max_value = $max_value - ($max_value - $min_value) / 2;\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value + ($max_value - $min_value) / 2;\n    $max_value = $max_value - ($max_value - $min_value) / 2;\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value + ($max_value - $min_value) / 2;\n    \nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: Unclosed '{' on line 8 in /tmp/tmpnbvry5xt.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = 999999999999999999;\n    $max = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpcmg5wzf1.php on line 66\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value_index = $numbers.index($min_value);\n    $max_value_index = $numbers.index($max_value);\n    if ($min_value_index == $max_value_index) {\n        return array($min_value, $max_value);\n    }\n    $min_value_index = $min_value_index - 1;\n    $max_value_index = $max_value_index + 1;\n    if ($min_value_index < 0) {\n        $min_value_index = $numbers.length - 1;\n    }\n    if ($max_value_index >= $numbers.length) {\n        $max_value_index = 0;\n    }\n    return array($numbers[$min_value_index], $numbers[$max_value_index]);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp8y7f7qem.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp8y7f7qem.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp8y7f7qem.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp8y7f7qem.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp8y7f7qem.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp8y7f7qem.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmp8y7f7qem.php:10\nStack trace:\n#0 /tmp/tmp8y7f7qem.php(10): min(Array)\n#1 /tmp/tmp8y7f7qem.php(33): find_closest_elements(Array)\n#2 /tmp/tmp8y7f7qem.php(37): candidate(Array)\n#3 /tmp/tmp8y7f7qem.php(44): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = abs($min_value - $max_value);\n    $max_value = abs($max_value - $min_value);\n    $min_value = min($min_value, $max_value);\n    $max_value = max($min_value, $max_value);\n    $min_index = $min_index - 1;\n    $max_index = $max_index + 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = abs($min_value - $max_value);\n    $max_value = abs($max_value - $min_value);\n    $min_value = min($min_value, $max_value);\n    $max_value = max($min_value, $max_value);\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = abs($min_value - $max_value);\n    $max_value = abs($max_value - $min_value);\n    $min_value = min($min_value, $max_value);\n    $max_value = max($min_value, $max_value);\n    $min_index = $min_index - 1;\n    $max_index =\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpxk99p3xa.php on line 42\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = $numbers[0];\n    $max_value = $numbers[0];\n    $min_value_index = 0;\n    $max_value_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n        if ($numbers[$i] < $min_value) {\n            $min_value = $numbers[$i];\n            $min_value_index = $i;\n        }\n        if ($numbers[$i] > $max_value) {\n            $max_value = $numbers[$i];\n            $max_value_index = $i;\n        }\n    }\n    $min_index_value = $numbers[$min_index];\n    $max_index_value = $numbers[$max_index];\n    $min_index_value_index = $min_index;\n    $max_index_value_index = $max_index;\n    $min_index_value_index_value = $numbers[$min_index_value_index];\n    $max_index_value_index_value = $numbers[$max_index_value_index];\n    $min_index_value_index_value_index = $min_index_value_index;\n    $max_index_value_index_value_index = $max_index_value_index;\n    $min_index_value_index_value_index_value = $numbers[$min_index_value_index_value_index];\n    $max_index_value_index_value_index_value = $numbers[$max_index_value\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"]\" in /tmp/tmpm7jtyjkl.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    $min_index = $min_index + 1;\n    $max_index = $max_index + 1;\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpf7zhd7eg.php:13\nStack trace:\n#0 /tmp/tmpf7zhd7eg.php(29): find_closest_elements(Array)\n#1 /tmp/tmpf7zhd7eg.php(33): candidate(Array)\n#2 /tmp/tmpf7zhd7eg.php(40): test()\n#3 {main}\n  thrown in /tmp/tmpf7zhd7eg.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpfkafy41x.php:14\nStack trace:\n#0 /tmp/tmpfkafy41x.php(28): find_closest_elements(Array)\n#1 /tmp/tmpfkafy41x.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ( $i = 0; $i < $numbers.length; $i++ ) {\n        if ( $numbers[$i] < $min ) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ( $numbers[$i] > $max ) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppt7s0t9a.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppt7s0t9a.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppt7s0t9a.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppt7s0t9a.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppt7s0t9a.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppt7s0t9a.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmppt7s0t9a.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmppt7s0t9a.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmppt7s0t9a.php:14\nStack trace:\n#0 /tmp/tmppt7s0t9a.php(28): find_closest_elements(Array)\n#1 /tmp/tmppt7s0t9a.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min_index = 0;\n    $min_value = $numbers[0];\n    $max_index = 0;\n    $max_value = $numbers[0];\n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] < $min_value) {\n            $min_value = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max_value) {\n            $max_value = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min_index, $max_index);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpc3a_e747.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpc3a_e747.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpc3a_e747.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpc3a_e747.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpc3a_e747.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpc3a_e747.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpc3a_e747.php on line 11\n\nWarning: Undefined array key 0 in /tmp/tmpc3a_e747.php on line 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc3a_e747.php:32\nStack trace:\n#0 /tmp/tmpc3a_e747.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpc3a_e747.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($numbers[$min_index], $numbers[$max_index]);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4qmk5q16.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4qmk5q16.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4qmk5q16.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4qmk5q16.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4qmk5q16.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4qmk5q16.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmp4qmk5q16.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmp4qmk5q16.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp4qmk5q16.php:14\nStack trace:\n#0 /tmp/tmp4qmk5q16.php(28): find_closest_elements(Array)\n#1 /tmp/tmp4qmk5q16.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = 9999999999999999;\n    $max = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nParse error: Unclosed '{' on line 8 in /tmp/tmp6i0gi4v4.php on line 78\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ( $i = 0; $i < $numbers.length; $i++ ) {\n        if ( $numbers[$i] < $min ) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ( $numbers[$i] > $max ) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array( $min, $max );\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpe18n3va0.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpe18n3va0.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpe18n3va0.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpe18n3va0.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpe18n3va0.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpe18n3va0.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpe18n3va0.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpe18n3va0.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpe18n3va0.php:14\nStack trace:\n#0 /tmp/tmpe18n3va0.php(28): find_closest_elements(Array)\n#1 /tmp/tmpe18n3va0.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value_index = $numbers.index($min_value);\n    $max_value_index = $numbers.index($max_value);\n    $min_value_index_plus_one = $min_value_index + 1;\n    $max_value_index_minus_one = $max_value_index - 1;\n    $min_value_index_plus_one_index = $numbers.index($numbers[$min_value_index_plus_one]);\n    $max_value_index_minus_one_index = $numbers.index($numbers[$max_value_index_minus_one]);\n    $min_value_index_plus_one_index_plus_one = $numbers.index($numbers[$min_value_index_plus_one_index + 1]);\n    $max_value_index_minus_one_index_minus_one = $numbers.index($numbers[$max_value_index_minus_one_index - 1]);\n    $closest_min = $numbers[$min_value_index_plus_one_index_plus_one];\n    $closest_max = $numbers[$max_value_index_minus_one_index_minus_one];\n    $closest_min_index = $numbers.index($closest_min);\n    $closest_max_index = $numbers.index($closest_max);\n    $closest_min_index_plus_one = $closest_min_index + 1;\n    $closest_max_index_minus_one = $closest_max_index - 1;\n    $closest_min_index_plus_one_index = $numbers.\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpwnxrrg2_.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value - $max_value;\n    $max_value = $max_value - $min_value;\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    $min_value = $min_value + $max_value;\n    $max_value = $max_value + $min_value;\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp2u56gou6.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp2u56gou6.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp2u56gou6.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp2u56gou6.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp2u56gou6.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp2u56gou6.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmp2u56gou6.php:10\nStack trace:\n#0 /tmp/tmp2u56gou6.php(10): min(Array)\n#1 /tmp/tmp2u56gou6.php(34): find_closest_elements(Array)\n#2 /tmp/tmp2u56gou6.php(38): candidate(Array)\n#3 /tmp/tmp2u56gou6.php(45): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = 9999999999999999;\n    $min_index = 0;\n    $max = 0;\n    $max_index = 0;\n    $min_value = 9999999999999999;\n    $max_value = 0;\n    $min_value_index = 0;\n    $max_value_index = 0;\n    for ($i = 0; $i < count($numbers); $i++) {\n        $value = $numbers[$i];\n        if ($value < $min) {\n            $min = $value;\n            $min_index = $i;\n        }\n        if ($value > $max) {\n            $max = $value;\n            $max_index = $i;\n        }\n        if ($value < $min_value) {\n            $min_value = $value;\n            $min_value_index = $i;\n        }\n        if ($value > $max_value) {\n            $max_value = $value;\n            $max_value_index = $i;\n        }\n    }\n    $min_value = $numbers[$min_value_index];\n    $max_value = $numbers[$max_value_index];\n    $min_index = $min_value_index;\n    $max_index = $max_value_index;\n    $min_value_index = $min_index;\n    $max_value_index = $max_index;\n    $min_value = $numbers[$min_value_index];\n    $max_value = $numbers[$max_value_index];\n    $min_index = $min_value_index;\n    $max_index = $max_value_index;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpni4ao7eu.php:56\nStack trace:\n#0 /tmp/tmpni4ao7eu.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpni4ao7eu.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = 9999999999999999;\n    $min_index = 0;\n    $max = 0;\n    $max_index = 0;\n    $min_value = 9999999999999999;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < count($numbers); $i++) {\n        $value = $numbers[$i];\n        if ($value < $min) {\n            $min = $value;\n            $min_index = $i;\n        }\n        if ($value > $max) {\n            $max = $value;\n            $max_index = $i;\n        }\n        if ($value < $min_value) {\n            $min_value = $value;\n            $min_index = $i;\n        }\n        if ($value > $max_value) {\n            $max_value = $value;\n            $max_index = $i;\n        }\n    }\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index;\n    $max_index = $max_index;\n    $min_value = $min_value;\n    $max_value = $max_value;\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9ioc03k.php:50\nStack trace:\n#0 /tmp/tmpv9ioc03k.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpv9ioc03k.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $closest_min = $min_value;\n    $closest_max = $max_value;\n    if ($min_value > $max_value) {\n        $closest_min = $max_value;\n        $closest_max = $min_value;\n    }\n    $closest_min_index = $numbers.index($closest_min);\n    $closest_max_index = $numbers.index($closest_max);\n    $closest_min_value = $numbers[$closest_min_index];\n    $closest_max_value = $numbers[$closest_max_index];\n    $closest_min_index = $closest_min_index < $closest_max_index ? $closest_min_index : $closest_max_index;\n    $closest_max_index = $closest_min_index > $closest_max_index ? $closest_min_index : $closest_max_index;\n    $closest_min_value = $closest_min_value < $closest_max_value ? $closest_min_value : $closest_max_value;\n    $closest_max_value = $closest_min_value > $closest_max_value ? $closest_min_value : $closest_max_value;\n    $closest_min = $numbers[$closest_min_index];\n    $closest_max = $numbers[$closest_max_index];\n    $closest_min_index = $numbers.index($cl\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpfwyvxcsj.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value - $max_value;\n    $max_value = $max_value - $min_value;\n    $min_value = $min_value / 2;\n    $max_value = $max_value / 2;\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    $min_value = $min_value + $max_value;\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmps51l00mm.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmps51l00mm.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmps51l00mm.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmps51l00mm.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmps51l00mm.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmps51l00mm.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmps51l00mm.php:10\nStack trace:\n#0 /tmp/tmps51l00mm.php(10): min(Array)\n#1 /tmp/tmps51l00mm.php(33): find_closest_elements(Array)\n#2 /tmp/tmps51l00mm.php(37): candidate(Array)\n#3 /tmp/tmps51l00mm.php(44): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value_index = $numbers.index($min_value);\n    $max_value_index = $numbers.index($max_value);\n    $min_value_index_opposite = $numbers.index($max_value);\n    $max_value_index_opposite = $numbers.index($min_value);\n    $min_value_opposite = $numbers[$min_value_index_opposite];\n    $max_value_opposite = $numbers[$max_value_index_opposite];\n    $min_value_opposite_index = $numbers.index($min_value_opposite);\n    $max_value_opposite_index = $numbers.index($max_value_opposite);\n    $min_value_opposite_index_opposite = $numbers.index($max_value_opposite_index);\n    $max_value_opposite_index_opposite = $numbers.index($min_value_opposite_index_opposite);\n    $min_value_opposite_opposite = $numbers[$min_value_opposite_index_opposite];\n    $max_value_opposite_opposite = $numbers[$max_value_opposite_index_opposite];\n    $min_value_opposite_opposite_index = $numbers.index($min_value_opposite_opposite);\n    $max_value_opposite_opposite_index = $numbers.index($max_value_opposite_opposite);\n    $min_value_opposite_opposite_index_opposite = $numbers.index($min_value_opposite_opposite_index);\n    $max_value_opposite_opposite_index_opp\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp9chpr4fm.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ( $i = 0; $i < $numbers.length; $i++ ) {\n        if ( $numbers[$i] < $min ) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ( $numbers[$i] > $max ) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppt7s0t9a.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppt7s0t9a.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppt7s0t9a.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppt7s0t9a.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppt7s0t9a.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppt7s0t9a.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmppt7s0t9a.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmppt7s0t9a.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmppt7s0t9a.php:14\nStack trace:\n#0 /tmp/tmppt7s0t9a.php(28): find_closest_elements(Array)\n#1 /tmp/tmppt7s0t9a.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpka6n0dvv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value + ($max_value - $min_value) / 2;\n    $max_value = $max_value - ($max_value - $min_value) / 2;\n    $min_index = $min_index - 1;\n    $max_index = $max_index + 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value - ($max_value - $min_value) / 2;\n    $max_value = $max_value + ($max_value - $min_value) / 2;\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value - ($max_value - $min_value) / 2;\n    $max_value = $max_value + ($max_value - $min_value) / 2;\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value - ($max_value - $min_value) / 2;\n    \nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nParse error: Unclosed '{' on line 8 in /tmp/tmphqn5_hl6.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min_diff = 999999999999999999;\n    $min_index = 0;\n    $min_value = 0;\n    $max_diff = 0;\n    $max_index = 0;\n    $max_value = 0;\n    foreach($numbers as $value) {\n        $diff = abs($value - $min_value);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $max_index;\n            $min_value = $max_value;\n        }\n        $diff = abs($value - $max_value);\n        if ($diff < $max_diff) {\n            $max_diff = $diff;\n            $max_index = $min_index;\n            $max_value = $min_value;\n        }\n    }\n    $min_index = array_flip($min_index);\n    $max_index = array_flip($max_index);\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpjkn0tj17.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpjkn0tj17.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpjkn0tj17.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpjkn0tj17.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpjkn0tj17.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpjkn0tj17.php on line 9\n\nFatal error: Uncaught TypeError: array_flip(): Argument #1 ($array) must be of type array, int given in /tmp/tmpjkn0tj17.php:30\nStack trace:\n#0 /tmp/tmpjkn0tj17.php(30): array_flip(0)\n#1 /tmp/tmpjkn0tj17.php(36): find_closest_elements(Array)\n#2 /tmp/tmpjkn0tj17.php(40): candidate(Array)\n#3 /tmp/tmpjkn0tj17.php(47): test()\n#4 {main}\n  thrown in",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpka6n0dvv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = abs($min_value - $max_value);\n    $max_value = abs($max_value - $min_value);\n    $min_value = min($min_value, $max_value);\n    $max_value = max($min_value, $max_value);\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmprq_n3rui.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmprq_n3rui.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmprq_n3rui.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmprq_n3rui.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmprq_n3rui.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmprq_n3rui.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmprq_n3rui.php:10\nStack trace:\n#0 /tmp/tmprq_n3rui.php(10): min(Array)\n#1 /tmp/tmprq_n3rui.php(30): find_closest_elements(Array)\n#2 /tmp/tmprq_n3rui.php(34): candidate(Array)\n#3 /tmp/tmprq_n3rui.php(41): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min_diff = 999999999999999999;\n    $min_index_1 = 0;\n    $min_index_2 = 0;\n    foreach ($numbers as $number) {\n        $diff = abs($number - $numbers[0]);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_index_1 = 0;\n            $min_index_2 = 0;\n        }\n        foreach ($numbers as $number2) {\n            $diff = abs($number - $number2);\n            if ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_index_1 = $number2;\n                $min_index_2 = $number;\n            }\n        }\n    }\n    return array($min_index_1, $min_index_2);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6yrf9pmt.php:36\nStack trace:\n#0 /tmp/tmp6yrf9pmt.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp6yrf9pmt.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpfkafy41x.php:14\nStack trace:\n#0 /tmp/tmpfkafy41x.php(28): find_closest_elements(Array)\n#1 /tmp/tmpfkafy41x.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min_index = 0;\n    $min_value = $numbers[0];\n    $max_index = 0;\n    $max_value = $numbers[0];\n    foreach ($numbers as $value) {\n        if ($value < $min_value) {\n            $min_value = $value;\n            $min_index = $max_index;\n        }\n        if ($value > $max_value) {\n            $max_value = $value;\n            $max_index = $min_index;\n        }\n    }\n    $min_value = array_flip($numbers)[$min_index];\n    $max_value = array_flip($numbers)[$max_index];\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpaxgim6dj.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpaxgim6dj.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpaxgim6dj.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpaxgim6dj.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpaxgim6dj.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpaxgim6dj.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpaxgim6dj.php on line 11\n\nWarning: Undefined array key 0 in /tmp/tmpaxgim6dj.php on line 13\n\nWarning: Undefined array key 0 in /tmp/tmpaxgim6dj.php on line 24\n\nWarning: Undefined array key 0 in /tmp/tmpaxgim6dj.php on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaxgim6dj.php:34\nStac",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    foreach($numbers as $value) {\n        if ($value < $min) {\n            $min = $value;\n            $min_index = $numbers.index($value);\n        }\n        if ($value > $max) {\n            $max = $value;\n            $max_index = $numbers.index($value);\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp97uysoss.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp97uysoss.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp97uysoss.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp97uysoss.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp97uysoss.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp97uysoss.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmp97uysoss.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmp97uysoss.php on line 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp97uysoss.php:32\nStack trace:\n#0 /tmp/tmp97uysoss.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp97uysoss.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    foreach ($numbers as $number) {\n        if ($number < $min) {\n            $min = $number;\n            $min_index = $numbers_index;\n        }\n        if ($number > $max) {\n            $max = $number;\n            $max_index = $numbers_index;\n        }\n        $numbers_index++;\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp_lbw91us.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp_lbw91us.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp_lbw91us.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp_lbw91us.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp_lbw91us.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp_lbw91us.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmp_lbw91us.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmp_lbw91us.php on line 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_lbw91us.php:33\nStack trace:\n#0 /tmp/tmp_lbw91us.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_lbw91us.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpka6n0dvv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value - $max_value;\n    $max_value = $max_value - $min_value;\n    $min_value = $min_value / 2;\n    $max_value = $max_value / 2;\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    $min_value = round($min_value, 2);\n    $max_value = round($max\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpqghcr231.php on line 44\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value_index = $numbers.index($min_value);\n    $max_value_index = $numbers.index($max_value);\n    $min_value_index_opposite = $numbers.index($max_value);\n    $max_value_index_opposite = $numbers.index($min_value);\n    $min_value_opposite = $numbers[$min_value_index_opposite];\n    $max_value_opposite = $numbers[$max_value_index_opposite];\n    $min_value_opposite_index = $numbers.index($min_value_opposite);\n    $max_value_opposite_index = $numbers.index($max_value_opposite);\n    $min_value_opposite_index_opposite = $numbers.index($max_value_opposite_index);\n    $max_value_opposite_index_opposite = $numbers.index($min_value_opposite_index_opposite);\n    $min_value_opposite_opposite = $numbers[$min_value_opposite_index_opposite];\n    $max_value_opposite_opposite = $numbers[$max_value_opposite_index_opposite];\n    $min_value_opposite_opposite_index = $numbers.index($min_value_opposite_opposite);\n    $max_value_opposite_opposite_index = $numbers.index($max_value_opposite_opposite);\n    $min_value_opposite_opposite_index_opposite = $numbers.index($min_value_opposite_opposite_index);\n    $max_value_opposite_opposite_index_opp\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp9chpr4fm.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ( $i = 0; $i < $numbers.length; $i++ ) {\n        if ( $numbers[$i] < $min ) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ( $numbers[$i] > $max ) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpqthxc41r.php:13\nStack trace:\n#0 /tmp/tmpqthxc41r.php(27): find_closest_elements(Array)\n#1 /tmp/tmpqthxc41r.php(31): candidate(Array)\n#2 /tmp/tmpqthxc41r.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpqthxc41r.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $closest_min = $min_value;\n    $closest_max = $max_value;\n    $closest_min_index = $min_index;\n    $closest_max_index = $max_index;\n    $closest_min_value = $min_value;\n    $closest_max_value = $max_value;\n    $closest_min_index = $min_index;\n    $closest_max_index = $max_index;\n    $closest_min_value = $min_value;\n    $closest_max_value = $max_value;\n    $closest_min_index = $min_index;\n    $closest_max_index = $max_index;\n    $closest_min_value = $min_value;\n    $closest_max_value = $max_value;\n    $closest_min_index = $min_index;\n    $closest_max_index = $max_index;\n    $closest_min_value = $min_value;\n    $closest_max_value = $max_value;\n    $closest_min_index = $min_index;\n    $closest_max_index = $max_index;\n    $closest_min_value = $min_value;\n    $closest_max_value = $max_value;\n    $closest_min_index = $min_index;\n    $closest_max_index = $max_index;\n    $closest_min_value = $min_value;\n    $closest_max_value = $max_value;\n    $clos\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpvn8zq93d.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpfkafy41x.php:14\nStack trace:\n#0 /tmp/tmpfkafy41x.php(28): find_closest_elements(Array)\n#1 /tmp/tmpfkafy41x.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ( $i = 0; $i < $numbers.length; $i++ ) {\n        if ( $numbers[$i] < $min ) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ( $numbers[$i] > $max ) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpqthxc41r.php:13\nStack trace:\n#0 /tmp/tmpqthxc41r.php(27): find_closest_elements(Array)\n#1 /tmp/tmpqthxc41r.php(31): candidate(Array)\n#2 /tmp/tmpqthxc41r.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpqthxc41r.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min_diff = 9999999999999999;\n    $min_index = 0;\n    $min_value = 0;\n    $max_diff = 0;\n    $max_index = 0;\n    $max_value = 0;\n    foreach($numbers as $value) {\n        $diff = abs($value - $min_value);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $max_index;\n            $min_value = $max_value;\n        }\n        $diff = abs($value - $max_value);\n        if ($diff < $max_diff) {\n            $max_diff = $diff;\n            $max_index = $min_index;\n            $max_value = $min_value;\n        }\n    }\n    return array($numbers[$min_index], $numbers[$max_index]);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpa0kszrmj.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpa0kszrmj.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpa0kszrmj.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpa0kszrmj.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpa0kszrmj.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpa0kszrmj.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpa0kszrmj.php on line 30\n\nWarning: Undefined array key 0 in /tmp/tmpa0kszrmj.php on line 30\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa0kszrmj.php:38\nStack trace:\n#0 /tmp/tmpa0kszrmj.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpa0kszrmj.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min_diff = 999999999999999999;\n    $min_index = 0;\n    $min_value = 0;\n    $max_diff = 0;\n    $max_index = 0;\n    $max_value = 0;\n    $diff;\n    $index;\n    $value;\n    for ($index = 0; $index < count($numbers); $index++) {\n        $value = $numbers[$index];\n        $diff = abs($value - $min_value);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $index;\n            $min_value = $value;\n        }\n        $diff = abs($value - $max_value);\n        if ($diff < $max_diff) {\n            $max_diff = $diff;\n            $max_index = $index;\n            $max_value = $value;\n        }\n    }\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphi6xvfx5.php:41\nStack trace:\n#0 /tmp/tmphi6xvfx5.php(48): test()\n#1 {main}\n  thrown in /tmp/tmphi6xvfx5.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers - $min;\n    $max_index = $numbers - $max;\n    $min_index = abs($min_index);\n    $max_index = abs($max_index);\n    $min_index = $min_index < $max_index ? $min_index : $max_index;\n    $max_index = $min_index > $max_index ? $min_index : $max_index;\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpe5f1aaga.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpe5f1aaga.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpe5f1aaga.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpe5f1aaga.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpe5f1aaga.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpe5f1aaga.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmpe5f1aaga.php:10\nStack trace:\n#0 /tmp/tmpe5f1aaga.php(10): min(Array)\n#1 /tmp/tmpe5f1aaga.php(22): find_closest_elements(Array)\n#2 /tmp/tmpe5f1aaga.php(26): candidate(Array)\n#3 /tmp/tmpe5f1aaga.php(33): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value - $max_value;\n    $max_value = $max_value - $min_value;\n    $min_value = $min_value / 2;\n    $max_value = $max_value / 2;\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    $min_value = $min_value + $max_value;\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmps51l00mm.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmps51l00mm.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmps51l00mm.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmps51l00mm.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmps51l00mm.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmps51l00mm.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmps51l00mm.php:10\nStack trace:\n#0 /tmp/tmps51l00mm.php(10): min(Array)\n#1 /tmp/tmps51l00mm.php(33): find_closest_elements(Array)\n#2 /tmp/tmps51l00mm.php(37): candidate(Array)\n#3 /tmp/tmps51l00mm.php(44): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value_index = $numbers.index($min_value);\n    $max_value_index = $numbers.index($max_value);\n    $min_value_index_diff = abs($min_value_index - $max_value_index);\n    $max_value_index_diff = abs($max_value_index - $min_value_index);\n    if ($min_value_index_diff < $max_value_index_diff) {\n        return array($min, $max);\n    } else {\n        return array($max, $min);\n    }\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpnxk573fq.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpnxk573fq.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpnxk573fq.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpnxk573fq.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpnxk573fq.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpnxk573fq.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmpnxk573fq.php:10\nStack trace:\n#0 /tmp/tmpnxk573fq.php(10): min(Array)\n#1 /tmp/tmpnxk573fq.php(28): find_closest_elements(Array)\n#2 /tmp/tmpnxk573fq.php(32): candidate(Array)\n#3 /tmp/tmpnxk573fq.php(39): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = 999999999999999999;\n    $min_index = 0;\n    $max = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_value_index = 0;\n    $max_value_index = 0;\n    $min_value_value = 0;\n    $max_value_value = 0;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n    $m = 0;\n    $n = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x = 0;\n    $y = 0;\n    $z = 0;\n    $a = 0;\n    $b = 0;\n    $c = 0;\n    $d = 0;\n    $e = 0;\n    $f = 0;\n    $g = 0;\n    $h = 0;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n    $m = 0;\n    $n = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x = 0;\n    $y = 0;\n    $z = 0;\n    $a = 0;\n    $b = 0;\n    $c = 0;\n    $d = 0;\n    $e = 0;\n    $f = 0;\n    $g = 0;\n    $h = 0;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n    $m = 0;\n    $n = 0;\n    $o = 0;\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nParse error: Unclosed '{' on line 8 in /tmp/tmp38inlk0u.php on line 91\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value - $max_value;\n    $max_value = $max_value - $min_value;\n    $min_value = $min_value / 2;\n    $max_value = $max_value / 2;\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    $min_value = $min_value + $max_value;\n    $max_value = $max_value + $min_value;\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmr4qvztr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmr4qvztr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmr4qvztr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmr4qvztr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmr4qvztr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmr4qvztr.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmpmr4qvztr.php:10\nStack trace:\n#0 /tmp/tmpmr4qvztr.php(10): min(Array)\n#1 /tmp/tmpmr4qvztr.php(34): find_closest_elements(Array)\n#2 /tmp/tmpmr4qvztr.php(38): candidate(Array)\n#3 /tmp/tmpmr4qvztr.php(45): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value + ($max_value - $min_value) / 2;\n    $max_value = $max_value - ($max_value - $min_value) / 2;\n    $min_index = $min_index - 1;\n    $max_index = $max_index + 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value - ($max_value - $min_value) / 2;\n    $max_value = $max_value + ($max_value - $min_value) / 2;\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value - ($max_value - $min_value) / 2;\n    $max_value = $max_value + ($max_value - $min_value) / 2;\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value - ($max_value - $min_value) / 2;\n    \nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nParse error: Unclosed '{' on line 8 in /tmp/tmphqn5_hl6.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = $numbers[0];\n    $max_value = $numbers[0];\n    for ( $i = 0; $i < $numbers.length; $i++ ) {\n        if ( $numbers[$i] < $min ) {\n            $min = $numbers[$i];\n            $min_index = $i;\n            $min_value = $numbers[$i];\n        }\n        if ( $numbers[$i] > $max ) {\n            $max = $numbers[$i];\n            $max_index = $i;\n            $max_value = $numbers[$i];\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpx56dna8g.php:15\nStack trace:\n#0 /tmp/tmpx56dna8g.php(31): find_closest_elements(Array)\n#1 /tmp/tmpx56dna8g.php(35): candidate(Array)\n#2 /tmp/tmpx56dna8g.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpx56dna8g.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value + ($max_value - $min_value) / 2;\n    $max_value = $max_value - ($max_value - $min_value) / 2;\n    $min_index = $min_index - 1;\n    $max_index = $max_index + 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value + ($max_value - $min_value) / 2;\n    $max_value = $max_value - ($max_value - $min_value) / 2;\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value + ($max_value - $min_value) / 2;\n    $max_value = $max_value - ($max_value - $min_value) / 2;\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value + ($max_value - $min_value) / 2;\n    \nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: Unclosed '{' on line 8 in /tmp/tmpnbvry5xt.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min_diff = 999999999999999999;\n    $min_index = 0;\n    $min_value = 0;\n    $max_diff = 0;\n    $max_index = 0;\n    $max_value = 0;\n    foreach ($numbers as $value) {\n        $diff = abs($value - $min_value);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $max_index;\n            $min_value = $max_value;\n        }\n        $diff = abs($value - $max_value);\n        if ($diff < $max_diff) {\n            $max_diff = $diff;\n            $max_index = $min_index;\n            $max_value = $min_value;\n        }\n    }\n    $min_index = array_flip($min_index);\n    $max_index = array_flip($max_index);\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp_5w486rr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp_5w486rr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp_5w486rr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp_5w486rr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp_5w486rr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp_5w486rr.php on line 9\n\nFatal error: Uncaught TypeError: array_flip(): Argument #1 ($array) must be of type array, int given in /tmp/tmp_5w486rr.php:30\nStack trace:\n#0 /tmp/tmp_5w486rr.php(30): array_flip(0)\n#1 /tmp/tmp_5w486rr.php(36): find_closest_elements(Array)\n#2 /tmp/tmp_5w486rr.php(40): candidate(Array)\n#3 /tmp/tmp_5w486rr.php(47): test()\n#4 {main}\n  thrown in",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpka6n0dvv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpv5878thk.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpv5878thk.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpv5878thk.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpv5878thk.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpv5878thk.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpv5878thk.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpv5878thk.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpv5878thk.php on line 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv5878thk.php:32\nStack trace:\n#0 /tmp/tmpv5878thk.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpv5878thk.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpka6n0dvv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ( $i = 0; $i < $numbers.length; $i++ ) {\n        if ( $numbers[$i] < $min ) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ( $numbers[$i] > $max ) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppt7s0t9a.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppt7s0t9a.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppt7s0t9a.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppt7s0t9a.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppt7s0t9a.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppt7s0t9a.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmppt7s0t9a.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmppt7s0t9a.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmppt7s0t9a.php:14\nStack trace:\n#0 /tmp/tmppt7s0t9a.php(28): find_closest_elements(Array)\n#1 /tmp/tmppt7s0t9a.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ( $i = 0; $i < $numbers.length; $i++ ) {\n        if ( $numbers[$i] < $min ) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ( $numbers[$i] > $max ) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    $min_index_2 = $min_index;\n    $max_index_2 = $max_index;\n    $min_index_3 = $min_index;\n    $max_index_3 = $max_index;\n    $min_index_4 = $min_index;\n    $max_index_4 = $max_index;\n    $min_index_5 = $min_index;\n    $max_index_5 = $max_index;\n    $min_index_6 = $min_index;\n    $max_index_6 = $max_index;\n    $min_index_7 = $min_index;\n    $max_index_7 = $max_index;\n    $min_index_8 = $min_index;\n    $max_index_8 = $max_index;\n    $min_index_9 = $min_index;\n    $max_index_9 = $max_index;\n    $min_index_10 = $min_index;\n    $max_index_10 = $max_index;\n    $min_index_11 = $min_index;\n    $max_index_11 = $max_index;\n    $min_index_12 = $min_index;\n    $max_index_12 = $max_index;\n    $min_index_13 = $min_index;\n    $max_index_13 = $max_index;\n    $min_index_14 = $min_index;\n    $max_index_14 = $max_index;\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nParse error: Unclosed '{' on line 8 in /tmp/tmporxqaov8.php on line 62\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpfkafy41x.php:14\nStack trace:\n#0 /tmp/tmpfkafy41x.php(28): find_closest_elements(Array)\n#1 /tmp/tmpfkafy41x.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = 9999999999999999;\n    $max = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 0;\n    $max_value = 0;\n    $min_value_index = 0;\n    $max_value_index = 0;\n    $min_value_value = 0;\n    $max_value_value = 0;\n    $min_value_value_index = 0;\n    $max_value_value_index = 0;\n    $min_value_value_value = 0;\n    $max_value_value_value = 0;\n    $min_value_value_value_index = 0;\n    $max_value_value_value_index = 0;\n    $min_value_value_value_value = 0;\n    $max_value_value_value_value = 0;\n    $min_value_value_value_value_index = 0;\n    $max_value_value_value_value_index = 0;\n    $min_value_value_value_value_value = 0;\n    $max_value_value_value_value_value = 0;\n    $min_value_value_value_value_value_index = 0;\n    $max_value_value_value_value_value_index = 0;\n    $min_value_value_value_value_value_value = 0;\n    $max_value_value_value_value_value_value = 0;\n    $min_value_value_value_value_value_value_index = 0;\n    $max_value_value_value_value_value_value_index = 0;\n    $min_value_value_value_value_value_value_value = 0;\n    $max_value_value_value_value_value_value_value = 0;\n    $min_value_value_value_value_value_value_value_index = 0;\n    $max_value_value_value_value_value_value_value_index = 0;\n    $min_value_value_value_value_value_value_value_value = 0;\n    $max_value\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmple8_9vjf.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = abs($min_value - $max_value);\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = abs($min_value - $max_value);\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = abs($min_value - $max_value);\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = abs($min_value - $max_value);\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = abs($min_value - $max_value);\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = abs($min_value - $max_value);\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = abs($min_value - $max_value);\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = abs($min_value - $max_value);\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = abs($min_value - $max_value);\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = abs($min_value - $max_value);\n    $min_index = $max_index;\n    $max_index = $min\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpe2m20ux0.php on line 46\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_index = $min_index % 2 ? $min_index : $min_index + 1;\n    $max_index = $max_index % 2 ? $max_index : $max_index - 1;\n    $min_value = $min_value + ($max_value - $min_value) / 2;\n    $max_value = $max_value - ($max_value - $min_value) / 2;\n    $numbers[$min_index] = $min_value;\n    $numbers[$max_index] = $max_value;\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmprxqyvjt0.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmprxqyvjt0.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmprxqyvjt0.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmprxqyvjt0.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmprxqyvjt0.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmprxqyvjt0.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmprxqyvjt0.php:10\nStack trace:\n#0 /tmp/tmprxqyvjt0.php(10): min(Array)\n#1 /tmp/tmprxqyvjt0.php(28): find_closest_elements(Array)\n#2 /tmp/tmprxqyvjt0.php(32): candidate(Array)\n#3 /tmp/tmprxqyvjt0.php(39): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min_diffnfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpbn5_d6j2.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $minnfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpgb4tjgg9.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpsffeqb1t.php:13\nStack trace:\n#0 /tmp/tmpsffeqb1t.php(27): find_closest_elements(Array)\n#1 /tmp/tmpsffeqb1t.php(31): candidate(Array)\n#2 /tmp/tmpsffeqb1t.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpsffeqb1t.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $minnfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpgb4tjgg9.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    $min_index = array_flip($min_index);\n    $max_index = array_flip($max_index);\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmp1_r4nhyb.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmp1_r4nhyb.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp1_r4nhyb.php:14\nStack trace:\n#0 /tmp/tmp1_r4nhyb.php(30): find_closest_elements(Array)\n#1 /tmp/tmp1_r4nhyb.php(34): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $closest_min = $min_value;\n    $closest_max = $max_value;\n    $closest_min_index = $min_index;\n    $closest_max_index = $max_index;\n    $closest_min_value = $min_value;\n    $closest_max_value = $max_value;\n    $closest_min_index = $min_index;\n    $closest_max_index = $max_index;\n    $closest_min_value = $min_value;\n    $closest_max_value = $max_value;\n    $closest_min_index = $min_index;\n    $closest_max_index = $max_index;\n    $closest_min_value = $min_value;\n    $closest_max_value = $max_value;\n    $closest_min_index = $min_index;\n    $closest_max_index = $max_index;\n    $closest_min_value = $min_value;\n    $closest_max_value = $max_value;\n    $closest_min_index = $min_index;\n    $closest_max_index = $max_index;\n    $closest_min_value = $min_value;\n    $closest_max_value = $max_value;\n    $closest_min_index = $min_index;\n    $closest_max_index = $max_index;\n    $closest_min_value = $min_value;\n    $closest_max_value = $max_value;\n    $clos\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpvn8zq93d.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $closest_min = $min_value;\n    $closest_max = $max_value;\n    $closest_min_index = $min_index;\n    $closest_max_index = $max_index;\n    $closest_min_value = $min_value;\n    $closest_max_value = $max_value;\n    $closest_min_index = $min_index;\n    $closest_max_index = $max_index;\n    $closest_min_value = $min_value;\n    $closest_max_value = $max_value;\n    $closest_min_index = $min_index;\n    $closest_max_index = $max_index;\n    $closest_min_value = $min_value;\n    $closest_max_value = $max_value;\n    $closest_min_index = $min_index;\n    $closest_max_index = $max_index;\n    $closest_min_value = $min_value;\n    $closest_max_value = $max_value;\n    $closest_min_index = $min_index;\n    $closest_max_index = $max_index;\n    $closest_min_value = $min_value;\n    $closest_max_value = $max_value;\n    $closest_min_index = $min_index;\n    $closest_max_index = $max_index;\n    $closest_min_value = $min_value;\n    $closest_max_value = $max_value;\n    $clos\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpvn8zq93d.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpfkafy41x.php:14\nStack trace:\n#0 /tmp/tmpfkafy41x.php(28): find_closest_elements(Array)\n#1 /tmp/tmpfkafy41x.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index_next = $min_index + 1;\n    $max_index_next = $max_index - 1;\n    $min_value_next = $numbers[$min_index_next];\n    $max_value_next = $numbers[$max_index_next];\n    $min_value_prev = $numbers[$min_index_next - 1];\n    $max_value_prev = $numbers[$max_index_next + 1];\n    $min_value_prev_next = $numbers[$min_index_next - 2];\n    $max_value_prev_next = $numbers[$max_index_next + 2];\n    $min_value_next_prev = $numbers[$min_index_next + 1];\n    $max_value_next_prev = $numbers[$max_index_next - 1];\n    $min_value_next_next = $numbers[$min_index_next + 2];\n    $max_value_next_next = $numbers[$max_index_next - 2];\n    $min_value_prev_prev = $numbers[$min_index_next - 3];\n    $max_value_prev_prev = $numbers[$max_index_next + 3];\n    $min_value_next_next = $numbers[$min_index_next + 2];\n    $max_value_next_next = $numbers[$max_index_next - 2];\n    $min_value_prev_next = $numbers[$min_index_next - 1];\n    $max_value_prev_next = $numbers[$max_index_next + 1];\n    $min_value_prev_next_next =\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpofm0abx3.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ( $i = 0; $i < $numbers.length; $i++ ) {\n        if ( $numbers[$i] < $min ) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ( $numbers[$i] > $max ) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppt7s0t9a.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppt7s0t9a.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppt7s0t9a.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppt7s0t9a.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppt7s0t9a.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmppt7s0t9a.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmppt7s0t9a.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmppt7s0t9a.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmppt7s0t9a.php:14\nStack trace:\n#0 /tmp/tmppt7s0t9a.php(28): find_closest_elements(Array)\n#1 /tmp/tmppt7s0t9a.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value + ($max_value - $min_value) / 2;\n    $max_value = $max_value - ($max_value - $min_value) / 2;\n    $min_index = $min_index - 1;\n    $max_index = $max_index + 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value - ($max_value - $min_value) / 2;\n    $max_value = $max_value + ($max_value - $min_value) / 2;\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value - ($max_value - $min_value) / 2;\n    $max_value = $max_value + ($max_value - $min_value) / 2;\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value - ($max_value - $min_value) / 2;\n    \nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nParse error: Unclosed '{' on line 8 in /tmp/tmphqn5_hl6.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value - ($min_value - $max_value);\n    $max_value = $max_value - ($max_value - $min_value);\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpxq33vb6m.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpxq33vb6m.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpxq33vb6m.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpxq33vb6m.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpxq33vb6m.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpxq33vb6m.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmpxq33vb6m.php:10\nStack trace:\n#0 /tmp/tmpxq33vb6m.php(10): min(Array)\n#1 /tmp/tmpxq33vb6m.php(28): find_closest_elements(Array)\n#2 /tmp/tmpxq33vb6m.php(32): candidate(Array)\n#3 /tmp/tmpxq33vb6m.php(39): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value - $max_value;\n    $max_value = $max_value - $min_value;\n    $min_value = $min_value / 2;\n    $max_value = $max_value / 2;\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp0qnel0n8.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp0qnel0n8.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp0qnel0n8.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp0qnel0n8.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp0qnel0n8.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp0qnel0n8.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmp0qnel0n8.php:10\nStack trace:\n#0 /tmp/tmp0qnel0n8.php(10): min(Array)\n#1 /tmp/tmp0qnel0n8.php(32): find_closest_elements(Array)\n#2 /tmp/tmp0qnel0n8.php(36): candidate(Array)\n#3 /tmp/tmp0qnel0n8.php(43): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpfkafy41x.php:14\nStack trace:\n#0 /tmp/tmpfkafy41x.php(28): find_closest_elements(Array)\n#1 /tmp/tmpfkafy41x.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    foreach($numbers as $value) {\n        if ($value < $min) {\n            $min = $value;\n            $min_index = $numbers.index($value);\n        }\n        if ($value > $max) {\n            $max = $value;\n            $max_index = $numbers.index($value);\n        }\n    }\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_index = $min_index < $max_index ? $min_index : $max_index;\n    $max_index = $min_index > $max_index ? $min_index : $max_index;\n    return array($numbers[$min_index], $numbers[$max_index]);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmptcsxc34o.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmptcsxc34o.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmptcsxc34o.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmptcsxc34o.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmptcsxc34o.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmptcsxc34o.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmptcsxc34o.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmptcsxc34o.php on line 11\n\nFatal error: Uncaught Error: Call to undefined function index() in /tmp/tmptcsxc34o.php:24\nStack trace:\n#0 /tmp/tmptcsxc34o.php(32): find_closest_elements(Array)\n#1 /tmp/tmptcsxc34o.php(36): candidate(Array)\n#2 ",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    $min_index = array_flip($min_index);\n    $max_index = array_flip($max_index);\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmp1_r4nhyb.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmp1_r4nhyb.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp1_r4nhyb.php:14\nStack trace:\n#0 /tmp/tmp1_r4nhyb.php(30): find_closest_elements(Array)\n#1 /tmp/tmp1_r4nhyb.php(34): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    $min_index = $min_index + 1;\n    $max_index = $max_index + 1;\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4jxtd2_6.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4jxtd2_6.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4jxtd2_6.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4jxtd2_6.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4jxtd2_6.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp4jxtd2_6.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmp4jxtd2_6.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmp4jxtd2_6.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp4jxtd2_6.php:14\nStack trace:\n#0 /tmp/tmp4jxtd2_6.php(30): find_closest_elements(Array)\n#1 /tmp/tmp4jxtd2_6.php(34): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value_index = $numbers.index($min_value);\n    $max_value_index = $numbers.index($max_value);\n    if ($min_value_index == $max_value_index) {\n        return array($min, $max);\n    }\n    $min_value_index_plus_one = $min_value_index + 1;\n    $max_value_index_minus_one = $max_value_index - 1;\n    $min_value_index_minus_one = $min_value_index - 1;\n    $max_value_index_plus_one = $max_value_index + 1;\n    $min_value_index_plus_two = $min_value_index + 2;\n    $max_value_index_minus_two = $max_value_index - 2;\n    $min_value_index_minus_two = $min_value_index - 2;\n    $max_value_index_plus_three = $max_value_index + 3;\n    $min_value_index_plus_four = $min_value_index + 4;\n    $max_value_index_minus_four = $max_value_index - 4;\n    $min_value_index_minus_four = $min_value_index - 4;\n    $max_value_index_plus_five = $max_value_index + 5;\n    $min_value_index_plus_six = $min_value_index + 6;\n    $max_value_index_minus_six = $max_value_index - 6;\n    $min_value_index_minus_six = $min_value_index - 6;\n    $max_value_index_plus_seven = $max_value_\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpurtv13mi.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpfkafy41x.php:14\nStack trace:\n#0 /tmp/tmpfkafy41x.php(28): find_closest_elements(Array)\n#1 /tmp/tmpfkafy41x.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min_index = 0;\n    $min_value = $numbers[0];\n    $max_index = 0;\n    $max_value = $numbers[0];\n    foreach ($numbers as $value) {\n        if ($value < $min_value) {\n            $min_value = $value;\n            $min_index = $max_index;\n        }\n        if ($value > $max_value) {\n            $max_value = $value;\n            $max_index = $min_index;\n        }\n    }\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $max_index;\n    $max_index = 0;\n    foreach ($numbers as $value) {\n        if ($value < $min_value) {\n            $min_value = $value;\n            $min_index = $max_index;\n        }\n        if ($value > $max_value) {\n            $max_value = $value;\n            $max_index = $min_index;\n        }\n    }\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpuxhnjwup.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpuxhnjwup.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpuxhnjwup.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpuxhnjwup.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpuxhnjwup.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpuxhnjwup.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpuxhnjwup.php on line 11\n\nWarning: Undefined array key 0 in /tmp/tmpuxhnjwup.php on line 13\n\nWarning: Undefined array key 0 in /tmp/tmpuxhnjwup.php on line 24\n\nWarning: Undefined array key 0 in /tmp/tmpuxhnjwup.php on line 25\n\nWarning: Undefined array key 0 in /tmp/tmpuxhnjwup.php on line 38\n\nWarning: U",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpka6n0dvv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    foreach ($numbers as $value) {\n        if ($value < $min) {\n            $min = $value;\n            $min_index = $numbers_index;\n        }\n        if ($value > $max) {\n            $max = $value;\n            $max_index = $numbers_index;\n        }\n    }\n    $min_index = $numbers_index - $min_index;\n    $max_index = $numbers_index - $max_index;\n    $min_index = abs($min_index);\n    $max_index = abs($max_index);\n    if ($min_index == $max_index) {\n        return array($min, $max);\n    }\n    if ($min_index < $max_index) {\n        return array($min, $numbers[$min_index]);\n    }\n    return array($numbers[$max_index], $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp12eepckh.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp12eepckh.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp12eepckh.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp12eepckh.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp12eepckh.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp12eepckh.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmp12eepckh.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmp12eepckh.php on line 11\n\nWarning: Undefined variable $numbers_index in /tmp/tmp12eepckh.php on line 24\n\nWarning: Undefined variable $numbers_index in /tmp/tmp12eepckh.php on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"]\" in /tmp/tmpewho8fnz.php on line 44\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < count($numbers); $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzrlo2mmr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzrlo2mmr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzrlo2mmr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzrlo2mmr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzrlo2mmr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzrlo2mmr.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpzrlo2mmr.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpzrlo2mmr.php on line 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzrlo2mmr.php:32\nStack trace:\n#0 /tmp/tmpzrlo2mmr.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpzrlo2mmr.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min_index = 0;\n    $min_value = $numbers[0];\n    $max_index = 0;\n    $max_value = $numbers[0];\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min_value) {\n            $min_value = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max_value) {\n            $max_value = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($numbers[$min_index], $numbers[$max_index]);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp2w4b9zze.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp2w4b9zze.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp2w4b9zze.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp2w4b9zze.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp2w4b9zze.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp2w4b9zze.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmp2w4b9zze.php on line 11\n\nWarning: Undefined array key 0 in /tmp/tmp2w4b9zze.php on line 13\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp2w4b9zze.php:14\nStack trace:\n#0 /tmp/tmp2w4b9zze.php(28): find_closest_elements(Array)\n#1 /tmp/tmp2w4b9zze.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpfkafy41x.php:14\nStack trace:\n#0 /tmp/tmpfkafy41x.php(28): find_closest_elements(Array)\n#1 /tmp/tmpfkafy41x.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpka6n0dvv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min_diff = 999999999999999999;\n    $min_index = 0;\n    $min_value = 0;\n    $max_diff = 0;\n    $max_index = 0;\n    $max_value = 0;\n    foreach ($numbers as $value) {\n        $diff = abs($value - $min_value);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $max_index;\n            $min_value = $max_value;\n        }\n        $diff = abs($value - $max_value);\n        if ($diff < $max_diff) {\n            $max_diff = $diff;\n            $max_index = $min_index;\n            $max_value = $min_value;\n        }\n    }\n    $min_index = array_flip($min_index);\n    $max_index = array_flip($max_index);\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp_5w486rr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp_5w486rr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp_5w486rr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp_5w486rr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp_5w486rr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp_5w486rr.php on line 9\n\nFatal error: Uncaught TypeError: array_flip(): Argument #1 ($array) must be of type array, int given in /tmp/tmp_5w486rr.php:30\nStack trace:\n#0 /tmp/tmp_5w486rr.php(30): array_flip(0)\n#1 /tmp/tmp_5w486rr.php(36): find_closest_elements(Array)\n#2 /tmp/tmp_5w486rr.php(40): candidate(Array)\n#3 /tmp/tmp_5w486rr.php(47): test()\n#4 {main}\n  thrown in",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $minnfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpgb4tjgg9.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min_diff = 9999999999999999;\n    $min_index = 0;\n    $min_value = 0;\n    $max_diff = 0;\n    $max_index = 0;\n    $max_value = 0;\n    $i = 0;\n    foreach ($numbers as $value) {\n        $diff = abs($value - $min_value);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $i;\n            $min_value = $value;\n        }\n        $diff = abs($value - $max_value);\n        if ($diff < $max_diff) {\n            $max_diff = $diff;\n            $max_index = $i;\n            $max_value = $value;\n        }\n        $i++;\n    }\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0nakeq6f.php:39\nStack trace:\n#0 /tmp/tmp0nakeq6f.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp0nakeq6f.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min_diff = 999999999999999999;\n    $min_index = 0;\n    $min_value = 0;\n    $max_diff = 0;\n    $max_index = 0;\n    $max_value = 0;\n    foreach($numbers as $value) {\n        $diff = abs($value - $min_value);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $max_index;\n            $min_value = $max_value;\n        }\n        $diff = abs($value - $max_value);\n        if ($diff < $max_diff) {\n            $max_diff = $diff;\n            $max_index = $min_index;\n            $max_value = $min_value;\n        }\n    }\n    $min_index = array_flip($min_index);\n    $max_index = array_flip($max_index);\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpjkn0tj17.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpjkn0tj17.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpjkn0tj17.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpjkn0tj17.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpjkn0tj17.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpjkn0tj17.php on line 9\n\nFatal error: Uncaught TypeError: array_flip(): Argument #1 ($array) must be of type array, int given in /tmp/tmpjkn0tj17.php:30\nStack trace:\n#0 /tmp/tmpjkn0tj17.php(30): array_flip(0)\n#1 /tmp/tmpjkn0tj17.php(36): find_closest_elements(Array)\n#2 /tmp/tmpjkn0tj17.php(40): candidate(Array)\n#3 /tmp/tmpjkn0tj17.php(47): test()\n#4 {main}\n  thrown in",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $closest_min = $min_value;\n    $closest_max = $max_value;\n    $closest_min_index = $min_index;\n    $closest_max_index = $max_index;\n    if ($max_value - $min_value > 0.00001) {\n        $closest_min = $max_value;\n        $closest_max = $min_value;\n        $closest_min_index = $max_index;\n        $closest_max_index = $min_index;\n    }\n    $closest_min_index = $closest_min_index + 1;\n    $closest_max_index = $closest_max_index - 1;\n    $closest_min_index = $closest_min_index < 0 ? $numbers.length - 1 : $closest_min_index;\n    $closest_max_index = $closest_max_index < 0 ? $numbers.length - 1 : $closest_max_index;\n    $closest_min = $numbers[$closest_min_index];\n    $closest_max = $numbers[$closest_max_index];\n    return array($closest_min, $closest_max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpwwxv6jtk.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpwwxv6jtk.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpwwxv6jtk.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpwwxv6jtk.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpwwxv6jtk.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpwwxv6jtk.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmpwwxv6jtk.php:10\nStack trace:\n#0 /tmp/tmpwwxv6jtk.php(10): min(Array)\n#1 /tmp/tmpwwxv6jtk.php(36): find_closest_elements(Array)\n#2 /tmp/tmpwwxv6jtk.php(40): candidate(Array)\n#3 /tmp/tmpwwxv6jtk.php(47): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($numbers[$min_index], $numbers[$max_index]);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp4dwle2i7.php:13\nStack trace:\n#0 /tmp/tmp4dwle2i7.php(27): find_closest_elements(Array)\n#1 /tmp/tmp4dwle2i7.php(31): candidate(Array)\n#2 /tmp/tmp4dwle2i7.php(38): test()\n#3 {main}\n  thrown in /tmp/tmp4dwle2i7.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value_index = $numbers.index($min_value);\n    $max_value_index = $numbers.index($max_value);\n    $min_value_index_plus_one = $min_value_index + 1;\n    $max_value_index_plus_one = $max_value_index + 1;\n    $min_value_index_minus_one = $min_value_index - 1;\n    $max_value_index_minus_one = $max_value_index - 1;\n    $min_value_index_plus_two = $min_value_index + 2;\n    $max_value_index_plus_two = $max_value_index + 2;\n    $min_value_index_minus_two = $min_value_index - 2;\n    $max_value_index_minus_two = $max_value_index - 2;\n    $min_value_index_plus_three = $min_value_index + 3;\n    $max_value_index_plus_three = $max_value_index + 3;\n    $min_value_index_minus_three = $min_value_index - 3;\n    $max_value_index_minus_three = $max_value_index - 3;\n    $min_value_index_plus_four = $min_value_index + 4;\n    $max_value_index_plus_four = $max_value_index + 4;\n    $min_value_index_minus_four = $min_value_index - 4;\n    $max_value_index_minus_four = $max_value_index - 4;\n    $min_value_index_plus_five = $min_value_index + 5;\n    $max_\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpu60r3ai1.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value_index = $numbers.index($min_value);\n    $max_value_index = $numbers.index($max_value);\n    $min_value_index_opposite = $numbers.index($max_value);\n    $max_value_index_opposite = $numbers.index($min_value);\n    $min_value_opposite = $numbers[$min_value_index_opposite];\n    $max_value_opposite = $numbers[$max_value_index_opposite];\n    $min_value_opposite_index = $numbers.index($min_value_opposite);\n    $max_value_opposite_index = $numbers.index($max_value_opposite);\n    $min_value_opposite_index_opposite = $numbers.index($max_value_opposite_index);\n    $max_value_opposite_index_opposite = $numbers.index($min_value_opposite_index_opposite);\n    $min_value_opposite_opposite = $numbers[$min_value_opposite_index_opposite];\n    $max_value_opposite_opposite = $numbers[$max_value_opposite_index_opposite];\n    $min_value_opposite_opposite_index = $numbers.index($min_value_opposite_opposite);\n    $max_value_opposite_opposite_index = $numbers.index($max_value_opposite_opposite);\n    $min_value_opposite_opposite_index_opposite = $numbers.index($min_value_opposite_opposite_index);\n    $max_value_opposite_opposite_index_opp\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp9chpr4fm.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min_diff = 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp1zen1_4p.php on line 11\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ( $i = 0; $i < $numbers.length; $i++ ) {\n        if ( $numbers[$i] < $min ) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ( $numbers[$i] > $max ) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpqthxc41r.php:13\nStack trace:\n#0 /tmp/tmpqthxc41r.php(27): find_closest_elements(Array)\n#1 /tmp/tmpqthxc41r.php(31): candidate(Array)\n#2 /tmp/tmpqthxc41r.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpqthxc41r.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value - ($min_value - $max_value);\n    $max_value = $max_value - ($max_value - $min_value);\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpxq33vb6m.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpxq33vb6m.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpxq33vb6m.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpxq33vb6m.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpxq33vb6m.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpxq33vb6m.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmpxq33vb6m.php:10\nStack trace:\n#0 /tmp/tmpxq33vb6m.php(10): min(Array)\n#1 /tmp/tmpxq33vb6m.php(28): find_closest_elements(Array)\n#2 /tmp/tmpxq33vb6m.php(32): candidate(Array)\n#3 /tmp/tmpxq33vb6m.php(39): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    $min_index = array_flip($min_index);\n    $max_index = array_flip($max_index);\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmp1_r4nhyb.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmp1_r4nhyb.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp1_r4nhyb.php:14\nStack trace:\n#0 /tmp/tmp1_r4nhyb.php(30): find_closest_elements(Array)\n#1 /tmp/tmp1_r4nhyb.php(34): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    foreach($numbers as $number) {\n        if ($number < $min) {\n            $min = $number;\n            $min_index = $numbers.index($number);\n        }\n        if ($number > $max) {\n            $max = $number;\n            $max_index = $numbers.index($number);\n        }\n    }\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_index = $min_index < $max_index ? $min_index : $max_index;\n    $max_index = $min_index > $max_index ? $min_index : $max_index;\n    return array($numbers[$min_index], $numbers[$max_index]);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1cu1jjgt.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1cu1jjgt.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1cu1jjgt.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1cu1jjgt.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1cu1jjgt.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1cu1jjgt.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmp1cu1jjgt.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmp1cu1jjgt.php on line 11\n\nFatal error: Uncaught Error: Call to undefined function index() in /tmp/tmp1cu1jjgt.php:24\nStack trace:\n#0 /tmp/tmp1cu1jjgt.php(32): find_closest_elements(Array)\n#1 /tmp/tmp1cu1jjgt.php(36): candidate(Array)\n#2 ",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value - $max_value;\n    $max_value = $max_value - $min_value;\n    $min_value = $min_value / 2;\n    $max_value = $max_value / 2;\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    $closest_pair = array($min_value, $max_value);\n    return $closest_pair;\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmplz959rps.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmplz959rps.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmplz959rps.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmplz959rps.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmplz959rps.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmplz959rps.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmplz959rps.php:10\nStack trace:\n#0 /tmp/tmplz959rps.php(10): min(Array)\n#1 /tmp/tmplz959rps.php(31): find_closest_elements(Array)\n#2 /tmp/tmplz959rps.php(35): candidate(Array)\n#3 /tmp/tmplz959rps.php(42): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = 9999999999999999;\n    $max = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 9999999999999999;\n    $max_value = 0;\n    $min_value_index = 0;\n    $max_value_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        $value = $numbers[$i];\n        if ($value < $min) {\n            $min = $value;\n            $min_index = $i;\n        }\n        if ($value > $max) {\n            $max = $value;\n            $max_index = $i;\n        }\n        if ($value < $min_value) {\n            $min_value = $value;\n            $min_value_index = $i;\n        }\n        if ($value > $max_value) {\n            $max_value = $value;\n            $max_value_index = $i;\n        }\n    }\n    $min_value = $numbers[$min_value_index];\n    $max_value = $numbers[$max_value_index];\n    $min_index = $min_value_index;\n    $max_index = $max_value_index;\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpzhfj6e24.php:17\nStack trace:\n#0 /tmp/tmpzhfj6e24.php(44): find_closest_elements(Array)\n#1 /tmp/tmpzhfj6e24.php(48): candidate(Array)\n#2 /tmp/tmpzhfj6e24.php(55): test()\n#3 {main}\n  thrown in /tmp/tmpzhfj6e24.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min_diff = 999999999999999999;\n    $min_index = 0;\n    $min_value = 0;\n    $max_diff = 0;\n    $max_index = 0;\n    $max_value = 0;\n    foreach($numbers as $value) {\n        $diff = abs($value - $min_value);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $max_index;\n            $min_value = $max_value;\n        }\n        $diff = abs($value - $max_value);\n        if ($diff < $max_diff) {\n            $max_diff = $diff;\n            $max_index = $min_index;\n            $max_value = $min_value;\n        }\n    }\n    $min_index = array_flip($min_index);\n    $max_index = array_flip($max_index);\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpjkn0tj17.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpjkn0tj17.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpjkn0tj17.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpjkn0tj17.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpjkn0tj17.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpjkn0tj17.php on line 9\n\nFatal error: Uncaught TypeError: array_flip(): Argument #1 ($array) must be of type array, int given in /tmp/tmpjkn0tj17.php:30\nStack trace:\n#0 /tmp/tmpjkn0tj17.php(30): array_flip(0)\n#1 /tmp/tmpjkn0tj17.php(36): find_closest_elements(Array)\n#2 /tmp/tmpjkn0tj17.php(40): candidate(Array)\n#3 /tmp/tmpjkn0tj17.php(47): test()\n#4 {main}\n  thrown in",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min_diff = 9999999999999999;\n    $min_index = 0;\n    $min_value = 0;\n    $max_diff = 0;\n    $max_index = 0;\n    $max_value = 0;\n    $diff = 0;\n    $index = 0;\n    $value = 0;\n    foreach ($numbers as $number) {\n        $diff = abs($number - $min_value);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $index;\n            $min_value = $number;\n        }\n        $diff = abs($number - $max_value);\n        if ($diff < $max_diff) {\n            $max_diff = $diff;\n            $max_index = $index;\n            $max_value = $number;\n        }\n        $index++;\n    }\n    $min_diff = abs($min_value - $max_value);\n    if ($min_diff < $max_diff) {\n        return array($min_value, $max_value);\n    } else {\n        return array($min_value, $min_value);\n    }\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6o2iwqm5.php:46\nStack trace:\n#0 /tmp/tmp6o2iwqm5.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp6o2iwqm5.php on line 46\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $minnfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpgb4tjgg9.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value_index = $numbers.index($min_value);\n    $max_value_index = $numbers.index($max_value);\n    $min_value_index_opposite = $min_value_index + 1;\n    $max_value_index_opposite = $max_value_index - 1;\n    if ($min_value_index_opposite < 0) {\n        $min_value_index_opposite = $numbers.length - 1;\n    }\n    if ($max_value_index_opposite < 0) {\n        $max_value_index_opposite = $numbers.length - 1;\n    }\n    $min_value_opposite = $numbers[$min_value_index_opposite];\n    $max_value_opposite = $numbers[$max_value_index_opposite];\n    $min_value_opposite_index = $numbers.index($min_value_opposite);\n    $max_value_opposite_index = $numbers.index($max_value_opposite);\n    $min_value_opposite_index_opposite = $min_value_opposite_index + 1;\n    $max_value_opposite_index_opposite = $max_value_opposite_index - 1;\n    if ($min_value_opposite_index_opposite < 0) {\n        $min_value_opposite_index_opposite = $numbers.length - 1;\n    }\n    if ($max_value_opposite_index_opposite < 0) {\n        $max_value_opposite_index_opposite = $numbers.length - 1;\n    }\n    $min_value_opposite_opposite = $numbers[\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmphfty_0qy.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min_diff = 999999999999999999;\n    $min_index = 0;\n    $min_value = 0;\n    $max_diff = 0;\n    $max_index = 0;\n    $max_value = 0;\n    foreach ($numbers as $value) {\n        $diff = abs($value - $min_value);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $max_index;\n            $min_value = $max_value;\n        }\n        $diff = abs($value - $max_value);\n        if ($diff < $max_diff) {\n            $max_diff = $diff;\n            $max_index = $min_index;\n            $max_value = $min_value;\n        }\n    }\n    $min_index = array_flip($min_index);\n    $max_index = array_flip($max_index);\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp_5w486rr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp_5w486rr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp_5w486rr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp_5w486rr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp_5w486rr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp_5w486rr.php on line 9\n\nFatal error: Uncaught TypeError: array_flip(): Argument #1 ($array) must be of type array, int given in /tmp/tmp_5w486rr.php:30\nStack trace:\n#0 /tmp/tmp_5w486rr.php(30): array_flip(0)\n#1 /tmp/tmp_5w486rr.php(36): find_closest_elements(Array)\n#2 /tmp/tmp_5w486rr.php(40): candidate(Array)\n#3 /tmp/tmp_5w486rr.php(47): test()\n#4 {main}\n  thrown in",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $closest_min = $min_value;\n    $closest_max = $max_value;\n    $closest_min_index = $min_index;\n    $closest_max_index = $max_index;\n    $closest_min_value = $min_value;\n    $closest_max_value = $max_value;\n    $closest_min_index = $min_index;\n    $closest_max_index = $max_index;\n    $closest_min_value = $min_value;\n    $closest_max_value = $max_value;\n    $closest_min_index = $min_index;\n    $closest_max_index = $max_index;\n    $closest_min_value = $min_value;\n    $closest_max_value = $max_value;\n    $closest_min_index = $min_index;\n    $closest_max_index = $max_index;\n    $closest_min_value = $min_value;\n    $closest_max_value = $max_value;\n    $closest_min_index = $min_index;\n    $closest_max_index = $max_index;\n    $closest_min_value = $min_value;\n    $closest_max_value = $max_value;\n    $closest_min_index = $min_index;\n    $closest_max_index = $max_index;\n    $closest_min_value = $min_value;\n    $closest_max_value = $max_value;\n    $clos\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpvn8zq93d.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    foreach($numbers as $number) {\n        if ($number < $min) {\n            $min = $number;\n            $min_index = $numbers.index($number);\n        }\n        if ($number > $max) {\n            $max = $number;\n            $max_index = $numbers.index($number);\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpxf_z8a28.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpxf_z8a28.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpxf_z8a28.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpxf_z8a28.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpxf_z8a28.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpxf_z8a28.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpxf_z8a28.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpxf_z8a28.php on line 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxf_z8a28.php:32\nStack trace:\n#0 /tmp/tmpxf_z8a28.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpxf_z8a28.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpka6n0dvv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    $min_index = array_flip($min_index);\n    $max_index = array_flip($max_index);\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1_r4nhyb.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmp1_r4nhyb.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmp1_r4nhyb.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp1_r4nhyb.php:14\nStack trace:\n#0 /tmp/tmp1_r4nhyb.php(30): find_closest_elements(Array)\n#1 /tmp/tmp1_r4nhyb.php(34): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    foreach ($numbers as $value) {\n        if ($value < $min) {\n            $min = $value;\n            $min_index = $numbers.index($value);\n        }\n        if ($value > $max) {\n            $max = $value;\n            $max_index = $numbers.index($value);\n        }\n    }\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_index = $min_index - 1;\n    $max_index = $max_index + 1;\n    $min_index = $min_index < 0 ? 0 : $min_index;\n    $max_index = $max_index > $numbers.length - 1 ? $numbers.length - 1 : $max_index;\n    return array($numbers[$min_index], $numbers[$max_index]);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmptnxn6b1u.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmptnxn6b1u.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmptnxn6b1u.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmptnxn6b1u.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmptnxn6b1u.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmptnxn6b1u.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmptnxn6b1u.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmptnxn6b1u.php on line 11\n\nFatal error: Uncaught Error: Call to undefined function index() in /tmp/tmptnxn6b1u.php:24\nStack trace:\n#0 /tmp/tmptnxn6b1u.php(34): find_closest_elements(Array)\n#1 /tmp/tmptnxn6b1u.php(38): candidate(Array)\n#2 ",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = 9999999999999999;\n    $min_index = 0;\n    $max = 0;\n    $max_index = 0;\n    $min_value = 9999999999999999;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 9999999999999999;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 9999999999999999;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 9999999999999999;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 9999999999999999;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 9999999999999999;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 9999999999999999;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 9999999999999999;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 9999999999999999;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 9999999999999999;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 9999999999999999;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = 9999999999999999;\n    $max_value = 0;\n    $min_index = 0;\n    $max_index\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpo_40mx4_.php on line 61\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value_index = $numbers.index($min_value);\n    $max_value_index = $numbers.index($max_value);\n    if ($min_value_index == $max_value_index) {\n        return array($min_value, $max_value);\n    }\n    $diff = abs($max_value - $min_value);\n    $diff_index = $numbers.index($diff);\n    if ($diff_index == $min_index || $diff_index == $max_index) {\n        return array($min_value, $max_value);\n    }\n    $diff_value = $numbers[$diff_index];\n    $diff_value_index = $numbers.index($diff_value);\n    if ($diff_value_index == $min_index || $diff_value_index == $max_index) {\n        return array($min_value, $max_value);\n    }\n    $diff_value_index_2 = $numbers.index($diff_value_index);\n    if ($diff_value_index_2 == $min_index || $diff_value_index_2 == $max_index) {\n        return array($min_value, $max_value);\n    }\n    $diff_value_2 = $numbers[$diff_value_index_2];\n    $diff_value_2_index = $numbers.index($diff_value_2);\n    if ($diff_value_2_index == $min_index || $diff_value_2_index == $max_index) {\n        return array($min_value, $max_value);\n    }\n    $diff_value_2_index_2 = $numbers.index($diff_value_2_index\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpm61_sa8h.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpfkafy41x.php:14\nStack trace:\n#0 /tmp/tmpfkafy41x.php(28): find_closest_elements(Array)\n#1 /tmp/tmpfkafy41x.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    foreach($numbers as $number) {\n        if ($number < $min) {\n            $min = $number;\n        }\n        if ($number > $max) {\n            $max = $number;\n        }\n    }\n    $min_index = 0;\n    $max_index = 0;\n    foreach($numbers as $number) {\n        if ($number == $min) {\n            $min_index = $max_index;\n        }\n        if ($number == $max) {\n            $max_index = $min_index;\n        }\n    }\n    $min_index = array_flip($min_index);\n    $max_index = array_flip($max_index);\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp0g_1zmsw.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp0g_1zmsw.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp0g_1zmsw.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp0g_1zmsw.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp0g_1zmsw.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp0g_1zmsw.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmp0g_1zmsw.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmp0g_1zmsw.php on line 11\n\nFatal error: Uncaught TypeError: array_flip(): Argument #1 ($array) must be of type array, int given in /tmp/tmp0g_1zmsw.php:30\nStack trace:\n#0 /tmp/tmp0g_1zmsw.php(30): array_flip(0)\n#1 /tmp/tmp0g_1zmsw.php(36)",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpka6n0dvv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max_value;\n    $max_value = $min_value;\n    $min_index = $max_index;\n    $max_index = $min_index;\n    $min_value = $max\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpka6n0dvv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ( $i = 0; $i < $numbers.length; $i++ ) {\n        if ( $numbers[$i] < $min ) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ( $numbers[$i] > $max ) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    $min_index = $min_index + 1;\n    $max_index = $max_index + 1;\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmjtu9sly.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmjtu9sly.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmjtu9sly.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmjtu9sly.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmjtu9sly.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmjtu9sly.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpmjtu9sly.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpmjtu9sly.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpmjtu9sly.php:14\nStack trace:\n#0 /tmp/tmpmjtu9sly.php(30): find_closest_elements(Array)\n#1 /tmp/tmpmjtu9sly.php(34): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $minnfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpgb4tjgg9.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpsffeqb1t.php:13\nStack trace:\n#0 /tmp/tmpsffeqb1t.php(27): find_closest_elements(Array)\n#1 /tmp/tmpsffeqb1t.php(31): candidate(Array)\n#2 /tmp/tmpsffeqb1t.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpsffeqb1t.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpfkafy41x.php:14\nStack trace:\n#0 /tmp/tmpfkafy41x.php(28): find_closest_elements(Array)\n#1 /tmp/tmpfkafy41x.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value_index = $numbers.index($min_value);\n    $max_value_index = $numbers.index($max_value);\n    $min_value_index_opposite = $max_value_index - $min_value_index;\n    $max_value_index_opposite = $min_value_index - $max_value_index;\n    $min_value_opposite = $numbers[$min_value_index_opposite];\n    $max_value_opposite = $numbers[$max_value_index_opposite];\n    $min_value_opposite_index = $numbers.index($min_value_opposite);\n    $max_value_opposite_index = $numbers.index($max_value_opposite);\n    $min_value_opposite_index_opposite = $max_value_opposite_index - $min_value_opposite_index;\n    $max_value_opposite_index_opposite = $min_value_opposite_index - $max_value_opposite_index;\n    $min_value_opposite_opposite = $numbers[$min_value_opposite_index_opposite];\n    $max_value_opposite_opposite = $numbers[$max_value_opposite_index_opposite];\n    $min_value_opposite_opposite_index = $numbers.index($min_value_opposite_opposite);\n    $max_value_opposite_opposite_index = $numbers.index($max_value_opposite_opposite);\n    $min_value_opposite_opposite_index_opposite = $max_value_opposite_opposite_index - $min_value_opp\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp7htvgxyy.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    foreach($numbers as $number) {\n        if ($number < $min) {\n            $min = $number;\n            $min_index = $numbers_index;\n        }\n        if ($number > $max) {\n            $max = $number;\n            $max_index = $numbers_index;\n        }\n    }\n    $min_index = $numbers_index - $min_index;\n    $max_index = $numbers_index - $max_index;\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpwtga20tj.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpwtga20tj.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpwtga20tj.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpwtga20tj.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpwtga20tj.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpwtga20tj.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpwtga20tj.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpwtga20tj.php on line 11\n\nWarning: Undefined variable $numbers_index in /tmp/tmpwtga20tj.php on line 24\n\nWarning: Undefined variable $numbers_index in /tmp/tmpwtga20tj.php on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value_index = $numbers.index($min_value);\n    $max_value_index = $numbers.index($max_value);\n    $min_value_index_plus_one = $min_value_index + 1;\n    $max_value_index_minus_one = $max_value_index - 1;\n    $min_value_index_plus_two = $min_value_index + 2;\n    $max_value_index_minus_two = $max_value_index - 2;\n    $min_value_index_minus_one = $min_value_index - 1;\n    $max_value_index_plus_one = $max_value_index + 1;\n    $min_value_index_plus_three = $min_value_index + 3;\n    $max_value_index_minus_three = $max_value_index - 3;\n    $min_value_index_minus_two = $min_value_index - 2;\n    $max_value_index_plus_two = $max_value_index + 2;\n    $min_value_index_minus_four = $min_value_index - 4;\n    $max_value_index_plus_four = $max_value_index + 4;\n    $min_value_index_minus_five = $min_value_index - 5;\n    $max_value_index_plus_five = $max_value_index + 5;\n    $min_value_index_minus_six = $min_value_index - 6;\n    $max_value_index_plus_six = $max_value_index + 6;\n    $min_value_index_minus_seven = $min_value_index - 7;\n    $max_\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpfi60mtz9.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpfkafy41x.php:14\nStack trace:\n#0 /tmp/tmpfkafy41x.php(28): find_closest_elements(Array)\n#1 /tmp/tmpfkafy41x.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index_next = $min_index + 1;\n    $max_index_next = $max_index - 1;\n    $min_next = $numbers[$min_index_next];\n    $max_next = $numbers[$max_index_next];\n    $min_next_value = $numbers[$min_index_next];\n    $max_next_value = $numbers[$max_index_next];\n    $min_next_index = $numbers.index($min_next);\n    $max_next_index = $numbers.index($max_next);\n    $min_next_index_next = $min_next_index + 1;\n    $max_next_index_next = $max_next_index - 1;\n    $min_next_next = $numbers[$min_next_index_next];\n    $max_next_next = $numbers[$max_next_index_next];\n    $min_next_next_value = $numbers[$min_next_index_next];\n    $max_next_next_value = $numbers[$max_next_index_next];\n    $min_next_next_index = $numbers.index($min_next_next);\n    $max_next_next_index = $numbers.index($max_next_next);\n    $min_next_next_index_next = $min_next_next_index + 1;\n    $max_next_next_index_next = $max_next_next_index - 1;\n    $min_next_next_next = $numbers[$min_next_next_index_next];\n    $max_next_next_next = $numbers[$max_next\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"]\" in /tmp/tmps_o8wuhi.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpfkafy41x.php:14\nStack trace:\n#0 /tmp/tmpfkafy41x.php(28): find_closest_elements(Array)\n#1 /tmp/tmpfkafy41x.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_index = $min_index + 1;\n    $max_index = $max_index - 1;\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value = $min_value - $max_value;\n    $max_value = $max_value - $min_value;\n    $min_value = $min_value / 2;\n    $max_value = $max_value / 2;\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    $min_value = $min_value + $max_value;\n    $max_value = $max_value + $min_value;\n    $min_value = round($min_value, 2);\n    $max_value = round($max_value, 2);\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmr4qvztr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmr4qvztr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmr4qvztr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmr4qvztr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmr4qvztr.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpmr4qvztr.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmpmr4qvztr.php:10\nStack trace:\n#0 /tmp/tmpmr4qvztr.php(10): min(Array)\n#1 /tmp/tmpmr4qvztr.php(34): find_closest_elements(Array)\n#2 /tmp/tmpmr4qvztr.php(38): candidate(Array)\n#3 /tmp/tmpmr4qvztr.php(45): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpfkafy41x.php:14\nStack trace:\n#0 /tmp/tmpfkafy41x.php(28): find_closest_elements(Array)\n#1 /tmp/tmpfkafy41x.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value_index = $numbers.index($min_value);\n    $max_value_index = $numbers.index($max_value);\n    $min_value_index_plus_one = $min_value_index + 1;\n    $max_value_index_minus_one = $max_value_index - 1;\n    $min_value_index_minus_two = $min_value_index - 2;\n    $max_value_index_plus_two = $max_value_index + 2;\n    $min_value_index_plus_three = $min_value_index + 3;\n    $max_value_index_minus_three = $max_value_index - 3;\n    $min_value_index_minus_four = $min_value_index - 4;\n    $max_value_index_plus_four = $max_value_index + 4;\n    $min_value_index_minus_five = $min_value_index - 5;\n    $max_value_index_plus_five = $max_value_index + 5;\n    $min_value_index_minus_six = $min_value_index - 6;\n    $max_value_index_plus_six = $max_value_index + 6;\n    $min_value_index_minus_seven = $min_value_index - 7;\n    $max_value_index_plus_seven = $max_value_index + 7;\n    $min_value_index_minus_eight = $min_value_index - 8;\n    $max_value_index_plus_eight = $max_value_index + 8;\n    $min_value_index_minus_nine = $min_value_index - 9;\n    $max_\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp7e3dqhep.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min_diff = 9999999999999999;\n    $min_index = 0;\n    $min_value = 0;\n    $max_diff = 0;\n    $max_index = 0;\n    $max_value = 0;\n    foreach($numbers as $value) {\n        $diff = abs($value - $min_value);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $max_index;\n            $min_value = $max_value;\n        }\n        $diff = abs($value - $max_value);\n        if ($diff < $max_diff) {\n            $max_diff = $diff;\n            $max_index = $min_index;\n            $max_value = $min_value;\n        }\n    }\n    $min_index = array_flip($min_index);\n    $max_index = array_flip($max_index);\n    return array($min_value, $max_value);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpq6icj23t.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpq6icj23t.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpq6icj23t.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpq6icj23t.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpq6icj23t.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpq6icj23t.php on line 9\n\nFatal error: Uncaught TypeError: array_flip(): Argument #1 ($array) must be of type array, int given in /tmp/tmpq6icj23t.php:30\nStack trace:\n#0 /tmp/tmpq6icj23t.php(30): array_flip(0)\n#1 /tmp/tmpq6icj23t.php(36): find_closest_elements(Array)\n#2 /tmp/tmpq6icj23t.php(40): candidate(Array)\n#3 /tmp/tmpq6icj23t.php(47): test()\n#4 {main}\n  thrown in",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ( $i = 0; $i < $numbers.length; $i++ ) {\n        if ( $numbers[$i] < $min ) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ( $numbers[$i] > $max ) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    $min_index = $min_index - 1;\n    $max_index = $max_index + 1;\n    $min_index = $min_index < 0 ? $numbers.length - 1 : $min_index;\n    $max_index = $max_index > $numbers.length - 1 ? 0 : $max_index;\n    return array($numbers[$min_index], $numbers[$max_index]);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp9qkodec3.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp9qkodec3.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp9qkodec3.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp9qkodec3.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp9qkodec3.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp9qkodec3.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmp9qkodec3.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmp9qkodec3.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp9qkodec3.php:14\nStack trace:\n#0 /tmp/tmp9qkodec3.php(32): find_closest_elements(Array)\n#1 /tmp/tmp9qkodec3.php(36): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    $min_value = $numbers[0];\n    $max_value = $numbers[0];\n    $min_value_index = 0;\n    $max_value_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        $value = $numbers[$i];\n        if ($value < $min) {\n            $min = $value;\n            $min_index = $i;\n        }\n        if ($value > $max) {\n            $max = $value;\n            $max_index = $i;\n        }\n        if ($value < $min_value) {\n            $min_value = $value;\n            $min_value_index = $i;\n        }\n        if ($value > $max_value) {\n            $max_value = $value;\n            $max_value_index = $i;\n        }\n    }\n    $min_index_value = $numbers[$min_index];\n    $max_index_value = $numbers[$max_index];\n    $min_index_value_index = $min_index;\n    $max_index_value_index = $max_index;\n    $min_index_value_index_index = $min_index_value_index;\n    $max_index_value_index_index = $max_index_value_index;\n    $min_index_value_index_index_index = $min_index_value_index_index;\n    $max_index_value_index_index_index = $max_index_value_index_index;\n    $min_index_value_index_index_index_index = $min_index_value_index_index_index;\n    $max_index_value_index_index_index_index = $max_index_value_index_index_index;\n    $min_index_value_index_index_index_index_index = $min_index_value_index_index\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp6vwbvbhr.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers - $min;\n    $max_index = $numbers - $max;\n    $min_index = abs($min_index);\n    $max_index = abs($max_index);\n    if ($min_index < $max_index) {\n        return array($min, $max);\n    } else {\n        return array($max, $min);\n    }\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp0pnh2j9t.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp0pnh2j9t.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp0pnh2j9t.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp0pnh2j9t.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp0pnh2j9t.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp0pnh2j9t.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmp0pnh2j9t.php:10\nStack trace:\n#0 /tmp/tmp0pnh2j9t.php(10): min(Array)\n#1 /tmp/tmp0pnh2j9t.php(24): find_closest_elements(Array)\n#2 /tmp/tmp0pnh2j9t.php(28): candidate(Array)\n#3 /tmp/tmp0pnh2j9t.php(35): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $numbers.length; $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n        }\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpfkafy41x.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 10\n\nWarning: Undefined array key 0 in /tmp/tmpfkafy41x.php on line 11\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpfkafy41x.php:14\nStack trace:\n#0 /tmp/tmpfkafy41x.php(28): find_closest_elements(Array)\n#1 /tmp/tmpfkafy41x.php(32): candidate(Array)\n#2 /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min_diffnfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp1zen1_4p.php on line 11\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers.index($min);\n    $max_index = $numbers.index($max);\n    $min_value = $numbers[$min_index];\n    $max_value = $numbers[$max_index];\n    $min_value_index = $numbers.index($min_value);\n    $max_value_index = $numbers.index($max_value);\n    $min_value_index_plus_1 = $min_value_index + 1;\n    $max_value_index_plus_1 = $max_value_index + 1;\n    $min_value_index_minus_1 = $min_value_index - 1;\n    $max_value_index_minus_1 = $max_value_index - 1;\n    $min_value_index_plus_2 = $min_value_index + 2;\n    $max_value_index_plus_2 = $max_value_index + 2;\n    $min_value_index_minus_2 = $min_value_index - 2;\n    $max_value_index_minus_2 = $max_value_index - 2;\n    $min_value_index_plus_3 = $min_value_index + 3;\n    $max_value_index_plus_3 = $max_value_index + 3;\n    $min_value_index_minus_3 = $min_value_index - 3;\n    $max_value_index_minus_3 = $max_value_index - 3;\n    $min_value_index_plus_4 = $min_value_index + 4;\n    $max_value_index_plus_4 = $max_value_index + 4;\n    $min_value_index_minus_4 = $min_value_index - 4;\n    $max_value_index_minus_4 = $max_value_index - 4;\n    $min_value_index_plus_5 = $min_value_index + 5;\n    $max_\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpz636kplt.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $min_diffnfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292817,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpbn5_d6j2.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $numbers = array_flip($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n    $min_index = $numbers - $min;\n    $max_index = $numbers - $max;\n    if ($min_index == $max_index) {\n        return array($min, $max);\n    }\n    return array($min, $max);\n}\n\nfunction candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292818,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1njl3zmm.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1njl3zmm.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1njl3zmm.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1njl3zmm.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1njl3zmm.php on line 9\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp1njl3zmm.php on line 9\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at least one element in /tmp/tmp1njl3zmm.php:10\nStack trace:\n#0 /tmp/tmp1njl3zmm.php(10): min(Array)\n#1 /tmp/tmp1njl3zmm.php(21): find_closest_elements(Array)\n#2 /tmp/tmp1njl3zmm.php(25): candidate(Array)\n#3 /tmp/tmp1njl3zmm.php(32): test()\n#4 {main}\n  thrown in /tmp/tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}