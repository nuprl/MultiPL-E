{
  "name": "HumanEval_11_string_xor",
  "language": "php",
  "prompt": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n",
  "tests": "function candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp4bw_lhzh.php:9\nStack trace:\n#0 /tmp/tmp4bw_lhzh.php(14): string_xor('111000', '101010')\n#1 /tmp/tmp4bw_lhzh.php(18): candidate('111000', '101010')\n#2 /tmp/tmp4bw_lhzh.php(23): test()\n#3 {main}\n  thrown in /tmp/tmp4bw_lhzh.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp88y3jplb.php:8\nStack trace:\n#0 /tmp/tmp88y3jplb.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp88y3jplb.php(19): candidate('111000', '101010')\n#2 /tmp/tmp88y3jplb.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp88y3jplb.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmptu9w91nj.php:8\nStack trace:\n#0 /tmp/tmptu9w91nj.php(15): string_xor('111000', '101010')\n#1 /tmp/tmptu9w91nj.php(19): candidate('111000', '101010')\n#2 /tmp/tmptu9w91nj.php(24): test()\n#3 {main}\n  thrown in /tmp/tmptu9w91nj.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for($i=0; $i<strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpa83_et76.php:9\nStack trace:\n#0 /tmp/tmpa83_et76.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpa83_et76.php(19): candidate('111000', '101010')\n#2 /tmp/tmpa83_et76.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpa83_et76.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpaqfjran6.php:8\nStack trace:\n#0 /tmp/tmpaqfjran6.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpaqfjran6.php(19): candidate('111000', '101010')\n#2 /tmp/tmpaqfjran6.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpaqfjran6.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c .= ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjrevmwxs.php:19\nStack trace:\n#0 /tmp/tmpjrevmwxs.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpjrevmwxs.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpf462en_s.php:9\nStack trace:\n#0 /tmp/tmpf462en_s.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpf462en_s.php(19): candidate('111000', '101010')\n#2 /tmp/tmpf462en_s.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpf462en_s.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp1tugjjnm.php:9\nStack trace:\n#0 /tmp/tmp1tugjjnm.php(14): string_xor('111000', '101010')\n#1 /tmp/tmp1tugjjnm.php(18): candidate('111000', '101010')\n#2 /tmp/tmp1tugjjnm.php(23): test()\n#3 {main}\n  thrown in /tmp/tmp1tugjjnm.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp4bw_lhzh.php:9\nStack trace:\n#0 /tmp/tmp4bw_lhzh.php(14): string_xor('111000', '101010')\n#1 /tmp/tmp4bw_lhzh.php(18): candidate('111000', '101010')\n#2 /tmp/tmp4bw_lhzh.php(23): test()\n#3 {main}\n  thrown in /tmp/tmp4bw_lhzh.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpc557yapb.php:9\nStack trace:\n#0 /tmp/tmpc557yapb.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpc557yapb.php(19): candidate('111000', '101010')\n#2 /tmp/tmpc557yapb.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpc557yapb.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += $a[$i] ^ $b[$i];\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpasmpkxjr.php:8\nStack trace:\n#0 /tmp/tmpasmpkxjr.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpasmpkxjr.php(19): candidate('111000', '101010')\n#2 /tmp/tmpasmpkxjr.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpasmpkxjr.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for($i=0; $i<strlen($a); $i++) {\n        $c += $a[$i] ^ $b[$i];\n    }\n    return $c;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp1v4jb6a8.php:9\nStack trace:\n#0 /tmp/tmp1v4jb6a8.php(14): string_xor('111000', '101010')\n#1 /tmp/tmp1v4jb6a8.php(18): candidate('111000', '101010')\n#2 /tmp/tmp1v4jb6a8.php(23): test()\n#3 {main}\n  thrown in /tmp/tmp1v4jb6a8.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqxck52ir.php:19\nStack trace:\n#0 /tmp/tmpqxck52ir.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpqxck52ir.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += $a[$i] ^ $b[$i];\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpasmpkxjr.php:8\nStack trace:\n#0 /tmp/tmpasmpkxjr.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpasmpkxjr.php(19): candidate('111000', '101010')\n#2 /tmp/tmpasmpkxjr.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpasmpkxjr.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for($i=0; $i<strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpa83_et76.php:9\nStack trace:\n#0 /tmp/tmpa83_et76.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpa83_et76.php(19): candidate('111000', '101010')\n#2 /tmp/tmpa83_et76.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpa83_et76.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpz2trhcdg.php:8\nStack trace:\n#0 /tmp/tmpz2trhcdg.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpz2trhcdg.php(19): candidate('111000', '101010')\n#2 /tmp/tmpz2trhcdg.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpz2trhcdg.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for($i = 0; $i < $a.length; $i++) {\n        $result += $a[$i] ^ $b[$i];\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpgfa5cg23.php:8\nStack trace:\n#0 /tmp/tmpgfa5cg23.php(14): string_xor('111000', '101010')\n#1 /tmp/tmpgfa5cg23.php(18): candidate('111000', '101010')\n#2 /tmp/tmpgfa5cg23.php(23): test()\n#3 {main}\n  thrown in /tmp/tmpgfa5cg23.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpz2trhcdg.php:8\nStack trace:\n#0 /tmp/tmpz2trhcdg.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpz2trhcdg.php(19): candidate('111000', '101010')\n#2 /tmp/tmpz2trhcdg.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpz2trhcdg.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpj3nr9nk6.php:9\nStack trace:\n#0 /tmp/tmpj3nr9nk6.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpj3nr9nk6.php(19): candidate('111000', '101010')\n#2 /tmp/tmpj3nr9nk6.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpj3nr9nk6.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c .= ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq6a9w7ge.php:18\nStack trace:\n#0 /tmp/tmpq6a9w7ge.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpq6a9w7ge.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    // your code goes here\n    $a = str_replace(\"0\", \"\", $a);\n    $b = str_replace(\"0\", \"\", $b);\n    $result = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result += (int($a[$i]) ^ int($b[$i])) ? \"1\" : \"0\";\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function int() in /tmp/tmpftnfuiav.php:12\nStack trace:\n#0 /tmp/tmpftnfuiav.php(18): string_xor('111', '111')\n#1 /tmp/tmpftnfuiav.php(22): candidate('111000', '101010')\n#2 /tmp/tmpftnfuiav.php(27): test()\n#3 {main}\n  thrown in /tmp/tmpftnfuiav.php on line 12\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqxck52ir.php:19\nStack trace:\n#0 /tmp/tmpqxck52ir.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpqxck52ir.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += $a[$i] ^ $b[$i];\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpasmpkxjr.php:8\nStack trace:\n#0 /tmp/tmpasmpkxjr.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpasmpkxjr.php(19): candidate('111000', '101010')\n#2 /tmp/tmpasmpkxjr.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpasmpkxjr.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmptu9w91nj.php:8\nStack trace:\n#0 /tmp/tmptu9w91nj.php(15): string_xor('111000', '101010')\n#1 /tmp/tmptu9w91nj.php(19): candidate('111000', '101010')\n#2 /tmp/tmptu9w91nj.php(24): test()\n#3 {main}\n  thrown in /tmp/tmptu9w91nj.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp88y3jplb.php:8\nStack trace:\n#0 /tmp/tmp88y3jplb.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp88y3jplb.php(19): candidate('111000', '101010')\n#2 /tmp/tmp88y3jplb.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp88y3jplb.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += $a[$i] ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpvc77iohc.php:8\nStack trace:\n#0 /tmp/tmpvc77iohc.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpvc77iohc.php(19): candidate('111000', '101010')\n#2 /tmp/tmpvc77iohc.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpvc77iohc.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += $a[$i] == '1' ? '0' : '1';\n    }\n    for ($i = 0; $i < $b.length; $i++) {\n        $c += $b[$i] == '1' ? '0' : '1';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp9boyyc5z.php:8\nStack trace:\n#0 /tmp/tmp9boyyc5z.php(18): string_xor('111000', '101010')\n#1 /tmp/tmp9boyyc5z.php(22): candidate('111000', '101010')\n#2 /tmp/tmp9boyyc5z.php(27): test()\n#3 {main}\n  thrown in /tmp/tmp9boyyc5z.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c .= ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjrevmwxs.php:19\nStack trace:\n#0 /tmp/tmpjrevmwxs.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpjrevmwxs.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $c;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp1bvl6wvh.php:8\nStack trace:\n#0 /tmp/tmp1bvl6wvh.php(14): string_xor('111000', '101010')\n#1 /tmp/tmp1bvl6wvh.php(18): candidate('111000', '101010')\n#2 /tmp/tmp1bvl6wvh.php(23): test()\n#3 {main}\n  thrown in /tmp/tmp1bvl6wvh.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmps5_1a7wu.php:9\nStack trace:\n#0 /tmp/tmps5_1a7wu.php(15): string_xor('111000', '101010')\n#1 /tmp/tmps5_1a7wu.php(19): candidate('111000', '101010')\n#2 /tmp/tmps5_1a7wu.php(24): test()\n#3 {main}\n  thrown in /tmp/tmps5_1a7wu.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpbrsbm8_p.php:8\nStack trace:\n#0 /tmp/tmpbrsbm8_p.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpbrsbm8_p.php(19): candidate('111000', '101010')\n#2 /tmp/tmpbrsbm8_p.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpbrsbm8_p.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpkwm0b8b_.php:9\nStack trace:\n#0 /tmp/tmpkwm0b8b_.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpkwm0b8b_.php(19): candidate('111000', '101010')\n#2 /tmp/tmpkwm0b8b_.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpkwm0b8b_.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for($i = 0; $i < $a.length; $i++) {\n        $result += $a[$i] ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpeuwswh2x.php:8\nStack trace:\n#0 /tmp/tmpeuwswh2x.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpeuwswh2x.php(19): candidate('111000', '101010')\n#2 /tmp/tmpeuwswh2x.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpeuwswh2x.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqxck52ir.php:19\nStack trace:\n#0 /tmp/tmpqxck52ir.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpqxck52ir.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for($i = 0; $i < $a.length; $i++) {\n        $c += $a[$i] ^ $b[$i];\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpkjjq9x7s.php:8\nStack trace:\n#0 /tmp/tmpkjjq9x7s.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpkjjq9x7s.php(19): candidate('111000', '101010')\n#2 /tmp/tmpkjjq9x7s.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpkjjq9x7s.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for($i = 0; $i < $a.length; $i++) {\n        $c += $a[$i] ^ $b[$i];\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp3beita44.php:8\nStack trace:\n#0 /tmp/tmp3beita44.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp3beita44.php(19): candidate('111000', '101010')\n#2 /tmp/tmp3beita44.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp3beita44.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp88y3jplb.php:8\nStack trace:\n#0 /tmp/tmp88y3jplb.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp88y3jplb.php(19): candidate('111000', '101010')\n#2 /tmp/tmp88y3jplb.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp88y3jplb.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    // your code goes here\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpmpw8sgp4.php:10\nStack trace:\n#0 /tmp/tmpmpw8sgp4.php(16): string_xor('111000', '101010')\n#1 /tmp/tmpmpw8sgp4.php(20): candidate('111000', '101010')\n#2 /tmp/tmpmpw8sgp4.php(25): test()\n#3 {main}\n  thrown in /tmp/tmpmpw8sgp4.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    // your code goes here\n    return $a.replace(/0/g, '1').replace(/1/g, '0').replace(/2/g, '1').replace(/3/g, '2').replace(/4/g, '3').replace(/5/g, '4').replace(/6/g, '5').replace(/7/g, '6').replace(/8/g, '7').replace(/9/g, '8');\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpxljtkgil.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqxck52ir.php:19\nStack trace:\n#0 /tmp/tmpqxck52ir.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpqxck52ir.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for($i = 0; $i < $a.length; $i++) {\n        $result += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp1e_182jh.php:8\nStack trace:\n#0 /tmp/tmp1e_182jh.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp1e_182jh.php(19): candidate('111000', '101010')\n#2 /tmp/tmp1e_182jh.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp1e_182jh.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmptu9w91nj.php:8\nStack trace:\n#0 /tmp/tmptu9w91nj.php(15): string_xor('111000', '101010')\n#1 /tmp/tmptu9w91nj.php(19): candidate('111000', '101010')\n#2 /tmp/tmptu9w91nj.php(24): test()\n#3 {main}\n  thrown in /tmp/tmptu9w91nj.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    // your code goes here\n    var result = \"\";\n    for (var i = 0; i < $a.length; i++) {\n        if ($a[i] == '1' && $b[i] == '1') {\n            result += '1';\n        } else if ($a[i] == '0' && $b[i] == '0') {\n            result += '0';\n        } else {\n            result += 'X';\n        }\n    }\n    return result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nParse error: syntax error, unexpected token \"var\" in /tmp/tmphtbvrgcl.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += $a[$i] == \"1\" ? \"0\" : \"1\";\n    }\n    for ($i = 0; $i < $b.length; $i++) {\n        $c += $b[$i] == \"1\" ? \"0\" : \"1\";\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp7sr0ni82.php:8\nStack trace:\n#0 /tmp/tmp7sr0ni82.php(18): string_xor('111000', '101010')\n#1 /tmp/tmp7sr0ni82.php(22): candidate('111000', '101010')\n#2 /tmp/tmp7sr0ni82.php(27): test()\n#3 {main}\n  thrown in /tmp/tmp7sr0ni82.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for($i=0; $i<strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpa83_et76.php:9\nStack trace:\n#0 /tmp/tmpa83_et76.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpa83_et76.php(19): candidate('111000', '101010')\n#2 /tmp/tmpa83_et76.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpa83_et76.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmps5_1a7wu.php:9\nStack trace:\n#0 /tmp/tmps5_1a7wu.php(15): string_xor('111000', '101010')\n#1 /tmp/tmps5_1a7wu.php(19): candidate('111000', '101010')\n#2 /tmp/tmps5_1a7wu.php(24): test()\n#3 {main}\n  thrown in /tmp/tmps5_1a7wu.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpf462en_s.php:9\nStack trace:\n#0 /tmp/tmpf462en_s.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpf462en_s.php(19): candidate('111000', '101010')\n#2 /tmp/tmpf462en_s.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpf462en_s.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpz2trhcdg.php:8\nStack trace:\n#0 /tmp/tmpz2trhcdg.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpz2trhcdg.php(19): candidate('111000', '101010')\n#2 /tmp/tmpz2trhcdg.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpz2trhcdg.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpc557yapb.php:9\nStack trace:\n#0 /tmp/tmpc557yapb.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpc557yapb.php(19): candidate('111000', '101010')\n#2 /tmp/tmpc557yapb.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpc557yapb.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp88y3jplb.php:8\nStack trace:\n#0 /tmp/tmp88y3jplb.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp88y3jplb.php(19): candidate('111000', '101010')\n#2 /tmp/tmp88y3jplb.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp88y3jplb.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += $a[$i] ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpvc77iohc.php:8\nStack trace:\n#0 /tmp/tmpvc77iohc.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpvc77iohc.php(19): candidate('111000', '101010')\n#2 /tmp/tmpvc77iohc.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpvc77iohc.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp88y3jplb.php:8\nStack trace:\n#0 /tmp/tmp88y3jplb.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp88y3jplb.php(19): candidate('111000', '101010')\n#2 /tmp/tmp88y3jplb.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp88y3jplb.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpz2trhcdg.php:8\nStack trace:\n#0 /tmp/tmpz2trhcdg.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpz2trhcdg.php(19): candidate('111000', '101010')\n#2 /tmp/tmpz2trhcdg.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpz2trhcdg.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp88y3jplb.php:8\nStack trace:\n#0 /tmp/tmp88y3jplb.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp88y3jplb.php(19): candidate('111000', '101010')\n#2 /tmp/tmp88y3jplb.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp88y3jplb.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for($i = 0; $i < $a.length; $i++) {\n        $result += $a[$i] ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpeuwswh2x.php:8\nStack trace:\n#0 /tmp/tmpeuwswh2x.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpeuwswh2x.php(19): candidate('111000', '101010')\n#2 /tmp/tmpeuwswh2x.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpeuwswh2x.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += $a[$i] == \"1\" ? \"0\" : \"1\";\n    }\n    for ($i = 0; $i < $b.length; $i++) {\n        $c += $b[$i] == \"1\" ? \"0\" : \"1\";\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp7sr0ni82.php:8\nStack trace:\n#0 /tmp/tmp7sr0ni82.php(18): string_xor('111000', '101010')\n#1 /tmp/tmp7sr0ni82.php(22): candidate('111000', '101010')\n#2 /tmp/tmp7sr0ni82.php(27): test()\n#3 {main}\n  thrown in /tmp/tmp7sr0ni82.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for($i = 0; $i < $a.length; $i++) {\n        $result += $a[$i] ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpeuwswh2x.php:8\nStack trace:\n#0 /tmp/tmpeuwswh2x.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpeuwswh2x.php(19): candidate('111000', '101010')\n#2 /tmp/tmpeuwswh2x.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpeuwswh2x.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmps5_1a7wu.php:9\nStack trace:\n#0 /tmp/tmps5_1a7wu.php(15): string_xor('111000', '101010')\n#1 /tmp/tmps5_1a7wu.php(19): candidate('111000', '101010')\n#2 /tmp/tmps5_1a7wu.php(24): test()\n#3 {main}\n  thrown in /tmp/tmps5_1a7wu.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += $a[$i] ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpvc77iohc.php:8\nStack trace:\n#0 /tmp/tmpvc77iohc.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpvc77iohc.php(19): candidate('111000', '101010')\n#2 /tmp/tmpvc77iohc.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpvc77iohc.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c .= ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjrevmwxs.php:19\nStack trace:\n#0 /tmp/tmpjrevmwxs.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpjrevmwxs.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for($i = 0; $i < strlen($a); $i++) {\n        $c .= ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcv28491x.php:19\nStack trace:\n#0 /tmp/tmpcv28491x.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpcv28491x.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqxck52ir.php:19\nStack trace:\n#0 /tmp/tmpqxck52ir.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpqxck52ir.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c = $c . ($a[$i] == \"1\" ? \"0\" : \"1\");\n    }\n    for ($i = 0; $i < strlen($b); $i++) {\n        $c = $c . ($b[$i] == \"1\" ? \"0\" : \"1\");\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyt1v1951.php:22\nStack trace:\n#0 /tmp/tmpyt1v1951.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpyt1v1951.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp4bw_lhzh.php:9\nStack trace:\n#0 /tmp/tmp4bw_lhzh.php(14): string_xor('111000', '101010')\n#1 /tmp/tmp4bw_lhzh.php(18): candidate('111000', '101010')\n#2 /tmp/tmp4bw_lhzh.php(23): test()\n#3 {main}\n  thrown in /tmp/tmp4bw_lhzh.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpggmpkqsy.php:9\nStack trace:\n#0 /tmp/tmpggmpkqsy.php(14): string_xor('111000', '101010')\n#1 /tmp/tmpggmpkqsy.php(18): candidate('111000', '101010')\n#2 /tmp/tmpggmpkqsy.php(23): test()\n#3 {main}\n  thrown in /tmp/tmpggmpkqsy.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += $a[$i] == \"1\" ? \"0\" : \"1\";\n    }\n    for ($i = 0; $i < $b.length; $i++) {\n        $c += $b[$i] == \"1\" ? \"0\" : \"1\";\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp7sr0ni82.php:8\nStack trace:\n#0 /tmp/tmp7sr0ni82.php(18): string_xor('111000', '101010')\n#1 /tmp/tmp7sr0ni82.php(22): candidate('111000', '101010')\n#2 /tmp/tmp7sr0ni82.php(27): test()\n#3 {main}\n  thrown in /tmp/tmp7sr0ni82.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    // your code goes here\n    $a = str_replace(\"0\", \"\", $a);\n    $b = str_replace(\"0\", \"\", $b);\n    $result = \"\";\n    for($i = 0; $i < strlen($a); $i++) {\n        $result += $a[$i] ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpj6lnnj9g.php:12\nStack trace:\n#0 /tmp/tmpj6lnnj9g.php(18): string_xor('111', '111')\n#1 /tmp/tmpj6lnnj9g.php(22): candidate('111000', '101010')\n#2 /tmp/tmpj6lnnj9g.php(27): test()\n#3 {main}\n  thrown in /tmp/tmpj6lnnj9g.php on line 12\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpaqfjran6.php:8\nStack trace:\n#0 /tmp/tmpaqfjran6.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpaqfjran6.php(19): candidate('111000', '101010')\n#2 /tmp/tmpaqfjran6.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpaqfjran6.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmps5_1a7wu.php:9\nStack trace:\n#0 /tmp/tmps5_1a7wu.php(15): string_xor('111000', '101010')\n#1 /tmp/tmps5_1a7wu.php(19): candidate('111000', '101010')\n#2 /tmp/tmps5_1a7wu.php(24): test()\n#3 {main}\n  thrown in /tmp/tmps5_1a7wu.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpz2trhcdg.php:8\nStack trace:\n#0 /tmp/tmpz2trhcdg.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpz2trhcdg.php(19): candidate('111000', '101010')\n#2 /tmp/tmpz2trhcdg.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpz2trhcdg.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for($i=0; $i<strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpa83_et76.php:9\nStack trace:\n#0 /tmp/tmpa83_et76.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpa83_et76.php(19): candidate('111000', '101010')\n#2 /tmp/tmpa83_et76.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpa83_et76.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for($i = 0; $i < $a.length; $i++) {\n        $c += $a[$i] ^ $b[$i];\n    }\n    return $c;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmps6wn3sq4.php:8\nStack trace:\n#0 /tmp/tmps6wn3sq4.php(14): string_xor('111000', '101010')\n#1 /tmp/tmps6wn3sq4.php(18): candidate('111000', '101010')\n#2 /tmp/tmps6wn3sq4.php(23): test()\n#3 {main}\n  thrown in /tmp/tmps6wn3sq4.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    // your code goes here\n    return $a.replace(/0/g, \"\").replace(/1/g, \"\") + $b.replace(/0/g, \"\").replace(/1/g, \"\");\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp0ik9qg_n.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for($i=0; $i<strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpa83_et76.php:9\nStack trace:\n#0 /tmp/tmpa83_et76.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpa83_et76.php(19): candidate('111000', '101010')\n#2 /tmp/tmpa83_et76.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpa83_et76.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c .= ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq6a9w7ge.php:18\nStack trace:\n#0 /tmp/tmpq6a9w7ge.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpq6a9w7ge.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpsysakotk.php:8\nStack trace:\n#0 /tmp/tmpsysakotk.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpsysakotk.php(19): candidate('111000', '101010')\n#2 /tmp/tmpsysakotk.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpsysakotk.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for($i = 0; $i < $a.length; $i++) {\n        $result += $a[$i] == \"1\" ? $b[$i] : \"0\";\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpszpcacey.php:8\nStack trace:\n#0 /tmp/tmpszpcacey.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpszpcacey.php(19): candidate('111000', '101010')\n#2 /tmp/tmpszpcacey.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpszpcacey.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for($i = 0; $i < $a.length; $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpq64ba58t.php:8\nStack trace:\n#0 /tmp/tmpq64ba58t.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpq64ba58t.php(19): candidate('111000', '101010')\n#2 /tmp/tmpq64ba58t.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpq64ba58t.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpsysakotk.php:8\nStack trace:\n#0 /tmp/tmpsysakotk.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpsysakotk.php(19): candidate('111000', '101010')\n#2 /tmp/tmpsysakotk.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpsysakotk.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for($i = 0; $i < $a.length; $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp6mw93ovo.php:8\nStack trace:\n#0 /tmp/tmp6mw93ovo.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp6mw93ovo.php(19): candidate('111000', '101010')\n#2 /tmp/tmp6mw93ovo.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp6mw93ovo.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    // your code goes here\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result += $a[$i] ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp_yxz0135.php:10\nStack trace:\n#0 /tmp/tmp_yxz0135.php(16): string_xor('111000', '101010')\n#1 /tmp/tmp_yxz0135.php(20): candidate('111000', '101010')\n#2 /tmp/tmp_yxz0135.php(25): test()\n#3 {main}\n  thrown in /tmp/tmp_yxz0135.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $c;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp1bvl6wvh.php:8\nStack trace:\n#0 /tmp/tmp1bvl6wvh.php(14): string_xor('111000', '101010')\n#1 /tmp/tmp1bvl6wvh.php(18): candidate('111000', '101010')\n#2 /tmp/tmp1bvl6wvh.php(23): test()\n#3 {main}\n  thrown in /tmp/tmp1bvl6wvh.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += $a[$i] ^ $b[$i];\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpasmpkxjr.php:8\nStack trace:\n#0 /tmp/tmpasmpkxjr.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpasmpkxjr.php(19): candidate('111000', '101010')\n#2 /tmp/tmpasmpkxjr.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpasmpkxjr.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpsysakotk.php:8\nStack trace:\n#0 /tmp/tmpsysakotk.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpsysakotk.php(19): candidate('111000', '101010')\n#2 /tmp/tmpsysakotk.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpsysakotk.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    // your code goes here\n    $result = '';\n    for($i=0; $i<strlen($a); $i++) {\n        $result += $a[$i] ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpdi5tx8zd.php:10\nStack trace:\n#0 /tmp/tmpdi5tx8zd.php(16): string_xor('111000', '101010')\n#1 /tmp/tmpdi5tx8zd.php(20): candidate('111000', '101010')\n#2 /tmp/tmpdi5tx8zd.php(25): test()\n#3 {main}\n  thrown in /tmp/tmpdi5tx8zd.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for($i = 0; $i < $a.length; $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp6mw93ovo.php:8\nStack trace:\n#0 /tmp/tmp6mw93ovo.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp6mw93ovo.php(19): candidate('111000', '101010')\n#2 /tmp/tmp6mw93ovo.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp6mw93ovo.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for($i=0; $i<strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpa83_et76.php:9\nStack trace:\n#0 /tmp/tmpa83_et76.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpa83_et76.php(19): candidate('111000', '101010')\n#2 /tmp/tmpa83_et76.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpa83_et76.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpc557yapb.php:9\nStack trace:\n#0 /tmp/tmpc557yapb.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpc557yapb.php(19): candidate('111000', '101010')\n#2 /tmp/tmpc557yapb.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpc557yapb.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    // your code goes here\n    return $a.replace(/0/g, \"\").replace(/1/g, \"\") + $b.replace(/0/g, \"\").replace(/1/g, \"\");\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp0ik9qg_n.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += $a[$i] ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpvc77iohc.php:8\nStack trace:\n#0 /tmp/tmpvc77iohc.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpvc77iohc.php(19): candidate('111000', '101010')\n#2 /tmp/tmpvc77iohc.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpvc77iohc.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpc557yapb.php:9\nStack trace:\n#0 /tmp/tmpc557yapb.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpc557yapb.php(19): candidate('111000', '101010')\n#2 /tmp/tmpc557yapb.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpc557yapb.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpc557yapb.php:9\nStack trace:\n#0 /tmp/tmpc557yapb.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpc557yapb.php(19): candidate('111000', '101010')\n#2 /tmp/tmpc557yapb.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpc557yapb.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += $a[$i] ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpknbi_kok.php:8\nStack trace:\n#0 /tmp/tmpknbi_kok.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpknbi_kok.php(19): candidate('111000', '101010')\n#2 /tmp/tmpknbi_kok.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpknbi_kok.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmps5_1a7wu.php:9\nStack trace:\n#0 /tmp/tmps5_1a7wu.php(15): string_xor('111000', '101010')\n#1 /tmp/tmps5_1a7wu.php(19): candidate('111000', '101010')\n#2 /tmp/tmps5_1a7wu.php(24): test()\n#3 {main}\n  thrown in /tmp/tmps5_1a7wu.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpggmpkqsy.php:9\nStack trace:\n#0 /tmp/tmpggmpkqsy.php(14): string_xor('111000', '101010')\n#1 /tmp/tmpggmpkqsy.php(18): candidate('111000', '101010')\n#2 /tmp/tmpggmpkqsy.php(23): test()\n#3 {main}\n  thrown in /tmp/tmpggmpkqsy.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += $a[$i] ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpknbi_kok.php:8\nStack trace:\n#0 /tmp/tmpknbi_kok.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpknbi_kok.php(19): candidate('111000', '101010')\n#2 /tmp/tmpknbi_kok.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpknbi_kok.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for($i=0; $i<strlen($a); $i++) {\n        $c += $a[$i]^$b[$i];\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpuq0qip3w.php:9\nStack trace:\n#0 /tmp/tmpuq0qip3w.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpuq0qip3w.php(19): candidate('111000', '101010')\n#2 /tmp/tmpuq0qip3w.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpuq0qip3w.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmps5_1a7wu.php:9\nStack trace:\n#0 /tmp/tmps5_1a7wu.php(15): string_xor('111000', '101010')\n#1 /tmp/tmps5_1a7wu.php(19): candidate('111000', '101010')\n#2 /tmp/tmps5_1a7wu.php(24): test()\n#3 {main}\n  thrown in /tmp/tmps5_1a7wu.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c .= $a[$i] ^ $b[$i];\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptw0uouhz.php:19\nStack trace:\n#0 /tmp/tmptw0uouhz.php(24): test()\n#1 {main}\n  thrown in /tmp/tmptw0uouhz.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpc557yapb.php:9\nStack trace:\n#0 /tmp/tmpc557yapb.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpc557yapb.php(19): candidate('111000', '101010')\n#2 /tmp/tmpc557yapb.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpc557yapb.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += $a[$i] == \"1\" ? \"0\" : \"1\";\n    }\n    for ($i = 0; $i < $b.length; $i++) {\n        $c += $b[$i] == \"1\" ? \"0\" : \"1\";\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp7sr0ni82.php:8\nStack trace:\n#0 /tmp/tmp7sr0ni82.php(18): string_xor('111000', '101010')\n#1 /tmp/tmp7sr0ni82.php(22): candidate('111000', '101010')\n#2 /tmp/tmp7sr0ni82.php(27): test()\n#3 {main}\n  thrown in /tmp/tmp7sr0ni82.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpaqfjran6.php:8\nStack trace:\n#0 /tmp/tmpaqfjran6.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpaqfjran6.php(19): candidate('111000', '101010')\n#2 /tmp/tmpaqfjran6.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpaqfjran6.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpc557yapb.php:9\nStack trace:\n#0 /tmp/tmpc557yapb.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpc557yapb.php(19): candidate('111000', '101010')\n#2 /tmp/tmpc557yapb.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpc557yapb.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for($i = 0; $i < strlen($a); $i++) {\n        $c = $c . ($a[$i] ^ $b[$i]);\n    }\n    return $c;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7r9iw3up.php:18\nStack trace:\n#0 /tmp/tmp7r9iw3up.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp7r9iw3up.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    // your code goes here\n    var result = \"\";\n    for (var i = 0; i < $a.length; i++) {\n        result += $a[i] ^ $b[i];\n    }\n    return result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nParse error: syntax error, unexpected token \"var\" in /tmp/tmpz6zk31sp.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c .= ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjrevmwxs.php:19\nStack trace:\n#0 /tmp/tmpjrevmwxs.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpjrevmwxs.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpj3nr9nk6.php:9\nStack trace:\n#0 /tmp/tmpj3nr9nk6.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpj3nr9nk6.php(19): candidate('111000', '101010')\n#2 /tmp/tmpj3nr9nk6.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpj3nr9nk6.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += $a[$i] ^ $b[$i];\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpasmpkxjr.php:8\nStack trace:\n#0 /tmp/tmpasmpkxjr.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpasmpkxjr.php(19): candidate('111000', '101010')\n#2 /tmp/tmpasmpkxjr.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpasmpkxjr.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for($i=0; $i<strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpa83_et76.php:9\nStack trace:\n#0 /tmp/tmpa83_et76.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpa83_et76.php(19): candidate('111000', '101010')\n#2 /tmp/tmpa83_et76.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpa83_et76.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpaqfjran6.php:8\nStack trace:\n#0 /tmp/tmpaqfjran6.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpaqfjran6.php(19): candidate('111000', '101010')\n#2 /tmp/tmpaqfjran6.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpaqfjran6.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpf462en_s.php:9\nStack trace:\n#0 /tmp/tmpf462en_s.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpf462en_s.php(19): candidate('111000', '101010')\n#2 /tmp/tmpf462en_s.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpf462en_s.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqxck52ir.php:19\nStack trace:\n#0 /tmp/tmpqxck52ir.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpqxck52ir.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpz2trhcdg.php:8\nStack trace:\n#0 /tmp/tmpz2trhcdg.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpz2trhcdg.php(19): candidate('111000', '101010')\n#2 /tmp/tmpz2trhcdg.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpz2trhcdg.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmps5_1a7wu.php:9\nStack trace:\n#0 /tmp/tmps5_1a7wu.php(15): string_xor('111000', '101010')\n#1 /tmp/tmps5_1a7wu.php(19): candidate('111000', '101010')\n#2 /tmp/tmps5_1a7wu.php(24): test()\n#3 {main}\n  thrown in /tmp/tmps5_1a7wu.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp5h62ncha.php:9\nStack trace:\n#0 /tmp/tmp5h62ncha.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp5h62ncha.php(19): candidate('111000', '101010')\n#2 /tmp/tmp5h62ncha.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp5h62ncha.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp88y3jplb.php:8\nStack trace:\n#0 /tmp/tmp88y3jplb.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp88y3jplb.php(19): candidate('111000', '101010')\n#2 /tmp/tmp88y3jplb.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp88y3jplb.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmps5_1a7wu.php:9\nStack trace:\n#0 /tmp/tmps5_1a7wu.php(15): string_xor('111000', '101010')\n#1 /tmp/tmps5_1a7wu.php(19): candidate('111000', '101010')\n#2 /tmp/tmps5_1a7wu.php(24): test()\n#3 {main}\n  thrown in /tmp/tmps5_1a7wu.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp4bw_lhzh.php:9\nStack trace:\n#0 /tmp/tmp4bw_lhzh.php(14): string_xor('111000', '101010')\n#1 /tmp/tmp4bw_lhzh.php(18): candidate('111000', '101010')\n#2 /tmp/tmp4bw_lhzh.php(23): test()\n#3 {main}\n  thrown in /tmp/tmp4bw_lhzh.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqxck52ir.php:19\nStack trace:\n#0 /tmp/tmpqxck52ir.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpqxck52ir.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp88y3jplb.php:8\nStack trace:\n#0 /tmp/tmp88y3jplb.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp88y3jplb.php(19): candidate('111000', '101010')\n#2 /tmp/tmp88y3jplb.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp88y3jplb.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += $a[$i] ^ $b[$i];\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp5p3x8c4r.php:8\nStack trace:\n#0 /tmp/tmp5p3x8c4r.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp5p3x8c4r.php(19): candidate('111000', '101010')\n#2 /tmp/tmp5p3x8c4r.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp5p3x8c4r.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp88y3jplb.php:8\nStack trace:\n#0 /tmp/tmp88y3jplb.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp88y3jplb.php(19): candidate('111000', '101010')\n#2 /tmp/tmp88y3jplb.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp88y3jplb.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for($i = 0; $i < $a.length; $i++) {\n        $c += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpzsgx38av.php:8\nStack trace:\n#0 /tmp/tmpzsgx38av.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpzsgx38av.php(19): candidate('111000', '101010')\n#2 /tmp/tmpzsgx38av.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpzsgx38av.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += $a[$i] ^ $b[$i];\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpasmpkxjr.php:8\nStack trace:\n#0 /tmp/tmpasmpkxjr.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpasmpkxjr.php(19): candidate('111000', '101010')\n#2 /tmp/tmpasmpkxjr.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpasmpkxjr.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqxck52ir.php:19\nStack trace:\n#0 /tmp/tmpqxck52ir.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpqxck52ir.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    // your code goes here\n    $result = '';\n    for($i = 0; $i < strlen($a); $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmph2yq3ju5.php:10\nStack trace:\n#0 /tmp/tmph2yq3ju5.php(16): string_xor('111000', '101010')\n#1 /tmp/tmph2yq3ju5.php(20): candidate('111000', '101010')\n#2 /tmp/tmph2yq3ju5.php(25): test()\n#3 {main}\n  thrown in /tmp/tmph2yq3ju5.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp88y3jplb.php:8\nStack trace:\n#0 /tmp/tmp88y3jplb.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp88y3jplb.php(19): candidate('111000', '101010')\n#2 /tmp/tmp88y3jplb.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp88y3jplb.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for($i=0; $i<strlen($a); $i++) {\n        $c += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $c;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp1h22pb_w.php:9\nStack trace:\n#0 /tmp/tmp1h22pb_w.php(14): string_xor('111000', '101010')\n#1 /tmp/tmp1h22pb_w.php(18): candidate('111000', '101010')\n#2 /tmp/tmp1h22pb_w.php(23): test()\n#3 {main}\n  thrown in /tmp/tmp1h22pb_w.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    // your code goes here\n    return $a.replace(/0/g, \"\").replace(/1/g, \"\") ^ $b.replace(/0/g, \"\").replace(/1/g, \"\");\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpx076v_za.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpz2trhcdg.php:8\nStack trace:\n#0 /tmp/tmpz2trhcdg.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpz2trhcdg.php(19): candidate('111000', '101010')\n#2 /tmp/tmpz2trhcdg.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpz2trhcdg.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpz2trhcdg.php:8\nStack trace:\n#0 /tmp/tmpz2trhcdg.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpz2trhcdg.php(19): candidate('111000', '101010')\n#2 /tmp/tmpz2trhcdg.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpz2trhcdg.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for($i = 0; $i < $a.length; $i++) {\n        $result += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp1e_182jh.php:8\nStack trace:\n#0 /tmp/tmp1e_182jh.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp1e_182jh.php(19): candidate('111000', '101010')\n#2 /tmp/tmp1e_182jh.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp1e_182jh.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c .= ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjrevmwxs.php:19\nStack trace:\n#0 /tmp/tmpjrevmwxs.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpjrevmwxs.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoqtqmpl0.php:18\nStack trace:\n#0 /tmp/tmpoqtqmpl0.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpoqtqmpl0.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c .= ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjrevmwxs.php:19\nStack trace:\n#0 /tmp/tmpjrevmwxs.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpjrevmwxs.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += $a[$i] ^ $b[$i];\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpasmpkxjr.php:8\nStack trace:\n#0 /tmp/tmpasmpkxjr.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpasmpkxjr.php(19): candidate('111000', '101010')\n#2 /tmp/tmpasmpkxjr.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpasmpkxjr.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmps5_1a7wu.php:9\nStack trace:\n#0 /tmp/tmps5_1a7wu.php(15): string_xor('111000', '101010')\n#1 /tmp/tmps5_1a7wu.php(19): candidate('111000', '101010')\n#2 /tmp/tmps5_1a7wu.php(24): test()\n#3 {main}\n  thrown in /tmp/tmps5_1a7wu.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpf462en_s.php:9\nStack trace:\n#0 /tmp/tmpf462en_s.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpf462en_s.php(19): candidate('111000', '101010')\n#2 /tmp/tmpf462en_s.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpf462en_s.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c .= ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjrevmwxs.php:19\nStack trace:\n#0 /tmp/tmpjrevmwxs.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpjrevmwxs.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp88y3jplb.php:8\nStack trace:\n#0 /tmp/tmp88y3jplb.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp88y3jplb.php(19): candidate('111000', '101010')\n#2 /tmp/tmp88y3jplb.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp88y3jplb.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += $a[$i] ^ $b[$i];\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpasmpkxjr.php:8\nStack trace:\n#0 /tmp/tmpasmpkxjr.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpasmpkxjr.php(19): candidate('111000', '101010')\n#2 /tmp/tmpasmpkxjr.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpasmpkxjr.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpbrsbm8_p.php:8\nStack trace:\n#0 /tmp/tmpbrsbm8_p.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpbrsbm8_p.php(19): candidate('111000', '101010')\n#2 /tmp/tmpbrsbm8_p.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpbrsbm8_p.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c .= ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjrevmwxs.php:19\nStack trace:\n#0 /tmp/tmpjrevmwxs.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpjrevmwxs.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpc557yapb.php:9\nStack trace:\n#0 /tmp/tmpc557yapb.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpc557yapb.php(19): candidate('111000', '101010')\n#2 /tmp/tmpc557yapb.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpc557yapb.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqxck52ir.php:19\nStack trace:\n#0 /tmp/tmpqxck52ir.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpqxck52ir.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c .= ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjrevmwxs.php:19\nStack trace:\n#0 /tmp/tmpjrevmwxs.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpjrevmwxs.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for($i = 0; $i < $a.length; $i++) {\n        $c += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpzsgx38av.php:8\nStack trace:\n#0 /tmp/tmpzsgx38av.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpzsgx38av.php(19): candidate('111000', '101010')\n#2 /tmp/tmpzsgx38av.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpzsgx38av.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for($i = 0; $i < $a.length; $i++) {\n        $c += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpzsgx38av.php:8\nStack trace:\n#0 /tmp/tmpzsgx38av.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpzsgx38av.php(19): candidate('111000', '101010')\n#2 /tmp/tmpzsgx38av.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpzsgx38av.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpj3nr9nk6.php:9\nStack trace:\n#0 /tmp/tmpj3nr9nk6.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpj3nr9nk6.php(19): candidate('111000', '101010')\n#2 /tmp/tmpj3nr9nk6.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpj3nr9nk6.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $c;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpynpkxrwx.php:9\nStack trace:\n#0 /tmp/tmpynpkxrwx.php(14): string_xor('111000', '101010')\n#1 /tmp/tmpynpkxrwx.php(18): candidate('111000', '101010')\n#2 /tmp/tmpynpkxrwx.php(23): test()\n#3 {main}\n  thrown in /tmp/tmpynpkxrwx.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += $a[$i] ^ $b[$i];\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp5p3x8c4r.php:8\nStack trace:\n#0 /tmp/tmp5p3x8c4r.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp5p3x8c4r.php(19): candidate('111000', '101010')\n#2 /tmp/tmp5p3x8c4r.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp5p3x8c4r.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for($i=0; $i<strlen($a); $i++) {\n        $c += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $c;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp1h22pb_w.php:9\nStack trace:\n#0 /tmp/tmp1h22pb_w.php(14): string_xor('111000', '101010')\n#1 /tmp/tmp1h22pb_w.php(18): candidate('111000', '101010')\n#2 /tmp/tmp1h22pb_w.php(23): test()\n#3 {main}\n  thrown in /tmp/tmp1h22pb_w.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmptu9w91nj.php:8\nStack trace:\n#0 /tmp/tmptu9w91nj.php(15): string_xor('111000', '101010')\n#1 /tmp/tmptu9w91nj.php(19): candidate('111000', '101010')\n#2 /tmp/tmptu9w91nj.php(24): test()\n#3 {main}\n  thrown in /tmp/tmptu9w91nj.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c .= ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq6a9w7ge.php:18\nStack trace:\n#0 /tmp/tmpq6a9w7ge.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpq6a9w7ge.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpaqfjran6.php:8\nStack trace:\n#0 /tmp/tmpaqfjran6.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpaqfjran6.php(19): candidate('111000', '101010')\n#2 /tmp/tmpaqfjran6.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpaqfjran6.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp88y3jplb.php:8\nStack trace:\n#0 /tmp/tmp88y3jplb.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp88y3jplb.php(19): candidate('111000', '101010')\n#2 /tmp/tmp88y3jplb.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp88y3jplb.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += $a[$i] ^ $b[$i];\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp5p3x8c4r.php:8\nStack trace:\n#0 /tmp/tmp5p3x8c4r.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp5p3x8c4r.php(19): candidate('111000', '101010')\n#2 /tmp/tmp5p3x8c4r.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp5p3x8c4r.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += $a[$i] ^ $b[$i];\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp5p3x8c4r.php:8\nStack trace:\n#0 /tmp/tmp5p3x8c4r.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp5p3x8c4r.php(19): candidate('111000', '101010')\n#2 /tmp/tmp5p3x8c4r.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp5p3x8c4r.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpc557yapb.php:9\nStack trace:\n#0 /tmp/tmpc557yapb.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpc557yapb.php(19): candidate('111000', '101010')\n#2 /tmp/tmpc557yapb.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpc557yapb.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += $a[$i] == '1' ? $b[$i] : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp2_0d1a_g.php:8\nStack trace:\n#0 /tmp/tmp2_0d1a_g.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp2_0d1a_g.php(19): candidate('111000', '101010')\n#2 /tmp/tmp2_0d1a_g.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp2_0d1a_g.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for($i=0; $i<strlen($a); $i++) {\n        $c += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp7g0wcgeq.php:9\nStack trace:\n#0 /tmp/tmp7g0wcgeq.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp7g0wcgeq.php(19): candidate('111000', '101010')\n#2 /tmp/tmp7g0wcgeq.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp7g0wcgeq.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcyqhl3o9.php:9\nStack trace:\n#0 /tmp/tmpcyqhl3o9.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpcyqhl3o9.php(19): candidate('111000', '101010')\n#2 /tmp/tmpcyqhl3o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpcyqhl3o9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    // your code goes here\n    $result = '';\n    for($i = 0; $i < strlen($a); $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmph2yq3ju5.php:10\nStack trace:\n#0 /tmp/tmph2yq3ju5.php(16): string_xor('111000', '101010')\n#1 /tmp/tmph2yq3ju5.php(20): candidate('111000', '101010')\n#2 /tmp/tmph2yq3ju5.php(25): test()\n#3 {main}\n  thrown in /tmp/tmph2yq3ju5.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for($i = 0; $i < $a.length; $i++) {\n        $result += ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp1e_182jh.php:8\nStack trace:\n#0 /tmp/tmp1e_182jh.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp1e_182jh.php(19): candidate('111000', '101010')\n#2 /tmp/tmp1e_182jh.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp1e_182jh.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += $a[$i] ^ $b[$i];\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpk3nt7wsn.php:9\nStack trace:\n#0 /tmp/tmpk3nt7wsn.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpk3nt7wsn.php(19): candidate('111000', '101010')\n#2 /tmp/tmpk3nt7wsn.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpk3nt7wsn.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += $a[$i] ^ $b[$i];\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp4h9kit4m.php:8\nStack trace:\n#0 /tmp/tmp4h9kit4m.php(14): string_xor('111000', '101010')\n#1 /tmp/tmp4h9kit4m.php(18): candidate('111000', '101010')\n#2 /tmp/tmp4h9kit4m.php(23): test()\n#3 {main}\n  thrown in /tmp/tmp4h9kit4m.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    // your code goes here\n    $result = '';\n    for($i = 0; $i < $a.length; $i++) {\n        $result += $a[$i] ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpeua6w462.php:9\nStack trace:\n#0 /tmp/tmpeua6w462.php(16): string_xor('111000', '101010')\n#1 /tmp/tmpeua6w462.php(20): candidate('111000', '101010')\n#2 /tmp/tmpeua6w462.php(25): test()\n#3 {main}\n  thrown in /tmp/tmpeua6w462.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c = $c . ($a[$i] == \"1\" ? \"0\" : \"1\");\n    }\n    for ($i = 0; $i < strlen($b); $i++) {\n        $c = $c . ($b[$i] == \"1\" ? \"0\" : \"1\");\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyt1v1951.php:22\nStack trace:\n#0 /tmp/tmpyt1v1951.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpyt1v1951.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpsysakotk.php:8\nStack trace:\n#0 /tmp/tmpsysakotk.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpsysakotk.php(19): candidate('111000', '101010')\n#2 /tmp/tmpsysakotk.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpsysakotk.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < $a.length; $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp88y3jplb.php:8\nStack trace:\n#0 /tmp/tmp88y3jplb.php(15): string_xor('111000', '101010')\n#1 /tmp/tmp88y3jplb.php(19): candidate('111000', '101010')\n#2 /tmp/tmp88y3jplb.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp88y3jplb.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $c = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmps5_1a7wu.php:9\nStack trace:\n#0 /tmp/tmps5_1a7wu.php(15): string_xor('111000', '101010')\n#1 /tmp/tmps5_1a7wu.php(19): candidate('111000', '101010')\n#2 /tmp/tmps5_1a7wu.php(24): test()\n#3 {main}\n  thrown in /tmp/tmps5_1a7wu.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result += ($a[$i] == '1' && $b[$i] == '1') ? '1' : '0';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpc557yapb.php:9\nStack trace:\n#0 /tmp/tmpc557yapb.php(15): string_xor('111000', '101010')\n#1 /tmp/tmpc557yapb.php(19): candidate('111000', '101010')\n#2 /tmp/tmpc557yapb.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpc557yapb.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}