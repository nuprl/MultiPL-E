{
  "name": "HumanEval_17_parse_music",
  "language": "php",
  "prompt": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n",
  "tests": "function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $result['whole'] = 0;\n    $result['half'] = 0;\n    $result['quarter'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['hundredtwentyeighth'] = 0;\n    $result['hundredfiftysixteenth'] = 0;\n    $result['threehundredtwentyeighth'] = 0;\n    $result['sixtythreehundredtwentyeighth'] = 0;\n    $result['ninehundredtwentyeighth'] = 0;\n    $result['hundredseventyfourteenth'] = 0;\n    $result['thousandtwentyeight'] = 0;\n    $result['hundredthirtysecond'] = 0;\n    $result['thousandfiftysixteenth'] = 0;\n    $result['thousandseventyfourteenth'] = 0;\n    $result['tenhundredtwentyeighth'] = 0;\n    $result['thousandninetyninehundredtwentyeighth'] = 0;\n    $result['thousandonehundredfiftysixteenth'] = 0;\n    $result['thousandthirtysecond'] = 0;\n    $result['thousandthirtysecond'] = 0;\n    $result['thousandthirtysecond'] = 0;\n    $result['thousandthirtysecond'] = 0;\n    $result['thousandthirtysecond'] = 0;\n    $result['thousandthirtysecond'] = 0;\n    $result['thousandthirtysecond'] = 0;\n    $result['thousandthirtysecond'] = 0;\n    $result['thousandthirtysecond'] = 0;\n    $result['thousandthirtysecond'] = 0;\n    $result['thousandthirtysecond'] = 0;\n    $result['thousandthirtysecond'] = 0;\n    $result['thousandthirtysecond'] = 0;\n    $result['thousandthirtysecond'] = 0;\n    $result['thousandthirtysecond'] = 0;\n    $result['thousandth\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected string content \"thousandth\", expecting \"]\" in /tmp/tmpt9ug3vyj.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    for ($i = 0; $i < count($notes); $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    $result[0] = 0;\n    $result[1] = 0;\n    $result[2] = 0;\n    $result[3] = 0;\n    $result[4] = 0;\n    $result[5] = 0;\n    $result[6] = 0;\n    $result[7] = 0;\n    $result[8] = 0;\n    $result[9] = 0;\n    $result[10] = 0;\n    $result[11] = 0;\n    $result[12] = 0;\n    $result[13] = 0;\n    $result[14] = 0;\n    $result[15] = 0;\n    $result[16] = 0;\n    $result[17] = 0;\n    $result[18] = 0;\n    $result[19] = 0;\n    $result[20] = 0;\n    $result[21] = 0;\n    $result[22] = 0;\n    $result[23] = 0;\n    $result[24] = 0;\n    $result[25] = 0;\n    $result[26] = 0;\n    $result[27] = 0;\n    $result[28] = 0;\n    $result[29] = 0;\n    $result[30] = 0;\n    $result[31] = 0;\n    $result[32] = 0;\n    $result[33] = 0;\n    $result[34] = 0;\n    $result[35] = 0;\n    $result[36] = 0;\n    $result[37] = 0;\n    $result[38] = 0;\n    $result[39] = 0;\n    $result[40] = 0;\n    $result[41] = 0;\n    $result[42] = 0;\n    $result[43] = 0;\n    $result[44] = 0;\n    $result[45] = 0;\n    $result[46] = 0;\n    $result[47] = 0;\n    $result[48] = 0;\n    $\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpfdkj83x7.php on line 64\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $result = array();\n    $result_count = 0;\n    for ($i = 0; $i < $notes_count; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$result_count] = 1;\n            $result_count++;\n        } else if ($notes[$i] == \"o\") {\n            $result[$result_count] = 4;\n            $result_count++;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$result_count] = 2;\n            $result_count++;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf4my_vyo.php:38\nStack trace:\n#0 /tmp/tmpf4my_vyo.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpf4my_vyo.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    $result[0] = 0;\n    for ($i = 0; $i < count($notes); $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqb5iy1t5.php:34\nStack trace:\n#0 /tmp/tmpqb5iy1t5.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqb5iy1t5.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $notes_count = array_fill(0, $notes_count, 0);\n    $notes_count[0] = 4;\n    $notes_count[1] = 2;\n    $notes_count[2] = 1;\n    $notes_count[3] = 2;\n    $notes_count[4] = 2;\n    $notes_count[5] = 1;\n    $notes_count[6] = 1;\n    $notes_count[7] = 1;\n    $notes_count[8] = 1;\n    $notes_count[9] = 4;\n    $notes_count[10] = 4;\n    return $notes_count;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnbq1y_p.php:34\nStack trace:\n#0 /tmp/tmpdnbq1y_p.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdnbq1y_p.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    for ($i = 0; $i < $notes.length; $i++) {\n        $note = $notes[$i];\n        if ($note == \".\") {\n            $result[$i] = 1;\n        } else if ($note == \"o\") {\n            $result[$i] = 4;\n        } else if ($note == \"o|\") {\n            $result[$i] = 2;\n        } else if ($note == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp7b6jtsk0.php:14\nStack trace:\n#0 /tmp/tmp7b6jtsk0.php(30): parse_music('')\n#1 /tmp/tmp7b6jtsk0.php(34): candidate('')\n#2 /tmp/tmp7b6jtsk0.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp7b6jtsk0.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    $note_count_prev = 0;\n    $note_count_prev_prev = 0;\n    $note_count_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmphwmspwwh.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = 0;\n    $current_beat = 0;\n    $current_note_length = 0;\n    $current_note_length_multiplier = 1;\n    $current_note_length_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpnz3lx1ko.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    $note_count_max = 0;\n    $note_count_max_index = 0;\n    $note_count_max_value = 0;\n    $note_count_max_value_index = 0;\n    for($i = 0; $i < count($notes); $i++) {\n        if($notes[$i] == \".\") {\n            $note_count_max_value = $note_count_max;\n            $note_count_max_value_index = $note_count_max_index;\n            $note_count_max = 0;\n            $note_count_max_index = $i;\n        } else if($notes[$i] == \"o\") {\n            $note_count++;\n            $note_count_max++;\n        } else if($notes[$i] == \"o|\") {\n            $note_count++;\n            $note_count_max++;\n        } else if($notes[$i] == \".|\") {\n            $note_count++;\n        }\n    }\n    $note_count_max_value = $note_count_max;\n    $note_count_max_value_index = $note_count_max_index;\n    $note_count_max = 0;\n    $note_count_max_index = $note_count_max_value_index;\n    $note_count_max_value = $note_count_max_value;\n    $note_count_max_value_index = $note_count_max_value_index;\n    $note_count_max = $note_count_max_value;\n    $note_count_max_index = $note_count_max_value_index;\n    $note_count_max_value = $note_count_max_value;\n    $note_count_max_value_index = $note_count_max_value_index;\n    $note_count_max = $note_count_max_value;\n    $note_count_max_index = $note_count_max_value_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmprri3e7_1.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $beats = array();\n    for ($i = 0; $i < $notes_count; $i++) {\n        $note = $notes[$i];\n        if ($note == \".\") {\n            $beats[$i] = 1;\n        } else if ($note == \"o\") {\n            $beats[$i] = 4;\n        } else if ($note == \"o|\") {\n            $beats[$i] = 2;\n        } else if ($note == \".|\") {\n            $beats[$i] = 1;\n        }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    $note_count_array = array();\n    $note_count_array_count = 0;\n    $note_count_array_count_array = array();\n    $note_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpc7ashhn0.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = 0;\n    $current_beat = 0;\n    $current_duration = 0;\n    $current_note_count = 0;\n    $current_note_count_2 = 0;\n    $current_note_count_3 = 0;\n    $current_note_count_4 = 0;\n    $current_note_count_5 = 0;\n    $current_note_count_6 = 0;\n    $current_note_count_7 = 0;\n    $current_note_count_8 = 0;\n    $current_note_count_9 = 0;\n    $current_note_count_10 = 0;\n    $current_note_count_11 = 0;\n    $current_note_count_12 = 0;\n    $current_note_count_13 = 0;\n    $current_note_count_14 = 0;\n    $current_note_count_15 = 0;\n    $current_note_count_16 = 0;\n    $current_note_count_17 = 0;\n    $current_note_count_18 = 0;\n    $current_note_count_19 = 0;\n    $current_note_count_20 = 0;\n    $current_note_count_21 = 0;\n    $current_note_count_22 = 0;\n    $current_note_count_23 = 0;\n    $current_note_count_24 = 0;\n    $current_note_count_25 = 0;\n    $current_note_count_26 = 0;\n    $current_note_count_27 = 0;\n    $current_note_count_28 = 0;\n    $current_note_count_29 = 0;\n    $current_note_count_30 = 0;\n    $current_note_count_31 = 0;\n    $current_note_count_32 = 0;\n    $current_note_count_33 = 0;\n    $current_note_count_34 = 0;\n    $current_note_count_35 = 0;\n    $current_note_count_36 = 0;\n    $current_note_count_37 = 0;\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: Unclosed '{' on line 11 in /tmp/tmpcwqnk0fa.php on line 65\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $result['whole'] = 0;\n    $result['half'] = 0;\n    $result['quarter'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['hundredtwentyeighth'] = 0;\n    $result['hundredfiftysixteenth'] = 0;\n    $result['threehundredtwentyeighth'] = 0;\n    $result['sixtyfourthhundredfiftysixteenth'] = 0;\n    $result['threehundredtwentyeighthhundredfiftysixteenth'] = 0;\n    $result['sixth'] = 0;\n    $result['eighthh'] = 0;\n    $result['sixteenthh'] = 0;\n    $result['thirtysecondh'] = 0;\n    $result['sixtyfourthh'] = 0;\n    $result['hundredtwentyeighthh'] = 0;\n    $result['hundredfiftysixteenthh'] = 0;\n    $result['threehundredtwentyeighthh'] = 0;\n    $result['sixtyfourthhundredfiftysixteenthh'] = 0;\n    $result['threehundredtwentyeighthhh'] = 0;\n    $result['sixthh'] = 0;\n    $result['eighthhh'] = 0;\n    $result['sixteenthhh'] = 0;\n    $result['thirtysecondhh'] = 0;\n    $result['sixtyfourthhh'] = 0;\n    $result['hundredtwentyeighthhh'] = 0;\n    $result['hundredfiftysixteenthhh'] = 0;\n    $result['threehundredtwentyeighthhh'] = 0;\n    $result['sixtyfourthhundredfiftysixteenthhh'] = 0;\n    $result['threehundredtwentyeighthhhh'] = 0;\n    $result['sixthhh'] = 0;\n    $result['eighthhhh'] = 0;\n    $result['sixteenthhhh'] = 0;\n    $result['thirtysecondhhh'] = 0\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp8bybx_pf.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $note_count = 0;\n    $note_duration = 0;\n    $note_beats = 0;\n    $note_beat_duration = 0;\n    $note_beat_duration_count = 0;\n    $note_beat_duration_duration = 0;\n    $note_beat_duration_duration_count = 0;\n    $note_beat_duration_duration_duration = 0;\n    $note_beat_duration_duration_duration_count = 0;\n    $note_beat_duration_duration_duration_duration = 0;\n    $note_beat_duration_duration_duration_duration_count = 0;\n    $note_beat_duration_duration_duration_duration_duration = 0;\n    $note_beat_duration_duration_duration_duration_duration_count = 0;\n    $note_beat_duration_duration_duration_duration_duration_duration = 0;\n    $note_beat_duration_duration_duration_duration_duration_duration_count = 0;\n    $note_beat_duration_duration_duration_duration_duration_duration_duration = 0;\n    $note_beat_duration_duration_duration_duration_duration_duration_duration_count = 0;\n    $note_beat_duration_duration_duration_duration_duration_duration_duration_duration = 0;\n    $note_beat_duration_duration_duration_duration_duration_duration_duration_duration_count = 0;\n    $note_beat_duration_duration_duration_duration_duration_duration_duration_duration_duration = 0;\n    $note_beat_duration_duration_duration_duration_duration_duration_duration_duration_duration_count = 0;\n    $note_beat_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration = 0;\n    $note_beat_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_count = 0;\n    $note_beat_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration = 0;\n    $note_beat_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpnhw4jeaq.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = 0;\n    $current_beat = 0;\n    $current_duration = 0;\n    $current_note_duration = 0;\n    $current_note_duration_multiplier = 1;\n    $current_note_duration_multiplier_multiplier = 1;\n    $current_note_duration_multiplier_multiplier_multiplier = 1;\n    $current_note_duration_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_duration_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp1qxau5c_.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    $result[0] = 0;\n    $result[1] = 0;\n    $result[2] = 0;\n    $result[3] = 0;\n    $result[4] = 0;\n    $result[5] = 0;\n    $result[6] = 0;\n    $result[7] = 0;\n    $result[8] = 0;\n    $result[9] = 0;\n    $result[10] = 0;\n    $result[11] = 0;\n    $result[12] = 0;\n    $result[13] = 0;\n    $result[14] = 0;\n    $result[15] = 0;\n    $result[16] = 0;\n    $result[17] = 0;\n    $result[18] = 0;\n    $result[19] = 0;\n    $result[20] = 0;\n    $result[21] = 0;\n    $result[22] = 0;\n    $result[23] = 0;\n    $result[24] = 0;\n    $result[25] = 0;\n    $result[26] = 0;\n    $result[27] = 0;\n    $result[28] = 0;\n    $result[29] = 0;\n    $result[30] = 0;\n    $result[31] = 0;\n    $result[32] = 0;\n    $result[33] = 0;\n    $result[34] = 0;\n    $result[35] = 0;\n    $result[36] = 0;\n    $result[37] = 0;\n    $result[38] = 0;\n    $result[39] = 0;\n    $result[40] = 0;\n    $result[41] = 0;\n    $result[42] = 0;\n    $result[43] = 0;\n    $result[44] = 0;\n    $result[45] = 0;\n    $result[46] = 0;\n    $result[47] = 0;\n    $result[48] = 0;\n    $\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpfdkj83x7.php on line 64\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $notes_count['whole'] = 0;\n    $notes_count['half'] = 0;\n    $notes_count['quarter'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['hundredtwentyeighth'] = 0;\n    $notes_count['threehundredtwentyeighth'] = 0;\n    $notes_count['sixhundredtwentyeighth'] = 0;\n    $notes_count['ninehundredtwentyeighth'] = 0;\n    $notes_count['onehundredtwentyeighth'] = 0;\n    $notes_count['twohundredtwentyeighth'] = 0;\n    $notes_count['threehundredtwentyeighth'] = 0;\n    $notes_count['fourhundredtwentyeighth'] = 0;\n    $notes_count['fivehundredtwentyeighth'] = 0;\n    $notes_count['sixhundredtwentyeighth'] = 0;\n    $notes_count['sevenhundredtwentyeighth'] = 0;\n    $notes_count['eighthundredtwentyeighth'] = 0;\n    $notes_count['ninehundredtwentyeighth'] = 0;\n    $notes_count['onehundredtwentyeighth'] = 0;\n    $notes_count['twohundredtwentyeighth'] = 0;\n    $notes_count['threehundredtwentyeighth'] = 0;\n    $notes_count['fourhundredtwentyeighth'] = 0;\n    $notes_count['fivehundredtwentyeighth'] = 0;\n    $notes_count['sixhundredtwentyeighth'] = 0;\n    $notes_count['sevenhundredtwentyeighth'] = 0;\n    $notes_count['eighthundredtwentyeighth'] = 0;\n    $notes_count['ninehundredtwentyeighth'] = 0;\n    $notes_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpeux87n48.php on line 44\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    $note_count_max = 0;\n    $note_count_max_index = 0;\n    $note_count_max_value = 0;\n    $note_count_max_value_index = 0;\n    $note_count_max_value_value = 0;\n    $note_count_max_value_value_index = 0;\n    $note_count_max_value_value_value = 0;\n    $note_count_max_value_value_value_index = 0;\n    $note_count_max_value_value_value_value = 0;\n    $note_count_max_value_value_value_value_index = 0;\n    $note_count_max_value_value_value_value_value = 0;\n    $note_count_max_value_value_value_value_value_index = 0;\n    $note_count_max_value_value_value_value_value_value = 0;\n    $note_count_max_value_value_value_value_value_value_index = 0;\n    $note_count_max_value_value_value_value_value_value_value = 0;\n    $note_count_max_value_value_value_value_value_value_value_index = 0;\n    $note_count_max_value_value_value_value_value_value_value_value = 0;\n    $note_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $note_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $note_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $note_count_max_value_value_value_value_value_value_value_value_value_value = 0;\n    $note_count_max_value_value_value_value_value_value_value_value_value_value_index =\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpvs9ycxxc.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $notes_count_array = array();\n    for ($i = 0; $i < $notes_count; $i++) {\n        $note = $notes[$i];\n        $note_count = count($note);\n        $note_count_array[$i] = $note_count;\n    }\n    return $note_count_array;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be of type Countable|array, string given in /tmp/tmp88zd5bw0.php:17\nStack trace:\n#0 /tmp/tmp88zd5bw0.php(24): parse_music('')\n#1 /tmp/tmp88zd5bw0.php(28): candidate('')\n#2 /tmp/tmp88zd5bw0.php(35): test()\n#3 {main}\n  thrown in /tmp/tmp88zd5bw0.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = 0;\n    $current_beat = 0;\n    $current_duration = 0;\n    $current_beat_duration = 0;\n    $current_beat_duration_count = 0;\n    $current_beat_duration_count_max = 0;\n    $current_beat_duration_count_max_index = 0;\n    $current_beat_duration_count_max_value = 0;\n    $current_beat_duration_count_max_value_index = 0;\n    $current_beat_duration_count_max_value_value = 0;\n    $current_beat_duration_count_max_value_value_index = 0;\n    $current_beat_duration_count_max_value_value_value = 0;\n    $current_beat_duration_count_max_value_value_value_index = 0;\n    $current_beat_duration_count_max_value_value_value_value = 0;\n    $current_beat_duration_count_max_value_value_value_value_index = 0;\n    $current_beat_duration_count_max_value_value_value_value_value = 0;\n    $current_beat_duration_count_max_value_value_value_value_value_index = 0;\n    $current_beat_duration_count_max_value_value_value_value_value_value = 0;\n    $current_beat_duration_count_max_value_value_value_value_value_value_index = 0;\n    $current_beat_duration_count_max_value_value_value_value_value_value_value = 0;\n    $current_beat_duration_count_max_value_value_value_value_value_value_value_index = 0;\n    $current_beat_duration_count_max_value_value_value_value_value_value_value_value = 0;\n    $current_beat_duration_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $current_beat_duration_count_max_value_value_value_value_value_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp7atbil_d.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpbpwgwhym.php:14\nStack trace:\n#0 /tmp/tmpbpwgwhym.php(27): parse_music('')\n#1 /tmp/tmpbpwgwhym.php(31): candidate('')\n#2 /tmp/tmpbpwgwhym.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpbpwgwhym.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $count = 0;\n    $beats = 0;\n    $note = '';\n    $last_note = '';\n    $last_beat = 0;\n    $last_beat_count = 0;\n    $last_beat_count_2 = 0;\n    $last_beat_count_3 = 0;\n    $last_beat_count_4 = 0;\n    $last_beat_count_5 = 0;\n    $last_beat_count_6 = 0;\n    $last_beat_count_7 = 0;\n    $last_beat_count_8 = 0;\n    $last_beat_count_9 = 0;\n    $last_beat_count_10 = 0;\n    $last_beat_count_11 = 0;\n    $last_beat_count_12 = 0;\n    $last_beat_count_13 = 0;\n    $last_beat_count_14 = 0;\n    $last_beat_count_15 = 0;\n    $last_beat_count_16 = 0;\n    $last_beat_count_17 = 0;\n    $last_beat_count_18 = 0;\n    $last_beat_count_19 = 0;\n    $last_beat_count_20 = 0;\n    $last_beat_count_21 = 0;\n    $last_beat_count_22 = 0;\n    $last_beat_count_23 = 0;\n    $last_beat_count_24 = 0;\n    $last_beat_count_25 = 0;\n    $last_beat_count_26 = 0;\n    $last_beat_count_27 = 0;\n    $last_beat_count_28 = 0;\n    $last_beat_count_29 = 0;\n    $last_beat_count_30 = 0;\n    $last_beat_count_31 = 0;\n    $last_beat_count_32 = 0;\n    $last_beat_count_33 = 0;\n    $last_beat_count_34 = 0;\n    $last_beat_count_35 = 0;\n    $last_beat_count_36 = 0;\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: Unclosed '{' on line 11 in /tmp/tmp7cubl6ws.php on line 66\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $notes_count['whole'] = 0;\n    $notes_count['half'] = 0;\n    $notes_count['quarter'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['e\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected string content \"e\", expecting \"]\" in /tmp/tmp_l86ocpf.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $notes_count = array_fill($notes_count, 0);\n    $notes_count[0] = 4;\n    $notes_count[1] = 2;\n    $notes_count[2] = 1;\n    $notes_count[3] = 2;\n    $notes_count[4] = 2;\n    $notes_count[5] = 1;\n    $notes_count[6] = 1;\n    $notes_count[7] = 1;\n    $notes_count[8] = 1;\n    $notes_count[9] = 4;\n    $notes_count[10] = 4;\n    return $notes_count;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught ArgumentCountError: array_fill() expects exactly 3 arguments, 2 given in /tmp/tmph0igfge0.php:14\nStack trace:\n#0 /tmp/tmph0igfge0.php(14): array_fill(1, 0)\n#1 /tmp/tmph0igfge0.php(30): parse_music('')\n#2 /tmp/tmph0igfge0.php(34): candidate('')\n#3 /tmp/tmph0igfge0.php(41): test()\n#4 {main}\n  thrown in /tmp/tmph0igfge0.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(' ', $music_string);\n    $notes_count = count($notes);\n    $beats = array();\n    for ($i = 0; $i < $notes_count; $i++) {\n        if ($notes[$i] == '.') {\n            $beats[$i] = 1;\n        } else if ($notes[$i] == 'o') {\n            $beats[$i] = 4;\n        } else if ($notes[$i] == 'o|') {\n            $beats[$i] = 2;\n        }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqk2zaw2t.php:34\nStack trace:\n#0 /tmp/tmpqk2zaw2t.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpqk2zaw2t.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = '';\n    $current_duration = 0;\n    $current_beat = 0;\n    $current_beat_duration = 0;\n    $current_beat_duration_count = 0;\n    $current_beat_duration_count_count = 0;\n    $current_beat_duration_count_count_count = 0;\n    $current_beat_duration_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpopi3wm2p.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $notes_count['whole'] = 0;\n    $notes_count['half'] = 0;\n    $notes_count['quarter'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected string content \"sixteenth\", expecting \"]\" in /tmp/tmpg13zwyo0.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $result = array();\n    $result_count = 0;\n    for ($i = 0; $i < $notes_count; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$result_count] = 0;\n            $result_count++;\n        } else if ($notes[$i] == \"o\") {\n            $result[$result_count] = 4;\n            $result_count++;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$result_count] = 2;\n            $result_count++;\n        } else if ($notes[$i] == \".|\") {\n            $result[$result_count] = 1;\n            $result_count++;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    for ($i = 0; $i < count($notes); $i++) {\n        if ($notes[$i] == \".\") {\n            $note_count = 0;\n        } else if ($notes[$i] == \"o\") {\n            $note_count = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $note_count = 2;\n        } else if ($notes[$i] == \".|\") {\n            $note_count = 1;\n        }\n        $notes_count[$i] = $note_count;\n    }\n    return $notes_count;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ko2nx6i.php:35\nStack trace:\n#0 /tmp/tmp6ko2nx6i.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp6ko2nx6i.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $notes_count['whole'] = 0;\n    $notes_count['half'] = 0;\n    $notes_count['quarter'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['hundredtwentyeighth'] = 0;\n    $notes_count['hundredfiftysixteenth'] = 0;\n    $notes_count['threehundredtwentyeighth'] = 0;\n    $notes_count['sixtythird'] = 0;\n    $notes_count['onehundredtwentyeighth'] = 0;\n    $notes_count['onehundredfiftysixteenth'] = 0;\n    $notes_count['threehundredtwentyeighth'] = 0;\n    $notes_count['fivehundredtwentyeighth'] = 0;\n    $notes_count['sevenhundredtwentyeighth'] = 0;\n    $notes_count['ninehundredtwentyeighth'] = 0;\n    $notes_count['elevenhundredtwentyeighth'] = 0;\n    $notes_count['thirteenhundredtwentyeighth'] = 0;\n    $notes_count['fifteenhundredtwentyeighth'] = 0;\n    $notes_count['seventeenhundredtwentyeighth'] = 0;\n    $notes_count['nineteenhundredtwentyeighth'] = 0;\n    $notes_count['twentyhundredtwentyeighth'] = 0;\n    $notes_count['twentyonehundredtwentyeighth'] = 0;\n    $notes_count['twentytwohundredtwentyeighth'] = 0;\n    $notes_count['twentythreehundredtwentyeighth'] = 0;\n    $notes_count['twentyfourhundredtwentyeighth'] = 0;\n    $notes_count['twentyfivehundredtwentyeighth'] = 0;\n    $notes_count['twentys\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected string content \"twentys\", expecting \"]\" in /tmp/tmpcqgt0og4.php on line 42\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $result['whole'] = 0;\n    $result['half'] = 0;\n    $result['quarter'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['hundredtwentyeighth'] = 0;\n    $result['hundredfiftysixteenth'] = 0;\n    $result['threehundredtwentyeighth'] = 0;\n    $result['sixhundredfiftysixteenth'] = 0;\n    $result['ninehundredtwentyeighth'] = 0;\n    $result['onehundredtwentyeighth'] = 0;\n    $result['twohundredfiftysixteenth'] = 0;\n    $result['threehundredtwentyeighth'] = 0;\n    $result['fourhundredfiftysixteenth'] = 0;\n    $result['fivehundredtwentyeighth'] = 0;\n    $result['sixhundredfiftysixteenth'] = 0;\n    $result['sevenhundredtwentyeighth'] = 0;\n    $result['eighthundredfiftysixteenth'] = 0;\n    $result['ninehundredtwentyeighth'] = 0;\n    $result['tenhundredtwentyeighth'] = 0;\n    $result['elevenhundredtwentyeighth'] = 0;\n    $result['twelvehundredfiftysixteenth'] = 0;\n    $result['thirteenhundredtwentyeighth'] = 0;\n    $result['fourteenhundredfiftysixteenth'] = 0;\n    $result['fifteenhundredtwentyeighth'] = 0;\n    $result['sixteenhundredfiftysixteenth'] = 0;\n    $result['seventeenhundredtwentyeighth'] = 0;\n    $result['eighteenhundredfiftysixteenth'] = 0;\n    $result['nineteenhundredtwentyeighth'] = 0;\n    $result['twentyhundredfiftysixteenth'] = 0;\n    $result['twentyonehundredtwentyeighth'] = 0;\n    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: Unclosed '{' on line 11 in /tmp/tmp4s1eh9gb.php on line 59\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(' ', $music_string);\n    $notes_count = 0;\n    $beats = 0;\n    $note_beats = 0;\n    $note_beats_count = 0;\n    $note_beats_count_max = 0;\n    $note_beats_count_min = 0;\n    $note_beats_count_sum = 0;\n    $note_beats_count_max_index = 0;\n    $note_beats_count_min_index = 0;\n    $note_beats_count_sum_index = 0;\n    $note_beats_count_max_index = 0;\n    $note_beats_count_min_index = 0;\n    $note_beats_count_sum_index = 0;\n    $note_beats_count_max = 0;\n    $note_beats_count_min = 0;\n    $note_beats_count_sum = 0;\n    $note_beats_count_max_index = 0;\n    $note_beats_count_min_index = 0;\n    $note_beats_count_sum_index = 0;\n    $note_beats_count_max = 0;\n    $note_beats_count_min = 0;\n    $note_beats_count_sum = 0;\n    $note_beats_count_max_index = 0;\n    $note_beats_count_min_index = 0;\n    $note_beats_count_sum_index = 0;\n    $note_beats_count_max = 0;\n    $note_beats_count_min = 0;\n    $note_beats_count_sum = 0;\n    $note_beats_count_max_index = 0;\n    $note_beats_count_min_index = 0;\n    $note_beats_count_sum_index = 0;\n    $note_beats_count_max = 0;\n    $note_beats_count_min = 0;\n    $note_beats_count_sum = 0;\n    $note_beats_count_max\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp3mf_eozq.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $notes = explode(\" \", $music_string);\n    $note_count = 0;\n    $note_duration = 0;\n    $note_count_array = array();\n    $note_duration_array = array();\n    $note_count_array_temp = array();\n    $note_duration_array_temp = array();\n    $note_count_array_temp_temp = array();\n    $note_duration_array_temp_temp = array();\n    $note_count_array_temp_temp_temp = array();\n    $note_duration_array_temp_temp_temp = array();\n    $note_count_array_temp_temp_temp_temp = array();\n    $note_duration_array_temp_temp_temp_temp = array();\n    $note_count_array_temp_temp_temp_temp_temp = array();\n    $note_duration_array_temp_temp_temp_temp_temp = array();\n    $note_count_array_temp_temp_temp_temp_temp_temp = array();\n    $note_duration_array_temp_temp_temp_temp_temp_temp = array();\n    $note_count_array_temp_temp_temp_temp_temp_temp_temp = array();\n    $note_duration_array_temp_temp_temp_temp_temp_temp_temp = array();\n    $note_count_array_temp_temp_temp_temp_temp_temp_temp_temp = array();\n    $note_duration_array_temp_temp_temp_temp_temp_temp_temp_temp = array();\n    $note_count_array_temp_temp_temp_temp_temp_temp_temp_temp_temp = array();\n    $note_duration_array_temp_temp_temp_temp_temp_temp_temp_temp_temp = array();\n    $note_count_array_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = array();\n    $note_duration_array_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = array();\n    $note_count_array_temp_temp_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpifezr8ii.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = 0;\n    $current_duration = 0;\n    $current_beat = 0;\n    $current_beat_duration = 0;\n    $current_beat_duration_count = 0;\n    $current_beat_duration_count_count = 0;\n    $current_beat_duration_count_count_count = 0;\n    $current_beat_duration_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp82lgd_5_.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    for ($i = 0; $i < count($notes); $i++) {\n        $note = $notes[$i];\n        if ($note == \".\") {\n            $notes_count[$i] = 1;\n        } else if ($note == \"o\") {\n            $notes_count[$i] = 4;\n        } else if ($note == \"o|\") {\n            $notes_count[$i] = 2;\n        } else if ($note == \".|\") {\n            $notes_count[$i] = 1;\n        }\n    }\n    return $notes_count;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = \"\";\n    $current_note_count = 0;\n    $current_note_duration = 0;\n    $current_note_duration_count = 0;\n    $current_note_duration_count_max = 0;\n    $current_note_duration_count_max_index = 0;\n    $current_note_duration_count_max_count = 0;\n    $current_note_duration_count_max_count_index = 0;\n    $current_note_duration_count_max_count_index_max = 0;\n    $current_note_duration_count_max_count_index_max_index = 0;\n    $current_note_duration_count_max_count_index_max_index_max = 0;\n    $current_note_duration_count_max_count_index_max_index_max_index = 0;\n    $current_note_duration_count_max_count_index_max_index_max_index_max = 0;\n    $current_note_duration_count_max_count_index_max_index_max_index_max_index = 0;\n    $current_note_duration_count_max_count_index_max_index_max_index_max_index_max = 0;\n    $current_note_duration_count_max_count_index_max_index_max_index_max_index_max_index = 0;\n    $current_note_duration_count_max_count_index_max_index_max_index_max_index_max_index = 0;\n    $current_note_duration_count_max_count_index_max_index_max_index_max_index_max_index = 0;\n    $current_note_duration_count_max_count_index_max_index_max_index_max_index_max_index = 0;\n    $current_note_duration_count_max_count_index_max_index_max_index_max_index_max_index = 0;\n    $current_note_duration_count_max_count_index_max_index_max_index_max_index_max\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp7rf8a94w.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $notes_count[0] = 0;\n    $notes_count[1] = 0;\n    $notes_count[2] = 0;\n    $notes_count[3] = 0;\n    $notes_count[4] = 0;\n    $notes_count[5] = 0;\n    $notes_count[6] = 0;\n    $notes_count[7] = 0;\n    $notes_count[8] = 0;\n    $notes_count[9] = 0;\n    $notes_count[10] = 0;\n    $notes_count[11] = 0;\n    $notes_count[12] = 0;\n    $notes_count[13] = 0;\n    $notes_count[14] = 0;\n    $notes_count[15] = 0;\n    $notes_count[16] = 0;\n    $notes_count[17] = 0;\n    $notes_count[18] = 0;\n    $notes_count[19] = 0;\n    $notes_count[20] = 0;\n    $notes_count[21] = 0;\n    $notes_count[22] = 0;\n    $notes_count[23] = 0;\n    $notes_count[24] = 0;\n    $notes_count[25] = 0;\n    $notes_count[26] = 0;\n    $notes_count[27] = 0;\n    $notes_count[28] = 0;\n    $notes_count[29] = 0;\n    $notes_count[30] = 0;\n    $notes_count[31] = 0;\n    $notes_count[32] = 0;\n    $notes_count[33] = 0;\n    $notes_count[34] = 0;\n    $notes_count[35] = 0;\n    $notes_count[36] = 0;\n    $notes_count[37] = 0;\n    $notes_count[38] = 0;\n    $notes_count[39] = 0;\n    $notes_count[40] = 0\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp3_nzt_y6.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $notes_count['whole'] = 0;\n    $notes_count['half'] = 0;\n    $notes_count['quarter'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected string content \"sixteenth\", expecting \"]\" in /tmp/tmpg13zwyo0.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $notes = explode(\" \", $music_string);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result,\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpha0_eam8.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    $note_count_array = array();\n    $note_count_array_count = 0;\n    $note_count_array_count_array = array();\n    $note_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpc7ashhn0.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = 0;\n    $current_beat = 0;\n    $current_note_length = 0;\n    $current_note_length_count = 0;\n    $current_note_length_count_max = 0;\n    $current_note_length_count_max_index = 0;\n    $current_note_length_count_max_index_max = 0;\n    $current_note_length_count_max_index_max_index = 0;\n    $current_note_length_count_max_index_max_index_max = 0;\n    $current_note_length_count_max_index_max_index_max_index = 0;\n    $current_note_length_count_max_index_max_index_max_index_max = 0;\n    $current_note_length_count_max_index_max_index_max_index_max_index = 0;\n    $current_note_length_count_max_index_max_index_max_index_max_index_max = 0;\n    $current_note_length_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $current_note_length_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $current_note_length_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $current_note_length_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $current_note_length_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $current_note_length_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $current_note_length_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $current\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmphacol2g1.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $notes_count['whole'] = 0;\n    $notes_count['half'] = 0;\n    $notes_count['quarter'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['hundredtwentyeighth'] = 0;\n    $notes_count['hundredfiftysixteenth'] = 0;\n    $notes_count['threehundredtwentyeighth'] = 0;\n    $notes_count['sixtythreehundredtwentyeighth'] = 0;\n    $notes_count['sixthirtysecond'] = 0;\n    $notes_count['ninehundredtwentyeighth'] = 0;\n    $notes_count['ninehundredfiftysixteenth'] = 0;\n    $notes_count['onehundredtwentyeighth'] = 0;\n    $notes_count['onehundredfiftysixteenth'] = 0;\n    $notes_count['twohundredtwentyeighth'] = 0;\n    $notes_count['twohundredfiftysixteenth'] = 0;\n    $notes_count['threehundredtwentyeighth'] = 0;\n    $notes_count['threehundredfiftysixteenth'] = 0;\n    $notes_count['fourhundredtwentyeighth'] = 0;\n    $notes_count['fourhundredfiftysixteenth'] = 0;\n    $notes_count['fivehundredtwentyeighth'] = 0;\n    $notes_count['fivehundredfiftysixteenth'] = 0;\n    $notes_count['sixhundredtwentyeighth'] = 0;\n    $notes_count['sixhundredfiftysixteenth'] = 0;\n    $notes_count['sevenhundredtwentyeighth'] = 0;\n    $notes_count['sevenhundredfiftysixteenth'] = 0;\n    $notes_count['eighthundredtwentyeighth'] = 0;\n    $notes_count\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp0hy_e2k7.php on line 44\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = 0;\n    $current_beat = 0;\n    $current_note_count = 0;\n    $current_beat_count = 0;\n    $current_note_count_max = 0;\n    $current_beat_count_max = 0;\n    $current_note_count_max_max = 0;\n    $current_beat_count_max_max = 0;\n    $current_note_count_max_max_max = 0;\n    $current_beat_count_max_max_max = 0;\n    $current_note_count_max_max_max_max = 0;\n    $current_beat_count_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max = 0;\n    $current_beat_count_max_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max_max = 0;\n    $current_beat_count_max_max_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max_max_max = 0;\n    $current_beat_count_max_max_max_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max_max_max_max = 0;\n    $current_beat_count_max_max_max_max_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max_max_max_max_max = 0;\n    $current_beat_count_max_max_max_max_max_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max_max_max_max_max_max = 0;\n    $current_beat_count_max_max_max_max_max_max_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max_max_max_max_max\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpdq368y81.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    $note_count_array = array();\n    $note_count_array_count = 0;\n    $note_count_array_count_max = 0;\n    $note_count_array_count_max_index = 0;\n    $note_count_array_count_max_value = 0;\n    $note_count_array_count_max_value_index = 0;\n    $note_count_array_count_max_value_value = 0;\n    $note_count_array_count_max_value_value_index = 0;\n    $note_count_array_count_max_value_value_value = 0;\n    $note_count_array_count_max_value_value_value_index = 0;\n    $note_count_array_count_max_value_value_value_value = 0;\n    $note_count_array_count_max_value_value_value_value_index = 0;\n    $note_count_array_count_max_value_value_value_value_value = 0;\n    $note_count_array_count_max_value_value_value_value_value_index = 0;\n    $note_count_array_count_max_value_value_value_value_value_value = 0;\n    $note_count_array_count_max_value_value_value_value_value_value_index = 0;\n    $note_count_array_count_max_value_value_value_value_value_value_value = 0;\n    $note_count_array_count_max_value_value_value_value_value_value_value_index = 0;\n    $note_count_array_count_max_value_value_value_value_value_value_value_value = 0;\n    $note_count_array_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $note_count_array_count_max_value_value_value_value_value_value_value\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp21csro4o.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    $result[0] = 0;\n    for ($i = 0; $i < count($notes); $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 0;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt8ws2z80.php:34\nStack trace:\n#0 /tmp/tmpt8ws2z80.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpt8ws2z80.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = 0;\n    $current_beat = 0;\n    $current_note_length = 0;\n    $current_note_length_multiplier = 1;\n    $current_note_length_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpnz3lx1ko.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $notes = explode(\" \", $music_string);\n    $note_count = 0;\n    $note_duration = 0;\n    $note_duration_count = 0;\n    $note_duration_count_max = 0;\n    $note_duration_count_max_index = 0;\n    $note_duration_count_max_value = 0;\n    $note_duration_count_max_value_index = 0;\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $note_duration_count_max = $note_duration_count;\n            $note_duration_count_max_index = $i;\n            $note_duration_count_max_value = $note_duration_count;\n            $note_duration_count_max_value_index = $i;\n        }\n        if ($notes[$i] == \"o\") {\n            $note_duration_count++;\n        }\n        if ($notes[$i] == \"o|\") {\n            $note_duration_count++;\n        }\n        if ($notes[$i] == \".|\") {\n            $note_duration_count++;\n        }\n        if ($note_duration_count > $note_duration_count_max) {\n            $note_duration_count_max = $note_duration_count;\n            $note_duration_count_max_index = $i;\n            $note_duration_count_max_value = $note_duration_count;\n            $note_duration_count_max_value_index = $i;\n        }\n        if ($note_duration_count == $note_duration_count_max) {\n            $note_duration_count = 0;\n            $note_duration++;\n        }\n        $note_duration_count = 0;\n    }\n    $result[0] = $note_duration_count_max;\n    $result[1] = $note_duration_count_max_index;\n    $result[2] = $note_duration_count_max_value;\n    $result[3] = $note_duration\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpcl5e06b4.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpkrgemdrh.php:14\nStack trace:\n#0 /tmp/tmpkrgemdrh.php(29): parse_music('')\n#1 /tmp/tmpkrgemdrh.php(33): candidate('')\n#2 /tmp/tmpkrgemdrh.php(40): test()\n#3 {main}\n  thrown in /tmp/tmpkrgemdrh.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    $result[0] = 0;\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 0;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp57wjjybk.php:15\nStack trace:\n#0 /tmp/tmp57wjjybk.php(30): parse_music('')\n#1 /tmp/tmp57wjjybk.php(34): candidate('')\n#2 /tmp/tmp57wjjybk.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp57wjjybk.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    $result[0] = 0;\n    $result[1] = 0;\n    $result[2] = 0;\n    $result[3] = 0;\n    $result[4] = 0;\n    $result[5] = 0;\n    $result[6] = 0;\n    $result[7] = 0;\n    $result[8] = 0;\n    $result[9] = 0;\n    $result[10] = 0;\n    $result[11] = 0;\n    $result[12] = 0;\n    $result[13] = 0;\n    $result[14] = 0;\n    $result[15] = 0;\n    $result[16] = 0;\n    $result[17] = 0;\n    $result[18] = 0;\n    $result[19] = 0;\n    $result[20] = 0;\n    $result[21] = 0;\n    $result[22] = 0;\n    $result[23] = 0;\n    $result[24] = 0;\n    $result[25] = 0;\n    $result[26] = 0;\n    $result[27] = 0;\n    $result[28] = 0;\n    $result[29] = 0;\n    $result[30] = 0;\n    $result[31] = 0;\n    $result[32] = 0;\n    $result[33] = 0;\n    $result[34] = 0;\n    $result[35] = 0;\n    $result[36] = 0;\n    $result[37] = 0;\n    $result[38] = 0;\n    $result[39] = 0;\n    $result[40] = 0;\n    $result[41] = 0;\n    $result[42] = 0;\n    $result[43] = 0;\n    $result[44] = 0;\n    $result[45] = 0;\n    $result[46] = 0;\n    $result[47] = 0;\n    $result[48\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"]\" in /tmp/tmpfwvsb13p.php on line 64\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    for ($i = 0; $i < count($notes); $i++) {\n        if ($notes[$i] == \".\") {\n            $notes_count[count($notes_count)] = 0;\n        } else if ($notes[$i] == \"o\") {\n            $notes_count[count($notes_count)] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $notes_count[count($notes_count)] = 2;\n        } else if ($notes[$i] == \".|\") {\n            $notes_count[count($notes_count)] = 1;\n        }\n    }\n    return $notes_count;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $result = array();\n    for ($i = 0; $i < $notes_count; $i++) {\n        $note = $notes[$i];\n        if ($note == \".\") {\n            $result[$i] = 1;\n        } else if ($note == \"o\") {\n            $result[$i] = 4;\n        } else if ($note == \"o|\") {\n            $result[$i] = 2;\n        } else if ($note == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    $result[0] = 0;\n    $result[1] = 0;\n    $result[2] = 0;\n    $result[3] = 0;\n    $result[4] = 0;\n    $result[5] = 0;\n    $result[6] = 0;\n    $result[7] = 0;\n    $result[8] = 0;\n    $result[9] = 0;\n    $result[10] = 0;\n    $result[11] = 0;\n    $result[12] = 0;\n    $result[13] = 0;\n    $result[14] = 0;\n    $result[15] = 0;\n    $result[16] = 0;\n    $result[17] = 0;\n    $result[18] = 0;\n    $result[19] = 0;\n    $result[20] = 0;\n    $result[21] = 0;\n    $result[22] = 0;\n    $result[23] = 0;\n    $result[24] = 0;\n    $result[25] = 0;\n    $result[26] = 0;\n    $result[27] = 0;\n    $result[28] = 0;\n    $result[29] = 0;\n    $result[30] = 0;\n    $result[31] = 0;\n    $result[32] = 0;\n    $result[33] = 0;\n    $result[34] = 0;\n    $result[35] = 0;\n    $result[36] = 0;\n    $result[37] = 0;\n    $result[38] = 0;\n    $result[39] = 0;\n    $result[40] = 0;\n    $result[41] = 0;\n    $result[42] = 0;\n    $result[43] = 0;\n    $result[44] = 0;\n    $result[45] = 0;\n    $result[46] = 0;\n    $result[47] = 0;\n    $result[48] = 0;\n    $\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpfdkj83x7.php on line 64\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $beats = 0;\n    $note = '';\n    $note_count = 0;\n    $note_duration = 0;\n    $note_duration_count = 0;\n    $note_duration_duration = 0;\n    $note_duration_duration_count = 0;\n    $note_duration_duration_duration = 0;\n    $note_duration_duration_duration_count = 0;\n    $note_duration_duration_duration_duration = 0;\n    $note_duration_duration_duration_duration_count = 0;\n    $note_duration_duration_duration_duration_duration = 0;\n    $note_duration_duration_duration_duration_duration_count = 0;\n    $note_duration_duration_duration_duration_duration_duration = 0;\n    $note_duration_duration_duration_duration_duration_duration_count = 0;\n    $note_duration_duration_duration_duration_duration_duration_duration = 0;\n    $note_duration_duration_duration_duration_duration_duration_duration_count = 0;\n    $note_duration_duration_duration_duration_duration_duration_duration_duration = 0;\n    $note_duration_duration_duration_duration_duration_duration_duration_duration_count = 0;\n    $note_duration_duration_duration_duration_duration_duration_duration_duration_duration = 0;\n    $note_duration_duration_duration_duration_duration_duration_duration_duration_duration_count = 0;\n    $note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration = 0;\n    $note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_count = 0;\n    $note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration = 0;\n    $note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_count = 0;\n    $note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration = 0;\n    $note_duration_duration_duration_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpvqoyvfuy.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpkrgemdrh.php:14\nStack trace:\n#0 /tmp/tmpkrgemdrh.php(29): parse_music('')\n#1 /tmp/tmpkrgemdrh.php(33): candidate('')\n#2 /tmp/tmpkrgemdrh.php(40): test()\n#3 {main}\n  thrown in /tmp/tmpkrgemdrh.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    $result[0] = 0;\n    $result[1] = 0;\n    $result[2] = 0;\n    $result[3] = 0;\n    $result[4] = 0;\n    $result[5] = 0;\n    $result[6] = 0;\n    $result[7] = 0;\n    $result[8] = 0;\n    $result[9] = 0;\n    $result[10] = 0;\n    $result[11] = 0;\n    $result[12] = 0;\n    $result[13] = 0;\n    $result[14] = 0;\n    $result[15] = 0;\n    $result[16] = 0;\n    $result[17] = 0;\n    $result[18] = 0;\n    $result[19] = 0;\n    $result[20] = 0;\n    $result[21] = 0;\n    $result[22] = 0;\n    $result[23] = 0;\n    $result[24] = 0;\n    $result[25] = 0;\n    $result[26] = 0;\n    $result[27] = 0;\n    $result[28] = 0;\n    $result[29] = 0;\n    $result[30] = 0;\n    $result[31] = 0;\n    $result[32] = 0;\n    $result[33] = 0;\n    $result[34] = 0;\n    $result[35] = 0;\n    $result[36] = 0;\n    $result[37] = 0;\n    $result[38] = 0;\n    $result[39] = 0;\n    $result[40] = 0;\n    $result[41] = 0;\n    $result[42] = 0;\n    $result[43] = 0;\n    $result[44] = 0;\n    $result[45] = 0;\n    $result[46] = 0;\n    $result[47] = 0;\n    $result[48] = 0;\n    $\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpfdkj83x7.php on line 64\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    $result[0] = 0;\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 0;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpr35unm75.php:15\nStack trace:\n#0 /tmp/tmpr35unm75.php(30): parse_music('')\n#1 /tmp/tmpr35unm75.php(34): candidate('')\n#2 /tmp/tmpr35unm75.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpr35unm75.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $notes = explode(\" \", $music_string);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result,\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpha0_eam8.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $result['whole'] = 0;\n    $result['half'] = 0;\n    $result['quarter'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['eighth'] = 0;\n    $result\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmps8ie2nfv.php on line 58\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $note_count = 0;\n    $note_duration = 0;\n    $note_duration_count = 0;\n    $note_duration_count_max = 0;\n    $note_duration_count_min = 0;\n    $note_duration_count_max_index = 0;\n    $note_duration_count_min_index = 0;\n    $note_duration_count_max_index_prev = 0;\n    $note_duration_count_min_index_prev = 0;\n    $note_duration_count_max_index_next = 0;\n    $note_duration_count_min_index_next = 0;\n    $note_duration_count_max_index_next_prev = 0;\n    $note_duration_count_min_index_next_prev = 0;\n    $note_duration_count_max_index_next_next = 0;\n    $note_duration_count_min_index_next_next = 0;\n    $note_duration_count_max_index_next_next_prev = 0;\n    $note_duration_count_min_index_next_next_prev = 0;\n    $note_duration_count_max_index_next_next_next = 0;\n    $note_duration_count_min_index_next_next_next = 0;\n    $note_duration_count_max_index_next_next_next_prev = 0;\n    $note_duration_count_min_index_next_next_next_prev = 0;\n    $note_duration_count_max_index_next_next_next_next = 0;\n    $note_duration_count_min_index_next_next_next_next = 0;\n    $note_duration_count_max_index_next_next_next_next_prev = 0;\n    $note_duration_count_min_index_next_next_next_next_prev = 0;\n    $note_duration_count_max_index_next_next_next_next_next = 0;\n    $note_duration_count_min_index_next_next_next_next_next = 0;\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: Unclosed '{' on line 11 in /tmp/tmpdl03tadf.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $notes_count_array = array();\n    $i = 0;\n    while($i < $notes_count) {\n        $note = $notes[$i];\n        $note_count = count($note);\n        $note_count_array[$i] = $note_count;\n        $i++;\n    }\n    return $note_count_array;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be of type Countable|array, string given in /tmp/tmpk8___zps.php:18\nStack trace:\n#0 /tmp/tmpk8___zps.php(26): parse_music('')\n#1 /tmp/tmpk8___zps.php(30): candidate('')\n#2 /tmp/tmpk8___zps.php(37): test()\n#3 {main}\n  thrown in /tmp/tmpk8___zps.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    foreach($notes as $note) {\n        if ($note == \".\") {\n            $note_count += 1;\n        } else if ($note == \"o\") {\n            $note_count += 4;\n        } else if ($note == \"o|\") {\n            $note_count += 2;\n        } else if ($note == \".|\") {\n            $note_count += 1;\n        }\n        $notes_count[$note_count] = $notes_count[$note_count] + 1;\n    }\n    return $notes_count;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nWarning: Undefined array key 0 in /tmp/tmpr4kf7ilq.php on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr4kf7ilq.php:35\nStack trace:\n#0 /tmp/tmpr4kf7ilq.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpr4kf7ilq.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $notes_count[0] = 1;\n    $notes_count[1] = 1;\n    $notes_count[2] = 1;\n    $notes_count[3] = 1;\n    $notes_count[4] = 1;\n    $notes_count[5] = 1;\n    $notes_count[6] = 1;\n    $notes_count[7] = 1;\n    $notes_count[8] = 1;\n    $notes_count[9] = 1;\n    $notes_count[10] = 1;\n    $notes_count[11] = 1;\n    $notes_count[12] = 1;\n    $notes_count[13] = 1;\n    $notes_count[14] = 1;\n    $notes_count[15] = 1;\n    $notes_count[16] = 1;\n    $notes_count[17] = 1;\n    $notes_count[18] = 1;\n    $notes_count[19] = 1;\n    $notes_count[20] = 1;\n    $notes_count[21] = 1;\n    $notes_count[22] = 1;\n    $notes_count[23] = 1;\n    $notes_count[24] = 1;\n    $notes_count[25] = 1;\n    $notes_count[26] = 1;\n    $notes_count[27] = 1;\n    $notes_count[28] = 1;\n    $notes_count[29] = 1;\n    $notes_count[30] = 1;\n    $notes_count[31] = 1;\n    $notes_count[32] = 1;\n    $notes_count[33] = 1;\n    $notes_count[34] = 1;\n    $notes_count[35] = 1;\n    $notes_count[36] = 1;\n    $notes_count[37] = 1;\n    $notes_count[38] = 1;\n    $notes_count[39] = 1;\n    $notes_count[40] = 1\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp6vpqztbq.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $result = array();\n    for ($i = 0; $i < $notes_count; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqxv6yu_m.php:36\nStack trace:\n#0 /tmp/tmpqxv6yu_m.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqxv6yu_m.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = 0;\n    $current_beat = 0;\n    $current_note_count = 0;\n    $current_beat_count = 0;\n    $current_note_count_max = 0;\n    $current_beat_count_max = 0;\n    $current_note_count_max_max = 0;\n    $current_beat_count_max_max = 0;\n    $current_note_count_max_max_max = 0;\n    $current_beat_count_max_max_max = 0;\n    $current_note_count_max_max_max_max = 0;\n    $current_beat_count_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max = 0;\n    $current_beat_count_max_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max_max = 0;\n    $current_beat_count_max_max_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max_max_max = 0;\n    $current_beat_count_max_max_max_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max_max_max_max = 0;\n    $current_beat_count_max_max_max_max_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max_max_max_max_max = 0;\n    $current_beat_count_max_max_max_max_max_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max_max_max_max_max_max = 0;\n    $current_beat_count_max_max_max_max_max_max_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max_max_max_max_max\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpdq368y81.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = '';\n    $current_duration = 0;\n    $current_beat = 0;\n    $current_beats = 0;\n    $current_note_count = 0;\n    $current_note_duration = 0;\n    $current_note_duration_count = 0;\n    $current_note_duration_duration = 0;\n    $current_note_duration_duration_count = 0;\n    $current_note_duration_duration_duration = 0;\n    $current_note_duration_duration_duration_count = 0;\n    $current_note_duration_duration_duration_duration = 0;\n    $current_note_duration_duration_duration_duration_count = 0;\n    $current_note_duration_duration_duration_duration_duration = 0;\n    $current_note_duration_duration_duration_duration_duration_count = 0;\n    $current_note_duration_duration_duration_duration_duration_duration = 0;\n    $current_note_duration_duration_duration_duration_duration_duration_count = 0;\n    $current_note_duration_duration_duration_duration_duration_duration_duration = 0;\n    $current_note_duration_duration_duration_duration_duration_duration_duration_count = 0;\n    $current_note_duration_duration_duration_duration_duration_duration_duration_duration = 0;\n    $current_note_duration_duration_duration_duration_duration_duration_duration_duration_count = 0;\n    $current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration = 0;\n    $current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_count = 0;\n    $current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration = 0;\n    $current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_count = 0;\n    $current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration = 0;\n    $current_note_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpmdte8wuv.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $notes_count_array = array();\n    $i = 0;\n    while ($i < $notes_count) {\n        $note = $notes[$i];\n        $note_count = count($note);\n        $note_count_array[$i] = $note_count;\n        $i++;\n    }\n    return $note_count_array;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be of type Countable|array, string given in /tmp/tmpk5qfd126.php:18\nStack trace:\n#0 /tmp/tmpk5qfd126.php(26): parse_music('')\n#1 /tmp/tmpk5qfd126.php(30): candidate('')\n#2 /tmp/tmpk5qfd126.php(37): test()\n#3 {main}\n  thrown in /tmp/tmpk5qfd126.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp6p0ka4nd.php:14\nStack trace:\n#0 /tmp/tmp6p0ka4nd.php(29): parse_music('')\n#1 /tmp/tmp6p0ka4nd.php(33): candidate('')\n#2 /tmp/tmp6p0ka4nd.php(40): test()\n#3 {main}\n  thrown in /tmp/tmp6p0ka4nd.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = \"\";\n    $current_note_count = 0;\n    $current_note_duration = 0;\n    $current_note_duration_count = 0;\n    $current_note_duration_count_2 = 0;\n    $current_note_duration_count_3 = 0;\n    $current_note_duration_count_4 = 0;\n    $current_note_duration_count_5 = 0;\n    $current_note_duration_count_6 = 0;\n    $current_note_duration_count_7 = 0;\n    $current_note_duration_count_8 = 0;\n    $current_note_duration_count_9 = 0;\n    $current_note_duration_count_10 = 0;\n    $current_note_duration_count_11 = 0;\n    $current_note_duration_count_12 = 0;\n    $current_note_duration_count_13 = 0;\n    $current_note_duration_count_14 = 0;\n    $current_note_duration_count_15 = 0;\n    $current_note_duration_count_16 = 0;\n    $current_note_duration_count_17 = 0;\n    $current_note_duration_count_18 = 0;\n    $current_note_duration_count_19 = 0;\n    $current_note_duration_count_20 = 0;\n    $current_note_duration_count_21 = 0;\n    $current_note_duration_count_22 = 0;\n    $current_note_duration_count_23 = 0;\n    $current_note_duration_count_24 = 0;\n    $current_note_duration_count_25 = 0;\n    $current_note_duration_count_26 = 0;\n    $current_note_duration_count_27 = 0;\n    $current_note_duration_count_28 = 0;\n    $current_note_duration_count_29 = 0;\n    $current_note_duration_count_30 = 0;\n    $current_note_duration_count_31 = 0;\n    $current_note_duration_count_32\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp71nxxaja.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp228nrxm_.php:15\nStack trace:\n#0 /tmp/tmp228nrxm_.php(30): parse_music('')\n#1 /tmp/tmp228nrxm_.php(34): candidate('')\n#2 /tmp/tmp228nrxm_.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp228nrxm_.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = 0;\n    $current_beat = 0;\n    $current_duration = 0;\n    $current_note_count = 0;\n    $current_note_duration = 0;\n    $current_note_duration_count = 0;\n    $current_note_duration_count_count = 0;\n    $current_note_duration_count_count_count = 0;\n    $current_note_duration_count_count_count_count = 0;\n    $current_note_duration_count_count_count_count_count = 0;\n    $current_note_duration_count_count_count_count_count_count = 0;\n    $current_note_duration_count_count_count_count_count_count_count = 0;\n    $current_note_duration_count_count_count_count_count_count_count_count = 0;\n    $current_note_duration_count_count_count_count_count_count_count_count_count = 0;\n    $current_note_duration_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_note_duration_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_note_duration_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_note_duration_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_note_duration_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_note_duration_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_note_duration_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_note_duration_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpms_pqd_i.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = 0;\n    $current_beat = 0;\n    $current_note_count = 0;\n    $current_note_count_max = 0;\n    $current_note_count_max_max = 0;\n    $current_note_count_max_max_max = 0;\n    $current_note_count_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max_max_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $current_note_count_max_max_max_max_max_max_max_max_max_max_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpidww5l8m.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = \"\";\n    $current_duration = 0;\n    $current_beat = 0;\n    $current_beat_duration = 0;\n    $current_beat_duration_count = 0;\n    $current_beat_duration_count_count = 0;\n    $current_beat_duration_count_count_count = 0;\n    $current_beat_duration_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpm9tumv9u.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $notes = explode(\" \", $music_string);\n    $note_count = 0;\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $note_count = 0;\n        } else if ($notes[$i] == \"o\") {\n            $note_count++;\n        } else if ($notes[$i] == \"o|\") {\n            $note_count += 2;\n        } else if ($notes[$i] == \".|\") {\n            $note_count += 4;\n        }\n        $result[$i] = $note_count;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpkn2e566o.php:15\nStack trace:\n#0 /tmp/tmpkn2e566o.php(31): parse_music('')\n#1 /tmp/tmpkn2e566o.php(35): candidate('')\n#2 /tmp/tmpkn2e566o.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpkn2e566o.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    $note_count_max = 0;\n    $note_count_max_index = 0;\n    $note_count_max_value = 0;\n    $note_count_max_value_index = 0;\n    for ($i = 0; $i < $notes_count; $i++) {\n        if ($notes[$i] == \".\") {\n            $note_count_max_value = $note_count;\n            $note_count_max_value_index = $i;\n        }\n        if ($notes[$i] == \"o\") {\n            $note_count++;\n        }\n        if ($notes[$i] == \"o|\") {\n            $note_count++;\n        }\n        if ($notes[$i] == \".|\") {\n            $note_count++;\n        }\n        if ($note_count > $note_count_max) {\n            $note_count_max = $note_count;\n            $note_count_max_index = $i;\n        }\n    }\n    $note_count_max_value = $note_count_max_value - $note_count_max_value_index;\n    $note_count_max_value_index = $note_count_max_value_index + $note_count_max_value;\n    $note_count_max_value = $note_count_max_value - $note_count_max_value_index;\n    $note_count_max_value_index = $note_count_max_value_index + $note_count_max_value;\n    $note_count_max_value = $note_count_max_value - $note_count_max_value_index;\n    $note_count_max_value_index = $note_count_max_value_index + $note_count_max_value;\n    $note_count_max_value = $note_count_max_value - $note_count_max_value_index;\n    $note_count_max_value_index = $note_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsi9jr2vf.php on line 46\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $notes_count_array = array();\n    $i = 0;\n    while($i < $notes_count){\n        $note = $notes[$i];\n        $note_count = count($note);\n        $note_count_array[$i] = $note_count;\n        $i++;\n    }\n    return $note_count_array;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be of type Countable|array, string given in /tmp/tmpbvy7qobq.php:18\nStack trace:\n#0 /tmp/tmpbvy7qobq.php(26): parse_music('')\n#1 /tmp/tmpbvy7qobq.php(30): candidate('')\n#2 /tmp/tmpbvy7qobq.php(37): test()\n#3 {main}\n  thrown in /tmp/tmpbvy7qobq.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    $note_count_max = 0;\n    $note_count_max_index = 0;\n    $note_count_max_index_max = 0;\n    $note_count_max_index_max_index = 0;\n    $note_count_max_index_max_index_max = 0;\n    for ($i = 0; $i < $notes_count; $i++) {\n        if ($notes[$i] == \".\") {\n            $note_count_max_index_max_index_max = $note_count_max_index_max_index;\n            $note_count_max_index_max_index = $note_count_max_index;\n            $note_count_max_index = $note_count;\n            $note_count = 0;\n            $note_count_max = 0;\n            $note_count_max_index_max = 0;\n            $note_count_max_index_max_index = 0;\n            $note_count_max_index_max_index_max = 0;\n        } else if ($notes[$i] == \"o\") {\n            $note_count++;\n            $note_count_max++;\n            $note_count_max_index++;\n            $note_count_max_index_max++;\n            $note_count_max_index_max_index++;\n        } else if ($notes[$i] == \"o|\") {\n            $note_count++;\n            $note_count_max++;\n            $note_count_max_index++;\n            $note_count_max_index_max++;\n            $note_count_max_index_max_index++;\n        } else if ($notes[$i] == \".|\") {\n            $note_count++;\n            $note_count_max++;\n            $note_count_max_index++;\n            $note_count_max_index_max++;\n            $note_count_max_index_max_index++;\n        }\n    }\n    $note_count_max_index_max_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp3qhk23gp.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = '';\n    $current_duration = 0;\n    $current_beat = 0;\n    $current_beat_duration = 0;\n    $current_beat_duration_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpqi_nt5wa.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $note_count = 0;\n    $note_duration = 0;\n    $note_duration_count = 0;\n    $note_duration_count_prev = 0;\n    $note_duration_count_prev_prev = 0;\n    $note_duration_count_prev_prev_prev = 0;\n    $note_duration_count_prev_prev_prev_prev = 0;\n    $note_duration_count_prev_prev_prev_prev_prev = 0;\n    $note_duration_count_prev_prev_prev_prev_prev_prev = 0;\n    $note_duration_count_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_duration_count_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_duration_count_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_duration_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_duration_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_duration_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_duration_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_duration_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_duration_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_duration_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_duration_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp7zy4sx84.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $result = array();\n    for ($i = 0; $i < $notes_count; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqxv6yu_m.php:36\nStack trace:\n#0 /tmp/tmpqxv6yu_m.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqxv6yu_m.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $beats = 0;\n    $note = 0;\n    $note_count = 0;\n    $note_count_max = 0;\n    $note_count_max_index = 0;\n    $note_count_max_index_max = 0;\n    $note_count_max_index_max_index = 0;\n    $note_count_max_index_max_index_max = 0;\n    $note_count_max_index_max_index_max_index = 0;\n    $note_count_max_index_max_index_max_index_max = 0;\n    $note_count_max_index_max_index_max_index_max_index = 0;\n    $note_count_max_index_max_index_max_index_max_index_max = 0;\n    $note_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $note_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $note_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $note_count_max_index_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $note_count_max_index_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $note_count_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $note_count_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $note_count_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $note_count_max_index_max_index_max_index_max_index_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpj6d39b85.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    for ($i = 0; $i < $notes_count; $i++) {\n        $note = $notes[$i];\n        if ($note == \".\") {\n            $result[$i] = 1;\n        } else if ($note == \"o\") {\n            $result[$i] = 4;\n        } else if ($note == \"o|\") {\n            $result[$i] = 2;\n        } else if ($note == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = 0;\n    $current_beat = 0;\n    $current_beat_count = 0;\n    $current_note_count = 0;\n    $current_note_count_2 = 0;\n    $current_note_count_3 = 0;\n    $current_note_count_4 = 0;\n    $current_note_count_5 = 0;\n    $current_note_count_6 = 0;\n    $current_note_count_7 = 0;\n    $current_note_count_8 = 0;\n    $current_note_count_9 = 0;\n    $current_note_count_10 = 0;\n    $current_note_count_11 = 0;\n    $current_note_count_12 = 0;\n    $current_note_count_13 = 0;\n    $current_note_count_14 = 0;\n    $current_note_count_15 = 0;\n    $current_note_count_16 = 0;\n    $current_note_count_17 = 0;\n    $current_note_count_18 = 0;\n    $current_note_count_19 = 0;\n    $current_note_count_20 = 0;\n    $current_note_count_21 = 0;\n    $current_note_count_22 = 0;\n    $current_note_count_23 = 0;\n    $current_note_count_24 = 0;\n    $current_note_count_25 = 0;\n    $current_note_count_26 = 0;\n    $current_note_count_27 = 0;\n    $current_note_count_28 = 0;\n    $current_note_count_29 = 0;\n    $current_note_count_30 = 0;\n    $current_note_count_31 = 0;\n    $current_note_count_32 = 0;\n    $current_note_count_33 = 0;\n    $current_note_count_34 = 0;\n    $current_note_count_35 = 0;\n    $current_note_count_36 = 0;\n    $current_note_count_37 =\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpkf4pz1l7.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $note_count = 0;\n        } else if ($notes[$i] == \"o\") {\n            $note_count++;\n        } else if ($notes[$i] == \"o|\") {\n            $note_count += 2;\n        } else if ($notes[$i] == \".|\") {\n            $note_count += 4;\n        }\n        $notes_count[$i] = $note_count;\n    }\n    return $notes_count;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpb5frsy1w.php:15\nStack trace:\n#0 /tmp/tmpb5frsy1w.php(31): parse_music('')\n#1 /tmp/tmpb5frsy1w.php(35): candidate('')\n#2 /tmp/tmpb5frsy1w.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpb5frsy1w.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    $result_count = 0;\n    $result_beat = 0;\n    $result_note = 0;\n    $result_note_count = 0;\n    $result_note_beat = 0;\n    $result_note_note = 0;\n    $result_note_note_count = 0;\n    $result_note_note_beat = 0;\n    $result_note_note_note = 0;\n    $result_note_note_note_count = 0;\n    $result_note_note_note_beat = 0;\n    $result_note_note_note_note = 0;\n    $result_note_note_note_note_count = 0;\n    $result_note_note_note_note_beat = 0;\n    $result_note_note_note_note_note = 0;\n    $result_note_note_note_note_note_count = 0;\n    $result_note_note_note_note_note_beat = 0;\n    $result_note_note_note_note_note_note = 0;\n    $result_note_note_note_note_note_note_count = 0;\n    $result_note_note_note_note_note_note_beat = 0;\n    $result_note_note_note_note_note_note_note = 0;\n    $result_note_note_note_note_note_note_note_count = 0;\n    $result_note_note_note_note_note_note_note_beat = 0;\n    $result_note_note_note_note_note_note_note_note = 0;\n    $result_note_note_note_note_note_note_note_note_count = 0;\n    $result_note_note_note_note_note_note_note_note_beat = 0;\n    $result_note_note_note_note_note_note_note_note_note = 0;\n    $result_note_note_note_note_note_note_note_note_note_count = 0;\n    $result_note_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp53up6y3m.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $notes_count['whole'] = 0;\n    $notes_count['half'] = 0;\n    $notes_count['quarter'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['e\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected string content \"e\", expecting \"]\" in /tmp/tmp_l86ocpf.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    $result_count = 0;\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result_count++;\n        } else if ($notes[$i] == \"o\") {\n            $result_count += 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result_count += 2;\n        } else if ($notes[$i] == \".\") {\n            $result_count += 1;\n        }\n        $result[$i] = $result_count;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpphg7qkk3.php:15\nStack trace:\n#0 /tmp/tmpphg7qkk3.php(31): parse_music('')\n#1 /tmp/tmpphg7qkk3.php(35): candidate('')\n#2 /tmp/tmpphg7qkk3.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpphg7qkk3.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(' ', $music_string);\n    $result = array();\n    $result[0] = 0;\n    for ($i = 0; $i < count($notes); $i++) {\n        if ($notes[$i] == '.') {\n            $result[$i] = 1;\n        } else if ($notes[$i] == '|') {\n            $result[$i] = 2;\n        } else if ($notes[$i] == 'o') {\n            $result[$i] = 4;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg8elhixd.php:32\nStack trace:\n#0 /tmp/tmpg8elhixd.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpg8elhixd.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp6p0ka4nd.php:14\nStack trace:\n#0 /tmp/tmp6p0ka4nd.php(29): parse_music('')\n#1 /tmp/tmp6p0ka4nd.php(33): candidate('')\n#2 /tmp/tmp6p0ka4nd.php(40): test()\n#3 {main}\n  thrown in /tmp/tmp6p0ka4nd.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $notes = explode(\" \", $music_string);\n    $note_count = 0;\n    $note_duration = 0;\n    $note_duration_count = 0;\n    $note_duration_count_max = 0;\n    $note_duration_count_max_index = 0;\n    $note_duration_count_max_value = 0;\n    $note_duration_count_max_value_index = 0;\n    $note_duration_count_max_value_value = 0;\n    $note_duration_count_max_value_value_index = 0;\n    $note_duration_count_max_value_value_value = 0;\n    $note_duration_count_max_value_value_value_index = 0;\n    $note_duration_count_max_value_value_value_value = 0;\n    $note_duration_count_max_value_value_value_value_index = 0;\n    $note_duration_count_max_value_value_value_value_value = 0;\n    $note_duration_count_max_value_value_value_value_value_index = 0;\n    $note_duration_count_max_value_value_value_value_value_value = 0;\n    $note_duration_count_max_value_value_value_value_value_value_index = 0;\n    $note_duration_count_max_value_value_value_value_value_value_value = 0;\n    $note_duration_count_max_value_value_value_value_value_value_value_index = 0;\n    $note_duration_count_max_value_value_value_value_value_value_value_value = 0;\n    $note_duration_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $note_duration_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $note_duration_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $note\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp32z6w783.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $result = array();\n    for ($i = 0; $i < $notes_count; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $result['whole'] = 0;\n    $result['half'] = 0;\n    $result['quarter'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['hundredtwentyeighth'] = 0;\n    $result['hundredfiftysixteenth'] = 0;\n    $result['threehundredtwentyeighth'] = 0;\n    $result['sixhundredfiftysixteenth'] = 0;\n    $result['ninehundredtwentyeighth'] = 0;\n    $result['onehundredtwentyeighth'] = 0;\n    $result['twohundredfiftysixteenth'] = 0;\n    $result['threehundredtwentyeighth'] = 0;\n    $result['fourhundredfiftysixteenth'] = 0;\n    $result['fivehundredtwentyeighth'] = 0;\n    $result['sixhundredfiftysixteenth'] = 0;\n    $result['sevenhundredtwentyeighth'] = 0;\n    $result['eighthundredfiftysixteenth'] = 0;\n    $result['ninehundredtwentyeighth'] = 0;\n    $result['tenhundredtwentyeighth'] = 0;\n    $result['elevenhundredtwentyeighth'] = 0;\n    $result['twelvehundredfiftysixteenth'] = 0;\n    $result['thirteenhundredtwentyeighth'] = 0;\n    $result['fourteenhundredfiftysixteenth'] = 0;\n    $result['fifteenhundredtwentyeighth'] = 0;\n    $result['sixteenhundredfiftysixteenth'] = 0;\n    $result['seventeenhundredtwentyeighth'] = 0;\n    $result['eighteenhundredfiftysixteenth'] = 0;\n    $result['nineteenhundredtwentyeighth'] = 0;\n    $result['twentyhundredfiftysixteenth'] = 0;\n    $result['twentyonehundredtwentyeighth'] = 0;\n    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: Unclosed '{' on line 11 in /tmp/tmp4s1eh9gb.php on line 59\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = \"\";\n    $current_duration = 0;\n    $current_beat = 0;\n    $current_measure = 0;\n    $current_measure_duration = 0;\n    $current_measure_beat = 0;\n    $current_measure_duration_count = 0;\n    $current_measure_beat_count = 0;\n    $current_measure_duration_count_count = 0;\n    $current_measure_beat_count_count = 0;\n    $current_measure_duration_count_count_count = 0;\n    $current_measure_beat_count_count_count = 0;\n    $current_measure_duration_count_count_count_count = 0;\n    $current_measure_beat_count_count_count_count = 0;\n    $current_measure_duration_count_count_count_count_count = 0;\n    $current_measure_beat_count_count_count_count_count_count = 0;\n    $current_measure_duration_count_count_count_count_count_count_count = 0;\n    $current_measure_beat_count_count_count_count_count_count_count_count = 0;\n    $current_measure_duration_count_count_count_count_count_count_count_count = 0;\n    $current_measure_beat_count_count_count_count_count_count_count_count_count = 0;\n    $current_measure_duration_count_count_count_count_count_count_count_count_count = 0;\n    $current_measure_beat_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_measure_duration_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_measure_beat_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_measure_duration_count_count_count_count_count_count_count\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp93_9a616.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(' ', $music_string);\n    $notes_count = count($notes);\n    $notes_count_array = array();\n    for ($i = 0; $i < $notes_count; $i++) {\n        $note = $notes[$i];\n        if ($note == '.') {\n            $note_count = 1;\n        } else if ($note == 'o') {\n            $note_count = 4;\n        } else if ($note == 'o|') {\n            $note_count = 2;\n        } else {\n            $note_count = 0;\n        }\n        $notes_count_array[$i] = $note_count;\n    }\n    return $notes_count_array;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ochankw.php:36\nStack trace:\n#0 /tmp/tmp_ochankw.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp_ochankw.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    $result[0] = 0;\n    $result[1] = 0;\n    $result[2] = 0;\n    $result[3] = 0;\n    for ($i = 0; $i < count($notes); $i++) {\n        if ($notes[$i] == \".\") {\n            $result[0]++;\n        } else if ($notes[$i] == \"o\") {\n            $result[1]++;\n        } else if ($notes[$i] == \"o|\") {\n            $result[2]++;\n        } else if ($notes[$i] == \".\") {\n            $result[3]++;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnlxml_tr.php:37\nStack trace:\n#0 /tmp/tmpnlxml_tr.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpnlxml_tr.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = 0;\n    $current_duration = 0;\n    $current_beat = 0;\n    $current_measure = 0;\n    $current_measure_duration = 0;\n    $current_measure_beat = 0;\n    $current_measure_note = 0;\n    $current_measure_duration_count = 0;\n    $current_measure_beat_count = 0;\n    $current_measure_note_count = 0;\n    $current_measure_duration_sum = 0;\n    $current_measure_beat_sum = 0;\n    $current_measure_note_sum = 0;\n    $current_measure_duration_max = 0;\n    $current_measure_beat_max = 0;\n    $current_measure_note_max = 0;\n    $current_measure_duration_min = 0;\n    $current_measure_beat_min = 0;\n    $current_measure_note_min = 0;\n    $current_measure_duration_avg = 0;\n    $current_measure_beat_avg = 0;\n    $current_measure_note_avg = 0;\n    $current_measure_duration_stddev = 0;\n    $current_measure_beat_stddev = 0;\n    $current_measure_note_stddev = 0;\n    $current_measure_duration_count_sum = 0;\n    $current_measure_beat_count_sum = 0;\n    $current_measure_note_count_sum = 0;\n    $current_measure_duration_count_max = 0;\n    $current_measure_beat_count_max = 0;\n    $current_measure_note_count_max = 0;\n    $current_measure_duration_count_min = 0;\n    $current_measure_beat_count_min = 0;\n    $current_measure_note_count_min = 0;\n    $current_measure_duration_count_avg = 0;\n    $current_measure_beat_count\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpr2__y4d8.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $result['beats'] = 0;\n    $result['notes'] = 0;\n    $result['last'] = 0;\n    $result['last_beats'] = 0;\n    $result['last_notes'] = 0;\n    $result['last_last'] = 0;\n    $result['last_last_beats'] = 0;\n    $result['last_last_notes'] = 0;\n    $result['last_last_last'] = 0;\n    $result['last_last_last_beats'] = 0;\n    $result['last_last_last_notes'] = 0;\n    $result['last_last_last_last'] = 0;\n    $result['last_last_last_last_beats'] = 0;\n    $result['last_last_last_last_notes'] = 0;\n    $result['last_last_last_last_last'] = 0;\n    $result['last_last_last_last_last_beats'] = 0;\n    $result['last_last_last_last_last_notes'] = 0;\n    $result['last_last_last_last_last_last'] = 0;\n    $result['last_last_last_last_last_last_beats'] = 0;\n    $result['last_last_last_last_last_last_notes'] = 0;\n    $result['last_last_last_last_last_last_last'] = 0;\n    $result['last_last_last_last_last_last_last_beats'] = 0;\n    $result['last_last_last_last_last_last_last_notes'] = 0;\n    $result['last_last_last_last_last_last_last_last'] = 0;\n    $result['last_last_last_last_last_last_last_last_beats'] = 0;\n    $result['last_last_last_last_last_last_last_last_notes'] = 0;\n    $result['last_last_last_last_last_last_last_last_last'] = 0;\n    $result['last_last_last_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected string content \"last_last_last_\", expecting \"]\" in /tmp/tmp_6eg6ptd.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    $note_count_max = 0;\n    $note_count_max_index = 0;\n    for ($i = 0; $i < $notes_count; $i++) {\n        if ($notes[$i] == \".\") {\n            $note_count_max = $note_count;\n            $note_count_max_index = $i;\n        }\n        $note_count++;\n    }\n    for ($i = 0; $i < $note_count; $i++) {\n        if ($notes[$i] == \"o\") {\n            $note_count_max = $note_count;\n            $note_count_max_index = $i;\n        }\n        $note_count++;\n    }\n    for ($i = 0; $i < $note_count; $i++) {\n        if ($notes[$i] == \"o|\") {\n            $note_count_max = $note_count;\n            $note_count_max_index = $i;\n        }\n        $note_count++;\n    }\n    for ($i = 0; $i < $note_count; $i++) {\n        if ($notes[$i] == \".|\") {\n            $note_count_max = $note_count;\n            $note_count_max_index = $i;\n        }\n        $note_count++;\n    }\n    for ($i = 0; $i < $note_count; $i++) {\n        if ($notes[$i] == \"o\") {\n            $note_count_max = $note_count;\n            $note_count_max_index = $i;\n        }\n        $note_count++;\n    }\n    for ($i = 0; $i < $note_count; $i++) {\n        if ($notes[$i] == \"o|\") {\n            $note_count_max = $note_count;\n            $note_count_max_index = $i;\n        }\n        $note_count++;\n    }\n    for ($i = 0\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \";\" in /tmp/tmpwc0azgoz.php on line 60\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $result = array();\n    for ($i = 0; $i < $notes_count; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    $result_count = 0;\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result_count++;\n        } else if ($notes[$i] == \"o\") {\n            $result_count += 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result_count += 2;\n        } else if ($notes[$i] == \".\") {\n            $result_count += 1;\n        }\n        $result[$i] = $result_count;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpphg7qkk3.php:15\nStack trace:\n#0 /tmp/tmpphg7qkk3.php(31): parse_music('')\n#1 /tmp/tmpphg7qkk3.php(35): candidate('')\n#2 /tmp/tmpphg7qkk3.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpphg7qkk3.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp6p0ka4nd.php:14\nStack trace:\n#0 /tmp/tmp6p0ka4nd.php(29): parse_music('')\n#1 /tmp/tmp6p0ka4nd.php(33): candidate('')\n#2 /tmp/tmp6p0ka4nd.php(40): test()\n#3 {main}\n  thrown in /tmp/tmp6p0ka4nd.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $notes_count_array = array();\n    for($i = 0; $i < $notes_count; $i++) {\n        $note = $notes[$i];\n        $note_array = explode(\" \", $note);\n        $note_count = count($note_array);\n        $note_count_array = array();\n        for($j = 0; $j < $note_count; $j++) {\n            $note_part = $note_array[$j];\n            if($note_part == \".\") {\n                $note_count_array[0] = 1;\n            } else if($note_part == \"o\") {\n                $note_count_array[1] = 4;\n            } else if($note_part == \"o|\") {\n                $note_count_array[1] = 2;\n            } else if($note_part == \".|\") {\n                $note_count_array[0] = 1;\n            }\n        }\n        $note_count_array[2] = $note_count_array[0] + $note_count_array[1];\n        $note_count_array[3] = $note_count_array[0] + $note_count_array[1] + $note_count_array[2];\n        $note_count_array[4] = $note_count_array[0] + $note_count_array[1] + $note_count_array[2] + $note_count_array[3];\n        $note_count_array[5] = $note_count_array[0] + $note_count_array[1] + $note_count_array[2] + $note_count_array[3] + $note_count_array[4];\n        $note_count_array[6] = $note_count_array[0] + $note_count_array[1] + $note_count_array[2] + $note_count_array[3] + $note_count_array[4] + $note_count_array[5];\n        $note\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp0bm440s4.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $result = array();\n    for ($i = 0; $i < $notes_count; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $count = 0;\n    $last = 0;\n    $i = 0;\n    while ($i < strlen($music_string)) {\n        if ($music_string[$i] == '.') {\n            $count = $count + 1;\n            $last = $i;\n        }\n        if ($music_string[$i] == '|') {\n            $count = $count + 1;\n            $last = $i;\n        }\n        if ($music_string[$i] == 'o') {\n            $count = $count + 1;\n            $last = $i;\n        }\n        $i = $i + 1;\n    }\n    $result[0] = $count;\n    $i = 0;\n    $count = 0;\n    $last = 0;\n    while ($i < strlen($music_string)) {\n        if ($music_string[$i] == '.') {\n            $count = $count + 1;\n            $last = $i;\n        }\n        if ($music_string[$i] == '|') {\n            $count = $count + 1;\n            $last = $i;\n        }\n        if ($music_string[$i] == 'o') {\n            $count = $count + 1;\n            $last = $i;\n        }\n        $i = $i + 1;\n    }\n    $result[1] = $count;\n    $i = 0;\n    $count = 0;\n    $last = 0;\n    while ($i < strlen($music_string)) {\n        if ($music_string[$i] == '.') {\n            $count = $count + 1;\n            $last = $i;\n        }\n        if ($music_string[$i] == '|') {\n            $count = $count + 1;\n            $last = $i;\n        }\n        if ($music_string[$i] == 'o') {\n            $count = $count + 1;\n            $last = $i;\n        }\n        $i = $i + 1;\n    }\n    $result[2]\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpm33vps8e.php on line 70\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpbpwgwhym.php:14\nStack trace:\n#0 /tmp/tmpbpwgwhym.php(27): parse_music('')\n#1 /tmp/tmpbpwgwhym.php(31): candidate('')\n#2 /tmp/tmpbpwgwhym.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpbpwgwhym.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $notes = explode(\" \", $music_string);\n    $result = array_fill_keys($result, 0);\n    for ($i = 0; $i < count($notes); $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpee1gq2ac.php:36\nStack trace:\n#0 /tmp/tmpee1gq2ac.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpee1gq2ac.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $notes = explode(\" \", $music_string);\n    $last_note = false;\n    $last_beat = 0;\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $last_note = false;\n            $last_beat = 0;\n        } else if ($notes[$i] == \"o\") {\n            $last_note = true;\n            $last_beat = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $last_note = true;\n            $last_beat = 2;\n        } else if ($notes[$i] == \".|\") {\n            $last_note = true;\n            $last_beat = 1;\n        } else {\n            $last_note = false;\n            $last_beat = 0;\n        }\n        $result[$i] = $last_beat;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp99_ezkyt.php:16\nStack trace:\n#0 /tmp/tmp99_ezkyt.php(39): parse_music('')\n#1 /tmp/tmp99_ezkyt.php(43): candidate('')\n#2 /tmp/tmp99_ezkyt.php(50): test()\n#3 {main}\n  thrown in /tmp/tmp99_ezkyt.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $result['whole'] = 0;\n    $result['half'] = 0;\n    $result['quarter'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['hundredtwentyeighth'] = 0;\n    $result['hundredfiftysixteenth'] = 0;\n    $result['threehundredtwentyeighth'] = 0;\n    $result['fivehundredtwentyeighth'] = 0;\n    $result['sevenhundredtwentyeighth'] = 0;\n    $result['ninehundredtwentyeighth'] = 0;\n    $result['onehundredtwentyeighth'] = 0;\n    $result['onehundredfiftysixteenth'] = 0;\n    $result['twohundredthirtysecond'] = 0;\n    $result['threehundredthirtysecond'] = 0;\n    $result['fivehundredthirtysecond'] = 0;\n    $result['sevenhundredthirtysecond'] = 0;\n    $result['ninehundredthirtysecond'] = 0;\n    $result['onehundredthirtysecond'] = 0;\n    $result['onehundredfiftysixteenth'] = 0;\n    $result['twohundredthirtysecond'] = 0;\n    $result['threehundredthirtysecond'] = 0;\n    $result['fivehundredthirtysecond'] = 0;\n    $result['sevenhundredthirtysecond'] = 0;\n    $result['ninehundredthirtysecond'] = 0;\n    $result['onehundredthirtysecond'] = 0;\n    $result['onehundredfiftysixteenth'] = 0;\n    $result['twohundredthirtysecond'] = 0;\n    $result['threehundredthirtysecond'] = 0;\n    $result['fivehundredthirtysecond'] = 0;\n    $result['sevenhundredthirtysecond'] = 0;\n    $result['ninehundredthirtysecond'] = 0;\n    $result['onehundredthirtysecond'] = 0;\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: Unclosed '{' on line 11 in /tmp/tmpptf5g4jx.php on line 61\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    $note_count_max = 0;\n    $note_count_max_index = 0;\n    $note_count_max_index_max = 0;\n    $note_count_max_index_max_index = 0;\n    for ($i = 0; $i < count($notes); $i++) {\n        if ($notes[$i] == \".\") {\n            $note_count_max_index_max_index = $i;\n            $note_count_max_index_max = $note_count_max;\n            $note_count_max = $note_count;\n            $note_count = 0;\n        } else if ($notes[$i] == \"o\") {\n            $note_count++;\n        } else if ($notes[$i] == \"o|\") {\n            $note_count++;\n        } else if ($notes[$i] == \".|\") {\n            $note_count++;\n        }\n        if ($note_count > $note_count_max) {\n            $note_count_max = $note_count;\n            $note_count_max_index = $i;\n        }\n        if ($note_count > $note_count_max_index_max) {\n            $note_count_max_index_max = $note_count_max;\n            $note_count_max_index_max_index = $note_count_max_index;\n            $note_count_max_index = $i;\n        }\n    }\n    $note_count_max_index_max_index = $note_count_max_index_max_index;\n    $note_count_max_index_max_index_max = $note_count_max_index_max_index_max;\n    $note_count_max_index_max_index_max_index = $note_count_max_index_max_index_max_index;\n    $note_count_max_index_max_index_max_index_max = $note_count_max_index_max_index\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp0c0tjg4x.php on line 46\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    $note_count_array = array();\n    $note_count_array_count = 0;\n    $note_count_array_count_array = array();\n    $note_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpc7ashhn0.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $notes_count_array = array();\n    for ($i = 0; $i < $notes_count; $i++) {\n        $note = $notes[$i];\n        if ($note == \".\") {\n            $note_count = 1;\n        } else if ($note == \"o\") {\n            $note_count = 4;\n        } else if ($note == \"o|\") {\n            $note_count = 2;\n        } else if ($note == \".|\") {\n            $note_count = 1;\n        } else {\n            $note_count = 0;\n        }\n        $notes_count_array[$i] = $note_count;\n    }\n    return $notes_count_array;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_kaur3a6.php:38\nStack trace:\n#0 /tmp/tmp_kaur3a6.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp_kaur3a6.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    $note_count_array = array();\n    $note_count_array_count = 0;\n    $note_count_array_count_array = array();\n    $note_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpc7ashhn0.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $notes_count['whole'] = 0;\n    $notes_count['half'] = 0;\n    $notes_count['quarter'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected string content \"sixteenth\", expecting \"]\" in /tmp/tmpg13zwyo0.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $notes_count_array = array();\n    $note_count = 0;\n    $note_count_array[0] = 0;\n    $note_count_array[1] = 0;\n    $note_count_array[2] = 0;\n    $note_count_array[3] = 0;\n    $note_count_array[4] = 0;\n    $note_count_array[5] = 0;\n    $note_count_array[6] = 0;\n    $note_count_array[7] = 0;\n    $note_count_array[8] = 0;\n    $note_count_array[9] = 0;\n    $note_count_array[10] = 0;\n    $note_count_array[11] = 0;\n    $note_count_array[12] = 0;\n    $note_count_array[13] = 0;\n    $note_count_array[14] = 0;\n    $note_count_array[15] = 0;\n    $note_count_array[16] = 0;\n    $note_count_array[17] = 0;\n    $note_count_array[18] = 0;\n    $note_count_array[19] = 0;\n    $note_count_array[20] = 0;\n    $note_count_array[21] = 0;\n    $note_count_array[22] = 0;\n    $note_count_array[23] = 0;\n    $note_count_array[24] = 0;\n    $note_count_array[25] = 0;\n    $note_count_array[26] = 0;\n    $note_count_array[27] = 0;\n    $note_count_array[28] = 0;\n    $note_count_array[29] = 0;\n    $note_count_array[30] = 0;\n    $note_count_array[31] = 0;\n    $note_count_array[32] = 0;\n    $note_count_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpk2p46fc3.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    $result[0] = 0;\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 0;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpr35unm75.php:15\nStack trace:\n#0 /tmp/tmpr35unm75.php(30): parse_music('')\n#1 /tmp/tmpr35unm75.php(34): candidate('')\n#2 /tmp/tmpr35unm75.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpr35unm75.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $notes_count_array = array();\n    $notes_count_array[0] = 4;\n    $notes_count_array[1] = 2;\n    $notes_count_array[2] = 1;\n    $notes_count_array[3] = 2;\n    $notes_count_array[4] = 2;\n    $notes_count_array[5] = 1;\n    $notes_count_array[6] = 1;\n    $notes_count_array[7] = 1;\n    $notes_count_array[8] = 1;\n    $notes_count_array[9] = 4;\n    $notes_count_array[10] = 4;\n    return $notes_count_array;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz_wz9yz4.php:34\nStack trace:\n#0 /tmp/tmpz_wz9yz4.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpz_wz9yz4.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    $note_count_array = array();\n    $note_count_array_count = 0;\n    $note_count_array_count_array = array();\n    $note_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpc7ashhn0.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $result['whole'] = 0;\n    $result['half'] = 0;\n    $result['quarter'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['hundredtwentyeighth'] = 0;\n    $result['hundredfiftysixteenth'] = 0;\n    $result['threehundredtwentyeighth'] = 0;\n    $result['fivehundredtwentyeighth'] = 0;\n    $result['sevenhundredtwentyeighth'] = 0;\n    $result['ninehundredtwentyeighth'] = 0;\n    $result['onehundredtwentyeighth'] = 0;\n    $result['onehundredfiftysixteenth'] = 0;\n    $result['twohundredtwentyeighth'] = 0;\n    $result['twohundredfiftysixteenth'] = 0;\n    $result['threehundredtwentyeighth'] = 0;\n    $result['threehundredfiftysixteenth'] = 0;\n    $result['fourhundredtwentyeighth'] = 0;\n    $result['fourhundredfiftysixteenth'] = 0;\n    $result['fivehundredtwentyeighth'] = 0;\n    $result['fivehundredfiftysixteenth'] = 0;\n    $result['sixhundredtwentyeighth'] = 0;\n    $result['sixhundredfiftysixteenth'] = 0;\n    $result['sevenhundredtwentyeighth'] = 0;\n    $result['sevenhundredfiftysixteenth'] = 0;\n    $result['eighthundredtwentyeighth'] = 0;\n    $result['eighthundredfiftysixteenth'] = 0;\n    $result['ninehundredtwentyeighth'] = 0;\n    $result['ninehundredfiftysixteenth'] = 0;\n    $result['onehundredtwentyeighth'] = 0;\n    $result['onehundredfiftysixteenth'] = 0;\n    $result['twohundredtwentyeighth'] = 0\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpw8e5lkba.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $result['whole'] = 0;\n    $result['half'] = 0;\n    $result['quarter'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['hundredtwentyeighth'] = 0;\n    $result['hundredfiftysixteenth'] = 0;\n    $result['threehundredtwentyeighth'] = 0;\n    $result['sixtythreehundredtwentyeighth'] = 0;\n    $result['sixth'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['hundredtwentyeighth'] = 0;\n    $result['hundredfiftysixteenth'] = 0;\n    $result['threehundredtwentyeighth'] = 0;\n    $result['sixtythreehundredtwentyeighth'] = 0;\n    $result['sixth'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['hundredtwentyeighth'] = 0;\n    $result['hundredfiftysixteenth'] = 0;\n    $result['threehundredtwentyeighth'] = 0;\n    $result['sixtythreehundredtwentyeighth'] = 0;\n    $result['sixth'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['hundredtwentyeighth'] = 0;\n    $result['hundredfiftysixteenth'] = 0;\n    $result['threehundredtwentyeighth'] = 0;\n    $result['sixtythreehundredtwentyeighth'] =\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpwi_f9rbg.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    $result[0] = 0;\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = $result[$i] + 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = $result[$i] + 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = $result[$i] + 2;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpttlle09t.php:16\nStack trace:\n#0 /tmp/tmpttlle09t.php(29): parse_music('')\n#1 /tmp/tmpttlle09t.php(33): candidate('')\n#2 /tmp/tmpttlle09t.php(40): test()\n#3 {main}\n  thrown in /tmp/tmpttlle09t.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $notes_count['whole'] = 0;\n    $notes_count['half'] = 0;\n    $notes_count['quarter'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected string content \"sixteenth\", expecting \"]\" in /tmp/tmpg13zwyo0.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $result['beats'] = 0;\n    $result['count'] = 0;\n    $result['last'] = 0;\n    $result['last_count'] = 0;\n    $result['last_beats'] = 0;\n    $result['last_beat'] = 0;\n    $result['last_beat_count'] = 0;\n    $result['last_beat_beats'] = 0;\n    $result['last_beat_beat'] = 0;\n    $result['last_beat_beat_count'] = 0;\n    $result['last_beat_beat_beats'] = 0;\n    $result['last_beat_beat_beat'] = 0;\n    $result['last_beat_beat_beat_count'] = 0;\n    $result['last_beat_beat_beat_beats'] = 0;\n    $result['last_beat_beat_beat_beat'] = 0;\n    $result['last_beat_beat_beat_beat_count'] = 0;\n    $result['last_beat_beat_beat_beat_beats'] = 0;\n    $result['last_beat_beat_beat_beat_beat'] = 0;\n    $result['last_beat_beat_beat_beat_beat_count'] = 0;\n    $result['last_beat_beat_beat_beat_beat_beats'] = 0;\n    $result['last_beat_beat_beat_beat_beat_beat'] = 0;\n    $result['last_beat_beat_beat_beat_beat_beat_count'] = 0;\n    $result['last_beat_beat_beat_beat_beat_beat_beats'] = 0;\n    $result['last_beat_beat_beat_beat_beat_beat_beat'] = 0;\n    $result['last_beat_beat_beat_beat_beat_beat_beat_count'] = 0;\n    $result['last_beat_beat_beat_beat_beat_beat_beat_beats'] = 0;\n    $result['last_beat_beat_beat_beat_beat_beat_beat_beat'] = 0;\n    $result['last_beat_beat_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected string content \"last_beat_beat_\", expecting \"]\" in /tmp/tmp0e4_hin7.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $result['beats'] = 0;\n    $result['notes'] = 0;\n    $result['last'] = 0;\n    $result['last_beats'] = 0;\n    $result['last_notes'] = 0;\n    $result['last_last'] = 0;\n    $result['last_last_beats'] = 0;\n    $result['last_last_notes'] = 0;\n    $result['last_last_last'] = 0;\n    $result['last_last_last_beats'] = 0;\n    $result['last_last_last_notes'] = 0;\n    $result['last_last_last_last'] = 0;\n    $result['last_last_last_last_beats'] = 0;\n    $result['last_last_last_last_notes'] = 0;\n    $result['last_last_last_last_last'] = 0;\n    $result['last_last_last_last_last_beats'] = 0;\n    $result['last_last_last_last_last_notes'] = 0;\n    $result['last_last_last_last_last_last'] = 0;\n    $result['last_last_last_last_last_last_beats'] = 0;\n    $result['last_last_last_last_last_last_notes'] = 0;\n    $result['last_last_last_last_last_last_last'] = 0;\n    $result['last_last_last_last_last_last_last_beats'] = 0;\n    $result['last_last_last_last_last_last_last_notes'] = 0;\n    $result['last_last_last_last_last_last_last_last'] = 0;\n    $result['last_last_last_last_last_last_last_last_beats'] = 0;\n    $result['last_last_last_last_last_last_last_last_notes'] = 0;\n    $result['last_last_last_last_last_last_last_last_last'] = 0;\n    $result['last_last_last_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected string content \"last_last_last_\", expecting \"]\" in /tmp/tmp_6eg6ptd.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    $note_count_array = array();\n    $note_count_array[0] = 0;\n    $note_count_array[1] = 0;\n    $note_count_array[2] = 0;\n    $note_count_array[3] = 0;\n    $note_count_array[4] = 0;\n    $note_count_array[5] = 0;\n    $note_count_array[6] = 0;\n    $note_count_array[7] = 0;\n    $note_count_array[8] = 0;\n    $note_count_array[9] = 0;\n    $note_count_array[10] = 0;\n    $note_count_array[11] = 0;\n    $note_count_array[12] = 0;\n    $note_count_array[13] = 0;\n    $note_count_array[14] = 0;\n    $note_count_array[15] = 0;\n    $note_count_array[16] = 0;\n    $note_count_array[17] = 0;\n    $note_count_array[18] = 0;\n    $note_count_array[19] = 0;\n    $note_count_array[20] = 0;\n    $note_count_array[21] = 0;\n    $note_count_array[22] = 0;\n    $note_count_array[23] = 0;\n    $note_count_array[24] = 0;\n    $note_count_array[25] = 0;\n    $note_count_array[26] = 0;\n    $note_count_array[27] = 0;\n    $note_count_array[28] = 0;\n    $note_count_array[29] = 0;\n    $note_count_array[30] = 0;\n    $note_count_array[31] = 0;\n    $note_count_array[32] = 0;\n    $note_count_array[\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpw5w58h5s.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $count = 0;\n    $last_note = 0;\n    $last_duration = 0;\n    $current_note = 0;\n    $current_duration = 0;\n    $current_duration_count = 0;\n    $current_duration_count_max = 0;\n    $current_duration_count_max_index = 0;\n    $current_duration_count_max_value = 0;\n    $current_duration_count_max_value_index = 0;\n    $current_duration_count_max_value_value = 0;\n    $current_duration_count_max_value_value_index = 0;\n    $current_duration_count_max_value_value_value = 0;\n    $current_duration_count_max_value_value_value_index = 0;\n    $current_duration_count_max_value_value_value_value = 0;\n    $current_duration_count_max_value_value_value_value_index = 0;\n    $current_duration_count_max_value_value_value_value_value = 0;\n    $current_duration_count_max_value_value_value_value_value_index = 0;\n    $current_duration_count_max_value_value_value_value_value_value = 0;\n    $current_duration_count_max_value_value_value_value_value_value_index = 0;\n    $current_duration_count_max_value_value_value_value_value_value_value = 0;\n    $current_duration_count_max_value_value_value_value_value_value_value_index = 0;\n    $current_duration_count_max_value_value_value_value_value_value_value_value = 0;\n    $current_duration_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $current_duration_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $current_duration_count_max_value_value_value_value_value_value_value_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpayhzqt4u.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $result = array();\n    for ($i = 0; $i < $notes_count; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqxv6yu_m.php:36\nStack trace:\n#0 /tmp/tmpqxv6yu_m.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqxv6yu_m.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    $note_count_array = array();\n    $note_count_array_count = 0;\n    $note_count_array_count_array = array();\n    $note_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpc7ashhn0.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    $note_count_array = array();\n    $note_count_array_count = 0;\n    $note_count_array_count_max = 0;\n    $note_count_array_count_min = 0;\n    $note_count_array_count_max_index = 0;\n    $note_count_array_count_min_index = 0;\n    $note_count_array_count_max_index_max = 0;\n    $note_count_array_count_min_index_min = 0;\n    $note_count_array_count_max_index_min_index = 0;\n    $note_count_array_count_max_index_min_index_max = 0;\n    $note_count_array_count_max_index_min_index_min = 0;\n    $note_count_array_count_max_index_min_index_min_index = 0;\n    $note_count_array_count_max_index_min_index_min_index_max = 0;\n    $note_count_array_count_max_index_min_index_min_index_min = 0;\n    $note_count_array_count_max_index_min_index_min_index_min_index = 0;\n    $note_count_array_count_max_index_min_index_min_index_min_index_max = 0;\n    $note_count_array_count_max_index_min_index_min_index_min_index_min = 0;\n    $note_count_array_count_max_index_min_index_min_index_min_index_min_index = 0;\n    $note_count_array_count_max_index_min_index_min_index_min_index_min_index_max = 0;\n    $note_count_array_count_max_index_min_index_min_index_min_index_min_index_min = 0;\n    $note_count_array_count_max_index_min\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpig9xar24.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    for ($i = 0; $i < count($notes); $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    $result[0] = 0;\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 0;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpr35unm75.php:15\nStack trace:\n#0 /tmp/tmpr35unm75.php(30): parse_music('')\n#1 /tmp/tmpr35unm75.php(34): candidate('')\n#2 /tmp/tmpr35unm75.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpr35unm75.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $result = array();\n    $result_count = 0;\n    for ($i = 0; $i < $notes_count; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$result_count] = 1;\n            $result_count++;\n        } else if ($notes[$i] == \"o\") {\n            $result[$result_count] = 4;\n            $result_count++;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$result_count] = 2;\n            $result_count++;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf4my_vyo.php:38\nStack trace:\n#0 /tmp/tmpf4my_vyo.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpf4my_vyo.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $note_count = 0;\n        } else if ($notes[$i] == \"o\") {\n            $note_count = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $note_count = 2;\n        } else if ($notes[$i] == \".|\") {\n            $note_count = 1;\n        }\n        $notes_count[$i] = $note_count;\n    }\n    return $notes_count;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp_rks2zat.php:15\nStack trace:\n#0 /tmp/tmp_rks2zat.php(31): parse_music('')\n#1 /tmp/tmp_rks2zat.php(35): candidate('')\n#2 /tmp/tmp_rks2zat.php(42): test()\n#3 {main}\n  thrown in /tmp/tmp_rks2zat.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    for ($i = 0; $i < $notes.length; $i++) {\n        $note = $notes[$i];\n        if ($note == \".\") {\n            $result[$i] = 1;\n        } else if ($note == \"o\") {\n            $result[$i] = 4;\n        } else if ($note == \"o|\") {\n            $result[$i] = 2;\n        } else if ($note == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp7b6jtsk0.php:14\nStack trace:\n#0 /tmp/tmp7b6jtsk0.php(30): parse_music('')\n#1 /tmp/tmp7b6jtsk0.php(34): candidate('')\n#2 /tmp/tmp7b6jtsk0.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp7b6jtsk0.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    $note_count_array = array();\n    $note_count_array_count = 0;\n    $note_count_array_count_array = array();\n    $note_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpc7ashhn0.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $notes_count[0] = 1;\n    $notes_count[1] = 1;\n    $notes_count[2] = 1;\n    $notes_count[3] = 1;\n    $notes_count[4] = 1;\n    $notes_count[5] = 1;\n    $notes_count[6] = 1;\n    $notes_count[7] = 1;\n    $notes_count[8] = 1;\n    $notes_count[9] = 1;\n    $notes_count[10] = 1;\n    $notes_count[11] = 1;\n    $notes_count[12] = 1;\n    $notes_count[13] = 1;\n    $notes_count[14] = 1;\n    $notes_count[15] = 1;\n    $notes_count[16] = 1;\n    $notes_count[17] = 1;\n    $notes_count[18] = 1;\n    $notes_count[19] = 1;\n    $notes_count[20] = 1;\n    $notes_count[21] = 1;\n    $notes_count[22] = 1;\n    $notes_count[23] = 1;\n    $notes_count[24] = 1;\n    $notes_count[25] = 1;\n    $notes_count[26] = 1;\n    $notes_count[27] = 1;\n    $notes_count[28] = 1;\n    $notes_count[29] = 1;\n    $notes_count[30] = 1;\n    $notes_count[31] = 1;\n    $notes_count[32] = 1;\n    $notes_count[33] = 1;\n    $notes_count[34] = 1;\n    $notes_count[35] = 1;\n    $notes_count[36] = 1;\n    $notes_count[37] = 1;\n    $notes_count[38] = 1;\n    $notes_count[39] = 1;\n    $notes_count[40] = 1\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp6vpqztbq.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    $result_count = 0;\n    for ($i = 0; $i < count($notes); $i++) {\n        if ($notes[$i] == \".\") {\n            $result_count++;\n        } else if ($notes[$i] == \"o\") {\n            $result_count += 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result_count += 2;\n        } else if ($notes[$i] == \".|\") {\n            $result_count += 1;\n        }\n        $result[$i] = $result_count;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp36txzzso.php:35\nStack trace:\n#0 /tmp/tmp36txzzso.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp36txzzso.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    for ($i = 0; $i < $notes.length; $i++) {\n        $note = $notes[$i];\n        if ($note == \".\") {\n            $result[$i] = 1;\n        } else if ($note == \"o\") {\n            $result[$i] = 4;\n        } else if ($note == \"o|\") {\n            $result[$i] = 2;\n        } else if ($note == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp7b6jtsk0.php:14\nStack trace:\n#0 /tmp/tmp7b6jtsk0.php(30): parse_music('')\n#1 /tmp/tmp7b6jtsk0.php(34): candidate('')\n#2 /tmp/tmp7b6jtsk0.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp7b6jtsk0.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $notes = explode(\" \", $music_string);\n    $result = array_fill_keys($result, 0);\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpg7738s9x.php:15\nStack trace:\n#0 /tmp/tmpg7738s9x.php(28): parse_music('')\n#1 /tmp/tmpg7738s9x.php(32): candidate('')\n#2 /tmp/tmpg7738s9x.php(39): test()\n#3 {main}\n  thrown in /tmp/tmpg7738s9x.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $notes = explode(\" \", $music_string);\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmptxu54hoe.php:14\nStack trace:\n#0 /tmp/tmptxu54hoe.php(29): parse_music('')\n#1 /tmp/tmptxu54hoe.php(33): candidate('')\n#2 /tmp/tmptxu54hoe.php(40): test()\n#3 {main}\n  thrown in /tmp/tmptxu54hoe.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    for ($i = 0; $i < count($notes); $i++) {\n        if ($notes[$i] == \".\") {\n            $note_count = 0;\n        } else if ($notes[$i] == \"o\") {\n            $note_count = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $note_count = 2;\n        } else if ($notes[$i] == \".|\") {\n            $note_count = 1;\n        }\n        $notes_count[$i] = $note_count;\n    }\n    return $notes_count;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ko2nx6i.php:35\nStack trace:\n#0 /tmp/tmp6ko2nx6i.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp6ko2nx6i.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $result = array();\n    for ($i = 0; $i < $notes_count; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp6p0ka4nd.php:14\nStack trace:\n#0 /tmp/tmp6p0ka4nd.php(29): parse_music('')\n#1 /tmp/tmp6p0ka4nd.php(33): candidate('')\n#2 /tmp/tmp6p0ka4nd.php(40): test()\n#3 {main}\n  thrown in /tmp/tmp6p0ka4nd.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    $note_count_array = array();\n    $note_count_array_count = 0;\n    $note_count_array_count_array = array();\n    $note_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpc7ashhn0.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpkrgemdrh.php:14\nStack trace:\n#0 /tmp/tmpkrgemdrh.php(29): parse_music('')\n#1 /tmp/tmpkrgemdrh.php(33): candidate('')\n#2 /tmp/tmpkrgemdrh.php(40): test()\n#3 {main}\n  thrown in /tmp/tmpkrgemdrh.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $notes = explode(\" \", $music_string);\n    $result[0] = 0;\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 0;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpndu1u50l.php:15\nStack trace:\n#0 /tmp/tmpndu1u50l.php(30): parse_music('')\n#1 /tmp/tmpndu1u50l.php(34): candidate('')\n#2 /tmp/tmpndu1u50l.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpndu1u50l.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $result = array();\n    for ($i = 0; $i < $notes_count; $i++) {\n        $note = $notes[$i];\n        if ($note == \".\") {\n            $result[$i] = 1;\n        } else if ($note == \"o\") {\n            $result[$i] = 4;\n        } else if ($note == \"o|\") {\n            $result[$i] = 2;\n        } else if ($note == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $notes_count[0] = 0;\n    $notes_count[1] = 0;\n    $notes_count[2] = 0;\n    $notes_count[3] = 0;\n    $notes_count[4] = 0;\n    $notes_count[5] = 0;\n    $notes_count[6] = 0;\n    $notes_count[7] = 0;\n    $notes_count[8] = 0;\n    $notes_count[9] = 0;\n    $notes_count[10] = 0;\n    $notes_count[11] = 0;\n    $notes_count[12] = 0;\n    $notes_count[13] = 0;\n    $notes_count[14] = 0;\n    $notes_count[15] = 0;\n    $notes_count[16] = 0;\n    $notes_count[17] = 0;\n    $notes_count[18] = 0;\n    $notes_count[19] = 0;\n    $notes_count[20] = 0;\n    $notes_count[21] = 0;\n    $notes_count[22] = 0;\n    $notes_count[23] = 0;\n    $notes_count[24] = 0;\n    $notes_count[25] = 0;\n    $notes_count[26] = 0;\n    $notes_count[27] = 0;\n    $notes_count[28] = 0;\n    $notes_count[29] = 0;\n    $notes_count[30] = 0;\n    $notes_count[31] = 0;\n    $notes_count[32] = 0;\n    $notes_count[33] = 0;\n    $notes_count[34] = 0;\n    $notes_count[35] = 0;\n    $notes_count[36] = 0;\n    $notes_count[37] = 0;\n    $notes_count[38] = 0;\n    $notes_count[39] = 0;\n    $notes_count[40] = 0\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp3_nzt_y6.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpcas0sj54.php:15\nStack trace:\n#0 /tmp/tmpcas0sj54.php(28): parse_music('')\n#1 /tmp/tmpcas0sj54.php(32): candidate('')\n#2 /tmp/tmpcas0sj54.php(39): test()\n#3 {main}\n  thrown in /tmp/tmpcas0sj54.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $notes = explode(\" \", $music_string);\n    $result = array_fill_keys($result, 0);\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpg7738s9x.php:15\nStack trace:\n#0 /tmp/tmpg7738s9x.php(28): parse_music('')\n#1 /tmp/tmpg7738s9x.php(32): candidate('')\n#2 /tmp/tmpg7738s9x.php(39): test()\n#3 {main}\n  thrown in /tmp/tmpg7738s9x.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $result = array();\n    for ($i = 0; $i < $notes_count; $i++) {\n        $note = $notes[$i];\n        if ($note == \".\") {\n            $result[$i] = 1;\n        } else if ($note == \"o\") {\n            $result[$i] = 4;\n        } else if ($note == \"o|\") {\n            $result[$i] = 2;\n        } else if ($note == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp228nrxm_.php:15\nStack trace:\n#0 /tmp/tmp228nrxm_.php(30): parse_music('')\n#1 /tmp/tmp228nrxm_.php(34): candidate('')\n#2 /tmp/tmp228nrxm_.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp228nrxm_.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = 0;\n    $current_beat = 0;\n    $current_note_length = 0;\n    $current_note_length_multiplier = 1;\n    $current_note_length_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_note_length\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpnz3lx1ko.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    $note_count_prev = 0;\n    $note_count_prev_prev = 0;\n    $note_count_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmphwmspwwh.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $result = array();\n    for ($i = 0; $i < $notes_count; $i++) {\n        $note = $notes[$i];\n        if ($note == \".\") {\n            $result[$i] = 1;\n        } else if ($note == \"o\") {\n            $result[$i] = 4;\n        } else if ($note == \"o|\") {\n            $result[$i] = 2;\n        } else if ($note == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $notes_count['whole'] = 0;\n    $notes_count['half'] = 0;\n    $notes_count['quarter'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['hundredtwentyeighth'] = 0;\n    $notes_count['hundredfiftysixteenth'] = 0;\n    $notes_count['threehundredtwentyeighth'] = 0;\n    $notes_count['sixtythreehundredtwentyeighth'] = 0;\n    $notes_count['ninehundredtwentyeighth'] = 0;\n    $notes_count['onehundredfiftysixteenth'] = 0;\n    $notes_count['threehundredfiftysixteenth'] = 0;\n    $notes_count['fivehundredtwentyeighth'] = 0;\n    $notes_count['sevenhundredfiftysixteenth'] = 0;\n    $notes_count['ninehundredfiftysixteenth'] = 0;\n    $notes_count['onehundredseventyeighteenth'] = 0;\n    $notes_count['threehundredseventyeighteenth'] = 0;\n    $notes_count['fivehundredseventyeighteenth'] = 0;\n    $notes_count['sevenhundredseventyeighteenth'] = 0;\n    $notes_count['ninehundredseventyeighteenth'] = 0;\n    $notes_count['onehundredninetieth'] = 0;\n    $notes_count['threehundredninetieth'] = 0;\n    $notes_count['fivehundredninetieth'] = 0;\n    $notes_count['sevenhundredninetieth'] = 0;\n    $notes_count['ninehundredninetieth'] = 0;\n    $notes_count['onehundredninetynineth'] = 0;\n    $notes_count['threehundredninetynineth'] = 0;\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nParse error: Unclosed '{' on line 11 in /tmp/tmp_qlybj_y.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = \"\";\n    $current_duration = 0;\n    $current_beats = 0;\n    $current_beat = 0;\n    $current_beat_duration = 0;\n    $current_beat_duration_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier = 1;\n    $current_beat_duration_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpl525w9xv.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpbpwgwhym.php:14\nStack trace:\n#0 /tmp/tmpbpwgwhym.php(27): parse_music('')\n#1 /tmp/tmpbpwgwhym.php(31): candidate('')\n#2 /tmp/tmpbpwgwhym.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpbpwgwhym.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $notes_count_array = array();\n    $i = 0;\n    while($i < $notes_count) {\n        $note = $notes[$i];\n        if($note == \".\") {\n            $note_count = 1;\n        } else if($note == \"o\") {\n            $note_count = 4;\n        } else if($note == \"o|\") {\n            $note_count = 2;\n        } else if($note == \".|\") {\n            $note_count = 1;\n        } else {\n            $note_count = 0;\n        }\n        $notes_count_array[$i] = $note_count;\n        $i++;\n    }\n    return $notes_count_array;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ux2w3hx.php:40\nStack trace:\n#0 /tmp/tmp4ux2w3hx.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp4ux2w3hx.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = 0;\n    $current_duration = 0;\n    $current_beat = 0;\n    $current_measure = 0;\n    $current_measure_duration = 0;\n    $current_measure_beat = 0;\n    $current_measure_note = 0;\n    $current_measure_duration_count = 0;\n    $current_measure_beat_count = 0;\n    $current_measure_note_count = 0;\n    $current_measure_duration_sum = 0;\n    $current_measure_beat_sum = 0;\n    $current_measure_note_sum = 0;\n    $current_measure_duration_max = 0;\n    $current_measure_beat_max = 0;\n    $current_measure_note_max = 0;\n    $current_measure_duration_min = 0;\n    $current_measure_beat_min = 0;\n    $current_measure_note_min = 0;\n    $current_measure_duration_avg = 0;\n    $current_measure_beat_avg = 0;\n    $current_measure_note_avg = 0;\n    $current_measure_duration_count = 0;\n    $current_measure_beat_count = 0;\n    $current_measure_note_count = 0;\n    $current_measure_duration_sum = 0;\n    $current_measure_beat_sum = 0;\n    $current_measure_note_sum = 0;\n    $current_measure_duration_max = 0;\n    $current_measure_beat_max = 0;\n    $current_measure_note_max = 0;\n    $current_measure_duration_min = 0;\n    $current_measure_beat_min = 0;\n    $current_measure_note_min = 0;\n    $current_measure_duration_avg = 0;\n    $current_measure_beat_avg = 0;\n    $current_measure_note_avg = 0;\n    $current_measure\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp5ogfik4o.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    foreach($notes as $note) {\n        if ($note === \".\") {\n            $note_count += 1;\n        } else if ($note === \"o\") {\n            $note_count += 4;\n        } else if ($note === \"o|\") {\n            $note_count += 2;\n        } else if ($note === \".|\") {\n            $note_count += 1;\n        }\n        $notes_count[$note_count] = $notes_count[$note_count] + 1;\n    }\n    return $notes_count;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nWarning: Undefined array key 0 in /tmp/tmpzjh4s6di.php on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzjh4s6di.php:35\nStack trace:\n#0 /tmp/tmpzjh4s6di.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpzjh4s6di.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $notes_count_array = array();\n    $note_count = 0;\n    for ($i = 0; $i < $notes_count; $i++) {\n        if ($notes[$i] == \".\") {\n            $note_count = $note_count + 1;\n        } else if ($notes[$i] == \"o\") {\n            $note_count = $note_count + 4;\n        } else if ($notes[$i] == \"o|\") {\n            $note_count = $note_count + 2;\n        } else if ($notes[$i] == \".|\") {\n            $note_count = $note_count + 1;\n        }\n        $notes_count_array[$i] = $note_count;\n    }\n    return $notes_count_array;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph9951jp3.php:36\nStack trace:\n#0 /tmp/tmph9951jp3.php(43): test()\n#1 {main}\n  thrown in /tmp/tmph9951jp3.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = 0;\n    $current_beat = 0;\n    $current_note_length = 0;\n    $current_note_length_count = 0;\n    $current_note_length_count_max = 0;\n    $current_note_length_count_max_index = 0;\n    $current_note_length_count_max_index_max = 0;\n    $current_note_length_count_max_index_max_index = 0;\n    $current_note_length_count_max_index_max_index_max = 0;\n    $current_note_length_count_max_index_max_index_max_index = 0;\n    $current_note_length_count_max_index_max_index_max_index_max = 0;\n    $current_note_length_count_max_index_max_index_max_index_max_index = 0;\n    $current_note_length_count_max_index_max_index_max_index_max_index_max = 0;\n    $current_note_length_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $current_note_length_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $current_note_length_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $current_note_length_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $current_note_length_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $current_note_length_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $current_note_length_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $current\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmphacol2g1.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = \"\";\n    $current_duration = 0;\n    $current_beats = 0;\n    $current_beat = 0;\n    $current_beat_duration = 0;\n    $current_beat_duration_count = 0;\n    $current_beat_duration_count_count = 0;\n    $current_beat_duration_count_count_count = 0;\n    $current_beat_duration_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_beat_duration_count\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmprvffcgmx.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = \"\";\n    $current_duration = 0;\n    $current_beat = 0;\n    $current_measure = 0;\n    $current_measure_duration = 0;\n    $current_measure_beat = 0;\n    $current_measure_note = \"\";\n    $current_measure_duration_note = \"\";\n    $current_measure_duration_note_duration = 0;\n    $current_measure_duration_note_duration_rest = 0;\n    $current_measure_duration_note_duration_rest_duration = 0;\n    $current_measure_duration_note_duration_rest_duration_rest = 0;\n    $current_measure_duration_note_duration_rest_duration_rest_duration = 0;\n    $current_measure_duration_note_duration_rest_duration_rest_duration_rest = 0;\n    $current_measure_duration_note_duration_rest_duration_rest_duration_rest_duration = 0;\n    $current_measure_duration_note_duration_rest_duration_rest_duration_rest_duration_rest = 0;\n    $current_measure_duration_note_duration_rest_duration_rest_duration_rest_duration_rest_duration = 0;\n    $current_measure_duration_note_duration_rest_duration_rest_duration_rest_duration_rest_duration_rest = 0;\n    $current_measure_duration_note_duration_rest_duration_rest_duration_rest_duration_rest_duration_rest_duration = 0;\n    $current_measure_duration_note_duration_rest_duration_rest_duration_rest_duration_rest_duration_rest_duration_rest = 0;\n    $current_measure_duration_note_duration_rest_duration_rest_duration_rest_duration_rest_duration_rest_duration_rest_duration = 0;\n    $current_measure_duration_note_duration_rest_duration_rest_duration_rest_duration_rest_duration_rest_duration_rest_duration_rest = 0;\n    $current_measure_duration_note_duration\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpe9v3jfkx.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp6p0ka4nd.php:14\nStack trace:\n#0 /tmp/tmp6p0ka4nd.php(29): parse_music('')\n#1 /tmp/tmp6p0ka4nd.php(33): candidate('')\n#2 /tmp/tmp6p0ka4nd.php(40): test()\n#3 {main}\n  thrown in /tmp/tmp6p0ka4nd.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $notes_count_array = array();\n    $notes_count_array[0] = 0;\n    for ($i = 0; $i < $notes_count; $i++) {\n        if ($notes[$i] == '.') {\n            $notes_count_array[$i] = 1;\n        } else if ($notes[$i] == 'o') {\n            $notes_count_array[$i] = 4;\n        } else if ($notes[$i] == 'o|') {\n            $notes_count_array[$i] = 2;\n        }\n    }\n    return $notes_count_array;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4g0wo8k6.php:33\nStack trace:\n#0 /tmp/tmp4g0wo8k6.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp4g0wo8k6.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $notes = explode(\" \", $music_string);\n    for ($i = 0; $i < $notes.length; $i++) {\n        $note = $notes[$i];\n        if ($note == \".\") {\n            $result[$i] = 1;\n        } else if ($note == \"o\") {\n            $result[$i] = 4;\n        } else if ($note == \"o|\") {\n            $result[$i] = 2;\n        } else if ($note == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpf7weiwyu.php:14\nStack trace:\n#0 /tmp/tmpf7weiwyu.php(30): parse_music('')\n#1 /tmp/tmpf7weiwyu.php(34): candidate('')\n#2 /tmp/tmpf7weiwyu.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpf7weiwyu.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    for ($i = 0; $i < $notes.length; $i++) {\n        $note = $notes[$i];\n        if ($note == \".\") {\n            $result[$i] = 1;\n        } else if ($note == \"o\") {\n            $result[$i] = 4;\n        } else if ($note == \"o|\") {\n            $result[$i] = 2;\n        } else if ($note == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpb_0jpelm.php:15\nStack trace:\n#0 /tmp/tmpb_0jpelm.php(31): parse_music('')\n#1 /tmp/tmpb_0jpelm.php(35): candidate('')\n#2 /tmp/tmpb_0jpelm.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpb_0jpelm.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    foreach($notes as $note) {\n        if ($note == \".\") {\n            $note_count = 0;\n        } else if ($note == \"o\") {\n            $note_count += 4;\n        } else if ($note == \"o|\") {\n            $note_count += 2;\n        } else if ($note == \".|\") {\n            $note_count += 1;\n        }\n        $notes_count[$note_count] = $notes_count[$note_count] + 1;\n    }\n    return $notes_count;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nWarning: Undefined array key 0 in /tmp/tmpd__9dy_k.php on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd__9dy_k.php:35\nStack trace:\n#0 /tmp/tmpd__9dy_k.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpd__9dy_k.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    for ($i = 0; $i < $notes.length; $i++) {\n        $note = $notes[$i];\n        if ($note == \".\") {\n            $result[$i] = 1;\n        } else if ($note == \"o\") {\n            $result[$i] = 4;\n        } else if ($note == \"o|\") {\n            $result[$i] = 2;\n        } else if ($note == \".|\") {\n            $result[$i] = 1;\n        } else {\n            $result[$i] = 0;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpkc6dom_t.php:14\nStack trace:\n#0 /tmp/tmpkc6dom_t.php(32): parse_music('')\n#1 /tmp/tmpkc6dom_t.php(36): candidate('')\n#2 /tmp/tmpkc6dom_t.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpkc6dom_t.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpcas0sj54.php:15\nStack trace:\n#0 /tmp/tmpcas0sj54.php(28): parse_music('')\n#1 /tmp/tmpcas0sj54.php(32): candidate('')\n#2 /tmp/tmpcas0sj54.php(39): test()\n#3 {main}\n  thrown in /tmp/tmpcas0sj54.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    $note_count_max = 0;\n    $note_count_max_index = 0;\n    $note_count_max_value = 0;\n    for ($i = 0; $i < $notes_count; $i++) {\n        if ($notes[$i] == \".\") {\n            $note_count_max_value++;\n            $note_count_max = max($note_count_max, $note_count_max_value);\n            $note_count_max_index = $i;\n        } else if ($notes[$i] == \"o\") {\n            $note_count++;\n        } else if ($notes[$i] == \"o|\") {\n            $note_count++;\n        } else if ($notes[$i] == \".|\") {\n            $note_count++;\n        }\n    }\n    for ($i = 0; $i < $notes_count; $i++) {\n        if ($notes[$i] == \".\") {\n            $note_count_max_value++;\n            $note_count_max = max($note_count_max, $note_count_max_value);\n            $note_count_max_index = $i;\n        } else if ($notes[$i] == \"o\") {\n            $note_count++;\n        } else if ($notes[$i] == \"o|\") {\n            $note_count++;\n        } else if ($notes[$i] == \".|\") {\n            $note_count++;\n        }\n    }\n    for ($i = 0; $i < $notes_count; $i++) {\n        if ($notes[$i] == \".\") {\n            $note_count_max_value++;\n            $note_count_max = max($note_count_max, $note_count_max_value);\n            $note_count_max_index = $i;\n        } else if ($notes[$i] == \"o\") {\n            $note_count++;\n        } else if ($notes[$i] == \"o|\") {\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nParse error: Unclosed '{' on line 51 in /tmp/tmpz7k4dthh.php on line 65\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = \"\";\n    $current_note_count = 0;\n    $current_note_duration = 0;\n    $current_note_duration_count = 0;\n    $current_note_duration_count_max = 0;\n    $current_note_duration_count_max_index = 0;\n    $current_note_duration_count_max_value = 0;\n    $current_note_duration_count_max_value_index = 0;\n    $current_note_duration_count_max_value_value = 0;\n    $current_note_duration_count_max_value_value_index = 0;\n    $current_note_duration_count_max_value_value_value = 0;\n    $current_note_duration_count_max_value_value_value_index = 0;\n    $current_note_duration_count_max_value_value_value_value = 0;\n    $current_note_duration_count_max_value_value_value_value_index = 0;\n    $current_note_duration_count_max_value_value_value_value_value = 0;\n    $current_note_duration_count_max_value_value_value_value_value_index = 0;\n    $current_note_duration_count_max_value_value_value_value_value_value = 0;\n    $current_note_duration_count_max_value_value_value_value_value_value_index = 0;\n    $current_note_duration_count_max_value_value_value_value_value_value_value = 0;\n    $current_note_duration_count_max_value_value_value_value_value_value_value_index = 0;\n    $current_note_duration_count_max_value_value_value_value_value_value_value_value = 0;\n    $current_note_duration_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $current_note_duration_count_max_value_value_value_value_value_value_value_value_value\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpct8o186r.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    for ($i = 0; $i < count($notes); $i++) {\n        if ($notes[$i] == \".\") {\n            $note_count = 0;\n        } else if ($notes[$i] == \"o\") {\n            $note_count = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $note_count = 2;\n        } else if ($notes[$i] == \".|\") {\n            $note_count = 1;\n        }\n        $notes_count[$i] = $note_count;\n    }\n    return $notes_count;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ko2nx6i.php:35\nStack trace:\n#0 /tmp/tmp6ko2nx6i.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp6ko2nx6i.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    $note_count_prev = 0;\n    $note_count_prev_prev = 0;\n    $note_count_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $note_count_prev_prev_prev_prev_prev_prev_prev_prev_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmphwmspwwh.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $notes_count[0] = 0;\n    $notes_count[1] = 0;\n    $notes_count[2] = 0;\n    $notes_count[3] = 0;\n    $notes_count[4] = 0;\n    $notes_count[5] = 0;\n    $notes_count[6] = 0;\n    $notes_count[7] = 0;\n    $notes_count[8] = 0;\n    $notes_count[9] = 0;\n    $notes_count[10] = 0;\n    $notes_count[11] = 0;\n    $notes_count[12] = 0;\n    $notes_count[13] = 0;\n    $notes_count[14] = 0;\n    $notes_count[15] = 0;\n    $notes_count[16] = 0;\n    $notes_count[17] = 0;\n    $notes_count[18] = 0;\n    $notes_count[19] = 0;\n    $notes_count[20] = 0;\n    $notes_count[21] = 0;\n    $notes_count[22] = 0;\n    $notes_count[23] = 0;\n    $notes_count[24] = 0;\n    $notes_count[25] = 0;\n    $notes_count[26] = 0;\n    $notes_count[27] = 0;\n    $notes_count[28] = 0;\n    $notes_count[29] = 0;\n    $notes_count[30] = 0;\n    $notes_count[31] = 0;\n    $notes_count[32] = 0;\n    $notes_count[33] = 0;\n    $notes_count[34] = 0;\n    $notes_count[35] = 0;\n    $notes_count[36] = 0;\n    $notes_count[37] = 0;\n    $notes_count[38] = 0;\n    $notes_count[39] = 0;\n    $notes_count[40] = 0\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp3_nzt_y6.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $notes = explode(\" \", $music_string);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result, 0);\n    $result = array_fill_keys($result,\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpha0_eam8.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $beats = 0;\n    $note = '';\n    $note_count = 0;\n    $note_length = 0;\n    $note_beats = 0;\n    $note_count_beats = 0;\n    $note_count_beats_count = 0;\n    $note_count_beats_count_beats = 0;\n    $note_count_beats_count_beats_count = 0;\n    $note_count_beats_count_beats_count_beats = 0;\n    $note_count_beats_count_beats_count_beats_count = 0;\n    $note_count_beats_count_beats_count_beats_count_beats = 0;\n    $note_count_beats_count_beats_count_beats_count_beats_count = 0;\n    $note_count_beats_count_beats_count_beats_count_beats_count_beats = 0;\n    $note_count_beats_count_beats_count_beats_count_beats_count_beats_count = 0;\n    $note_count_beats_count_beats_count_beats_count_beats_count_beats_count_beats = 0;\n    $note_count_beats_count_beats_count_beats_count_beats_count_beats_count_beats_count = 0;\n    $note_count_beats_count_beats_count_beats_count_beats_count_beats_count_beats_count_beats = 0;\n    $note_count_beats_count_beats_count_beats_count_beats_count_beats_count_beats_count_beats_count = 0;\n    $note_count_beats_count_beats_count_beats_count_beats_count_beats_count_beats_count_beats_count_beats = 0;\n    $note_count_beats_count_beats_count_beats_count_beats\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpewe39k3n.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $notes_count[0] = 0;\n    $notes_count[1] = 0;\n    $notes_count[2] = 0;\n    $notes_count[3] = 0;\n    $notes_count[4] = 0;\n    $notes_count[5] = 0;\n    $notes_count[6] = 0;\n    $notes_count[7] = 0;\n    $notes_count[8] = 0;\n    $notes_count[9] = 0;\n    $notes_count[10] = 0;\n    $notes_count[11] = 0;\n    $notes_count[12] = 0;\n    $notes_count[13] = 0;\n    $notes_count[14] = 0;\n    $notes_count[15] = 0;\n    $notes_count[16] = 0;\n    $notes_count[17] = 0;\n    $notes_count[18] = 0;\n    $notes_count[19] = 0;\n    $notes_count[20] = 0;\n    $notes_count[21] = 0;\n    $notes_count[22] = 0;\n    $notes_count[23] = 0;\n    $notes_count[24] = 0;\n    $notes_count[25] = 0;\n    $notes_count[26] = 0;\n    $notes_count[27] = 0;\n    $notes_count[28] = 0;\n    $notes_count[29] = 0;\n    $notes_count[30] = 0;\n    $notes_count[31] = 0;\n    $notes_count[32] = 0;\n    $notes_count[33] = 0;\n    $notes_count[34] = 0;\n    $notes_count[35] = 0;\n    $notes_count[36] = 0;\n    $notes_count[37] = 0;\n    $notes_count[38] = 0;\n    $notes_count[39] = 0;\n    $notes_count[40] = 0\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp3_nzt_y6.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $result['whole'] = 0;\n    $result['half'] = 0;\n    $result['quarter'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['hundredtwentyeighth'] = 0;\n    $result['hundredfiftysixteenth'] = 0;\n    $result['threehundredtwentyeighth'] = 0;\n    $result['sixtythreehundredtwentyeighth'] = 0;\n    $result['sixth'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['hundredtwentyeighth'] = 0;\n    $result['hundredfiftysixteenth'] = 0;\n    $result['threehundredtwentyeighth'] = 0;\n    $result['sixtythreehundredtwentyeighth'] = 0;\n    $result['sixth'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['hundredtwentyeighth'] = 0;\n    $result['hundredfiftysixteenth'] = 0;\n    $result['threehundredtwentyeighth'] = 0;\n    $result['sixtythreehundredtwentyeighth'] = 0;\n    $result['sixth'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['hundredtwentyeighth'] = 0;\n    $result['hundredfiftysixteenth'] = 0;\n    $result['threehundredtwentyeighth'] = 0;\n    $result['sixtythreehundredtwentyeighth'] =\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpwi_f9rbg.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    $result[0] = 0;\n    $result[1] = 0;\n    $result[2] = 0;\n    $result[3] = 0;\n    $result[4] = 0;\n    $result[5] = 0;\n    $result[6] = 0;\n    $result[7] = 0;\n    $result[8] = 0;\n    $result[9] = 0;\n    $result[10] = 0;\n    $result[11] = 0;\n    $result[12] = 0;\n    $result[13] = 0;\n    $result[14] = 0;\n    $result[15] = 0;\n    $result[16] = 0;\n    $result[17] = 0;\n    $result[18] = 0;\n    $result[19] = 0;\n    $result[20] = 0;\n    $result[21] = 0;\n    $result[22] = 0;\n    $result[23] = 0;\n    $result[24] = 0;\n    $result[25] = 0;\n    $result[26] = 0;\n    $result[27] = 0;\n    $result[28] = 0;\n    $result[29] = 0;\n    $result[30] = 0;\n    $result[31] = 0;\n    $result[32] = 0;\n    $result[33] = 0;\n    $result[34] = 0;\n    $result[35] = 0;\n    $result[36] = 0;\n    $result[37] = 0;\n    $result[38] = 0;\n    $result[39] = 0;\n    $result[40] = 0;\n    $result[41] = 0;\n    $result[42] = 0;\n    $result[43] = 0;\n    $result[44] = 0;\n    $result[45] = 0;\n    $result[46] = 0;\n    $result[47] = 0;\n    $result[48] = 0;\n    $\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpfdkj83x7.php on line 64\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    $result_count = 0;\n    for ($i = 0; $i < count($notes); $i++) {\n        if ($notes[$i] == \".\") {\n            $result_count++;\n        } else if ($notes[$i] == \"o\") {\n            $result_count += 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result_count += 2;\n        } else if ($notes[$i] == \".\") {\n            $result_count += 1;\n        }\n        $result[$i] = $result_count;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzjmxed6a.php:35\nStack trace:\n#0 /tmp/tmpzjmxed6a.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpzjmxed6a.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $result['beats'] = 0;\n    $result['notes'] = 0;\n    $result['whole'] = 0;\n    $result['half'] = 0;\n    $result['quarter'] = 0;\n    $result['dotted'] = 0;\n    $result['triplet'] = 0;\n    $result['triplet_dot'] = 0;\n    $result['triplet_dotted'] = 0;\n    $result['triplet_dotted_dot'] = 0;\n    $result['triplet_dotted_dotted'] = 0;\n    $result['triplet_dotted_dotted_dot'] = 0;\n    $result['triplet_dotted_dotted_dotted'] = 0;\n    $result['triplet_dotted_dotted_dotted_dot'] = 0;\n    $result['triplet_dotted_dotted_dotted_dotted'] = 0;\n    $result['triplet_dotted_dotted_dotted_dotted_dot'] = 0;\n    $result['triplet_dotted_dotted_dotted_dotted_dotted'] = 0;\n    $result['triplet_dotted_dotted_dotted_dotted_dotted_dot'] = 0;\n    $result['triplet_dotted_dotted_dotted_dotted_dotted_dotted'] = 0;\n    $result['triplet_dotted_dotted_dotted_dotted_dotted_dotted_dot'] = 0;\n    $result['triplet_dotted_dotted_dotted_dotted_dotted_dotted_dotted'] = 0;\n    $result['triplet_dotted_dotted_dotted_dotted_dotted_dotted_dotted_dot'] = 0;\n    $result['triplet_dotted_dotted_dotted_dotted_dotted_dotted_dotted_dotted'] = 0;\n    $result['triplet_dotted_dotted_dotted_dotted_dotted_dotted_dotted_dotted_dot'] = 0;\n    $result['triplet_dotted_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nParse error: syntax error, unexpected string content \"triplet_dotted_\", expecting \"]\" in /tmp/tmpea74ka3c.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    $note_count_array = array();\n    $note_count_array_count = 0;\n    $note_count_array_count_array = array();\n    $note_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpc7ashhn0.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    $result[0] = 0;\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpe73ye0c6.php:15\nStack trace:\n#0 /tmp/tmpe73ye0c6.php(28): parse_music('')\n#1 /tmp/tmpe73ye0c6.php(32): candidate('')\n#2 /tmp/tmpe73ye0c6.php(39): test()\n#3 {main}\n  thrown in /tmp/tmpe73ye0c6.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = 0;\n    $current_beat = 0;\n    $current_note_count = 0;\n    $current_note_count_max = 0;\n    $current_note_count_max_index = 0;\n    $current_note_count_max_value = 0;\n    $current_note_count_max_value_index = 0;\n    $current_note_count_max_value_value = 0;\n    $current_note_count_max_value_value_index = 0;\n    $current_note_count_max_value_value_value = 0;\n    $current_note_count_max_value_value_value_index = 0;\n    $current_note_count_max_value_value_value_value = 0;\n    $current_note_count_max_value_value_value_value_index = 0;\n    $current_note_count_max_value_value_value_value_value = 0;\n    $current_note_count_max_value_value_value_value_value_index = 0;\n    $current_note_count_max_value_value_value_value_value_value = 0;\n    $current_note_count_max_value_value_value_value_value_value_index = 0;\n    $current_note_count_max_value_value_value_value_value_value_value = 0;\n    $current_note_count_max_value_value_value_value_value_value_value_index = 0;\n    $current_note_count_max_value_value_value_value_value_value_value_value = 0;\n    $current_note_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $current_note_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $current_note_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $current_note_count_max_value_value_value_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp5d9v1c81.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(' ', $music_string);\n    $notes_count = count($notes);\n    $notes_count_array = array();\n    for ($i = 0; $i < $notes_count; $i++) {\n        $note = $notes[$i];\n        if ($note == '.') {\n            $note_count = 1;\n        } else if ($note == 'o') {\n            $note_count = 4;\n        } else if ($note == 'o|') {\n            $note_count = 2;\n        } else {\n            $note_count = 0;\n        }\n        $notes_count_array[$i] = $note_count;\n    }\n    return $notes_count_array;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ochankw.php:36\nStack trace:\n#0 /tmp/tmp_ochankw.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp_ochankw.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $result['whole'] = 0;\n    $result['half'] = 0;\n    $result['quarter'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['eighth'] = 0;\n    $result\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmps8ie2nfv.php on line 58\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $result['whole'] = 0;\n    $result['half'] = 0;\n    $result['quarter'] = 0;\n    $result['eighth'] = 0;\n    $result['sixteenth'] = 0;\n    $result['thirtysecond'] = 0;\n    $result['sixtyfourth'] = 0;\n    $result['hundredtwentyeighth'] = 0;\n    $result['hundredfiftysixteenth'] = 0;\n    $result['threehundredtwentyeighth'] = 0;\n    $result['sixhundredfiftysixteenth'] = 0;\n    $result['ninehundredtwentyeighth'] = 0;\n    $result['onehundredtwentyeighth'] = 0;\n    $result['twohundredfiftysixteenth'] = 0;\n    $result['threehundredtwentyeighth'] = 0;\n    $result['fourhundredfiftysixteenth'] = 0;\n    $result['fivehundredtwentyeighth'] = 0;\n    $result['sixhundredfiftysixteenth'] = 0;\n    $result['sevenhundredtwentyeighth'] = 0;\n    $result['eighthundredfiftysixteenth'] = 0;\n    $result['ninehundredtwentyeighth'] = 0;\n    $result['tenhundredtwentyeighth'] = 0;\n    $result['elevenhundredtwentyeighth'] = 0;\n    $result['twelvehundredfiftysixteenth'] = 0;\n    $result['thirteenhundredtwentyeighth'] = 0;\n    $result['fourteenhundredfiftysixteenth'] = 0;\n    $result['fifteenhundredtwentyeighth'] = 0;\n    $result['sixteenhundredfiftysixteenth'] = 0;\n    $result['seventeenhundredtwentyeighth'] = 0;\n    $result['eighteenhundredfiftysixteenth'] = 0;\n    $result['nineteenhundredtwentyeighth'] = 0;\n    $result['twentyhundredfiftysixteenth'] = 0;\n    $result['twentyonehundredtwentyeighth'] = 0;\n    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: Unclosed '{' on line 11 in /tmp/tmp4s1eh9gb.php on line 59\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    $note_count_max = 0;\n    $note_count_max_index = 0;\n    $note_count_max_value = 0;\n    $note_count_max_value_index = 0;\n    $note_count_max_value_value = 0;\n    $note_count_max_value_value_index = 0;\n    $note_count_max_value_value_value = 0;\n    $note_count_max_value_value_value_index = 0;\n    $note_count_max_value_value_value_value = 0;\n    $note_count_max_value_value_value_value_index = 0;\n    $note_count_max_value_value_value_value_value = 0;\n    $note_count_max_value_value_value_value_value_index = 0;\n    $note_count_max_value_value_value_value_value_value = 0;\n    $note_count_max_value_value_value_value_value_value_index = 0;\n    $note_count_max_value_value_value_value_value_value_value = 0;\n    $note_count_max_value_value_value_value_value_value_value_index = 0;\n    $note_count_max_value_value_value_value_value_value_value_value = 0;\n    $note_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $note_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $note_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $note_count_max_value_value_value_value_value_value_value_value_value_value = 0;\n    $note_count_max_value_value_value_value_value_value_value_value_value_value_index =\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpvs9ycxxc.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    $note_count_array = array();\n    $note_count_array[0] = 0;\n    $note_count_array[1] = 0;\n    $note_count_array[2] = 0;\n    $note_count_array[3] = 0;\n    $note_count_array[4] = 0;\n    $note_count_array[5] = 0;\n    $note_count_array[6] = 0;\n    $note_count_array[7] = 0;\n    $note_count_array[8] = 0;\n    $note_count_array[9] = 0;\n    $note_count_array[10] = 0;\n    $note_count_array[11] = 0;\n    $note_count_array[12] = 0;\n    $note_count_array[13] = 0;\n    $note_count_array[14] = 0;\n    $note_count_array[15] = 0;\n    $note_count_array[16] = 0;\n    $note_count_array[17] = 0;\n    $note_count_array[18] = 0;\n    $note_count_array[19] = 0;\n    $note_count_array[20] = 0;\n    $note_count_array[21] = 0;\n    $note_count_array[22] = 0;\n    $note_count_array[23] = 0;\n    $note_count_array[24] = 0;\n    $note_count_array[25] = 0;\n    $note_count_array[26] = 0;\n    $note_count_array[27] = 0;\n    $note_count_array[28] = 0;\n    $note_count_array[29] = 0;\n    $note_count_array[30] = 0;\n    $note_count_array[31] = 0;\n    $note_count_array[32] = 0;\n    $note_count_array[\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpw5w58h5s.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $notes_count['whole'] = 0;\n    $notes_count['half'] = 0;\n    $notes_count['quarter'] = 0;\n    $notes_count['eighth'] = 0;\n    $notes_count['sixteenth'] = 0;\n    $notes_count['thirtysecond'] = 0;\n    $notes_count['sixtyfourth'] = 0;\n    $notes_count['eigth'] = 0;\n    $notes_count['one'] = 0;\n    $notes_count['two'] = 0;\n    $notes_count['three'] = 0;\n    $notes_count['four'] = 0;\n    $notes_count['five'] = 0;\n    $notes_count['six'] = 0;\n    $notes_count['seven'] = 0;\n    $notes_count['eight'] = 0;\n    $notes_count['nine'] = 0;\n    $notes_count['ten'] = 0;\n    $notes_count['eleven'] = 0;\n    $notes_count['twelve'] = 0;\n    $notes_count['thirteen'] = 0;\n    $notes_count['fourteen'] = 0;\n    $notes_count['fifteen'] = 0;\n    $notes_count['sixteen'] = 0;\n    $notes_count['seventeen'] = 0;\n    $notes_count['eighteen'] = 0;\n    $notes_count['nineteen'] = 0;\n    $notes_count['twenty'] = 0;\n    $notes_count['twentyone'] = 0;\n    $notes_count['twentytwo'] = 0;\n    $notes_count['twentythree'] = 0;\n    $notes_count['twentyfour'] = 0;\n    $notes_count['twentyfive'] = 0;\n    $notes_count['twentysix'] = 0;\n    $notes_count['twentyseven'] = 0;\n    $notes_count['twentyeight'] = 0;\n    $notes_count['twentynine'] = 0;\n    $notes_count['\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \"]\" in /tmp/tmpmx6dl59e.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = count($notes);\n    $notes_count_array = array();\n    $note_count = 0;\n    $note_count_array[0] = 0;\n    for ($i = 0; $i < $notes_count; $i++) {\n        if ($notes[$i] == \".\") {\n            $note_count_array[$i] = $note_count;\n            $note_count = 0;\n        } else if ($notes[$i] == \"o\") {\n            $note_count += 4;\n        } else if ($notes[$i] == \"o|\") {\n            $note_count += 2;\n        } else if ($notes[$i] == \".|\") {\n            $note_count += 1;\n        }\n        $note_count_array[$i + 1] = $note_count;\n    }\n    return $note_count_array;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjsici1uc.php:38\nStack trace:\n#0 /tmp/tmpjsici1uc.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjsici1uc.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    for ($i = 0; $i < count($notes); $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$i] = 1;\n        } else if ($notes[$i] == \"o\") {\n            $result[$i] = 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$i] = 2;\n        } else if ($notes[$i] == \".|\") {\n            $result[$i] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $result = array();\n    $result_count = 0;\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result_count++;\n        } else if ($notes[$i] == \"o\") {\n            $result_count += 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result_count += 2;\n        } else if ($notes[$i] == \".|\") {\n            $result_count += 1;\n        }\n    }\n    $result = array_fill($result_count, 0);\n    $result_count = 0;\n    for ($i = 0; $i < $notes.length; $i++) {\n        if ($notes[$i] == \".\") {\n            $result[$result_count]++;\n        } else if ($notes[$i] == \"o\") {\n            $result[$result_count] += 4;\n        } else if ($notes[$i] == \"o|\") {\n            $result[$result_count] += 2;\n        } else if ($notes[$i] == \".|\") {\n            $result[$result_count] += 1;\n        }\n        $result_count++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmph830j9la.php:15\nStack trace:\n#0 /tmp/tmph830j9la.php(44): parse_music('')\n#1 /tmp/tmph830j9la.php(48): candidate('')\n#2 /tmp/tmph830j9la.php(55): test()\n#3 {main}\n  thrown in /tmp/tmph830j9la.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $count = 0;\n    $beats = 0;\n    $current_note = 0;\n    $current_beat = 0;\n    $current_note_count = 0;\n    $current_note_count_count = 0;\n    $current_note_count_count_count = 0;\n    $current_note_count_count_count_count = 0;\n    $current_note_count_count_count_count_count = 0;\n    $current_note_count_count_count_count_count_count = 0;\n    $current_note_count_count_count_count_count_count_count = 0;\n    $current_note_count_count_count_count_count_count_count_count = 0;\n    $current_note_count_count_count_count_count_count_count_count_count = 0;\n    $current_note_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_note_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_note_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_note_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_note_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_note_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_note_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_note_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $current_note_count_count_count_count\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpfyvfyi_m.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $current_note = \"\";\n    $current_note_length = 0;\n    $current_note_count = 0;\n    $current_note_beats = 0;\n    $current_note_beat_count = 0;\n    $current_note_beat_length = 0;\n    $current_note_beat_beats = 0;\n    $current_note_beat_beat_count = 0;\n    $current_note_beat_beat_length = 0;\n    $current_note_beat_beat_beats = 0;\n    $current_note_beat_beat_beat_count = 0;\n    $current_note_beat_beat_beat_length = 0;\n    $current_note_beat_beat_beat_beats = 0;\n    $current_note_beat_beat_beat_beat_count = 0;\n    $current_note_beat_beat_beat_beat_length = 0;\n    $current_note_beat_beat_beat_beat_beats = 0;\n    $current_note_beat_beat_beat_beat_beat_count = 0;\n    $current_note_beat_beat_beat_beat_beat_length = 0;\n    $current_note_beat_beat_beat_beat_beat_beats = 0;\n    $current_note_beat_beat_beat_beat_beat_beat_count = 0;\n    $current_note_beat_beat_beat_beat_beat_beat_length = 0;\n    $current_note_beat_beat_beat_beat_beat_beat_beats = 0;\n    $current_note_beat_beat_beat_beat_beat_beat_beat_count = 0;\n    $current_note_beat_beat_beat_beat_beat_beat_beat_length = 0;\n    $current_note_beat_beat_beat_beat_beat_beat_beat_beats = 0;\n    $current_note_beat_beat_beat_beat_beat_beat_beat_beat_count = 0;\n    $current_note_beat_beat_beat_beat_beat_beat_beat_beat_length = 0;\n    $\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpncq7qdoc.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $result = array();\n    $beats = 0;\n    $note = 0;\n    $note_count = 0;\n    $note_count_max = 0;\n    $note_count_max_index = 0;\n    $note_count_max_value = 0;\n    $note_count_max_value_index = 0;\n    $note_count_max_value_value = 0;\n    $note_count_max_value_value_index = 0;\n    $note_count_max_value_value_value = 0;\n    $note_count_max_value_value_value_index = 0;\n    $note_count_max_value_value_value_value = 0;\n    $note_count_max_value_value_value_value_index = 0;\n    $note_count_max_value_value_value_value_value = 0;\n    $note_count_max_value_value_value_value_value_index = 0;\n    $note_count_max_value_value_value_value_value_value = 0;\n    $note_count_max_value_value_value_value_value_value_index = 0;\n    $note_count_max_value_value_value_value_value_value_value = 0;\n    $note_count_max_value_value_value_value_value_value_value_index = 0;\n    $note_count_max_value_value_value_value_value_value_value_value = 0;\n    $note_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $note_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $note_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $note_count_max_value_value_value_value_value_value_value_value_value_value = 0;\n    $note_count_max_value_value_value_value_value_value_value_value_value_value_index =\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292757,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpqfhej3bv.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $notes_count = array();\n    $note_count = 0;\n    $note_count_array = array();\n    $note_count_array_count = 0;\n    $note_count_array_count_array = array();\n    $note_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count = 0;\n    $note_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array_count_array = array();\n    $note_count_array_count_array_count_array_count_array_count_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292756,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpc7ashhn0.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}