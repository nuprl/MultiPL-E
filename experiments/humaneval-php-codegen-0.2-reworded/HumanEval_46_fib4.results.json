{
  "name": "HumanEval_46_fib4",
  "language": "php",
  "prompt": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n",
  "tests": "function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    } else if ($n == 4) {\n        return 2;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptd9jo2if.php:30\nStack trace:\n#0 /tmp/tmptd9jo2if.php(36): test()\n#1 {main}\n  thrown in /tmp/tmptd9jo2if.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    } else if ($n == 4) {\n        return 2;\n    } else {\n        return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5cuilll_.php:30\nStack trace:\n#0 /tmp/tmp5cuilll_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp5cuilll_.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else if ($n === 4) {\n        return 2;\n    } else if ($n === 5) {\n        return 4;\n    } else if ($n === 6) {\n        return 8;\n    } else if ($n === 7) {\n        return 14;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 2) {\n        return 0;\n    } else if ($n == 2) {\n        return 2;\n    } else {\n        return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8d1dw_3l.php:30\nStack trace:\n#0 /tmp/tmp8d1dw_3l.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp8d1dw_3l.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else if ($n === 4) {\n        return 2;\n    } else if ($n === 5) {\n        return 4;\n    } else if ($n === 6) {\n        return 8;\n    } else if ($n === 7) {\n        return 14;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    } else if ($n == 1) {\n        return 0;\n    } else if ($n == 2) {\n        return 2;\n    } else if ($n == 3) {\n        return 0;\n    } else {\n        return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    } else if ($n == 4) {\n        return 2;\n    } else {\n        return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5cuilll_.php:30\nStack trace:\n#0 /tmp/tmp5cuilll_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp5cuilll_.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    } else if ($n == 1) {\n        return 0;\n    } else if ($n == 2) {\n        return 2;\n    } else if ($n == 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    } else if ($n == 1) {\n        return 0;\n    } else if ($n == 2) {\n        return 2;\n    } else if ($n == 3) {\n        return 0;\n    } else if ($n == 4) {\n        return 2;\n    } else if ($n == 5) {\n        return 4;\n    } else if ($n == 6) {\n        return 8;\n    } else if ($n == 7) {\n        return 14;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else if ($n === 4) {\n        return 2;\n    } else if ($n === 5) {\n        return 4;\n    } else if ($n === 6) {\n        return 8;\n    } else if ($n === 7) {\n        return 14;\n    } else if ($n === 8) {\n        return 0;\n    } else if ($n === 9) {\n        return 0;\n    } else if ($n === 10) {\n        return 2;\n    } else if ($n === 11) {\n        return 0;\n    } else if ($n === 12) {\n        return 2;\n    } else if ($n === 13) {\n        return 4;\n    } else if ($n === 14) {\n        return 8;\n    } else if ($n === 15) {\n        return 14;\n    } else if ($n === 16) {\n        return 0;\n    } else if ($n === 17) {\n        return 0;\n    } else if ($n === 18) {\n        return 2;\n    } else if ($n === 19) {\n        return 0;\n    } else if ($n === 20) {\n        return 2;\n    } else if ($n === 21) {\n        return 4;\n    } else if ($n === 22) {\n        return 8;\n    } else if ($n === 23) {\n        return 14;\n    } else if ($n === 24) {\n        return 0;\n    } else if ($n === 25) {\n        return 0;\n    } else if ($n === 26) {\n        return 2;\n    } else if ($n === 27) {\n        return 0;\n    } else if ($n === 28) {\n        return 2;\n    } else if ($n === 29) {\n        return 4;\n    } else if ($n === 30) {\n        return 8;\n    } else if ($n === 31) {\n        return 14;\n    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nParse error: Unclosed '{' on line 15 in /tmp/tmph6eszp77.php on line 92\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else if ($n === 4) {\n        return 2;\n    } else if ($n === 5) {\n        return 4;\n    } else if ($n === 6) {\n        return 8;\n    } else if ($n === 7) {\n        return 14;\n    } else if ($n === 8) {\n        return 0;\n    } else if ($n === 9) {\n        return 0;\n    } else if ($n === 10) {\n        return 2;\n    } else if ($n === 11) {\n        return 0;\n    } else if ($n === 12) {\n        return 2;\n    } else if ($n === 13) {\n        return 4;\n    } else if ($n === 14) {\n        return 8;\n    } else if ($n === 15) {\n        return 14;\n    } else if ($n === 16) {\n        return 0;\n    } else if ($n === 17) {\n        return 0;\n    } else if ($n === 18) {\n        return 2;\n    } else if ($n === 19) {\n        return 0;\n    } else if ($n === 20) {\n        return 2;\n    } else if ($n === 21) {\n        return 4;\n    } else if ($n === 22) {\n        return 8;\n    } else if ($n === 23) {\n        return 14;\n    } else if ($n === 24) {\n        return 0;\n    } else if ($n === 25) {\n        return 0;\n    } else if ($n === 26) {\n        return 2;\n    } else if ($n === 27) {\n        return 0;\n    } else if ($n === 28) {\n        return 2;\n    } else if ($n === 29) {\n        return 4;\n    } else if ($n === 30) {\n        return 8;\n    } else if ($n === 31) {\n        return 14;\n    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nParse error: Unclosed '{' on line 15 in /tmp/tmph6eszp77.php on line 92\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else if ($n === 4) {\n        return 2;\n    } else if ($n === 5) {\n        return 4;\n    } else if ($n === 6) {\n        return 8;\n    } else if ($n === 7) {\n        return 14;\n    } else if ($n === 8) {\n        return 0;\n    } else if ($n === 9) {\n        return 0;\n    } else if ($n === 10) {\n        return 2;\n    } else if ($n === 11) {\n        return 0;\n    } else if ($n === 12) {\n        return 2;\n    } else if ($n === 13) {\n        return 4;\n    } else if ($n === 14) {\n        return 8;\n    } else if ($n === 15) {\n        return 14;\n    } else if ($n === 16) {\n        return 0;\n    } else if ($n === 17) {\n        return 0;\n    } else if ($n === 18) {\n        return 2;\n    } else if ($n === 19) {\n        return 0;\n    } else if ($n === 20) {\n        return 2;\n    } else if ($n === 21) {\n        return 4;\n    } else if ($n === 22) {\n        return 8;\n    } else if ($n === 23) {\n        return 14;\n    } else if ($n === 24) {\n        return 0;\n    } else if ($n === 25) {\n        return 0;\n    } else if ($n === 26) {\n        return 2;\n    } else if ($n === 27) {\n        return 0;\n    } else if ($n === 28) {\n        return 2;\n    } else if ($n === 29) {\n        return 4;\n    } else if ($n === 30) {\n        return 8;\n    } else if ($n === 31) {\n        return 14;\n    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nParse error: Unclosed '{' on line 15 in /tmp/tmph6eszp77.php on line 92\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 1) {\n        return 0;\n    }\n    if ($n == 1 || $n == 2) {\n        return 1;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3gi9bgh9.php:30\nStack trace:\n#0 /tmp/tmp3gi9bgh9.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3gi9bgh9.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fpwya_a.php:27\nStack trace:\n#0 /tmp/tmp1fpwya_a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1fpwya_a.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else if ($n === 4) {\n        return 2;\n    } else if ($n === 5) {\n        return 4;\n    } else if ($n === 6) {\n        return 8;\n    } else if ($n === 7) {\n        return 14;\n    } else if ($n === 8) {\n        return 0;\n    } else if ($n === 9) {\n        return 2;\n    } else if ($n === 10) {\n        return 4;\n    } else if ($n === 11) {\n        return 8;\n    } else if ($n === 12) {\n        return 14;\n    } else if ($n === 13) {\n        return 0;\n    } else if ($n === 14) {\n        return 2;\n    } else if ($n === 15) {\n        return 4;\n    } else if ($n === 16) {\n        return 8;\n    } else if ($n === 17) {\n        return 14;\n    } else if ($n === 18) {\n        return 0;\n    } else if ($n === 19) {\n        return 2;\n    } else if ($n === 20) {\n        return 4;\n    } else if ($n === 21) {\n        return 8;\n    } else if ($n === 22) {\n        return 14;\n    } else if ($n === 23) {\n        return 0;\n    } else if ($n === 24) {\n        return 2;\n    } else if ($n === 25) {\n        return 4;\n    } else if ($n === 26) {\n        return 8;\n    } else if ($n === 27) {\n        return 14;\n    } else if ($n === 28) {\n        return 0;\n    } else if ($n === 29) {\n        return 2;\n    } else if ($n === 30) {\n        return 4;\n    } else if ($n === 31) {\n        return 8;\n    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nParse error: Unclosed '{' on line 15 in /tmp/tmp3aalb1k4.php on line 92\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fpwya_a.php:27\nStack trace:\n#0 /tmp/tmp1fpwya_a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1fpwya_a.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else if ($n === 4) {\n        return 2;\n    } else if ($n === 5) {\n        return 4;\n    } else if ($n === 6) {\n        return 8;\n    } else if ($n === 7) {\n        return 14;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else if ($n === 4) {\n        return 2;\n    } else if ($n === 5) {\n        return 4;\n    } else if ($n === 6) {\n        return 8;\n    } else if ($n === 7) {\n        return 14;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 2) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7d0o2r3v.php:27\nStack trace:\n#0 /tmp/tmp7d0o2r3v.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp7d0o2r3v.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 1) {\n        return 0;\n    } else if ($n == 1 || $n == 2) {\n        return 1;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvb805wva.php:30\nStack trace:\n#0 /tmp/tmpvb805wva.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpvb805wva.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    } else if ($n == 4) {\n        return 2;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptd9jo2if.php:30\nStack trace:\n#0 /tmp/tmptd9jo2if.php(36): test()\n#1 {main}\n  thrown in /tmp/tmptd9jo2if.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fpwya_a.php:27\nStack trace:\n#0 /tmp/tmp1fpwya_a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1fpwya_a.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else if ($n === 4) {\n        return 2;\n    } else if ($n === 5) {\n        return 4;\n    } else if ($n === 6) {\n        return 8;\n    } else if ($n === 7) {\n        return 14;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fpwya_a.php:27\nStack trace:\n#0 /tmp/tmp1fpwya_a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1fpwya_a.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    } else if ($n == 1) {\n        return 0;\n    } else if ($n == 2) {\n        return 2;\n    } else if ($n == 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fpwya_a.php:27\nStack trace:\n#0 /tmp/tmp1fpwya_a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1fpwya_a.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fpwya_a.php:27\nStack trace:\n#0 /tmp/tmp1fpwya_a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1fpwya_a.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    } else if ($n == 4) {\n        return 2;\n    } else {\n        return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5cuilll_.php:30\nStack trace:\n#0 /tmp/tmp5cuilll_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp5cuilll_.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 2) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpda8qkil4.php:27\nStack trace:\n#0 /tmp/tmpda8qkil4.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpda8qkil4.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fpwya_a.php:27\nStack trace:\n#0 /tmp/tmp1fpwya_a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1fpwya_a.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fpwya_a.php:27\nStack trace:\n#0 /tmp/tmp1fpwya_a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1fpwya_a.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fpwya_a.php:27\nStack trace:\n#0 /tmp/tmp1fpwya_a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1fpwya_a.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fpwya_a.php:27\nStack trace:\n#0 /tmp/tmp1fpwya_a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1fpwya_a.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fpwya_a.php:27\nStack trace:\n#0 /tmp/tmp1fpwya_a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1fpwya_a.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 2) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpda8qkil4.php:27\nStack trace:\n#0 /tmp/tmpda8qkil4.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpda8qkil4.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    } else if ($n == 4) {\n        return 2;\n    } else {\n        return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5cuilll_.php:30\nStack trace:\n#0 /tmp/tmp5cuilll_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp5cuilll_.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    } else {\n        return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw48l5s42.php:28\nStack trace:\n#0 /tmp/tmpw48l5s42.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpw48l5s42.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else if ($n === 4) {\n        return 2;\n    } else if ($n === 5) {\n        return 4;\n    } else if ($n === 6) {\n        return 8;\n    } else if ($n === 7) {\n        return 14;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fpwya_a.php:27\nStack trace:\n#0 /tmp/tmp1fpwya_a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1fpwya_a.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else if ($n === 4) {\n        return 2;\n    } else if ($n === 5) {\n        return 4;\n    } else if ($n === 6) {\n        return 8;\n    } else if ($n === 7) {\n        return 14;\n    } else if ($n === 8) {\n        return 0;\n    } else if ($n === 9) {\n        return 0;\n    } else if ($n === 10) {\n        return 2;\n    } else if ($n === 11) {\n        return 0;\n    } else if ($n === 12) {\n        return 2;\n    } else if ($n === 13) {\n        return 4;\n    } else if ($n === 14) {\n        return 8;\n    } else if ($n === 15) {\n        return 14;\n    } else if ($n === 16) {\n        return 0;\n    } else if ($n === 17) {\n        return 0;\n    } else if ($n === 18) {\n        return 2;\n    } else if ($n === 19) {\n        return 0;\n    } else if ($n === 20) {\n        return 2;\n    } else if ($n === 21) {\n        return 4;\n    } else if ($n === 22) {\n        return 8;\n    } else if ($n === 23) {\n        return 14;\n    } else if ($n === 24) {\n        return 0;\n    } else if ($n === 25) {\n        return 0;\n    } else if ($n === 26) {\n        return 2;\n    } else if ($n === 27) {\n        return 0;\n    } else if ($n === 28) {\n        return 2;\n    } else if ($n === 29) {\n        return 4;\n    } else if ($n === 30) {\n        return 8;\n    } else if ($n === 31) {\n        return 14;\n    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nParse error: Unclosed '{' on line 15 in /tmp/tmph6eszp77.php on line 92\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else if ($n === 4) {\n        return 2;\n    } else if ($n === 5) {\n        return 4;\n    } else if ($n === 6) {\n        return 8;\n    } else if ($n === 7) {\n        return 14;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    } else if ($n == 4) {\n        return 2;\n    } else {\n        return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5cuilll_.php:30\nStack trace:\n#0 /tmp/tmp5cuilll_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp5cuilll_.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fpwya_a.php:27\nStack trace:\n#0 /tmp/tmp1fpwya_a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1fpwya_a.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fpwya_a.php:27\nStack trace:\n#0 /tmp/tmp1fpwya_a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1fpwya_a.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else if ($n === 4) {\n        return 2;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else if ($n === 4) {\n        return 2;\n    } else if ($n === 5) {\n        return 4;\n    } else if ($n === 6) {\n        return 8;\n    } else if ($n === 7) {\n        return 14;\n    } else if ($n === 8) {\n        return 0;\n    } else if ($n === 9) {\n        return 2;\n    } else if ($n === 10) {\n        return 4;\n    } else if ($n === 11) {\n        return 8;\n    } else if ($n === 12) {\n        return 14;\n    } else if ($n === 13) {\n        return 0;\n    } else if ($n === 14) {\n        return 2;\n    } else if ($n === 15) {\n        return 4;\n    } else if ($n === 16) {\n        return 8;\n    } else if ($n === 17) {\n        return 14;\n    } else if ($n === 18) {\n        return 0;\n    } else if ($n === 19) {\n        return 2;\n    } else if ($n === 20) {\n        return 4;\n    } else if ($n === 21) {\n        return 8;\n    } else if ($n === 22) {\n        return 14;\n    } else if ($n === 23) {\n        return 0;\n    } else if ($n === 24) {\n        return 2;\n    } else if ($n === 25) {\n        return 4;\n    } else if ($n === 26) {\n        return 8;\n    } else if ($n === 27) {\n        return 14;\n    } else if ($n === 28) {\n        return 0;\n    } else if ($n === 29) {\n        return 2;\n    } else if ($n === 30) {\n        return 4;\n    } else if ($n === 31) {\n        return 8;\n    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nParse error: Unclosed '{' on line 15 in /tmp/tmp3aalb1k4.php on line 92\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fpwya_a.php:27\nStack trace:\n#0 /tmp/tmp1fpwya_a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1fpwya_a.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fpwya_a.php:27\nStack trace:\n#0 /tmp/tmp1fpwya_a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1fpwya_a.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else if ($n === 4) {\n        return 2;\n    } else if ($n === 5) {\n        return 4;\n    } else if ($n === 6) {\n        return 8;\n    } else if ($n === 7) {\n        return 14;\n    } else if ($n === 8) {\n        return 0;\n    } else if ($n === 9) {\n        return 0;\n    } else if ($n === 10) {\n        return 2;\n    } else if ($n === 11) {\n        return 0;\n    } else if ($n === 12) {\n        return 2;\n    } else if ($n === 13) {\n        return 4;\n    } else if ($n === 14) {\n        return 8;\n    } else if ($n === 15) {\n        return 14;\n    } else if ($n === 16) {\n        return 0;\n    } else if ($n === 17) {\n        return 0;\n    } else if ($n === 18) {\n        return 2;\n    } else if ($n === 19) {\n        return 0;\n    } else if ($n === 20) {\n        return 2;\n    } else if ($n === 21) {\n        return 4;\n    } else if ($n === 22) {\n        return 8;\n    } else if ($n === 23) {\n        return 14;\n    } else if ($n === 24) {\n        return 0;\n    } else if ($n === 25) {\n        return 0;\n    } else if ($n === 26) {\n        return 2;\n    } else if ($n === 27) {\n        return 0;\n    } else if ($n === 28) {\n        return 2;\n    } else if ($n === 29) {\n        return 4;\n    } else if ($n === 30) {\n        return 8;\n    } else if ($n === 31) {\n        return 14;\n    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nParse error: Unclosed '{' on line 15 in /tmp/tmph6eszp77.php on line 92\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzl3_i3f.php:27\nStack trace:\n#0 /tmp/tmpxzl3_i3f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzl3_i3f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n        return 0;\n    } else if ($n === 2) {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}