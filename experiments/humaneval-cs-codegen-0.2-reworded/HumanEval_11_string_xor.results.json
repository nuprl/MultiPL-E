{
  "name": "HumanEval_11_string_xor",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnge2ex9b.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(new string[] {n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2kl83sjl.cs(25,747): error CS1010: Newline in constant\n/tmp/tmp2kl83sjl.cs(26,6): error CS1026: ) expected\n/tmp/tmp2kl83sjl.cs(26,6): error CS1002: ; expected\n/tmp/tmp2kl83sjl.cs(27,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp2kl83sjl.cs(33,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpx8ftuo2q.cs(24,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(res).Select(x => (char)(x + '0')).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfwypdyz8.cs(24,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd_mwfily.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int len = a.Length;\n        if (len != b.Length)\n            throw new Exception(\"Input strings must be of equal length\");\n        int[] ai = new int[len];\n        int[] bi = new int[len];\n        for (int i = 0; i < len; i++) {\n            ai[i] = a[i] - '0';\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[len];\n        for (int i = 0; i < len; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8hxg8th3.cs(28,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength) {\n            throw new Exception(\"Input strings must be of equal length\");\n        }\n        int result = 0;\n        for (int i = 0; i < aLength; i++) {\n            if (a[i] == '1' && b[i] == '1') {\n                result = result ^ 1;\n            }\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <71e16e3bc05346cfb9642e3ec612e8bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <71e16e3bc05346cfb9642e3ec612e8bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int i, j, k;\n        int[] ai = new int[a.Length()];\n        int[] bi = new int[b.Length()];\n        for (i = 0; i < a.Length(); i++) {\n            ai[i] = a[i] - '0';\n        }\n        for (i = 0; i < b.Length(); i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length()];\n        for (i = 0; i < a.Length(); i++) {\n            for (j = 0; j < b.Length(); j++) {\n                result[i] = result[i] ^ (ai[i] & bi[j]);\n            }\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpu24wg1_k.cs(15,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpu24wg1_k.cs(16,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpu24wg1_k.cs(17,27): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpu24wg1_k.cs(20,27): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpu24wg1_k.cs(23,34): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpu24wg1_k.cs(24,27): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpu24wg1_k.cs(25,31): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpu24wg1_k.cs(29,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n/tmp/tmpu24wg1_k.cs(14,19): warning CS0168: The variable 'k' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        if (a == null || b == null)\n            throw new ArgumentNullException(\"a and b cannot be null\");\n        if (a.Length != b.Length)\n            throw new ArgumentException(\"a and b must be of equal length\");\n        int result = 0;\n        for (int i = 0; i < a.Length; i++) {\n            result = result ^ (a[i] - '0') ^ (b[i] - '0');\n        }\n        return String.Format(\"{0}\", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <caa222edc69141d8b1632342a8216f61>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <caa222edc69141d8b1632342a8216f61>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            res[i] = ai[i] ^ bi[i];\n        return String.Join(\"\", Enumerable.Of(res).Select(x => (char)(x + '0')).ToList());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk3mhqq6s.cs(23,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnge2ex9b.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int i, j;\n        int len = a.Length;\n        if (len != b.Length)\n            throw new Exception(\"Input strings must be of equal length\");\n        string result = \"\";\n        for (i = 0; i < len; i++) {\n            if (a[i] == '1' && b[i] == '1')\n                result += '1';\n            else if (a[i] == '0' && b[i] == '0')\n                result += '0';\n            else\n                throw new Exception(\"Input strings must be of equal length\");\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.Exception: Input strings must be of equal length\n  at Problem.StringXor (System.String a, System.String b) [0x0008a] in <32a015b352b84b54a4707b46693b81db>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <32a015b352b84b54a4707b46693b81db>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Exception: Input strings must be of equal length\n  at Problem.StringXor (System.String a, System.String b) [0x0008a] in <32a015b352b84b54a4707b46693b81db>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <32a015b352b84b54a4707b46693b81db>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength)\n            throw new Exception(\"Input strings must be of equal length\");\n        int resultLength = aLength;\n        char[] result = new char[resultLength];\n        for (int i = 0; i < resultLength; i++) {\n            result[i] = (char)((int)a[i] ^ (int)b[i]);\n        }\n        return new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <96a1f272e3784c7ea2e3b35282dcddf4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <96a1f272e3784c7ea2e3b35282dcddf4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength) {\n            throw new Exception(\"Input strings must be of equal length\");\n        }\n        int resultLength = aLength;\n        int carry = 0;\n        for (int i = 0; i < resultLength; i++) {\n            int aChar = a[i] - '0';\n            int bChar = b[i] - '0';\n            int sum = aChar ^ bChar ^ carry;\n            carry = sum / 2;\n            sum = sum % 2;\n            result[i] = sum + '0';\n        }\n        if (carry != 0) {\n            result[resultLength] = carry + '0';\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8j2p4glk.cs(27,13): error CS0103: The name 'result' does not exist in the current context\n/tmp/tmp8j2p4glk.cs(30,13): error CS0103: The name 'result' does not exist in the current context\n/tmp/tmp8j2p4glk.cs(32,16): error CS0103: The name 'result' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] r = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            r[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnge2ex9b.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int a_len = a.Length;\n        int b_len = b.Length;\n        if (a_len != b_len)\n            throw new Exception(\"Input strings must be of equal length\");\n        int result = 0;\n        for (int i = 0; i < a_len; i++) {\n            if (a[i] == '1' && b[i] == '1')\n                result = result ^ 1;\n        }\n        return result.ToString(\"B\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt32 (System.Int32 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00092] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StringXor (System.String a, System.String b) [0x00064] in <0b8dae2f629a4158a7ca6abc413f5e4a>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <0b8dae2f629a4158a7ca6abc413f5e4a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt32 (System.Int32 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00092] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StringXor (System.String a, System.String b) [0x00064] in <0b8dae2f629a4158a7ca6abc413f5e4a>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <0b8dae2f629a4158a7ca6abc413f5e4a>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength)\n            throw new Exception(\"Input strings must be of equal length\");\n        int resultLength = aLength;\n        char[] result = new char[resultLength];\n        for (int i = 0; i < resultLength; i++) {\n            result[i] = (char)((int)a[i] ^ (int)b[i]);\n        }\n        return new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <96a1f272e3784c7ea2e3b35282dcddf4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <96a1f272e3784c7ea2e3b35282dcddf4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength) {\n            throw new Exception(\"Strings must be of equal length\");\n        }\n        int result = 0;\n        for (int i = 0; i < aLength; i++) {\n            result = result ^ (int)a[i] ^ (int)b[i];\n        }\n        return BitConverter.ToString(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsnz8v3z_.cs(24,38): error CS1503: Argument 1: cannot convert from 'int' to 'byte[]'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength)\n            throw new Exception(\"Input strings must be of equal length\");\n        int result = 0;\n        for (int i = 0; i < aLength; i++) {\n            if (a[i] == '1' && b[i] == '1')\n                result = result ^ 1;\n        }\n        return (result == 0 ? \"0\" : \"1\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <72e6207fda4046cc9fa12ddde605ea30>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <72e6207fda4046cc9fa12ddde605ea30>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength)\n            throw new Exception(\"Strings must be of equal length\");\n        int resultLength = aLength;\n        int i = 0;\n        int j = 0;\n        char[] result = new char[resultLength];\n        while (i < aLength && j < bLength) {\n            if (a[i] == '1' && b[j] == '1') {\n                result[i + j] = '1';\n                j++;\n            }\n            else if (a[i] == '0' && b[j] == '0') {\n                result[i + j] = '0';\n                j++;\n            }\n            else {\n                result[i + j] = '0';\n                i++;\n                j++;\n            }\n        }\n        while (i < aLength) {\n            result[i + j] = '0';\n            i++;\n        }\n        while (j < bLength) {\n            result[i + j] = '0';\n            j++;\n        }\n        return new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside the bounds of the array.\n  at Problem.StringXor (System.String a, System.String b) [0x0005a] in <d7ffac96b2e145848f5af0ae650b92ae>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <d7ffac96b2e145848f5af0ae650b92ae>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the array.\n  at Problem.StringXor (System.String a, System.String b) [0x0005a] in <d7ffac96b2e145848f5af0ae650b92ae>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <d7ffac96b2e145848f5af0ae650b92ae>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjot4ghsk.cs(24,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength)\n            throw new Exception(\"Input strings must be of equal length\");\n        int resultLength = aLength;\n        char[] result = new char[resultLength];\n        for (int i = 0; i < resultLength; i++) {\n            result[i] = (char)((int)a[i] ^ (int)b[i]);\n        }\n        return new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <96a1f272e3784c7ea2e3b35282dcddf4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <96a1f272e3784c7ea2e3b35282dcddf4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(res).Select(x => \"1\" + x + \"0\").ToList());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8v06frlu.cs(25,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd_mwfily.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd_mwfily.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        int aIndex = 0;\n        int bIndex = 0;\n        int result = 0;\n        while (aIndex < aLength && bIndex < bLength) {\n            if (a[aIndex] == '1' && b[bIndex] == '1') {\n                result = result ^ 1;\n            }\n            aIndex++;\n            bIndex++;\n        }\n        while (aIndex < aLength) {\n            if (a[aIndex] == '1') {\n                result = result ^ 1;\n            }\n            aIndex++;\n        }\n        while (bIndex < bLength) {\n            if (b[bIndex] == '1') {\n                result = result ^ 1;\n            }\n            bIndex++;\n        }\n        return (char)(result + 48);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn608x3y1.cs(39,16): error CS0029: Cannot implicitly convert type 'char' to 'string'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(res).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq26u4_lr.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            res[i] = ai[i] ^ bi[i];\n        string res_str = \"\";\n        for (int i = 0; i < res.Length; i++)\n            res_str += (char)(res[i] + '0');\n        return res_str;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnge2ex9b.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        int maxLength = Math.Max(aLength, bLength);\n        char[] result = new char[maxLength];\n        for (int i = 0; i < maxLength; i++) {\n            result[i] = (char)((a[i] == '1' && b[i] == '1') ? '1' : '0');\n        }\n        return new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <89a12137873b4c6385184eee35952efe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <89a12137873b4c6385184eee35952efe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            result[i] = ai[i] ^ bi[i];\n        string resultString = \"\";\n        for (int i = 0; i < a.Length; i++)\n            resultString += (char)(result[i] + '0');\n        return resultString;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of<string>(result).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp033psol8.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int a_len = a.Length;\n        int b_len = b.Length;\n        if (a_len != b_len)\n            return \"\";\n        int result = 0;\n        for (int i = 0; i < a_len; i++) {\n            result = result ^ (a[i] - '0') ^ (b[i] - '0');\n        }\n        return String.Format(\"{0:b}\", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.TryFormatInt32 (System.Int32 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider, System.Span`1[T] destination, System.Int32& charsWritten) [0x0009e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.TryFormat (System.Span`1[T] destination, System.Int32& charsWritten, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Text.StringBuilder.AppendFormatHelper (System.IFormatProvider provider, System.String format, System.ParamsArray args) [0x00308] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.String.FormatHelper (System.IFormatProvider provider, System.String format, System.ParamsArray args) [0x00023] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.String.Format (System.String format, System.Object arg0) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StringXor (System.String a, System.String b) [0x00057] in <626f2c00e09c48e39eb00d3a94b670ae>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <626f2c00e09c48e39eb00d3a94b670ae>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.TryFormatInt32 (System.Int32 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider, System.Span`1[T] destination, System.Int32& charsWritten) [0x0009e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at S",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        if (a == null || b == null)\n            throw new Exception(\"Input strings cannot be null.\");\n        if (a.Length != b.Length)\n            throw new Exception(\"Input strings must be of equal length.\");\n        if (a.Length == 0)\n            return \"\";\n        int n = a.Length;\n        int[] ai = new int[n];\n        int[] bi = new int[n];\n        for (int i = 0; i < n; i++) {\n            ai[i] = a[i] - '0';\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[n];\n        for (int i = 0; i < n; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprepshoj6.cs(31,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnge2ex9b.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength) {\n            throw new Exception(\"Input strings must be of equal length\");\n        }\n        int result = 0;\n        for (int i = 0; i < aLength; i++) {\n            if (a[i] == '1' && b[i] == '1') {\n                result = result ^ 1;\n            }\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <71e16e3bc05346cfb9642e3ec612e8bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <71e16e3bc05346cfb9642e3ec612e8bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of<string>(res).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjgyu7bor.cs(24,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\",\", Enumerable.Of(res).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsmsdoy0m.cs(25,44): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(res).OrderBy(x => x).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3dh2bxpy.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of<string>(res).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk52wjxz4.cs(25,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(res).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6ly16bot.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength)\n            throw new Exception(\"Input strings must be of equal length\");\n        int result = 0;\n        for (int i = 0; i < aLength; i++) {\n            result = result ^ (a[i] - '0') ^ (b[i] - '0');\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4cb46426a2f64407b8a253977fc10c81>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4cb46426a2f64407b8a253977fc10c81>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            result[i] = ai[i] ^ bi[i];\n        return string.Join(\"\", Enumerable.Of<string>(result).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjt87fybt.cs(24,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(res).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpr2x40954.cs(24,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int len = a.Length;\n        if (len != b.Length)\n            throw new Exception(\"Strings must be of equal length\");\n        int result = 0;\n        for (int i = 0; i < len; i++) {\n            result = result ^ (int)a[i] ^ (int)b[i];\n        }\n        return BitConverter.ToString(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1c7f3oi8.cs(22,38): error CS1503: Argument 1: cannot convert from 'int' to 'byte[]'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength) {\n            throw new Exception(\"Input strings must be of equal length\");\n        }\n        int resultLength = aLength;\n        char[] result = new char[resultLength];\n        for (int i = 0; i < aLength; i++) {\n            result[i] = (char)((int)a[i] ^ (int)b[i]);\n        }\n        return new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <cf6316bbba7f45479891bdc37681a31b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <cf6316bbba7f45479891bdc37681a31b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength) {\n            throw new Exception(\"Input strings must be of equal length\");\n        }\n        int resultLength = aLength;\n        char[] result = new char[resultLength];\n        for (int i = 0; i < resultLength; i++) {\n            result[i] = (char)((int)a[i] ^ (int)b[i]);\n        }\n        return new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <57d7e0d1925c40d8877368a733cd08cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <57d7e0d1925c40d8877368a733cd08cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        string res_str = \"\";\n        for (int i = 0; i < res.Length; i++) {\n            res_str += (char)(res[i] + '0');\n        }\n        return res_str;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength)\n            throw new Exception(\"Input strings must be of equal length\");\n        int result = 0;\n        for (int i = 0; i < aLength; i++) {\n            result = result ^ (a[i] - '0') ^ (b[i] - '0');\n        }\n        return String.Format(\"{0:b}\", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.TryFormatInt32 (System.Int32 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider, System.Span`1[T] destination, System.Int32& charsWritten) [0x0009e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.TryFormat (System.Span`1[T] destination, System.Int32& charsWritten, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Text.StringBuilder.AppendFormatHelper (System.IFormatProvider provider, System.String format, System.ParamsArray args) [0x00308] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.String.FormatHelper (System.IFormatProvider provider, System.String format, System.ParamsArray args) [0x00023] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.String.Format (System.String format, System.Object arg0) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StringXor (System.String a, System.String b) [0x00059] in <7862f053801040ed8f1072278a86df6c>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <7862f053801040ed8f1072278a86df6c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.TryFormatInt32 (System.Int32 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider, System.Span`1[T] destination, System.Int32& charsWritten) [0x0009e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at S",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(new string[] {n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpukie6qac.cs(27,6): error CS1026: ) expected\n/tmp/tmpukie6qac.cs(27,6): error CS1002: ; expected\n/tmp/tmpukie6qac.cs(28,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpukie6qac.cs(34,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength)\n            throw new Exception(\"Input strings must be of equal length\");\n        int resultLength = aLength;\n        char[] result = new char[resultLength];\n        for (int i = 0; i < aLength; i++) {\n            if (a[i] == '1' && b[i] == '1')\n                result[i] = '1';\n            else if (a[i] == '1' && b[i] == '0')\n                result[i] = '0';\n            else if (a[i] == '0' && b[i] == '1')\n                result[i] = '0';\n            else if (a[i] == '0' && b[i] == '0')\n                result[i] = '0';\n        }\n        return string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpudeqweze.cs(31,16): error CS1525: Invalid expression term 'string'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(res).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyt586z0j.cs(24,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(result).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpu6lhr4kn.cs(25,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength) {\n            throw new Exception(\"Input strings must be of equal length\");\n        }\n        int resultLength = aLength;\n        string result = \"\";\n        for (int i = 0; i < aLength; i++) {\n            if (a[i] == '1' && b[i] == '1') {\n                result += '1';\n            }\n            else if (a[i] == '0' && b[i] == '0') {\n                result += '0';\n            }\n            else {\n                throw new Exception(\"Input strings must be of equal length\");\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.Exception: Input strings must be of equal length\n  at Problem.StringXor (System.String a, System.String b) [0x00099] in <79c0fd6bdfc44bdfb6dc08e3e1c09d37>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <79c0fd6bdfc44bdfb6dc08e3e1c09d37>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Exception: Input strings must be of equal length\n  at Problem.StringXor (System.String a, System.String b) [0x00099] in <79c0fd6bdfc44bdfb6dc08e3e1c09d37>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <79c0fd6bdfc44bdfb6dc08e3e1c09d37>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnge2ex9b.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        string res_str = \"\";\n        for (int i = 0; i < res.Length; i++) {\n            res_str += (char)(res[i] + '0');\n        }\n        return res_str;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            result[i] = ai[i] ^ bi[i];\n        return string.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1z58w87g.cs(23,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int i, j, k;\n        int len_a = a.Length;\n        int len_b = b.Length;\n        int len = len_a > len_b ? len_a : len_b;\n        int[] a_int = new int[len];\n        int[] b_int = new int[len];\n        for (i = 0; i < len; i++) {\n            a_int[i] = a[i] - '0';\n            b_int[i] = b[i] - '0';\n        }\n        int[] result = new int[len];\n        for (i = 0; i < len; i++) {\n            result[i] = a_int[i] ^ b_int[i];\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0qjf_08y.cs(28,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n/tmp/tmp0qjf_08y.cs(14,16): warning CS0168: The variable 'j' is declared but never used\n/tmp/tmp0qjf_08y.cs(14,19): warning CS0168: The variable 'k' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of<string>(result).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkzht3xps.cs(25,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength)\n            throw new Exception(\"Strings must be of equal length\");\n        int result = 0;\n        for (int i = 0; i < aLength; i++) {\n            if (a[i] == '1' && b[i] == '1')\n                result += 1;\n        }\n        return BitConverter.ToString(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbxwe3a57.cs(24,38): error CS1503: Argument 1: cannot convert from 'int' to 'byte[]'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength) {\n            throw new Exception(\"Input strings must be of equal length\");\n        }\n        int resultLength = aLength;\n        char[] result = new char[resultLength];\n        for (int i = 0; i < resultLength; i++) {\n            result[i] = (char)((int)a[i] ^ (int)b[i]);\n        }\n        return new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <24811e5f2a2b4d8abb9fa58c946131b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <24811e5f2a2b4d8abb9fa58c946131b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(result).Select(x => \"1\" + (x > 1 ? \"0\" : \"\")));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpf1hwu4eq.cs(25,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of<string>(result).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl04o85ak.cs(24,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength) {\n            throw new Exception(\"Input strings must be of equal length\");\n        }\n        int resultLength = aLength;\n        char[] result = new char[resultLength];\n        for (int i = 0; i < resultLength; i++) {\n            result[i] = (char)((int)a[i] ^ (int)b[i]);\n        }\n        return new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <24811e5f2a2b4d8abb9fa58c946131b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <24811e5f2a2b4d8abb9fa58c946131b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd_mwfily.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength) {\n            throw new Exception(\"Input strings must be of equal length\");\n        }\n        int resultLength = aLength;\n        int carry = 0;\n        for (int i = 0; i < resultLength; i++) {\n            int aChar = a[i] - '0';\n            int bChar = b[i] - '0';\n            int sum = aChar ^ bChar ^ carry;\n            carry = sum / 2;\n            sum %= 2;\n            result[i] = sum + '0';\n        }\n        if (carry != 0) {\n            result.Insert(0, carry + '0');\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7xxiv61l.cs(27,13): error CS0103: The name 'result' does not exist in the current context\n/tmp/tmp7xxiv61l.cs(30,13): error CS0103: The name 'result' does not exist in the current context\n/tmp/tmp7xxiv61l.cs(32,16): error CS0103: The name 'result' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        int aIndex = 0;\n        int bIndex = 0;\n        int result = 0;\n        while (aIndex < aLength && bIndex < bLength) {\n            if (a[aIndex] == '1' && b[bIndex] == '1') {\n                result = result ^ 1;\n            }\n            aIndex++;\n            bIndex++;\n        }\n        while (aIndex < aLength) {\n            if (a[aIndex] == '1') {\n                result = result ^ 1;\n            }\n            aIndex++;\n        }\n        while (bIndex < bLength) {\n            if (b[bIndex] == '1') {\n                result = result ^ 1;\n            }\n            bIndex++;\n        }\n        return result == 0 ? \"0\" : \"1\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <43101f0ce72647c48c741ffdf97e676b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <43101f0ce72647c48c741ffdf97e676b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd_mwfily.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppq9lc9nh.cs(24,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of<string>(result).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp033psol8.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength)\n            throw new Exception(\"Input strings must be of equal length\");\n        int result = 0;\n        for (int i = 0; i < aLength; i++) {\n            if (a[i] == '1' && b[i] == '1')\n                result = result ^ 1;\n            else if (a[i] == '0' && b[i] == '0')\n                result = result ^ 0;\n            else\n                throw new Exception(\"Input strings must be of equal length\");\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.Exception: Input strings must be of equal length\n  at Problem.StringXor (System.String a, System.String b) [0x0007b] in <07235ae203aa44769c0143a68fbe8354>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <07235ae203aa44769c0143a68fbe8354>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Exception: Input strings must be of equal length\n  at Problem.StringXor (System.String a, System.String b) [0x0007b] in <07235ae203aa44769c0143a68fbe8354>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <07235ae203aa44769c0143a68fbe8354>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        int aIndex = 0;\n        int bIndex = 0;\n        int result = 0;\n        while (aIndex < aLength && bIndex < bLength) {\n            if (a[aIndex] == '1' && b[bIndex] == '1') {\n                result = result ^ 1;\n            }\n            aIndex++;\n            bIndex++;\n        }\n        while (aIndex < aLength) {\n            if (a[aIndex] == '1') {\n                result = result ^ 1;\n            }\n            aIndex++;\n        }\n        while (bIndex < bLength) {\n            if (b[bIndex] == '1') {\n                result = result ^ 1;\n            }\n            bIndex++;\n        }\n        return result == 0 ? \"0\" : \"1\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <43101f0ce72647c48c741ffdf97e676b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <43101f0ce72647c48c741ffdf97e676b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int ai = 0, bi = 0;\n        int ai_len = a.Length;\n        int bi_len = b.Length;\n        int result_len = Math.Max(ai_len, bi_len);\n        char[] result = new char[result_len];\n        while (ai < ai_len && bi < bi_len) {\n            if (a[ai] == '1' && b[bi] == '1') {\n                result[ai + bi] = '1';\n            }\n            else {\n                result[ai + bi] = '0';\n            }\n            ai++;\n            bi++;\n        }\n        while (ai < ai_len) {\n            result[ai] = '0';\n            ai++;\n        }\n        while (bi < bi_len) {\n            result[bi] = '0';\n            bi++;\n        }\n        return new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside the bounds of the array.\n  at Problem.StringXor (System.String a, System.String b) [0x00054] in <d824e823c0354822b39a50bfc939917a>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <d824e823c0354822b39a50bfc939917a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the array.\n  at Problem.StringXor (System.String a, System.String b) [0x00054] in <d824e823c0354822b39a50bfc939917a>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <d824e823c0354822b39a50bfc939917a>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\", \", Enumerable.Of(res).OrderBy(x => x).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdbfkrpjn.cs(26,45): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\",\", string.Format(\"{0:X}\", res));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <75b9b856cc754b5ea86f4d0970e1e61a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <75b9b856cc754b5ea86f4d0970e1e61a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength)\n            throw new Exception(\"Input strings must be of equal length\");\n        int resultLength = aLength;\n        int carry = 0;\n        for (int i = 0; i < aLength; i++) {\n            int aChar = a[i] - '0';\n            int bChar = b[i] - '0';\n            int sum = aChar ^ bChar ^ carry;\n            carry = sum / 2;\n            sum = sum % 2;\n            result[i] = sum + '0';\n        }\n        if (carry != 0)\n            result[resultLength - 1] = carry + '0';\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkc5hrgcl.cs(27,13): error CS0103: The name 'result' does not exist in the current context\n/tmp/tmpkc5hrgcl.cs(30,13): error CS0103: The name 'result' does not exist in the current context\n/tmp/tmpkc5hrgcl.cs(31,16): error CS0103: The name 'result' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength) {\n            throw new Exception(\"Input strings must be of equal length\");\n        }\n        int resultLength = aLength;\n        char[] result = new char[resultLength];\n        for (int i = 0; i < resultLength; i++) {\n            result[i] = (char)((int)a[i] ^ (int)b[i]);\n        }\n        return new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <24811e5f2a2b4d8abb9fa58c946131b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <24811e5f2a2b4d8abb9fa58c946131b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] a_int = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            a_int[i] = a[i] - '0';\n        }\n        int[] b_int = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            b_int[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = a_int[i] ^ b_int[i];\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp34tam4ih.cs(27,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(res).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphzip90rl.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of<string>(res).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk52wjxz4.cs(25,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(res).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphzip90rl.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            res[i] = ai[i] ^ bi[i];\n        return string.Join(\"\", Enumerable.Of(res).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyqdq3rd3.cs(24,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(res).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphzip90rl.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsdhe078e.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength)\n            throw new Exception(\"Input strings must be of equal length\");\n        int resultLength = aLength;\n        string result = \"\";\n        for (int i = 0; i < resultLength; i++) {\n            int aChar = a[i] - '0';\n            int bChar = b[i] - '0';\n            int resultChar = aChar ^ bChar;\n            result += resultChar + '0';\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <33f3707f115f4c80b5515a5fc595086a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <33f3707f115f4c80b5515a5fc595086a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd_mwfily.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int a_len = a.Length;\n        int b_len = b.Length;\n        if (a_len != b_len)\n            throw new Exception(\"Strings must be of equal length\");\n        int result = 0;\n        for (int i = 0; i < a_len; i++) {\n            if (a[i] == '1' && b[i] == '1')\n                result = result ^ 1;\n        }\n        return BitConverter.ToString(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxzeg7ywj.cs(24,38): error CS1503: Argument 1: cannot convert from 'int' to 'byte[]'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnge2ex9b.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            result[i] = ai[i] ^ bi[i];\n        string resultString = \"\";\n        for (int i = 0; i < a.Length; i++)\n            resultString += (char)(result[i] + '0');\n        return resultString;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(result).OrderBy(x => x).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpaxw2iycs.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd_mwfily.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int i, j, k;\n        int[] ai = new int[a.Length];\n        int[] bi = new int[b.Length];\n        for (i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        for (i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (i = 0; i < a.Length; i++) {\n            for (j = 0; j < b.Length; j++) {\n                res[i] += (ai[i] ^ bi[j]) % 2;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (i = 0; i < res.Length; i++) {\n            sb.Append(res[i]);\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b093985c95c047ff99a0837a232e78dd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b093985c95c047ff99a0837a232e78dd>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(res).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg5x9zg3d.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(res).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpf8pni0lf.cs(27,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(new string[] {n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppf4to_yr.cs(27,6): error CS1026: ) expected\n/tmp/tmppf4to_yr.cs(27,6): error CS1002: ; expected\n/tmp/tmppf4to_yr.cs(28,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmppf4to_yr.cs(34,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int len = a.Length;\n        if (len != b.Length)\n            throw new Exception(\"Input strings must be of equal length\");\n        int[] ai = new int[len];\n        int[] bi = new int[len];\n        for (int i = 0; i < len; i++) {\n            ai[i] = a[i] - '0';\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[len];\n        for (int i = 0; i < len; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return Convert.ToString(res);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9ad0d3643e7a41b68470080aea8e1152>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9ad0d3643e7a41b68470080aea8e1152>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(res).OrderBy(x => x).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3dh2bxpy.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd_mwfily.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int i, j;\n        string result = \"\";\n        for (i = 0; i < a.Length; i++) {\n            for (j = 0; j < b.Length; j++) {\n                if (a[i] == '1' && b[j] == '1') {\n                    result += '1';\n                }\n                else if (a[i] == '1' && b[j] == '0') {\n                    result += '0';\n                }\n                else if (a[i] == '0' && b[j] == '1') {\n                    result += '0';\n                }\n                else if (a[i] == '0' && b[j] == '0') {\n                    result += '0';\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <cdaae93e8a5a46ffa10c6c51f4aacb6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <cdaae93e8a5a46ffa10c6c51f4aacb6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnge2ex9b.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(res).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph4eq27j6.cs(27,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(res).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq26u4_lr.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] a_int = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            a_int[i] = a[i] - '0';\n        int[] b_int = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            b_int[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            result[i] = a_int[i] ^ b_int[i];\n        return string.Join(\"\", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd_mwfily.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength) {\n            throw new Exception(\"Strings must be of equal length\");\n        }\n        int resultLength = aLength;\n        char[] result = new char[resultLength];\n        for (int i = 0; i < resultLength; i++) {\n            result[i] = (char)((int)(a[i] ^ b[i]));\n        }\n        return new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3b98896242a94aed9c09d5d940fc883b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3b98896242a94aed9c09d5d940fc883b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength) {\n            throw new Exception(\"Input strings must be of equal length\");\n        }\n        int resultLength = aLength;\n        string result = \"\";\n        for (int i = 0; i < resultLength; i++) {\n            int aChar = a[i] - '0';\n            int bChar = b[i] - '0';\n            int resultChar = aChar ^ bChar;\n            resultChar = resultChar + '0';\n            result += resultChar;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <775b3e17d748442095dd6261dd055f4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <775b3e17d748442095dd6261dd055f4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(res).OrderBy(x => x).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3dh2bxpy.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of<string>(result).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptd_4_x5t.cs(27,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)(x + '0')).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuyji7j1u.cs(27,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(res).OrderBy(x => x).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4n9m9oq7.cs(24,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            res[i] = ai[i] ^ bi[i];\n        return string.Join(\"\", Enumerable.Of(res).OrderBy(x => x).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8qmr41s1.cs(24,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength)\n            throw new Exception(\"Input strings must be of equal length\");\n        int resultLength = aLength;\n        char[] result = new char[resultLength];\n        for (int i = 0; i < resultLength; i++) {\n            result[i] = (char)((int)a[i] ^ (int)b[i]);\n        }\n        return new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <96a1f272e3784c7ea2e3b35282dcddf4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <96a1f272e3784c7ea2e3b35282dcddf4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\",\", Enumerable.Of(res).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp85u43x9l.cs(26,44): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd_mwfily.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int ai = 0, bi = 0;\n        int ai_len = a.Length;\n        int bi_len = b.Length;\n        int result = 0;\n        while (ai < ai_len && bi < bi_len) {\n            if (a[ai] == '1') {\n                result |= 1 << bi;\n            }\n            ai++; bi++;\n        }\n        return BitConverter.ToString(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjrezwesz.cs(24,38): error CS1503: Argument 1: cannot convert from 'int' to 'byte[]'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int i, j, k, l;\n        int[] ai = new int[a.Length];\n        int[] bi = new int[b.Length];\n        for (i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        for (i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (i = 0; i < a.Length; i++) {\n            for (j = 0; j < b.Length; j++) {\n                result[i] = result[i] ^ bi[j] ^ ai[i];\n            }\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_pwxqjzb.cs(27,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n/tmp/tmp_pwxqjzb.cs(14,19): warning CS0168: The variable 'k' is declared but never used\n/tmp/tmp_pwxqjzb.cs(14,22): warning CS0168: The variable 'l' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(res).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphuj9rzte.cs(27,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnge2ex9b.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int ai, bi;\n        int ai_len = a.Length;\n        int bi_len = b.Length;\n        int ai_pos = 0;\n        int bi_pos = 0;\n        int ai_bit = 0;\n        int bi_bit = 0;\n        int ai_bit_len = 0;\n        int bi_bit_len = 0;\n        int ai_bit_pos = 0;\n        int bi_bit_pos = 0;\n        int ai_bit_mask = 1;\n        int bi_bit_mask = 1;\n        int ai_bit_mask_len = 0;\n        int bi_bit_mask_len = 0;\n        int ai_bit_mask_pos = 0;\n        int bi_bit_mask_pos = 0;\n        int ai_bit_mask_len_pos = 0;\n        int bi_bit_mask_len_pos = 0;\n        int ai_bit_mask_len_pos_len = 0;\n        int bi_bit_mask_len_pos_len = 0;\n        int ai_bit_mask_len_pos_pos = 0;\n        int bi_bit_mask_len_pos_pos = 0;\n        int ai_bit_mask_len_pos_pos_len = 0;\n        int bi_bit_mask_len_pos_pos_len = 0;\n        int ai_bit_mask_len_pos_pos_pos = 0;\n        int bi_bit_mask_len_pos_pos_pos = 0;\n        int ai_bit_mask_len_pos_pos_pos_len = 0;\n        int bi_bit_mask_len_pos_pos_pos_len = 0;\n        int ai_bit_mask_len_pos_pos_pos_pos = 0;\n        int bi_bit_mask_len_pos_pos_pos_pos = 0;\n        int ai_bit_mask_len_pos_pos_pos_pos_len = 0;\n        int bi_bit_mask_len_pos_pos_pos_pos_len = 0;\n        int ai_bit_mask\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpiuyusmit.cs(47,24): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(res).Select(x => (char)(x + '0')).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgdyolyrk.cs(24,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength)\n            throw new Exception(\"Input strings must be of equal length\");\n        int resultLength = aLength;\n        int carry = 0;\n        for (int i = 0; i < aLength; i++) {\n            int aChar = a[i] - '0';\n            int bChar = b[i] - '0';\n            int sum = aChar ^ bChar ^ carry;\n            carry = sum / 2;\n            sum = sum % 2;\n            result[i] = sum + '0';\n        }\n        while (carry != 0) {\n            result[resultLength - 1] = carry + '0';\n            carry = carry / 2;\n            resultLength++;\n        }\n        return string.Join(\"\", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd1wm_z6i.cs(26,13): error CS0103: The name 'result' does not exist in the current context\n/tmp/tmpd1wm_z6i.cs(29,13): error CS0103: The name 'result' does not exist in the current context\n/tmp/tmpd1wm_z6i.cs(33,32): error CS0103: The name 'result' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(res).OrderBy(x => x).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpizjbvo9l.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength) {\n            throw new Exception(\"Strings must be of equal length\");\n        }\n        int result = 0;\n        for (int i = 0; i < aLength; i++) {\n            result = result ^ (int)a[i] ^ (int)b[i];\n        }\n        return BitConverter.ToString(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsnz8v3z_.cs(24,38): error CS1503: Argument 1: cannot convert from 'int' to 'byte[]'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength)\n            throw new Exception(\"Input strings must be of same length\");\n        int resultLength = aLength;\n        char[] result = new char[resultLength];\n        for (int i = 0; i < resultLength; i++) {\n            result[i] = (char)((int)a[i] ^ (int)b[i]);\n        }\n        return new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <22e3708f3699481689d0d1da03952b78>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <22e3708f3699481689d0d1da03952b78>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength) {\n            throw new Exception(\"Input strings must be of equal length\");\n        }\n        int resultLength = aLength;\n        char[] result = new char[resultLength];\n        for (int i = 0; i < aLength; i++) {\n            result[i] = (char)((int)a[i] ^ (int)b[i]);\n        }\n        return new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <cf6316bbba7f45479891bdc37681a31b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <cf6316bbba7f45479891bdc37681a31b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of<string>(result).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl04o85ak.cs(24,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(res).Select(x => (char)(x + '0')).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7g05wut6.cs(25,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(res).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq26u4_lr.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(res).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnnrg3m4n.cs(25,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int i, j, k, l;\n        int[] ai = new int[a.Length()];\n        int[] bi = new int[b.Length()];\n        for (i = 0; i < a.Length(); i++) {\n            ai[i] = a[i] - '0';\n        }\n        for (i = 0; i < b.Length(); i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length()];\n        for (i = 0; i < a.Length(); i++) {\n            for (j = 0; j < b.Length(); j++) {\n                result[i] = result[i] ^ (ai[i] ^ bi[j]);\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (i = 0; i < result.Length; i++) {\n            sb.Append(result[i]);\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnxv1kizx.cs(15,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpnxv1kizx.cs(16,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpnxv1kizx.cs(17,27): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpnxv1kizx.cs(20,27): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpnxv1kizx.cs(23,34): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpnxv1kizx.cs(24,27): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpnxv1kizx.cs(25,31): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpnxv1kizx.cs(14,19): warning CS0168: The variable 'k' is declared but never used\n/tmp/tmpnxv1kizx.cs(14,22): warning CS0168: The variable 'l' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of<string>(res).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphgpz_t8l.cs(27,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmps29sknfv.cs(27,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength)\n            throw new Exception(\"Input strings must be of equal length\");\n        int result = 0;\n        for (int i = 0; i < aLength; i++) {\n            if (a[i] == '1' && b[i] == '1')\n                result = result ^ 1;\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9fd99654d4d24a17a1d80a29d44033aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9fd99654d4d24a17a1d80a29d44033aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(res).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg5x9zg3d.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int i, j, k;\n        int[] ai = new int[a.Length];\n        int[] bi = new int[b.Length];\n        for (i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        for (i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (i = 0; i < a.Length; i++) {\n            for (j = 0; j < b.Length; j++) {\n                result[i] += (ai[i] ^ bi[j]) % 2;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (i = 0; i < a.Length; i++) {\n            sb.Append(result[i]);\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bbcc9e57530141c2873bc60f607767d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bbcc9e57530141c2873bc60f607767d8>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5xur3nkl.cs(27,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            res[i] = ai[i] ^ bi[i];\n        return string.Join(\",\", Enumerable.Of(res).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfcoevdz4.cs(23,44): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength) {\n            throw new Exception(\"Input strings must be of equal length\");\n        }\n        int resultLength = aLength;\n        int[] aInts = new int[aLength];\n        int[] bInts = new int[bLength];\n        for (int i = 0; i < aLength; i++) {\n            aInts[i] = a[i] - '0';\n        }\n        for (int i = 0; i < bLength; i++) {\n            bInts[i] = b[i] - '0';\n        }\n        int[] resultInts = new int[resultLength];\n        for (int i = 0; i < resultLength; i++) {\n            resultInts[i] = aInts[i] ^ bInts[i];\n        }\n        string result = \"\";\n        for (int i = 0; i < resultLength; i++) {\n            result += resultInts[i];\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn3g34zwk.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength)\n            throw new Exception(\"Input strings must be of equal length\");\n        int resultLength = aLength;\n        char[] result = new char[resultLength];\n        for (int i = 0; i < resultLength; i++) {\n            result[i] = (char)(((int)a[i] ^ (int)b[i]) & 0xFF);\n        }\n        return new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <551cd3799fdb451aad4b05f62f747427>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <551cd3799fdb451aad4b05f62f747427>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\", \", Enumerable.Of(result).Select(x => (char)(x + '0')).ToList());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdu8pma6r.cs(27,45): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] a_int = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            a_int[i] = a[i] - '0';\n        int[] b_int = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            b_int[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = a_int[i] ^ b_int[i];\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => \"1\" + x + \"0\").ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5fbqvp1e.cs(25,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int a_len = a.Length;\n        int b_len = b.Length;\n        if (a_len != b_len)\n            throw new Exception(\"Input strings must be of same length\");\n        int result = 0;\n        for (int i = 0; i < a_len; i++) {\n            if (a[i] == '1' && b[i] == '1')\n                result++;\n            else if (a[i] == '0' && b[i] == '0')\n                result++;\n            else\n                throw new Exception(\"Input strings must be of same length\");\n        }\n        return (new string(Int32.ToString(result)));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprtd72w9i.cs(28,43): error CS1503: Argument 1: cannot convert from 'int' to 'string'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength)\n            throw new Exception(\"Input strings must be of equal length\");\n        int result = 0;\n        for (int i = 0; i < aLength; i++) {\n            if (a[i] == '1' && b[i] == '1')\n                result = result ^ 1;\n            else if (a[i] == '0' && b[i] == '0')\n                result = result ^ 0;\n            else\n                throw new Exception(\"Input strings must be binary\");\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.Exception: Input strings must be binary\n  at Problem.StringXor (System.String a, System.String b) [0x0007b] in <f91de0a5d2724974b1ce12e5b70fbc90>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <f91de0a5d2724974b1ce12e5b70fbc90>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Exception: Input strings must be binary\n  at Problem.StringXor (System.String a, System.String b) [0x0007b] in <f91de0a5d2724974b1ce12e5b70fbc90>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <f91de0a5d2724974b1ce12e5b70fbc90>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppq9lc9nh.cs(24,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppq9lc9nh.cs(24,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(res).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg5x9zg3d.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(res).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq26u4_lr.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int i, j, k, l;\n        int m = a.Length;\n        int n = b.Length;\n        int[] ai = new int[m];\n        int[] bi = new int[n];\n        for (i = 0; i < m; i++) {\n            ai[i] = a[i] - '0';\n        }\n        for (i = 0; i < n; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[m + n];\n        for (i = 0; i < m; i++) {\n            for (j = 0; j < n; j++) {\n                result[i + j] = ai[i] ^ bi[j];\n            }\n        }\n        for (i = 0; i < m + n; i++) {\n            result[i] = result[i] + '0';\n        }\n        return String.Join(\"\", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <480b7ab6f040412c99e311d333fccb61>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <480b7ab6f040412c99e311d333fccb61>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmps2x0n41c.cs(27,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of<string>(result).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp033psol8.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(res).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq26u4_lr.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of<string>(result).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp033psol8.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            result[i] = ai[i] ^ bi[i];\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToList());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_wh5ju9h.cs(23,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength)\n            throw new Exception(\"Strings must be of equal length\");\n        int result = 0;\n        for (int i = 0; i < aLength; i++) {\n            if (a[i] == '1' && b[i] == '1')\n                result = result ^ 1;\n        }\n        return (result == 0 ? \"0\" : \"1\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <276df232160c49dcb55173828ee4a040>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <276df232160c49dcb55173828ee4a040>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of<string>(result).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp033psol8.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(result).OrderBy(x => x).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptwcu7ddy.cs(27,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\",\", Enumerable.Of(result).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpaqx5gycb.cs(27,44): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength)\n            throw new Exception(\"Input strings must be of equal length\");\n        int result = 0;\n        for (int i = 0; i < aLength; i++) {\n            if (a[i] == '1' && b[i] == '1')\n                result = result ^ 1;\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9fd99654d4d24a17a1d80a29d44033aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9fd99654d4d24a17a1d80a29d44033aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of<string>(result).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl04o85ak.cs(24,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(res).OrderBy(x => x).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3dh2bxpy.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(res).OrderBy(x => x).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp58nzashx.cs(25,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(res).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphuj9rzte.cs(27,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(res).OrderBy(x => x).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3dh2bxpy.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd_mwfily.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        int aIndex = 0;\n        int bIndex = 0;\n        int result = 0;\n        while (aIndex < aLength && bIndex < bLength) {\n            if (a[aIndex] == '1' && b[bIndex] == '1') {\n                result = result ^ 1;\n            }\n            aIndex++;\n            bIndex++;\n        }\n        return result == 0 ? \"0\" : \"1\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3fb230e4f42c452f8414b7004c800472>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3fb230e4f42c452f8414b7004c800472>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        int maxLength = Math.Max(aLength, bLength);\n        int[] aArray = new int[maxLength];\n        int[] bArray = new int[maxLength];\n        for (int i = 0; i < maxLength; i++) {\n            aArray[i] = a[i] - '0';\n            bArray[i] = b[i] - '0';\n        }\n        int[] resultArray = new int[maxLength];\n        for (int i = 0; i < maxLength; i++) {\n            resultArray[i] = aArray[i] ^ bArray[i];\n        }\n        string result = \"\";\n        for (int i = 0; i < maxLength; i++) {\n            result += (char)(resultArray[i] + '0');\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(res).OrderBy(x => x).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3dh2bxpy.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            res[i] = ai[i] ^ bi[i];\n        return String.Join(\"\", Enumerable.Of(res).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsfir_rog.cs(23,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength)\n            throw new Exception(\"Strings must be of equal length\");\n        int result = 0;\n        for (int i = 0; i < aLength; i++) {\n            if (a[i] == '1' && b[i] == '1')\n                result = result ^ 1;\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7fe8185cfc28428ea558856c93ea538c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7fe8185cfc28428ea558856c93ea538c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppq9lc9nh.cs(24,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(res).Select(x => (char)(x + '0')).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7g05wut6.cs(25,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength) {\n            throw new Exception(\"Input strings must be of same length\");\n        }\n        int resultLength = aLength;\n        char[] result = new char[resultLength];\n        for (int i = 0; i < resultLength; i++) {\n            result[i] = (char)((int)a[i] ^ (int)b[i]);\n        }\n        return new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <104a4672446d41f4aeb55ff052759be9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <104a4672446d41f4aeb55ff052759be9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(res).OrderBy(x => x).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpizjbvo9l.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjot4ghsk.cs(24,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        string resultString = \"\";\n        for (int i = 0; i < result.Length; i++) {\n            resultString += (char)(result[i] + '0');\n        }\n        return resultString;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            result[i] = ai[i] ^ bi[i];\n        return string.Join(\",\", string.Format(\"{0:X}\", result));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ac59e80a80c4ec6b80e8821f0c88004>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ac59e80a80c4ec6b80e8821f0c88004>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(res).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpr2x40954.cs(24,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength) {\n            throw new Exception(\"Input strings must be of equal length\");\n        }\n        int result = 0;\n        for (int i = 0; i < aLength; i++) {\n            result = result ^ (int)a[i] ^ (int)b[i];\n        }\n        return BitConverter.ToString(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp294hfqjt.cs(24,38): error CS1503: Argument 1: cannot convert from 'int' to 'byte[]'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength) {\n            throw new Exception(\"Input strings must be of equal length\");\n        }\n        int resultLength = aLength;\n        char[] result = new char[resultLength];\n        for (int i = 0; i < aLength; i++) {\n            result[i] = (char)(((int)a[i] ^ (int)b[i]) & 0xFF);\n        }\n        return new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <aacaf5c458204bb797df5fb271922cac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <aacaf5c458204bb797df5fb271922cac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int len = a.Length;\n        if (len != b.Length)\n            throw new Exception(\"Input strings must be of equal length\");\n        int[] ai = new int[len];\n        int[] bi = new int[len];\n        for (int i = 0; i < len; i++) {\n            if (a[i] == '1')\n                ai[i] = 1;\n            else\n                ai[i] = 0;\n            if (b[i] == '1')\n                bi[i] = 1;\n            else\n                bi[i] = 0;\n        }\n        int[] res = new int[len];\n        for (int i = 0; i < len; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return BitConverter.ToString(res);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvpy6nwjh.cs(34,38): error CS1503: Argument 1: cannot convert from 'int[]' to 'byte[]'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(res).OrderBy(x => x).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbc5guqvp.cs(25,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(res).OrderBy(x => x).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpizjbvo9l.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] result = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            result[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(result).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnge2ex9b.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        int resultLength = aLength > bLength ? aLength : bLength;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int carry = 0;\n        int result = 0;\n        while (i < aLength && j < bLength) {\n            if (a[i] == '1' && b[j] == '1') {\n                result = result ^ 1;\n            }\n            else if (a[i] == '0' && b[j] == '0') {\n                result = result ^ 0;\n            }\n            else {\n                carry = 1;\n            }\n            i++;\n            j++;\n            k++;\n        }\n        while (i < aLength) {\n            if (a[i] == '1') {\n                result = result ^ 1;\n            }\n            else {\n                carry = 1;\n            }\n            i++;\n        }\n        while (j < bLength) {\n            if (b[j] == '1') {\n                result = result ^ 1;\n            }\n            else {\n                carry = 1;\n            }\n            j++;\n        }\n        if (carry == 1) {\n            result = result ^ 1;\n        }\n        StringBuilder resultBuilder = new StringBuilder(resultLength);\n        for (int l = resultLength - 1; l >= 0; l--) {\n            resultBuilder.Append(result % 2);\n            result = result / 2;\n        }\n        return resultBuilder.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <21e2335b7edb407999eedd8bf4d18743>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <21e2335b7edb407999eedd8bf4d18743>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int i, j, k;\n        int lenA = a.Length;\n        int lenB = b.Length;\n        int len = lenA > lenB ? lenA : lenB;\n        char[] result = new char[len];\n        for (i = 0; i < len; i++) {\n            result[i] = '0';\n        }\n        for (i = 0; i < lenA; i++) {\n            if (a[i] == '1') {\n                for (j = 0; j < lenB; j++) {\n                    if (b[j] == '1') {\n                        result[i + j] = '1';\n                    }\n                }\n            }\n        }\n        return new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside the bounds of the array.\n  at Problem.StringXor (System.String a, System.String b) [0x0006e] in <af1c8ef5d4554bffbb241d8cc4b62643>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <af1c8ef5d4554bffbb241d8cc4b62643>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the array.\n  at Problem.StringXor (System.String a, System.String b) [0x0006e] in <af1c8ef5d4554bffbb241d8cc4b62643>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <af1c8ef5d4554bffbb241d8cc4b62643>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\",\", Enumerable.Of(res).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpb3m04vmf.cs(27,44): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return string.Join(\"\", Enumerable.Of(res).OrderBy(x => x).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292997,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3dh2bxpy.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++)\n            ai[i] = a[i] - '0';\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++)\n            bi[i] = b[i] - '0';\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(res).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4gu00c0y.cs(25,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int[] ai = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            ai[i] = a[i] - '0';\n        }\n        int[] bi = new int[b.Length];\n        for (int i = 0; i < b.Length; i++) {\n            bi[i] = b[i] - '0';\n        }\n        int[] res = new int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            res[i] = ai[i] ^ bi[i];\n        }\n        return String.Join(\"\", Enumerable.Of(res).Select(x => (char)('0' + x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292996,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq26u4_lr.cs(26,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength)\n            throw new Exception(\"Input strings must be of equal length\");\n        int resultLength = aLength;\n        char[] result = new char[resultLength];\n        for (int i = 0; i < aLength; i++) {\n            if (a[i] == '1' && b[i] == '1')\n                result[i] = '1';\n            else if (a[i] == '0' && b[i] == '0')\n                result[i] = '0';\n            else\n                throw new Exception(\"Input strings must be of equal length\");\n        }\n        return string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxral9zx7.cs(28,16): error CS1525: Invalid expression term 'string'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        int ai = 0, bi = 0;\n        int ai_len = a.Length;\n        int bi_len = b.Length;\n        int result = 0;\n        while (ai < ai_len && bi < bi_len) {\n            if (a[ai] == '1') {\n                result |= 1;\n            }\n            if (b[bi] == '1') {\n                result |= 2;\n            }\n            ai++;\n            bi++;\n        }\n        return (new stringBuilder(a.Length)).Append(result).ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprlj7otpr.cs(28,21): error CS0246: The type or namespace name 'stringBuilder' could not be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        // Write your code here\n        int aLength = a.Length;\n        int bLength = b.Length;\n        if (aLength != bLength)\n            throw new Exception(\"Input strings must be of equal length\");\n        int result = 0;\n        for (int i = 0; i < aLength; i++) {\n            if (a[i] == '1' && b[i] == '1')\n                result = result ^ 1;\n        }\n        return BitConverter.ToString(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n",
      "timestamp": 1664292999,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2r7rdbyw.cs(24,38): error CS1503: Argument 1: cannot convert from 'int' to 'byte[]'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}