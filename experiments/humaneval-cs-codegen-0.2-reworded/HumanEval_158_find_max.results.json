{
  "name": "HumanEval_158_find_max",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary that maps each character to the number of times it appears in the word.\n        Dictionary<char, int> charCounts = new Dictionary<char, int>();\n        for (string word : words) {\n            for (char c : word.ToCharArray()) {\n                if (charCounts.ContainsKey(c)) {\n                    charCounts[c]++;\n                }\n                else {\n                    charCounts[c] = 1;\n                }\n            }\n        }\n        // Create a list of characters that appear the most in the words.\n        List<char> mostChars = new List<char>();\n        for (char c : charCounts.Keys) {\n            if (charCounts[c] > mostChars.Count) {\n                mostChars.Clear();\n                mostChars.Add(c);\n            }\n            else if (charCounts[c] == mostChars.Count) {\n                mostChars.Add(c);\n            }\n        }\n        // Sort the list of characters in lexicographical order.\n        mostChars.Sort();\n        // Return the first element in the list.\n        return mostChars.First();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk3c2ymve.cs(22,26): error CS1002: ; expected\n/tmp/tmpk3c2ymve.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpk3c2ymve.cs(22,26): error CS1001: Identifier expected\n/tmp/tmpk3c2ymve.cs(23,25): error CS1002: ; expected\n/tmp/tmpk3c2ymve.cs(23,25): error CS1525: Invalid expression term ':'\n/tmp/tmpk3c2ymve.cs(23,25): error CS1001: Identifier expected\n/tmp/tmpk3c2ymve.cs(34,21): error CS1002: ; expected\n/tmp/tmpk3c2ymve.cs(34,21): error CS1525: Invalid expression term ':'\n/tmp/tmpk3c2ymve.cs(34,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        var dict = new Dictionary<string, int>();\n        for (var word : words) {\n            dict.Add(word, dict.get_Item(word) + 1);\n        }\n\n        // Find the word with maximum count\n        var maxCount = 0;\n        var maxWord = \"\";\n        for (var word : dict.Keys) {\n            if (dict.get_Item(word) > maxCount) {\n                maxCount = dict.get_Item(word);\n                maxWord = word;\n            }\n        }\n\n        // Return the word with maximum count\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4re8xcwt.cs(22,23): error CS1002: ; expected\n/tmp/tmp4re8xcwt.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmp4re8xcwt.cs(22,23): error CS1001: Identifier expected\n/tmp/tmp4re8xcwt.cs(29,23): error CS1002: ; expected\n/tmp/tmp4re8xcwt.cs(29,23): error CS1525: Invalid expression term ':'\n/tmp/tmp4re8xcwt.cs(29,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        Hashtable<string, int> wordCount = new Hashtable<string, int>();\n        for (string word : words) {\n            if (wordCount.ContainsKey(word)) {\n                wordCount[word]++;\n            } else {\n                wordCount.Add(word, 1);\n            }\n        }\n\n        // Find the word with maximum number of unique characters\n        string maxWord = \"\";\n        int maxCount = 0;\n        for (string word : wordCount.Keys()) {\n            if (wordCount[word] > maxCount) {\n                maxCount = wordCount[word];\n                maxWord = word;\n            }\n        }\n\n        // Return the word with maximum number of unique characters\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4g92uksb.cs(22,26): error CS1002: ; expected\n/tmp/tmp4g92uksb.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmp4g92uksb.cs(22,26): error CS1001: Identifier expected\n/tmp/tmp4g92uksb.cs(33,26): error CS1002: ; expected\n/tmp/tmp4g92uksb.cs(33,26): error CS1525: Invalid expression term ':'\n/tmp/tmp4g92uksb.cs(33,26): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (int i = 0; i < word.Length; i++) {\n                count += (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' || word[i] == 'y') ? 1 : 0;\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph97rky8_.cs(22,26): error CS1002: ; expected\n/tmp/tmph97rky8_.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmph97rky8_.cs(22,26): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        string max = words[0];\n        for (int i = 0; i < words.Count; i++) {\n            if (words[i].Length > max.Length) {\n                max = words[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd1f783847484f9ca49e9c5be6a1be65>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0)\n            return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                max = words[i];\n                maxCount = words[i].Length;\n            }\n            else if (words[i].Length == maxCount) {\n                if (words[i].CompareTo(max) < 0) {\n                    max = words[i];\n                }\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <651efe2f9bc347c98e43a085f7c791d8>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = 0;\n        var maxWord = \"\";\n        for (var word in words) {\n            var count = 0;\n            for (var ch in word) {\n                count += (ch == ' ') ? 0 : 1;\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpu0tv2vzz.cs(22,9): error CS1003: Syntax error, 'foreach' expected\n/tmp/tmpu0tv2vzz.cs(24,13): error CS1003: Syntax error, 'foreach' expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                maxCount = words[i].Length;\n                max = words[i];\n            }\n            else if (words[i].Length == maxCount && words[i].CompareTo(max) < 0) {\n                max = words[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2a2dfc603cc54882886f89acebbf4761>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = 0;\n        var maxStr = \"\";\n        for (var word in words) {\n            var count = 0;\n            for (var ch in word) {\n                if (count == 0) {\n                    count = 1;\n                }\n                else {\n                    count++;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxStr = word;\n            }\n        }\n        return maxStr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8h02acv0.cs(22,9): error CS1003: Syntax error, 'foreach' expected\n/tmp/tmp8h02acv0.cs(24,13): error CS1003: Syntax error, 'foreach' expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        Hashtable<string, int> dict = new Hashtable<string, int>();\n        for (string word : words) {\n            dict.Add(word, 1);\n        }\n\n        // Find the word with maximum count\n        string maxWord = \"\";\n        int maxCount = 0;\n        for (string word : dict.Keys()) {\n            if (dict[word] > maxCount) {\n                maxWord = word;\n                maxCount = dict[word];\n            }\n        }\n\n        // Return the word with maximum count\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpczjc__zg.cs(22,26): error CS1002: ; expected\n/tmp/tmpczjc__zg.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpczjc__zg.cs(22,26): error CS1001: Identifier expected\n/tmp/tmpczjc__zg.cs(29,26): error CS1002: ; expected\n/tmp/tmpczjc__zg.cs(29,26): error CS1525: Invalid expression term ':'\n/tmp/tmpczjc__zg.cs(29,26): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                maxCount = words[i].Length;\n                max = words[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fc74232d1296430983e8406a648232b7>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        var dictionary = new Dictionary<string, int>();\n        for (var word : words) {\n            dictionary.Add(word, 0);\n        }\n        // Sort the dictionary by value\n        var sortedDictionary = dictionary.OrderBy(x => x.Value);\n        // Find the word with maximum count\n        var maxWord = sortedDictionary.First();\n        // Return the word with maximum count\n        return maxWord.Key;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptddb31k8.cs(22,23): error CS1002: ; expected\n/tmp/tmptddb31k8.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmptddb31k8.cs(22,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        var dict = new Dictionary<string, int>();\n        for (var word : words) {\n            dict.Add(word, dict.get_Item(word) + 1);\n        }\n        // Create a list of words with maximum count\n        var maxWord = new List<string>();\n        for (var word : dict.Keys) {\n            if (dict.get_Item(word) == dict.get_Item(maxWord)) {\n                maxWord.Add(word);\n            }\n            else if (dict.get_Item(word) > dict.get_Item(maxWord)) {\n                maxWord = word;\n            }\n        }\n        // Return the first word in the list\n        return maxWord.get_Item(0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcttbpc5d.cs(22,23): error CS1002: ; expected\n/tmp/tmpcttbpc5d.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmpcttbpc5d.cs(22,23): error CS1001: Identifier expected\n/tmp/tmpcttbpc5d.cs(27,23): error CS1002: ; expected\n/tmp/tmpcttbpc5d.cs(27,23): error CS1525: Invalid expression term ':'\n/tmp/tmpcttbpc5d.cs(27,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        int max = 0;\n        string maxStr = \"\";\n        for (string s : words) {\n            int count = 0;\n            for (char c : s.ToCharArray()) {\n                if (count == 0) {\n                    count++;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxStr = s;\n            }\n        }\n        return maxStr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk_dcerjo.cs(23,23): error CS1002: ; expected\n/tmp/tmpk_dcerjo.cs(23,23): error CS1525: Invalid expression term ':'\n/tmp/tmpk_dcerjo.cs(23,23): error CS1001: Identifier expected\n/tmp/tmpk_dcerjo.cs(25,25): error CS1002: ; expected\n/tmp/tmpk_dcerjo.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmpk_dcerjo.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        string max = \"\";\n        int maxCount = 0;\n        for (string word : words) {\n            int count = 0;\n            for (int i = 0; i < word.Length; i++) {\n                count += (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' || word[i] == 'y') ? 1 : 0;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5z0jg2u0.cs(23,26): error CS1002: ; expected\n/tmp/tmp5z0jg2u0.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmp5z0jg2u0.cs(23,26): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (int i = 0; i < word.Length; i++) {\n                if (word[i] != ' ') {\n                    count++;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpo7e932ht.cs(23,26): error CS1002: ; expected\n/tmp/tmpo7e932ht.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmpo7e932ht.cs(23,26): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = \"\";\n        var maxCount = 0;\n        for (var word in words) {\n            var count = word.Length;\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt7mrn01w.cs(22,9): error CS1003: Syntax error, 'foreach' expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary that contains all the words in the list\n        var dict = new Dictionary<string, int>();\n        for (var word : words) {\n            dict.Add(word, 1);\n        }\n\n        // Create a list of words that have the maximum number of unique characters\n        var maxWord = \"\";\n        var maxCount = 0;\n        for (var word : dict.Keys) {\n            if (dict[word] > maxCount) {\n                maxWord = word;\n                maxCount = dict[word];\n            }\n        }\n\n        // Return the word with maximum number of unique characters\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnd2umh2q.cs(22,23): error CS1002: ; expected\n/tmp/tmpnd2umh2q.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmpnd2umh2q.cs(22,23): error CS1001: Identifier expected\n/tmp/tmpnd2umh2q.cs(29,23): error CS1002: ; expected\n/tmp/tmpnd2umh2q.cs(29,23): error CS1525: Invalid expression term ':'\n/tmp/tmpnd2umh2q.cs(29,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                max = words[i];\n                maxCount = words[i].Length;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <99909aa8faaa4f7da27edccea8b227fd>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words\n        var dictionary = new Dictionary<string, int>();\n        for (var word : words) {\n            dictionary.Add(word, 0);\n        }\n\n        // Find the word with maximum number of unique characters\n        var maxWord = \"\";\n        var maxCount = 0;\n        for (var word : dictionary.Keys) {\n            var count = dictionary[word];\n            if (count > maxCount) {\n                maxWord = word;\n                maxCount = count;\n            }\n        }\n\n        // Return the word with maximum number of unique characters\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyqhnguus.cs(22,23): error CS1002: ; expected\n/tmp/tmpyqhnguus.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmpyqhnguus.cs(22,23): error CS1001: Identifier expected\n/tmp/tmpyqhnguus.cs(29,23): error CS1002: ; expected\n/tmp/tmpyqhnguus.cs(29,23): error CS1525: Invalid expression term ':'\n/tmp/tmpyqhnguus.cs(29,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = 0;\n        var maxWord = \"\";\n        for (var word in words) {\n            var count = word.Length;\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1z_5_tpj.cs(22,9): error CS1003: Syntax error, 'foreach' expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = 0;\n        var maxWord = \"\";\n        for (var word : words) {\n            var count = word.Length;\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9oyibx6n.cs(22,23): error CS1002: ; expected\n/tmp/tmp9oyibx6n.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmp9oyibx6n.cs(22,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') ? 1 : 0;\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc0x5sin3.cs(22,26): error CS1002: ; expected\n/tmp/tmpc0x5sin3.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpc0x5sin3.cs(22,26): error CS1001: Identifier expected\n/tmp/tmpc0x5sin3.cs(24,25): error CS1002: ; expected\n/tmp/tmpc0x5sin3.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmpc0x5sin3.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        var dict = new Dictionary<string, int>();\n        for (var word : words) {\n            dict.Add(word, dict.ContainsKey(word) ? dict[word] + 1 : 1);\n        }\n\n        // Get the word with maximum count\n        var maxWord = dict.OrderByDescending(x => x.Value).First();\n\n        // Return the word with maximum count\n        return maxWord.Key;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcgloh8ab.cs(22,23): error CS1002: ; expected\n/tmp/tmpcgloh8ab.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmpcgloh8ab.cs(22,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        var dict = new Dictionary<string, int>();\n        for (var word : words) {\n            dict.Add(word, dict.get_Item(word) + 1);\n        }\n\n        // Find the word with maximum count\n        var maxCount = 0;\n        var maxWord = \"\";\n        for (var word : dict.Keys) {\n            if (dict.get_Item(word) > maxCount) {\n                maxCount = dict.get_Item(word);\n                maxWord = word;\n            }\n        }\n\n        // Return the word with maximum count\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4re8xcwt.cs(22,23): error CS1002: ; expected\n/tmp/tmp4re8xcwt.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmp4re8xcwt.cs(22,23): error CS1001: Identifier expected\n/tmp/tmp4re8xcwt.cs(29,23): error CS1002: ; expected\n/tmp/tmp4re8xcwt.cs(29,23): error CS1525: Invalid expression term ':'\n/tmp/tmp4re8xcwt.cs(29,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                max = words[i];\n                maxCount = words[i].Length;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <99909aa8faaa4f7da27edccea8b227fd>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0)\n            return \"\";\n        var max = words[0];\n        for (var i = 1; i < words.Count; i++) {\n            if (words[i].Length > max.Length)\n                max = words[i];\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <36fd354f61ec4e0e930799ebab825900>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (count == 0) {\n                    count++;\n                }\n                else if (c != word.ToCharArray()[count - 1]) {\n                    count++;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp376e87th.cs(23,26): error CS1002: ; expected\n/tmp/tmp376e87th.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmp376e87th.cs(23,26): error CS1001: Identifier expected\n/tmp/tmp376e87th.cs(25,25): error CS1002: ; expected\n/tmp/tmp376e87th.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmp376e87th.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0)\n            return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                maxCount = words[i].Length;\n                max = words[i];\n            }\n            else if (words[i].Length == maxCount && words[i].CompareTo(max) < 0) {\n                max = words[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8358e15bfb7b402593cb9caa22580d9e>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') ? 1 : 0;\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp07dn357z.cs(23,26): error CS1002: ; expected\n/tmp/tmp07dn357z.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmp07dn357z.cs(23,26): error CS1001: Identifier expected\n/tmp/tmp07dn357z.cs(25,25): error CS1002: ; expected\n/tmp/tmp07dn357z.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmp07dn357z.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        string max = words[0];\n        for (int i = 0; i < words.Count; i++) {\n            if (words[i].Length > max.Length) {\n                max = words[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd1f783847484f9ca49e9c5be6a1be65>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words\n        Hashtable<string, int> dict = new Hashtable<string, int>();\n        for (string word : words) {\n            dict.Add(word, 0);\n        }\n\n        // Find the word with maximum number of unique characters\n        string maxWord = \"\";\n        int maxCount = 0;\n        for (string word : dict.Keys()) {\n            if (dict[word] > maxCount) {\n                maxWord = word;\n                maxCount = dict[word];\n            }\n        }\n\n        // If multiple words have maximum number of unique characters,\n        // return the one which comes first in lexicographical order\n        if (dict.Count(maxWord) > 1) {\n            return maxWord;\n        }\n\n        // If there is only one word with maximum number of unique characters,\n        // return it\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbsxrpe81.cs(22,26): error CS1002: ; expected\n/tmp/tmpbsxrpe81.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpbsxrpe81.cs(22,26): error CS1001: Identifier expected\n/tmp/tmpbsxrpe81.cs(29,26): error CS1002: ; expected\n/tmp/tmpbsxrpe81.cs(29,26): error CS1525: Invalid expression term ':'\n/tmp/tmpbsxrpe81.cs(29,26): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        string max = words[0];\n        for (int i = 0; i < words.Count; i++) {\n            if (words[i].Length > max.Length) {\n                max = words[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd1f783847484f9ca49e9c5be6a1be65>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                max = words[i];\n                maxCount = words[i].Length;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <99909aa8faaa4f7da27edccea8b227fd>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            if (word.Length > max) {\n                max = word.Length;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpp90l0tc0.cs(24,26): error CS1002: ; expected\n/tmp/tmpp90l0tc0.cs(24,26): error CS1525: Invalid expression term ':'\n/tmp/tmpp90l0tc0.cs(24,26): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of all the words in the list\n        var dictionary = new Dictionary<string, int>();\n        for (var word : words) {\n            dictionary.Add(word, 0);\n        }\n\n        // Create a list of all the words in the dictionary\n        var wordsInDictionary = dictionary.Keys.ToArray();\n\n        // Sort the list of words in the dictionary\n        wordsInDictionary.Sort();\n\n        // Find the word with the maximum number of unique characters\n        var maxWord = wordsInDictionary[0];\n        var maxCount = dictionary[maxWord];\n        for (var word : wordsInDictionary) {\n            if (dictionary[word] > maxCount) {\n                maxWord = word;\n                maxCount = dictionary[word];\n            }\n        }\n\n        // Return the word with the maximum number of unique characters\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw63tmc0j.cs(22,23): error CS1002: ; expected\n/tmp/tmpw63tmc0j.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmpw63tmc0j.cs(22,23): error CS1001: Identifier expected\n/tmp/tmpw63tmc0j.cs(35,23): error CS1002: ; expected\n/tmp/tmpw63tmc0j.cs(35,23): error CS1525: Invalid expression term ':'\n/tmp/tmpw63tmc0j.cs(35,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        var dict = new Dictionary<string, int>();\n        for (var word : words) {\n            dict.Add(word, 1);\n        }\n\n        // Find the word with maximum count\n        var maxCount = 0;\n        var maxWord = \"\";\n        for (var word : dict) {\n            if (dict[word] > maxCount) {\n                maxCount = dict[word];\n                maxWord = word;\n            }\n        }\n\n        // Return the word with maximum count\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfb39vhr5.cs(22,23): error CS1002: ; expected\n/tmp/tmpfb39vhr5.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmpfb39vhr5.cs(22,23): error CS1001: Identifier expected\n/tmp/tmpfb39vhr5.cs(29,23): error CS1002: ; expected\n/tmp/tmpfb39vhr5.cs(29,23): error CS1525: Invalid expression term ':'\n/tmp/tmpfb39vhr5.cs(29,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = 0;\n        var maxWord = \"\";\n        for (var word in words) {\n            var count = 0;\n            for (var ch in word) {\n                count += (ch.ToLower() == ch) ? 1 : 0;\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdn197gb4.cs(22,9): error CS1003: Syntax error, 'foreach' expected\n/tmp/tmpdn197gb4.cs(24,13): error CS1003: Syntax error, 'foreach' expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        string max = \"\";\n        int maxCount = 0;\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c == ' ') continue;\n                count++;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkdjl9ovq.cs(23,26): error CS1002: ; expected\n/tmp/tmpkdjl9ovq.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmpkdjl9ovq.cs(23,26): error CS1001: Identifier expected\n/tmp/tmpkdjl9ovq.cs(25,25): error CS1002: ; expected\n/tmp/tmpkdjl9ovq.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmpkdjl9ovq.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0)\n            return \"\";\n        string max = words[0];\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > max.Length)\n                max = words[i];\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <271b3f131cd54a129a819bceb6c9dfcf>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = 0;\n        var maxWord = \"\";\n        for (var word : words) {\n            var count = word.Length;\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9oyibx6n.cs(22,23): error CS1002: ; expected\n/tmp/tmp9oyibx6n.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmp9oyibx6n.cs(22,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = \"\";\n        var maxCount = 0;\n        for (var word in words) {\n            var count = 0;\n            for (var c in word) {\n                count += (c == ' ') ? 0 : 1;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6wqxfc4v.cs(22,9): error CS1003: Syntax error, 'foreach' expected\n/tmp/tmp6wqxfc4v.cs(24,13): error CS1003: Syntax error, 'foreach' expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary that contains all the words in the list.\n        Hashtable<string, int> dict = new Hashtable<string, int>();\n        for (string word : words) {\n            dict.Add(word, 1);\n        }\n\n        // Create a list of words that have the maximum number of unique characters.\n        List<string> maxWords = new List<string>();\n        for (string word : dict.Keys()) {\n            if (dict[word] == words.Count) {\n                maxWords.Add(word);\n            }\n        }\n\n        // If there are multiple words with maximum number of unique characters,\n        // return the one that comes first in lexicographical order.\n        if (maxWords.Count > 1) {\n            return maxWords.OrderBy(a => a).First();\n        }\n\n        // If there is only one word with maximum number of unique characters,\n        // return it.\n        return maxWords.First();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpil7q5ojb.cs(22,26): error CS1002: ; expected\n/tmp/tmpil7q5ojb.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpil7q5ojb.cs(22,26): error CS1001: Identifier expected\n/tmp/tmpil7q5ojb.cs(28,26): error CS1002: ; expected\n/tmp/tmpil7q5ojb.cs(28,26): error CS1525: Invalid expression term ':'\n/tmp/tmpil7q5ojb.cs(28,26): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (int i = 0; i < word.Length; i++) {\n                if (word[i] == word[i].ToLower()) {\n                    count++;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmuqo_t46.cs(22,26): error CS1002: ; expected\n/tmp/tmpmuqo_t46.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpmuqo_t46.cs(22,26): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary that maps each character to a number.\n        // The number is the number of times the character appears in the string.\n        // The dictionary is sorted by the number of appearances.\n        // The first element of the dictionary is the character with the most appearances.\n        // The second element is the character with the second most appearances.\n        // The third element is the character with the third most appearances.\n        // The fourth element is the character with the fourth most appearances.\n        // The fifth element is the character with the fifth most appearances.\n        // The sixth element is the character with the sixth most appearances.\n        // The seventh element is the character with the seventh most appearances.\n        // The eighth element is the character with the eighth most appearances.\n        // The ninth element is the character with the ninth most appearances.\n        // The tenth element is the character with the tenth most appearances.\n        // The eleventh element is the character with the eleventh most appearances.\n        // The twelfth element is the character with the twelfth most appearances.\n        // The thirteenth element is the character with the thirteenth most appearances.\n        // The fourteenth element is the character with the fourteenth most appearances.\n        // The fifteenth element is the character with the fifteenth most appearances.\n        // The sixteenth element is the character with the sixteenth most appearances.\n        // The seventeen element is the character with the seventeen most appearances.\n        // The eighteen element is the character with the eighteen most appearances.\n        // The nineteen element is the character with the nineteen most appearances.\n        // The twenty element is the character with the twenty most appearances.\n        // The twenty-first element is the character with the twenty-first most appearances.\n        // The twenty-second element is the character with the twenty-second most appearances.\n        // The twenty-third element is the character with the twenty-third most appearances.\n        // The twenty-fourth element is the character with the twenty-fourth most appearances.\n        // The twenty-fifth element is the character with the twenty-fifth most appearances.\n        // The twenty-sixth element is the character with the twenty-sixth most appearances.\n        // The twenty-seventh element is the character with the twenty-seventh most appearances.\n        // The twenty-eighth element is the character with the twenty-\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4n8sf_1r.cs(19,26): error CS0161: 'Problem.FindMax(List<string>)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        var dict = new Dictionary<string, int>();\n        for (var word : words) {\n            dict.Add(word, dict.get_Item(word) + 1);\n        }\n        // Sort the dictionary by the number of unique characters\n        var sorted = dict.OrderBy(x => x.Value);\n        // Return the first word in the sorted list\n        return sorted.First();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph5am15x5.cs(22,23): error CS1002: ; expected\n/tmp/tmph5am15x5.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmph5am15x5.cs(22,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') ? 1 : 0;\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc0x5sin3.cs(22,26): error CS1002: ; expected\n/tmp/tmpc0x5sin3.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpc0x5sin3.cs(22,26): error CS1001: Identifier expected\n/tmp/tmpc0x5sin3.cs(24,25): error CS1002: ; expected\n/tmp/tmpc0x5sin3.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmpc0x5sin3.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (count == 0) {\n                    count++;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn03ovjxe.cs(23,26): error CS1002: ; expected\n/tmp/tmpn03ovjxe.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmpn03ovjxe.cs(23,26): error CS1001: Identifier expected\n/tmp/tmpn03ovjxe.cs(25,25): error CS1002: ; expected\n/tmp/tmpn03ovjxe.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmpn03ovjxe.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words\n        var dictionary = new Dictionary<string, int>();\n        for (var word : words) {\n            dictionary.Add(word, 0);\n        }\n        // Create a list of words with maximum number of unique characters\n        var maxWord = \"\";\n        var maxCount = 0;\n        for (var word : dictionary.Keys) {\n            if (dictionary[word] > maxCount) {\n                maxWord = word;\n                maxCount = dictionary[word];\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmt8zx2_d.cs(22,23): error CS1002: ; expected\n/tmp/tmpmt8zx2_d.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmpmt8zx2_d.cs(22,23): error CS1001: Identifier expected\n/tmp/tmpmt8zx2_d.cs(28,23): error CS1002: ; expected\n/tmp/tmpmt8zx2_d.cs(28,23): error CS1525: Invalid expression term ':'\n/tmp/tmpmt8zx2_d.cs(28,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary that maps each character to its frequency.\n        var dictionary = new Dictionary<char, int>();\n        for (var word : words) {\n            for (var c : word) {\n                dictionary[c]++;\n            }\n        }\n        // Create a list of characters and their frequencies.\n        var characters = dictionary.Keys.ToArray();\n        // Sort the list in ascending order of frequency.\n        characters.Sort(new Comparer<char>() {\n            public int Compare(char c1, char c2) {\n                return dictionary[c1] - dictionary[c2];\n            }\n        });\n        // Return the first word that has maximum number of unique characters.\n        for (var c : characters) {\n            if (dictionary[c] == words.Count()) {\n                return word;\n            }\n        }\n        return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnc64nm8w.cs(22,23): error CS1002: ; expected\n/tmp/tmpnc64nm8w.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmpnc64nm8w.cs(22,23): error CS1001: Identifier expected\n/tmp/tmpnc64nm8w.cs(23,24): error CS1002: ; expected\n/tmp/tmpnc64nm8w.cs(23,24): error CS1525: Invalid expression term ':'\n/tmp/tmpnc64nm8w.cs(23,24): error CS1001: Identifier expected\n/tmp/tmpnc64nm8w.cs(30,47): error CS1513: } expected\n/tmp/tmpnc64nm8w.cs(30,47): error CS1026: ) expected\n/tmp/tmpnc64nm8w.cs(30,47): error CS1002: ; expected\n/tmp/tmpnc64nm8w.cs(31,13): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpnc64nm8w.cs(34,10): error CS1519: Invalid token ')' in class, struct, or interface member declaration\n/tmp/tmpnc64nm8w.cs(36,20): error CS8124: Tuple must contain at least two elements.\n/tmp/tmpnc64nm8w.cs(36,20): error CS1026: ) expected\n/tmp/tmpnc64nm8w.cs(36,20): error CS1519: Invalid token ':' in class, struct, or interface member declaration\n/tmp/tmpnc64nm8w.cs(36,32): error CS1519: Invalid token ')' in class, struct, or interface member declaration\n/tmp/tmpnc64nm8w.cs(37,31): error CS8124: Tuple must contain at least two elements.\n/tmp/tmpnc64nm8w.cs(37,31): error CS1026: ) expected\n/tmp/tmpnc64nm8w.cs(37,31): error CS1519: Invalid token '==' in class, struct, or interface member declaration\n/tmp/tmpnc64nm8w.cs(37,45): error CS1519: Invalid token '(' in class, struct, or interface member declaration\n/tmp/tmpnc64nm8w.cs(37,46): error CS8124: Tuple must contain at least two elements.\n/tmp/tmpnc64nm8w.cs(37,47): error CS1519: Invalid token ')' in class, struct, or interface member declaration\n/tmp/tmpnc64nm8w.cs(38,28): error CS1519: Invalid token ';' in class, struct, or interface member declaration\n/tmp/tmpnc64nm8w.cs(40,9): error CS1022: Type or namespace definition, or end-of-file expected\n/tmp/tmpnc64nm8w.cs(41,9): error CS1022: Type or namespace definition, or end",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        string max = \"\";\n        int maxCount = 0;\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (count == 0) {\n                    count++;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count > maxCount) {\n                maxCount = count;\n                max = word;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprw73r8gh.cs(23,26): error CS1002: ; expected\n/tmp/tmprw73r8gh.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmprw73r8gh.cs(23,26): error CS1001: Identifier expected\n/tmp/tmprw73r8gh.cs(25,25): error CS1002: ; expected\n/tmp/tmprw73r8gh.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmprw73r8gh.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = 0;\n        var maxWord = \"\";\n        for (var word in words) {\n            var count = word.Length;\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1z_5_tpj.cs(22,9): error CS1003: Syntax error, 'foreach' expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary that maps each character to the number of times it appears in the string\n        // Use a dictionary to keep track of the number of unique characters\n        var dictionary = new Dictionary<char, int>();\n        for (var word : words) {\n            for (var c : word) {\n                dictionary[c]++;\n            }\n        }\n        // Find the character that appears the most\n        var max = 0;\n        var maxChar = ' ';\n        for (var c : dictionary.Keys) {\n            if (dictionary[c] > max) {\n                max = dictionary[c];\n                maxChar = c;\n            }\n        }\n        // Return the string with the most unique characters\n        return maxChar.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_lh2mr9s.cs(23,23): error CS1002: ; expected\n/tmp/tmp_lh2mr9s.cs(23,23): error CS1525: Invalid expression term ':'\n/tmp/tmp_lh2mr9s.cs(23,23): error CS1001: Identifier expected\n/tmp/tmp_lh2mr9s.cs(24,24): error CS1002: ; expected\n/tmp/tmp_lh2mr9s.cs(24,24): error CS1525: Invalid expression term ':'\n/tmp/tmp_lh2mr9s.cs(24,24): error CS1001: Identifier expected\n/tmp/tmp_lh2mr9s.cs(31,20): error CS1002: ; expected\n/tmp/tmp_lh2mr9s.cs(31,20): error CS1525: Invalid expression term ':'\n/tmp/tmp_lh2mr9s.cs(31,20): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        var max = 0;\n        var maxStr = \"\";\n        for (var i = 0; i < words.Count; i++) {\n            var count = 0;\n            for (var j = 0; j < words[i].Length; j++) {\n                if (words[i][j] != ' ') {\n                    count++;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxStr = words[i];\n            }\n        }\n        return maxStr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ba839319efd344c59f5b53fc64541154>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (count == 0) {\n                    count++;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp27x03rm4.cs(22,26): error CS1002: ; expected\n/tmp/tmp27x03rm4.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmp27x03rm4.cs(22,26): error CS1001: Identifier expected\n/tmp/tmp27x03rm4.cs(24,25): error CS1002: ; expected\n/tmp/tmp27x03rm4.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmp27x03rm4.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        string max = \"\";\n        int maxCount = 0;\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                count += (c == ' ') ? 0 : 1;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpf94maqh1.cs(23,26): error CS1002: ; expected\n/tmp/tmpf94maqh1.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmpf94maqh1.cs(23,26): error CS1001: Identifier expected\n/tmp/tmpf94maqh1.cs(25,25): error CS1002: ; expected\n/tmp/tmpf94maqh1.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmpf94maqh1.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (count == 0) {\n                    count++;\n                }\n                else if (c != word.ToCharArray()[count - 1]) {\n                    count++;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpf7tn7yte.cs(22,26): error CS1002: ; expected\n/tmp/tmpf7tn7yte.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpf7tn7yte.cs(22,26): error CS1001: Identifier expected\n/tmp/tmpf7tn7yte.cs(24,25): error CS1002: ; expected\n/tmp/tmpf7tn7yte.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmpf7tn7yte.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (int i = 0; i < word.Length; i++) {\n                if (word[i] != word[i].ToLower()) {\n                    count++;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfpq20ahs.cs(23,26): error CS1002: ; expected\n/tmp/tmpfpq20ahs.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmpfpq20ahs.cs(23,26): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        var max = 0;\n        var maxWord = \"\";\n        for (var i = 0; i < words.Count; i++) {\n            var word = words[i];\n            var count = word.Length;\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <34c01195850b4a4a8c25d4d0e1b7baec>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = \"\";\n        var maxCount = 0;\n        for (var word in words) {\n            var count = word.Length;\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt7mrn01w.cs(22,9): error CS1003: Syntax error, 'foreach' expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c == ' ') continue;\n                count++;\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnseza_7s.cs(22,26): error CS1002: ; expected\n/tmp/tmpnseza_7s.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpnseza_7s.cs(22,26): error CS1001: Identifier expected\n/tmp/tmpnseza_7s.cs(24,25): error CS1002: ; expected\n/tmp/tmpnseza_7s.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmpnseza_7s.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                max = words[i];\n                maxCount = words[i].Length;\n            }\n            else if (words[i].Length == maxCount && words[i].CompareTo(max) < 0) {\n                max = words[i];\n                maxCount = words[i].Length;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e4f38cb0d99e434e971326648ee60366>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0)\n            return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                maxCount = words[i].Length;\n                max = words[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc7866be06d04b57aeb3fc8e3715b592>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        string max = \"\";\n        int maxCount = 0;\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c == ' ') {\n                    continue;\n                }\n                count++;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy0ehsucp.cs(23,26): error CS1002: ; expected\n/tmp/tmpy0ehsucp.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmpy0ehsucp.cs(23,26): error CS1001: Identifier expected\n/tmp/tmpy0ehsucp.cs(25,25): error CS1002: ; expected\n/tmp/tmpy0ehsucp.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmpy0ehsucp.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                max = words[i];\n                maxCount = words[i].Length;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <99909aa8faaa4f7da27edccea8b227fd>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = 0;\n        var maxWord = \"\";\n        for (var word : words) {\n            var count = word.Length;\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9oyibx6n.cs(22,23): error CS1002: ; expected\n/tmp/tmp9oyibx6n.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmp9oyibx6n.cs(22,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = \"\";\n        var maxCount = 0;\n        for (var word in words) {\n            var count = word.Length;\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt7mrn01w.cs(22,9): error CS1003: Syntax error, 'foreach' expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary that maps each character to a string of all\n        // occurrences of that character in all the words.\n        var dict = new Dictionary<char, string>();\n        for (var word : words) {\n            for (var c : word) {\n                dict[c] = dict[c] + word;\n            }\n        }\n        // Create a list of all characters in the dictionary.\n        var chars = dict.Keys();\n        // Sort the list of characters by their number of occurrences.\n        chars = chars.OrderBy(x => dict[x]);\n        // Return the first word in the list of words that has the maximum\n        // number of unique characters.\n        return chars.First();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpv8useyk0.cs(23,23): error CS1002: ; expected\n/tmp/tmpv8useyk0.cs(23,23): error CS1525: Invalid expression term ':'\n/tmp/tmpv8useyk0.cs(23,23): error CS1001: Identifier expected\n/tmp/tmpv8useyk0.cs(24,24): error CS1002: ; expected\n/tmp/tmpv8useyk0.cs(24,24): error CS1525: Invalid expression term ':'\n/tmp/tmpv8useyk0.cs(24,24): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary that maps each character to a unique number.\n        // The dictionary will be used to count the number of unique characters\n        // in each word.\n        var dict = new Dictionary<char, int>();\n        for (var word : words) {\n            for (var ch : word) {\n                dict[ch] = dict[ch] + 1;\n            }\n        }\n\n        // Create a list of words that have the same number of unique characters.\n        var maxWord = \"\";\n        var maxCount = 0;\n        for (var word : words) {\n            if (dict[word[0]] == maxCount) {\n                maxWord = word;\n            }\n            else if (dict[word[0]] > maxCount) {\n                maxWord = word;\n                maxCount = dict[word[0]];\n            }\n        }\n\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcr88dz5_.cs(24,23): error CS1002: ; expected\n/tmp/tmpcr88dz5_.cs(24,23): error CS1525: Invalid expression term ':'\n/tmp/tmpcr88dz5_.cs(24,23): error CS1001: Identifier expected\n/tmp/tmpcr88dz5_.cs(25,25): error CS1002: ; expected\n/tmp/tmpcr88dz5_.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmpcr88dz5_.cs(25,25): error CS1001: Identifier expected\n/tmp/tmpcr88dz5_.cs(33,23): error CS1002: ; expected\n/tmp/tmpcr88dz5_.cs(33,23): error CS1525: Invalid expression term ':'\n/tmp/tmpcr88dz5_.cs(33,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary that maps each character to a string containing\n        // all the words that contain that character.\n        Dictionary<char, string> charToWords = new Dictionary<char, string>();\n        for (string word : words) {\n            for (char c : word.ToCharArray()) {\n                charToWords[c] = charToWords[c] + word + \" \";\n            }\n        }\n\n        // Create a dictionary that maps each word to a string containing\n        // the number of unique characters in the word.\n        Dictionary<string, string> wordToCharCount = new Dictionary<string, string>();\n        for (char c : charToWords.Keys) {\n            wordToCharCount[charToWords[c]] = wordToCharCount[charToWords[c]] + \"1 \";\n        }\n\n        // Find the word with maximum number of unique characters.\n        string maxWord = \"\";\n        int maxCharCount = 0;\n        for (string word : wordToCharCount.Keys) {\n            if (wordToCharCount[word] > maxCharCount) {\n                maxCharCount = wordToCharCount[word];\n                maxWord = word;\n            }\n        }\n\n        // Find the word that comes first in lexicographical order.\n        for (string word : words) {\n            if (word.CompareTo(maxWord) < 0) {\n                maxWord = word;\n            }\n        }\n\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1fojzy6h.cs(23,26): error CS1002: ; expected\n/tmp/tmp1fojzy6h.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmp1fojzy6h.cs(23,26): error CS1001: Identifier expected\n/tmp/tmp1fojzy6h.cs(24,25): error CS1002: ; expected\n/tmp/tmp1fojzy6h.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmp1fojzy6h.cs(24,25): error CS1001: Identifier expected\n/tmp/tmp1fojzy6h.cs(32,21): error CS1002: ; expected\n/tmp/tmp1fojzy6h.cs(32,21): error CS1525: Invalid expression term ':'\n/tmp/tmp1fojzy6h.cs(32,21): error CS1001: Identifier expected\n/tmp/tmp1fojzy6h.cs(39,26): error CS1002: ; expected\n/tmp/tmp1fojzy6h.cs(39,26): error CS1525: Invalid expression term ':'\n/tmp/tmp1fojzy6h.cs(39,26): error CS1001: Identifier expected\n/tmp/tmp1fojzy6h.cs(47,26): error CS1002: ; expected\n/tmp/tmp1fojzy6h.cs(47,26): error CS1525: Invalid expression term ':'\n/tmp/tmp1fojzy6h.cs(47,26): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c == ' ') {\n                    continue;\n                }\n                count++;\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptnjt7sow.cs(23,26): error CS1002: ; expected\n/tmp/tmptnjt7sow.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmptnjt7sow.cs(23,26): error CS1001: Identifier expected\n/tmp/tmptnjt7sow.cs(25,25): error CS1002: ; expected\n/tmp/tmptnjt7sow.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmptnjt7sow.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        var wordDictionary = new Dictionary<string, int>();\n        for (var word : words) {\n            var wordCount = wordDictionary.ContainsKey(word) ? wordDictionary[word] : 0;\n            wordDictionary[word] = wordCount + 1;\n        }\n\n        // Find the word with maximum count\n        var maxWord = \"\";\n        var maxCount = 0;\n        for (var word : wordDictionary.Keys) {\n            if (wordDictionary[word] > maxCount) {\n                maxWord = word;\n                maxCount = wordDictionary[word];\n            }\n        }\n\n        // Return the word with maximum count\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvz360oob.cs(22,23): error CS1002: ; expected\n/tmp/tmpvz360oob.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmpvz360oob.cs(22,23): error CS1001: Identifier expected\n/tmp/tmpvz360oob.cs(30,23): error CS1002: ; expected\n/tmp/tmpvz360oob.cs(30,23): error CS1525: Invalid expression term ':'\n/tmp/tmpvz360oob.cs(30,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        string max = \"\";\n        int maxCount = 0;\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c == 'a') {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp492200nh.cs(23,26): error CS1002: ; expected\n/tmp/tmp492200nh.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmp492200nh.cs(23,26): error CS1001: Identifier expected\n/tmp/tmp492200nh.cs(25,25): error CS1002: ; expected\n/tmp/tmp492200nh.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmp492200nh.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        Hashtable<string, int> wordCounts = new Hashtable<string, int>();\n        for (string word : words) {\n            if (wordCounts.ContainsKey(word)) {\n                wordCounts[word]++;\n            }\n            else {\n                wordCounts[word] = 1;\n            }\n        }\n        // Find the word with maximum count\n        string maxWord = \"\";\n        int maxCount = 0;\n        for (string word : wordCounts.Keys()) {\n            if (wordCounts[word] > maxCount) {\n                maxWord = word;\n                maxCount = wordCounts[word];\n            }\n        }\n        // Return the word with maximum count\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpi1a7y00j.cs(22,26): error CS1002: ; expected\n/tmp/tmpi1a7y00j.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpi1a7y00j.cs(22,26): error CS1001: Identifier expected\n/tmp/tmpi1a7y00j.cs(33,26): error CS1002: ; expected\n/tmp/tmpi1a7y00j.cs(33,26): error CS1525: Invalid expression term ':'\n/tmp/tmpi1a7y00j.cs(33,26): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = 0;\n        var maxWord = \"\";\n        for (var word in words) {\n            var count = word.Length;\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1z_5_tpj.cs(22,9): error CS1003: Syntax error, 'foreach' expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                max = words[i];\n                maxCount = words[i].Length;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <99909aa8faaa4f7da27edccea8b227fd>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') ? 1 : 0;\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc0x5sin3.cs(22,26): error CS1002: ; expected\n/tmp/tmpc0x5sin3.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpc0x5sin3.cs(22,26): error CS1001: Identifier expected\n/tmp/tmpc0x5sin3.cs(24,25): error CS1002: ; expected\n/tmp/tmpc0x5sin3.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmpc0x5sin3.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary that maps each word to its number of unique characters.\n        Dictionary<string, int> wordCount = new Dictionary<string, int>();\n        for (string word : words) {\n            // Add the word to the dictionary.\n            wordCount.Add(word, word.Length());\n        }\n        // Sort the dictionary in ascending order of the number of unique characters.\n        List<KeyValuePair<string, int>> sortedWordCount = wordCount.ToSortedList(new KeyValuePairComparer<string, int>());\n        // Return the first word in the sorted list.\n        return sortedWordCount.First().Key;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqi__h8iu.cs(22,26): error CS1002: ; expected\n/tmp/tmpqi__h8iu.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpqi__h8iu.cs(22,26): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        string max = \"\";\n        int maxCount = 0;\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c == ' ') continue;\n                count++;\n            }\n            if (count > maxCount) {\n                maxCount = count;\n                max = word;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg6a2v2ux.cs(23,26): error CS1002: ; expected\n/tmp/tmpg6a2v2ux.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmpg6a2v2ux.cs(23,26): error CS1001: Identifier expected\n/tmp/tmpg6a2v2ux.cs(25,25): error CS1002: ; expected\n/tmp/tmpg6a2v2ux.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmpg6a2v2ux.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a hashset to store the unique characters\n        HashSet<char> uniqueChars = new HashSet<char>();\n        // Create a hashset to store the unique words\n        HashSet<string> uniqueWords = new HashSet<string>();\n        // Create a hashset to store the words which have the same number of unique characters\n        HashSet<string> wordsWithSameUniqueChars = new HashSet<string>();\n        // Create a hashset to store the words which have the same number of unique characters\n        HashSet<string> wordsWithSameUniqueWords = new HashSet<string>();\n        // Create a hashset to store the words which have the same number of unique characters\n        HashSet<string> wordsWithSameUniqueCharsAndWords = new HashSet<string>();\n        // Create a hashset to store the words which have the same number of unique characters\n        HashSet<string> wordsWithSameUniqueWordsAndChars = new HashSet<string>();\n        // Create a hashset to store the words which have the same number of unique characters\n        HashSet<string> wordsWithSameUniqueWordsAndWords = new HashSet<string>();\n        // Create a hashset to store the words which have the same number of unique characters\n        HashSet<string> wordsWithSameUniqueWordsAndWordsAndChars = new HashSet<string>();\n        // Create a hashset to store the words which have the same number of unique characters\n        HashSet<string> wordsWithSameUniqueWordsAndWordsAndCharsAndWords = new HashSet<string>();\n        // Create a hashset to store the words which have the same number of unique characters\n        HashSet<string> wordsWithSameUniqueWordsAndWordsAndCharsAndWordsAndChars = new HashSet<string>();\n        // Create a hashset to store the words which have the same number of unique characters\n        HashSet<string> wordsWithSameUniqueWordsAndWordsAndCharsAndWordsAndCharsAndChars = new HashSet<string>();\n        // Create a hashset to store the words which have the same number of unique characters\n        HashSet<string> wordsWithSameUniqueWordsAndWordsAndCharsAndWordsAndCharsAndCharsAndChars = new HashSet<string>();\n        // Create\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgq3v9sho.cs(19,26): error CS0161: 'Problem.FindMax(List<string>)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0)\n            return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                max = words[i];\n                maxCount = words[i].Length;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <77b0de708ec946a7b3bcbc70d6449920>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (count == 0) {\n                    count++;\n                }\n                else if (c != word.ToCharArray()[count - 1]) {\n                    count++;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpf7tn7yte.cs(22,26): error CS1002: ; expected\n/tmp/tmpf7tn7yte.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpf7tn7yte.cs(22,26): error CS1001: Identifier expected\n/tmp/tmpf7tn7yte.cs(24,25): error CS1002: ; expected\n/tmp/tmpf7tn7yte.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmpf7tn7yte.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c != ' ') {\n                    count++;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbqtxqgt6.cs(23,26): error CS1002: ; expected\n/tmp/tmpbqtxqgt6.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmpbqtxqgt6.cs(23,26): error CS1001: Identifier expected\n/tmp/tmpbqtxqgt6.cs(25,25): error CS1002: ; expected\n/tmp/tmpbqtxqgt6.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmpbqtxqgt6.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        var dict = new Dictionary<string, int>();\n        for (var word : words) {\n            dict.Add(word, 1);\n        }\n        // Find the word with maximum count\n        var maxWord = dict.OrderByDescending(x => dict[x]).First();\n        // Return the word with maximum count\n        return maxWord.Value;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7kukea6d.cs(22,23): error CS1002: ; expected\n/tmp/tmp7kukea6d.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmp7kukea6d.cs(22,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c == ' ') {\n                    continue;\n                }\n                count++;\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw8qzm8_l.cs(22,26): error CS1002: ; expected\n/tmp/tmpw8qzm8_l.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpw8qzm8_l.cs(22,26): error CS1001: Identifier expected\n/tmp/tmpw8qzm8_l.cs(24,25): error CS1002: ; expected\n/tmp/tmpw8qzm8_l.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmpw8qzm8_l.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                maxCount = words[i].Length;\n                max = words[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fc74232d1296430983e8406a648232b7>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0)\n            return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                max = words[i];\n                maxCount = words[i].Length;\n            }\n            else if (words[i].Length == maxCount && words[i].CompareTo(max) < 0) {\n                max = words[i];\n                maxCount = words[i].Length;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7f3bf5cc1a04daab1f54e3e4f2b35b4>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c == ' ') continue;\n                count++;\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnseza_7s.cs(22,26): error CS1002: ; expected\n/tmp/tmpnseza_7s.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpnseza_7s.cs(22,26): error CS1001: Identifier expected\n/tmp/tmpnseza_7s.cs(24,25): error CS1002: ; expected\n/tmp/tmpnseza_7s.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmpnseza_7s.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        string max = words[0];\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > max.Length) {\n                max = words[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2d388955dd424f85b94798054e5592b5>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                maxCount = words[i].Length;\n                max = words[i];\n            }\n            else if (words[i].Length == maxCount && words[i].CompareTo(max) < 0) {\n                max = words[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2a2dfc603cc54882886f89acebbf4761>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c == ' ') continue;\n                count++;\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnseza_7s.cs(22,26): error CS1002: ; expected\n/tmp/tmpnseza_7s.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpnseza_7s.cs(22,26): error CS1001: Identifier expected\n/tmp/tmpnseza_7s.cs(24,25): error CS1002: ; expected\n/tmp/tmpnseza_7s.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmpnseza_7s.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        var dict = new Dictionary<string, int>();\n        for (var word : words) {\n            dict.Add(word, dict.get_Item(word) + 1);\n        }\n        // Get the keys and sort them in ascending order\n        var keys = dict.Keys.ToArray();\n        keys.Sort();\n        // Get the first key and return it\n        return keys[0];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpugoyv1e5.cs(22,23): error CS1002: ; expected\n/tmp/tmpugoyv1e5.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmpugoyv1e5.cs(22,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = 0;\n        var maxStr = \"\";\n        for (var word in words) {\n            var count = word.Length;\n            if (count > max) {\n                max = count;\n                maxStr = word;\n            }\n        }\n        return maxStr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl980wjdt.cs(22,9): error CS1003: Syntax error, 'foreach' expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c != ' ') {\n                    count++;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp863aqtn2.cs(22,26): error CS1002: ; expected\n/tmp/tmp863aqtn2.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmp863aqtn2.cs(22,26): error CS1001: Identifier expected\n/tmp/tmp863aqtn2.cs(24,25): error CS1002: ; expected\n/tmp/tmp863aqtn2.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmp863aqtn2.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        var dict = new Dictionary<string, int>();\n        for (var word : words) {\n            dict.Add(word, dict.get_Item(word) + 1);\n        }\n\n        // Create a list of words sorted by their counts\n        var sorted = dict.OrderBy(x => x.Value);\n\n        // Return the first word in the list\n        return sorted.First();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp90sw_am_.cs(22,23): error CS1002: ; expected\n/tmp/tmp90sw_am_.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmp90sw_am_.cs(22,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary that maps a character to the number of times it appears in the string.\n        Dictionary<char, int> charCount = new Dictionary<char, int>();\n        for (string word : words) {\n            for (char c : word.ToCharArray()) {\n                if (charCount.ContainsKey(c)) {\n                    charCount[c]++;\n                }\n                else {\n                    charCount[c] = 1;\n                }\n            }\n        }\n        // Create a list of characters and their corresponding counts.\n        List<KeyValuePair<char, int>> charList = new List<KeyValuePair<char, int>>();\n        for (char c : charCount.Keys) {\n            charList.Add(new KeyValuePair<char, int>(c, charCount[c]));\n        }\n        // Sort the list in lexicographical order.\n        charList.Sort((a, b) => a.Value.CompareTo(b.Value));\n        // Return the first element in the list.\n        return charList.First().Key;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8wav2xhp.cs(22,26): error CS1002: ; expected\n/tmp/tmp8wav2xhp.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmp8wav2xhp.cs(22,26): error CS1001: Identifier expected\n/tmp/tmp8wav2xhp.cs(23,25): error CS1002: ; expected\n/tmp/tmp8wav2xhp.cs(23,25): error CS1525: Invalid expression term ':'\n/tmp/tmp8wav2xhp.cs(23,25): error CS1001: Identifier expected\n/tmp/tmp8wav2xhp.cs(34,21): error CS1002: ; expected\n/tmp/tmp8wav2xhp.cs(34,21): error CS1525: Invalid expression term ':'\n/tmp/tmp8wav2xhp.cs(34,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary that maps each word to its number of unique characters.\n        var dict = new Dictionary<string, int>();\n        for (var word : words) {\n            dict.Add(word, word.Length);\n        }\n\n        // Create a list of words that have the maximum number of unique characters.\n        var maxWord = \"\";\n        var maxCount = 0;\n        for (var word : dict.Keys) {\n            if (dict[word] > maxCount) {\n                maxWord = word;\n                maxCount = dict[word];\n            }\n        }\n\n        // Return the word with maximum number of unique characters.\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd9qidq07.cs(22,23): error CS1002: ; expected\n/tmp/tmpd9qidq07.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmpd9qidq07.cs(22,23): error CS1001: Identifier expected\n/tmp/tmpd9qidq07.cs(29,23): error CS1002: ; expected\n/tmp/tmpd9qidq07.cs(29,23): error CS1525: Invalid expression term ':'\n/tmp/tmpd9qidq07.cs(29,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0)\n            return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                maxCount = words[i].Length;\n                max = words[i];\n            }\n            else if (words[i].Length == maxCount && words[i].CompareTo(max) < 0) {\n                max = words[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8358e15bfb7b402593cb9caa22580d9e>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary that contains all the words in the list\n        var dict = new Dictionary<string, int>();\n        for (var word : words) {\n            dict.Add(word, 1);\n        }\n\n        // Create a list of words that have the maximum number of unique characters\n        var maxWord = \"\";\n        var maxCount = 0;\n        for (var word : dict.Keys) {\n            if (dict[word] > maxCount) {\n                maxWord = word;\n                maxCount = dict[word];\n            }\n        }\n\n        // Return the word with the maximum number of unique characters\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp09brvgrh.cs(22,23): error CS1002: ; expected\n/tmp/tmp09brvgrh.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmp09brvgrh.cs(22,23): error CS1001: Identifier expected\n/tmp/tmp09brvgrh.cs(29,23): error CS1002: ; expected\n/tmp/tmp09brvgrh.cs(29,23): error CS1525: Invalid expression term ':'\n/tmp/tmp09brvgrh.cs(29,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary that maps each character to a unique integer.\n        // The dictionary is initialized with the first character of each word.\n        Dictionary<char, int> charDict = new Dictionary<char, int>();\n        for (string word : words) {\n            for (char c : word) {\n                charDict[c] = 0;\n            }\n        }\n\n        // Create a dictionary that maps each character to a unique integer.\n        // The dictionary is initialized with the first character of each word.\n        Dictionary<char, int> charDict2 = new Dictionary<char, int>();\n        for (string word : words) {\n            for (char c : word) {\n                charDict2[c] = 0;\n            }\n        }\n\n        // Create a dictionary that maps each character to a unique integer.\n        // The dictionary is initialized with the first character of each word.\n        Dictionary<char, int> charDict3 = new Dictionary<char, int>();\n        for (string word : words) {\n            for (char c : word) {\n                charDict3[c] = 0;\n            }\n        }\n\n        // Create a dictionary that maps each character to a unique integer.\n        // The dictionary is initialized with the first character of each word.\n        Dictionary<char, int> charDict4 = new Dictionary<char, int>();\n        for (string word : words) {\n            for (char c : word) {\n                charDict4[c] = 0;\n            }\n        }\n\n        // Create a dictionary that maps each character to a unique integer.\n        // The dictionary is initialized with the first character of each word.\n        Dictionary<char, int> charDict5 = new Dictionary<char, int>();\n        for (string word : words) {\n            for (char c : word) {\n                charDict5[c] = 0;\n            }\n        }\n\n        // Create a dictionary that maps each character to a unique integer.\n        // The dictionary is initialized with the first character of each word.\n        Dictionary<char, int> charDict6 = new Dictionary<char, int>();\n        for (string word : words) {\n            for\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq5s6q24z.cs(23,26): error CS1002: ; expected\n/tmp/tmpq5s6q24z.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmpq5s6q24z.cs(23,26): error CS1001: Identifier expected\n/tmp/tmpq5s6q24z.cs(24,25): error CS1002: ; expected\n/tmp/tmpq5s6q24z.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmpq5s6q24z.cs(24,25): error CS1001: Identifier expected\n/tmp/tmpq5s6q24z.cs(32,26): error CS1002: ; expected\n/tmp/tmpq5s6q24z.cs(32,26): error CS1525: Invalid expression term ':'\n/tmp/tmpq5s6q24z.cs(32,26): error CS1001: Identifier expected\n/tmp/tmpq5s6q24z.cs(33,25): error CS1002: ; expected\n/tmp/tmpq5s6q24z.cs(33,25): error CS1525: Invalid expression term ':'\n/tmp/tmpq5s6q24z.cs(33,25): error CS1001: Identifier expected\n/tmp/tmpq5s6q24z.cs(41,26): error CS1002: ; expected\n/tmp/tmpq5s6q24z.cs(41,26): error CS1525: Invalid expression term ':'\n/tmp/tmpq5s6q24z.cs(41,26): error CS1001: Identifier expected\n/tmp/tmpq5s6q24z.cs(42,25): error CS1002: ; expected\n/tmp/tmpq5s6q24z.cs(42,25): error CS1525: Invalid expression term ':'\n/tmp/tmpq5s6q24z.cs(42,25): error CS1001: Identifier expected\n/tmp/tmpq5s6q24z.cs(50,26): error CS1002: ; expected\n/tmp/tmpq5s6q24z.cs(50,26): error CS1525: Invalid expression term ':'\n/tmp/tmpq5s6q24z.cs(50,26): error CS1001: Identifier expected\n/tmp/tmpq5s6q24z.cs(51,25): error CS1002: ; expected\n/tmp/tmpq5s6q24z.cs(51,25): error CS1525: Invalid expression term ':'\n/tmp/tmpq5s6q24z.cs(51,25): error CS1001: Identifier expected\n/tmp/tmpq5s6q24z.cs(59,26): error CS1002: ; expected\n/tmp/tmpq5s6q24z.cs(59,26): error CS1525: Invalid expression term ':'\n/tmp/tmpq5s6q24z.cs(59,26): error CS1001: Identifier expected\n/tmp/tmpq5s6q24z.cs(60,25): error CS1002: ; expected\n/tmp/tmpq5s6q24z.cs(60,25): error CS1525: Invalid expression term ':'\n/tmp/tmpq5s6q24z.cs(60,25): error CS1001: Identifier expected\n/tmp/tmpq5s6q24z.cs(68,26): error CS1002: ; expected\n/tmp/tmpq5s6q24z.c",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0)\n            return \"\";\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (count == 0)\n                    count++;\n                else\n                    count = 0;\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7d574as8.cs(25,26): error CS1002: ; expected\n/tmp/tmp7d574as8.cs(25,26): error CS1525: Invalid expression term ':'\n/tmp/tmp7d574as8.cs(25,26): error CS1001: Identifier expected\n/tmp/tmp7d574as8.cs(27,25): error CS1002: ; expected\n/tmp/tmp7d574as8.cs(27,25): error CS1525: Invalid expression term ':'\n/tmp/tmp7d574as8.cs(27,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary that maps each character to a string containing\n        // all words that contain that character.\n        Dictionary<char, string> charToWords = new Dictionary<char, string>();\n        for (string word : words) {\n            for (char c : word.ToCharArray()) {\n                if (!charToWords.ContainsKey(c)) {\n                    charToWords.Add(c, word);\n                }\n                else {\n                    charToWords[c] += word;\n                }\n            }\n        }\n        // Create a dictionary that maps each string to a list of all words that\n        // contain that string.\n        Dictionary<string, List<string>> stringToWords = new Dictionary<string, List<string>>();\n        for (char c : charToWords.Keys) {\n            string s = charToWords[c];\n            if (!stringToWords.ContainsKey(s)) {\n                stringToWords.Add(s, new List<string>());\n            }\n            stringToWords[s].Add(charToWords[c]);\n        }\n        // Create a dictionary that maps each string to a list of all words that\n        // contain that string.\n        Dictionary<string, int> stringToCount = new Dictionary<string, int>();\n        for (string s : stringToWords.Keys) {\n            stringToCount[s] = stringToWords[s].Count;\n        }\n        // Find the string with maximum number of unique characters.\n        string max = \"\";\n        int maxCount = 0;\n        for (string s : stringToCount.Keys) {\n            if (stringToCount[s] > maxCount) {\n                maxCount = stringToCount[s];\n                max = s;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1cvmno6r.cs(23,26): error CS1002: ; expected\n/tmp/tmp1cvmno6r.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmp1cvmno6r.cs(23,26): error CS1001: Identifier expected\n/tmp/tmp1cvmno6r.cs(24,25): error CS1002: ; expected\n/tmp/tmp1cvmno6r.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmp1cvmno6r.cs(24,25): error CS1001: Identifier expected\n/tmp/tmp1cvmno6r.cs(36,21): error CS1002: ; expected\n/tmp/tmp1cvmno6r.cs(36,21): error CS1525: Invalid expression term ':'\n/tmp/tmp1cvmno6r.cs(36,21): error CS1001: Identifier expected\n/tmp/tmp1cvmno6r.cs(46,23): error CS1002: ; expected\n/tmp/tmp1cvmno6r.cs(46,23): error CS1525: Invalid expression term ':'\n/tmp/tmp1cvmno6r.cs(46,23): error CS1001: Identifier expected\n/tmp/tmp1cvmno6r.cs(52,23): error CS1002: ; expected\n/tmp/tmp1cvmno6r.cs(52,23): error CS1525: Invalid expression term ':'\n/tmp/tmp1cvmno6r.cs(52,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c == ' ') continue;\n                count++;\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnseza_7s.cs(22,26): error CS1002: ; expected\n/tmp/tmpnseza_7s.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpnseza_7s.cs(22,26): error CS1001: Identifier expected\n/tmp/tmpnseza_7s.cs(24,25): error CS1002: ; expected\n/tmp/tmpnseza_7s.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmpnseza_7s.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                maxCount = words[i].Length;\n                max = words[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fc74232d1296430983e8406a648232b7>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0)\n            return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                max = words[i];\n                maxCount = words[i].Length;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <77b0de708ec946a7b3bcbc70d6449920>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = 0;\n        var maxStr = \"\";\n        for (var word in words) {\n            var count = 0;\n            for (var ch in word) {\n                count += (ch.ToLower() == ch) ? 1 : 0;\n            }\n            if (count > max) {\n                max = count;\n                maxStr = word;\n            }\n        }\n        return maxStr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1chucdpi.cs(22,9): error CS1003: Syntax error, 'foreach' expected\n/tmp/tmp1chucdpi.cs(24,13): error CS1003: Syntax error, 'foreach' expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        var dict = new Dictionary<string, int>();\n        for (var word : words) {\n            dict.Add(word, dict.get_Item(word) + 1);\n        }\n\n        // Create a list of words with maximum count\n        var max = dict.OrderByDescending(x => dict.get_Item(x)).First();\n        return max.Key;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5t3pjlqo.cs(22,23): error CS1002: ; expected\n/tmp/tmp5t3pjlqo.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmp5t3pjlqo.cs(22,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = 0;\n        var maxWord = \"\";\n        for (var word in words) {\n            var count = 0;\n            for (var c in word) {\n                if (count == 0) {\n                    count = 1;\n                }\n                else {\n                    count++;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpocvfv96r.cs(22,9): error CS1003: Syntax error, 'foreach' expected\n/tmp/tmpocvfv96r.cs(24,13): error CS1003: Syntax error, 'foreach' expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') ? 1 : 0;\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc0x5sin3.cs(22,26): error CS1002: ; expected\n/tmp/tmpc0x5sin3.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpc0x5sin3.cs(22,26): error CS1001: Identifier expected\n/tmp/tmpc0x5sin3.cs(24,25): error CS1002: ; expected\n/tmp/tmpc0x5sin3.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmpc0x5sin3.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = 0;\n        var maxWord = \"\";\n        for (var word in words) {\n            var count = word.Length;\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1z_5_tpj.cs(22,9): error CS1003: Syntax error, 'foreach' expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        Dictionary<string, int> wordCounts = new Dictionary<string, int>();\n        for (string word : words) {\n            if (wordCounts.ContainsKey(word)) {\n                wordCounts[word]++;\n            }\n            else {\n                wordCounts[word] = 1;\n            }\n        }\n        // Sort the dictionary by value\n        List<KeyValuePair<string, int>> sortedWordCounts =\n            wordCounts.ToSortedList(new KeyValuePairComparer<string, int>());\n        // Get the first word with maximum count\n        string maxWord = sortedWordCounts[0].Key;\n        // Get the count of the first word\n        int maxCount = sortedWordCounts[0].Value;\n        // Iterate through the dictionary and find the word with maximum count\n        for (KeyValuePair<string, int> pair : sortedWordCounts) {\n            if (pair.Value == maxCount) {\n                maxWord = pair.Key;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwfrrha3l.cs(22,26): error CS1002: ; expected\n/tmp/tmpwfrrha3l.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpwfrrha3l.cs(22,26): error CS1001: Identifier expected\n/tmp/tmpwfrrha3l.cs(38,45): error CS1002: ; expected\n/tmp/tmpwfrrha3l.cs(38,45): error CS1525: Invalid expression term ':'\n/tmp/tmpwfrrha3l.cs(38,45): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        string max = \"\";\n        int maxCount = 0;\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (count == 0) {\n                    count++;\n                }\n                else if (c != word.ToCharArray()[count - 1]) {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9hr_5ixd.cs(23,26): error CS1002: ; expected\n/tmp/tmp9hr_5ixd.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmp9hr_5ixd.cs(23,26): error CS1001: Identifier expected\n/tmp/tmp9hr_5ixd.cs(25,25): error CS1002: ; expected\n/tmp/tmp9hr_5ixd.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmp9hr_5ixd.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        string max = \"\";\n        int maxCount = 0;\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') ? 1 : 0;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq8vqrpdi.cs(23,26): error CS1002: ; expected\n/tmp/tmpq8vqrpdi.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmpq8vqrpdi.cs(23,26): error CS1001: Identifier expected\n/tmp/tmpq8vqrpdi.cs(25,25): error CS1002: ; expected\n/tmp/tmpq8vqrpdi.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmpq8vqrpdi.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        string max = words[0];\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > max.Length) {\n                max = words[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2d388955dd424f85b94798054e5592b5>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        string max = \"\";\n        int maxCount = 0;\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') ? 1 : 0;\n            }\n            if (count > maxCount) {\n                maxCount = count;\n                max = word;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpovwvsn_y.cs(23,26): error CS1002: ; expected\n/tmp/tmpovwvsn_y.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmpovwvsn_y.cs(23,26): error CS1001: Identifier expected\n/tmp/tmpovwvsn_y.cs(25,25): error CS1002: ; expected\n/tmp/tmpovwvsn_y.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmpovwvsn_y.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0)\n            return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                max = words[i];\n                maxCount = words[i].Length;\n            }\n            else if (words[i].Length == maxCount && words[i].CompareTo(max) < 0) {\n                max = words[i];\n                maxCount = words[i].Length;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7f3bf5cc1a04daab1f54e3e4f2b35b4>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of all the words in the list.\n        var dictionary = new Dictionary<string, int>();\n        for (var word : words) {\n            dictionary.Add(word, 1);\n        }\n        // Create a list of all the words in the dictionary.\n        var wordsInDictionary = dictionary.Keys().ToArray();\n        // Sort the words in the dictionary by their frequency.\n        wordsInDictionary.Sort((a, b) => dictionary[b] - dictionary[a]);\n        // Return the word with the maximum number of unique characters.\n        return wordsInDictionary[0];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpeozrxcan.cs(22,23): error CS1002: ; expected\n/tmp/tmpeozrxcan.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmpeozrxcan.cs(22,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                max = words[i];\n                maxCount = words[i].Length;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <99909aa8faaa4f7da27edccea8b227fd>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    count++;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4f4gq0x8.cs(22,26): error CS1002: ; expected\n/tmp/tmp4f4gq0x8.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmp4f4gq0x8.cs(22,26): error CS1001: Identifier expected\n/tmp/tmp4f4gq0x8.cs(24,25): error CS1002: ; expected\n/tmp/tmp4f4gq0x8.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmp4f4gq0x8.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        string max = \"\";\n        int maxCount = 0;\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (count == 0) {\n                    count++;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count > maxCount) {\n                maxCount = count;\n                max = word;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprw73r8gh.cs(23,26): error CS1002: ; expected\n/tmp/tmprw73r8gh.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmprw73r8gh.cs(23,26): error CS1001: Identifier expected\n/tmp/tmprw73r8gh.cs(25,25): error CS1002: ; expected\n/tmp/tmprw73r8gh.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmprw73r8gh.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a hashset to store the unique characters in each word.\n        HashSet<char> uniqueChars = new HashSet<char>();\n        // Create a hashset to store the unique characters in the word with maximum number of unique characters.\n        HashSet<char> maxUniqueChars = new HashSet<char>();\n        // Create a hashset to store the unique characters in the word with maximum number of unique characters.\n        HashSet<char> minUniqueChars = new HashSet<char>();\n        // Create a hashset to store the unique characters in each word.\n        HashSet<char> minUniqueChars2 = new HashSet<char>();\n        // Create a hashset to store the unique characters in each word.\n        HashSet<char> maxUniqueChars2 = new HashSet<char>();\n        // Create a hashset to store the unique characters in each word.\n        HashSet<char> minUniqueChars3 = new HashSet<char>();\n        // Create a hashset to store the unique characters in each word.\n        HashSet<char> maxUniqueChars3 = new HashSet<char>();\n        // Create a hashset to store the unique characters in each word.\n        HashSet<char> minUniqueChars4 = new HashSet<char>();\n        // Create a hashset to store the unique characters in each word.\n        HashSet<char> maxUniqueChars4 = new HashSet<char>();\n        // Create a hashset to store the unique characters in each word.\n        HashSet<char> minUniqueChars5 = new HashSet<char>();\n        // Create a hashset to store the unique characters in each word.\n        HashSet<char> maxUniqueChars5 = new HashSet<char>();\n        // Create a hashset to store the unique characters in each word.\n        HashSet<char> minUniqueChars6 = new HashSet<char>();\n        // Create a hashset to store the unique characters in each word.\n        HashSet<char> maxUniqueChars6 = new HashSet<char>();\n        // Create a hashset to store the unique characters in each word.\n        HashSet<char> minUniqueChars7 = new HashSet<char>();\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpo5lmuokc.cs(19,26): error CS0161: 'Problem.FindMax(List<string>)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = \"\";\n        var maxCount = 0;\n        for (var word in words) {\n            var count = word.Length;\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt7mrn01w.cs(22,9): error CS1003: Syntax error, 'foreach' expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        var dict = new Dictionary<string, int>();\n        for (var word : words) {\n            dict.Add(word, dict.ContainsKey(word) ? dict[word] + 1 : 1);\n        }\n\n        // Find the word with maximum count\n        var max = dict.OrderByDescending(x => x.Value);\n        return max.First().Key;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1e73gyr4.cs(22,23): error CS1002: ; expected\n/tmp/tmp1e73gyr4.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmp1e73gyr4.cs(22,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = \"\";\n        var maxCount = 0;\n        for (var word in words) {\n            var count = word.Length;\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt7mrn01w.cs(22,9): error CS1003: Syntax error, 'foreach' expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        int max = 0;\n        string maxStr = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c != ' ') {\n                    count++;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxStr = word;\n            }\n        }\n        return maxStr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpa2mzl0r6.cs(23,26): error CS1002: ; expected\n/tmp/tmpa2mzl0r6.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmpa2mzl0r6.cs(23,26): error CS1001: Identifier expected\n/tmp/tmpa2mzl0r6.cs(25,25): error CS1002: ; expected\n/tmp/tmpa2mzl0r6.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmpa2mzl0r6.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        Hashtable<string, int> wordCount = new Hashtable<string, int>();\n        for (string word : words) {\n            if (wordCount.ContainsKey(word)) {\n                wordCount[word]++;\n            } else {\n                wordCount.Add(word, 1);\n            }\n        }\n\n        // Find the word with maximum count\n        string maxWord = \"\";\n        int maxCount = 0;\n        for (string word : wordCount.Keys()) {\n            if (wordCount[word] > maxCount) {\n                maxWord = word;\n                maxCount = wordCount[word];\n            }\n        }\n\n        // Return the word with maximum count\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1rdsbzf0.cs(22,26): error CS1002: ; expected\n/tmp/tmp1rdsbzf0.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmp1rdsbzf0.cs(22,26): error CS1001: Identifier expected\n/tmp/tmp1rdsbzf0.cs(33,26): error CS1002: ; expected\n/tmp/tmp1rdsbzf0.cs(33,26): error CS1525: Invalid expression term ':'\n/tmp/tmp1rdsbzf0.cs(33,26): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        var dict = new Dictionary<string, int>();\n        for (var word : words) {\n            dict.Add(word, 1);\n        }\n        // Create a list of words with the most unique characters\n        var max = \"\";\n        var maxCount = 0;\n        for (var key in dict) {\n            if (dict[key] > maxCount) {\n                max = key;\n                maxCount = dict[key];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprcx9wrvu.cs(22,23): error CS1002: ; expected\n/tmp/tmprcx9wrvu.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmprcx9wrvu.cs(22,23): error CS1001: Identifier expected\n/tmp/tmprcx9wrvu.cs(28,9): error CS1003: Syntax error, 'foreach' expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts.\n        var dictionary = new Dictionary<string, int>();\n        for (var word : words) {\n            dictionary.Add(word, 1);\n        }\n        // Create a list of words sorted by their counts.\n        var sortedWords = dictionary.OrderBy(x => x.Value);\n        // Find the word with maximum count.\n        var maxWord = sortedWords.First();\n        // Return the word with maximum count.\n        return maxWord.Key;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph00effnx.cs(22,23): error CS1002: ; expected\n/tmp/tmph00effnx.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmph00effnx.cs(22,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        var dict = new Dictionary<string, int>();\n        for (var word : words) {\n            dict.Add(word, 1);\n        }\n\n        // Find the word with maximum count\n        var maxCount = 0;\n        var maxWord = \"\";\n        for (var word : dict.Keys) {\n            if (dict[word] > maxCount) {\n                maxCount = dict[word];\n                maxWord = word;\n            }\n        }\n\n        // Return the word with maximum count\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpox2bo4yc.cs(22,23): error CS1002: ; expected\n/tmp/tmpox2bo4yc.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmpox2bo4yc.cs(22,23): error CS1001: Identifier expected\n/tmp/tmpox2bo4yc.cs(29,23): error CS1002: ; expected\n/tmp/tmpox2bo4yc.cs(29,23): error CS1525: Invalid expression term ':'\n/tmp/tmpox2bo4yc.cs(29,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        string max = \"\";\n        int maxCount = 0;\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c == ' ') {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                maxCount = count;\n                max = word;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmgv3iv7d.cs(23,26): error CS1002: ; expected\n/tmp/tmpmgv3iv7d.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmpmgv3iv7d.cs(23,26): error CS1001: Identifier expected\n/tmp/tmpmgv3iv7d.cs(25,25): error CS1002: ; expected\n/tmp/tmpmgv3iv7d.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmpmgv3iv7d.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        var wordDict = new Dictionary<string, int>();\n        for (var word : words) {\n            wordDict.Add(word, wordDict.get_Item(word) + 1);\n        }\n        // Create a list of words sorted by their counts\n        var sortedWords = wordDict.OrderBy(x => x.Value).ToList();\n        // Return the first word in the list\n        return sortedWords[0].Key;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphazp9gxk.cs(22,23): error CS1002: ; expected\n/tmp/tmphazp9gxk.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmphazp9gxk.cs(22,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        var max = 0;\n        var maxStr = \"\";\n        for (var i = 0; i < words.Count; i++) {\n            var count = 0;\n            for (var j = 0; j < words[i].Length; j++) {\n                if (count == 0) {\n                    count++;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxStr = words[i];\n            }\n        }\n        return maxStr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3a8c3d42c35b41799ee5bc11db7e3ff1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3a8c3d42c35b41799ee5bc11db7e3ff1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a hashset to store unique characters\n        HashSet<char> uniqueChars = new HashSet<char>();\n        // Create a hashset to store unique words\n        HashSet<string> uniqueWords = new HashSet<string>();\n        // Iterate through all words\n        for (string word : words) {\n            // Iterate through all characters in the word\n            for (char ch : word.ToCharArray()) {\n                // Add the character to the unique characters hashset\n                uniqueChars.Add(ch);\n            }\n            // Add the word to the unique words hashset\n            uniqueWords.Add(word);\n        }\n        // Create a string builder to store the word with maximum number of unique characters\n        stringBuilder maxWord = new stringBuilder();\n        // Iterate through all unique words\n        for (string word : uniqueWords) {\n            // Iterate through all unique characters in the word\n            for (char ch : word.ToCharArray()) {\n                // Add the character to the string builder\n                maxWord.Append(ch);\n            }\n        }\n        // Return the word with maximum number of unique characters\n        return maxWord.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp64i825zf.cs(25,26): error CS1002: ; expected\n/tmp/tmp64i825zf.cs(25,26): error CS1525: Invalid expression term ':'\n/tmp/tmp64i825zf.cs(25,26): error CS1001: Identifier expected\n/tmp/tmp64i825zf.cs(27,26): error CS1002: ; expected\n/tmp/tmp64i825zf.cs(27,26): error CS1525: Invalid expression term ':'\n/tmp/tmp64i825zf.cs(27,26): error CS1001: Identifier expected\n/tmp/tmp64i825zf.cs(37,26): error CS1002: ; expected\n/tmp/tmp64i825zf.cs(37,26): error CS1525: Invalid expression term ':'\n/tmp/tmp64i825zf.cs(37,26): error CS1001: Identifier expected\n/tmp/tmp64i825zf.cs(39,26): error CS1002: ; expected\n/tmp/tmp64i825zf.cs(39,26): error CS1525: Invalid expression term ':'\n/tmp/tmp64i825zf.cs(39,26): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        var max = \"\";\n        var maxCount = 0;\n        for (var i = 0; i < words.Count; i++) {\n            var count = 0;\n            for (var j = 0; j < words[i].Length; j++) {\n                if (words[i][j] != ' ') {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                max = words[i];\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <59e5a097f2044777aa8cc9def3ca0123>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary that maps each character to a list of words that contain that character.\n        var dictionary = new Dictionary<char, List<string>>();\n        for (var word : words) {\n            for (var c : word) {\n                if (!dictionary.ContainsKey(c)) {\n                    dictionary.Add(c, new List<string>());\n                }\n                dictionary[c].Add(word);\n            }\n        }\n        // Create a list of all characters that appear in at least one word.\n        var characters = dictionary.Keys.ToArray();\n        // Sort the list so that characters are in lexicographical order.\n        characters.Sort();\n        // Create a list of all words that contain at least one of the characters in the list.\n        var wordsWithCharacters = new List<string>();\n        for (var c : characters) {\n            for (var word : dictionary[c]) {\n                wordsWithCharacters.Add(word);\n            }\n        }\n        // Sort the list so that words are in lexicographical order.\n        wordsWithCharacters.Sort();\n        // Return the first word in the list.\n        return wordsWithCharacters.First();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0vcm6hx0.cs(22,23): error CS1002: ; expected\n/tmp/tmp0vcm6hx0.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmp0vcm6hx0.cs(22,23): error CS1001: Identifier expected\n/tmp/tmp0vcm6hx0.cs(23,24): error CS1002: ; expected\n/tmp/tmp0vcm6hx0.cs(23,24): error CS1525: Invalid expression term ':'\n/tmp/tmp0vcm6hx0.cs(23,24): error CS1001: Identifier expected\n/tmp/tmp0vcm6hx0.cs(36,20): error CS1002: ; expected\n/tmp/tmp0vcm6hx0.cs(36,20): error CS1525: Invalid expression term ':'\n/tmp/tmp0vcm6hx0.cs(36,20): error CS1001: Identifier expected\n/tmp/tmp0vcm6hx0.cs(37,27): error CS1002: ; expected\n/tmp/tmp0vcm6hx0.cs(37,27): error CS1525: Invalid expression term ':'\n/tmp/tmp0vcm6hx0.cs(37,27): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        var dict = new Dictionary<string, int>();\n        for (var word : words) {\n            dict.Add(word, dict.get_Item(word) + 1);\n        }\n        // Create a list of words with their counts\n        var wordsWithCounts = dict.Keys().ToArray();\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        // Sort the list of words with their counts\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp108ms_rx.cs(22,23): error CS1002: ; expected\n/tmp/tmp108ms_rx.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmp108ms_rx.cs(22,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                max = words[i];\n                maxCount = words[i].Length;\n            }\n            else if (words[i].Length == maxCount && words[i].CompareTo(max) < 0) {\n                max = words[i];\n                maxCount = words[i].Length;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e4f38cb0d99e434e971326648ee60366>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary that maps each character to a number.\n        // The number is the number of times the character appears in the string.\n        // The dictionary is sorted by the number of appearances.\n        // The first element of the dictionary is the character with the maximum number of appearances.\n        // The second element of the dictionary is the character with the second maximum number of appearances.\n        // The third element of the dictionary is the character with the third maximum number of appearances.\n        // The fourth element of the dictionary is the character with the fourth maximum number of appearances.\n        // The fifth element of the dictionary is the character with the fifth maximum number of appearances.\n        // The sixth element of the dictionary is the character with the sixth maximum number of appearances.\n        // The seventh element of the dictionary is the character with the seventh maximum number of appearances.\n        // The eighth element of the dictionary is the character with the eighth maximum number of appearances.\n        // The ninth element of the dictionary is the character with the ninth maximum number of appearances.\n        // The tenth element of the dictionary is the character with the tenth maximum number of appearances.\n        // The eleventh element of the dictionary is the character with the eleventh maximum number of appearances.\n        // The twelfth element of the dictionary is the character with the twelfth maximum number of appearances.\n        // The thirteenth element of the dictionary is the character with the thirteenth maximum number of appearances.\n        // The fourteenth element of the dictionary is the character with the fourteenth maximum number of appearances.\n        // The fifteenth element of the dictionary is the character with the fifteenth maximum number of appearances.\n        // The sixteenth element of the dictionary is the character with the sixteenth maximum number of appearances.\n        // The seventeenth element of the dictionary is the character with the seventeenth maximum number of appearances.\n        // The eighteenth element of the dictionary is the character with the eighteenth maximum number of appearances.\n        // The nineteenth element of the dictionary is the character with the nineteenth maximum number of appearances.\n        // The twentieth element of the dictionary is the character with the twentieth maximum number of appearances.\n        // The twenty-first element of the dictionary is the character with the twenty-first maximum number of appearances.\n        // The twenty-second element of the dictionary is the character with the twenty-second maximum number of appearances.\n        // The twenty-\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwzc2xg9z.cs(19,26): error CS0161: 'Problem.FindMax(List<string>)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (int i = 0; i < word.Length; i++) {\n                count += (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') ? 1 : 0;\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjykfa_1e.cs(22,26): error CS1002: ; expected\n/tmp/tmpjykfa_1e.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpjykfa_1e.cs(22,26): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        var max = 0;\n        var maxWord = \"\";\n        for (var i = 0; i < words.Count; i++) {\n            var count = 0;\n            for (var j = 0; j < words[i].Length; j++) {\n                count += (words[i].Substring(j, 1).ToLower() == words[i].Substring(j, 1)) ? 1 : 0;\n            }\n            if (count > max) {\n                max = count;\n                maxWord = words[i];\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f36f6d492d6f4620a1b5660fba178f38>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = \"\";\n        var maxCount = 0;\n        for (var word in words) {\n            var count = 0;\n            for (var i = 0; i < word.Length; i++) {\n                count += (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' || word[i] == 'y') ? 1 : 0;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpa76igse0.cs(22,9): error CS1003: Syntax error, 'foreach' expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary that maps each character to a list of words that\n        // contain that character.\n        Dictionary<char, List<string>> charToWords = new Dictionary<char, List<string>>();\n        for (string word : words) {\n            for (char c : word) {\n                if (!charToWords.ContainsKey(c)) {\n                    charToWords.Add(c, new List<string>());\n                }\n                charToWords[c].Add(word);\n            }\n        }\n\n        // Create a dictionary that maps each word to a list of characters that\n        // appear in that word.\n        Dictionary<string, List<char>> wordToChars = new Dictionary<string, List<char>>();\n        for (char c : charToWords.Keys) {\n            for (string word : charToWords[c]) {\n                if (!wordToChars.ContainsKey(word)) {\n                    wordToChars.Add(word, new List<char>());\n                }\n                wordToChars[word].Add(c);\n            }\n        }\n\n        // Create a dictionary that maps each character to a list of words that\n        // contain that character.\n        Dictionary<char, List<string>> charToWords2 = new Dictionary<char, List<string>>();\n        for (string word : words) {\n            for (char c : word) {\n                if (!charToWords2.ContainsKey(c)) {\n                    charToWords2.Add(c, new List<string>());\n                }\n                charToWords2[c].Add(word);\n            }\n        }\n\n        // Create a dictionary that maps each word to a list of characters that\n        // appear in that word.\n        Dictionary<string, List<char>> wordToChars2 = new Dictionary<string, List<char>>();\n        for (char c : charToWords2.Keys) {\n            for (string word : charToWords2[c]) {\n                if (!wordToChars2.ContainsKey(word)) {\n                    wordToChars2.Add(word, new List<char>());\n                }\n                wordToChars2[word].Add(c);\n            }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7adny6b5.cs(23,26): error CS1002: ; expected\n/tmp/tmp7adny6b5.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmp7adny6b5.cs(23,26): error CS1001: Identifier expected\n/tmp/tmp7adny6b5.cs(24,25): error CS1002: ; expected\n/tmp/tmp7adny6b5.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmp7adny6b5.cs(24,25): error CS1001: Identifier expected\n/tmp/tmp7adny6b5.cs(35,21): error CS1002: ; expected\n/tmp/tmp7adny6b5.cs(35,21): error CS1525: Invalid expression term ':'\n/tmp/tmp7adny6b5.cs(35,21): error CS1001: Identifier expected\n/tmp/tmp7adny6b5.cs(36,30): error CS1002: ; expected\n/tmp/tmp7adny6b5.cs(36,30): error CS1525: Invalid expression term ':'\n/tmp/tmp7adny6b5.cs(36,30): error CS1001: Identifier expected\n/tmp/tmp7adny6b5.cs(47,26): error CS1002: ; expected\n/tmp/tmp7adny6b5.cs(47,26): error CS1525: Invalid expression term ':'\n/tmp/tmp7adny6b5.cs(47,26): error CS1001: Identifier expected\n/tmp/tmp7adny6b5.cs(48,25): error CS1002: ; expected\n/tmp/tmp7adny6b5.cs(48,25): error CS1525: Invalid expression term ':'\n/tmp/tmp7adny6b5.cs(48,25): error CS1001: Identifier expected\n/tmp/tmp7adny6b5.cs(59,21): error CS1002: ; expected\n/tmp/tmp7adny6b5.cs(59,21): error CS1525: Invalid expression term ':'\n/tmp/tmp7adny6b5.cs(59,21): error CS1001: Identifier expected\n/tmp/tmp7adny6b5.cs(60,30): error CS1002: ; expected\n/tmp/tmp7adny6b5.cs(60,30): error CS1525: Invalid expression term ':'\n/tmp/tmp7adny6b5.cs(60,30): error CS1001: Identifier expected\n/tmp/tmp7adny6b5.cs(67,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp7adny6b5.cs(80,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (count == 0) {\n                    count++;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp27x03rm4.cs(22,26): error CS1002: ; expected\n/tmp/tmp27x03rm4.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmp27x03rm4.cs(22,26): error CS1001: Identifier expected\n/tmp/tmp27x03rm4.cs(24,25): error CS1002: ; expected\n/tmp/tmp27x03rm4.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmp27x03rm4.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        var dict = new Dictionary<string, int>();\n        for (var word : words) {\n            dict.Add(word, dict.ContainsKey(word) ? dict[word] + 1 : 1);\n        }\n        // Find the word with maximum count\n        var maxCount = 0;\n        var maxWord = \"\";\n        for (var word : dict.Keys) {\n            if (dict[word] > maxCount) {\n                maxCount = dict[word];\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpautpf5xf.cs(22,23): error CS1002: ; expected\n/tmp/tmpautpf5xf.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmpautpf5xf.cs(22,23): error CS1001: Identifier expected\n/tmp/tmpautpf5xf.cs(28,23): error CS1002: ; expected\n/tmp/tmpautpf5xf.cs(28,23): error CS1525: Invalid expression term ':'\n/tmp/tmpautpf5xf.cs(28,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = 0;\n        var maxWord = \"\";\n        for (var word : words) {\n            var count = word.Length;\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9oyibx6n.cs(22,23): error CS1002: ; expected\n/tmp/tmp9oyibx6n.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmp9oyibx6n.cs(22,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                max = words[i];\n                maxCount = words[i].Length;\n            }\n            else if (words[i].Length == maxCount) {\n                if (words[i].CompareTo(max) < 0) {\n                    max = words[i];\n                }\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4c3518af79aa493dbda567724559ddde>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c == ' ') {\n                    count++;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg26sq_mx.cs(22,26): error CS1002: ; expected\n/tmp/tmpg26sq_mx.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpg26sq_mx.cs(22,26): error CS1001: Identifier expected\n/tmp/tmpg26sq_mx.cs(24,25): error CS1002: ; expected\n/tmp/tmpg26sq_mx.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmpg26sq_mx.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0)\n            return \"\";\n        string max = words[0];\n        for (int i = 0; i < words.Count; i++)\n        {\n            if (words[i].Length > max.Length)\n                max = words[i];\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <32404e10ac96413ca841b2f69b83c013>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0)\n            return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                max = words[i];\n                maxCount = words[i].Length;\n            }\n            else if (words[i].Length == maxCount) {\n                if (words[i].CompareTo(max) < 0) {\n                    max = words[i];\n                }\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <651efe2f9bc347c98e43a085f7c791d8>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c == ' ') continue;\n                count++;\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpljelnpsz.cs(23,26): error CS1002: ; expected\n/tmp/tmpljelnpsz.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmpljelnpsz.cs(23,26): error CS1001: Identifier expected\n/tmp/tmpljelnpsz.cs(25,25): error CS1002: ; expected\n/tmp/tmpljelnpsz.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmpljelnpsz.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        var dict = new Dictionary<string, int>();\n        for (var word : words) {\n            dict.Add(word, dict.get_Item(word) + 1);\n        }\n        // Sort the dictionary by value\n        var sorted = dict.OrderBy(x => x.Value);\n        // Return the first element in the sorted list\n        return sorted.First().Key;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyzxva9wf.cs(22,23): error CS1002: ; expected\n/tmp/tmpyzxva9wf.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmpyzxva9wf.cs(22,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c == ' ') {\n                    count++;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg26sq_mx.cs(22,26): error CS1002: ; expected\n/tmp/tmpg26sq_mx.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpg26sq_mx.cs(22,26): error CS1001: Identifier expected\n/tmp/tmpg26sq_mx.cs(24,25): error CS1002: ; expected\n/tmp/tmpg26sq_mx.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmpg26sq_mx.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        string max = \"\";\n        int maxCount = 0;\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (count == 0) {\n                    count++;\n                }\n                else if (c != word.ToCharArray()[count - 1]) {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                maxCount = count;\n                max = word;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyih38x7w.cs(23,26): error CS1002: ; expected\n/tmp/tmpyih38x7w.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmpyih38x7w.cs(23,26): error CS1001: Identifier expected\n/tmp/tmpyih38x7w.cs(25,25): error CS1002: ; expected\n/tmp/tmpyih38x7w.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmpyih38x7w.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c == ' ') continue;\n                count++;\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnseza_7s.cs(22,26): error CS1002: ; expected\n/tmp/tmpnseza_7s.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpnseza_7s.cs(22,26): error CS1001: Identifier expected\n/tmp/tmpnseza_7s.cs(24,25): error CS1002: ; expected\n/tmp/tmpnseza_7s.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmpnseza_7s.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        var max = 0;\n        var maxWord = \"\";\n        for (var i = 0; i < words.Count; i++) {\n            var word = words[i];\n            var count = word.Count;\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp32_h8cjz.cs(25,17): error CS0815: Cannot assign method group to an implicitly-typed variable\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c == ' ') continue;\n                count++;\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnseza_7s.cs(22,26): error CS1002: ; expected\n/tmp/tmpnseza_7s.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpnseza_7s.cs(22,26): error CS1001: Identifier expected\n/tmp/tmpnseza_7s.cs(24,25): error CS1002: ; expected\n/tmp/tmpnseza_7s.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmpnseza_7s.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    count++;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpb6yc4wye.cs(23,26): error CS1002: ; expected\n/tmp/tmpb6yc4wye.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmpb6yc4wye.cs(23,26): error CS1001: Identifier expected\n/tmp/tmpb6yc4wye.cs(25,25): error CS1002: ; expected\n/tmp/tmpb6yc4wye.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmpb6yc4wye.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        var dictionary = new Dictionary<string, int>();\n        for (var word : words) {\n            dictionary.Add(word, 1);\n        }\n\n        // Sort the dictionary by value\n        var sortedDictionary = dictionary.OrderBy(x => x.Value);\n\n        // Find the word with maximum count\n        var maxWord = sortedDictionary.First();\n        return maxWord.Key;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph_f66w7h.cs(22,23): error CS1002: ; expected\n/tmp/tmph_f66w7h.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmph_f66w7h.cs(22,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = 0;\n        var maxStr = \"\";\n        for (var i = 0; i < words.Count; i++) {\n            var count = 0;\n            for (var j = 0; j < words[i].Length; j++) {\n                count += (words[i][j] == 'a' || words[i][j] == 'e' || words[i][j] == 'i' || words[i][j] == 'o' || words[i][j] == 'u' || words[i][j] == 'y') ? 1 : 0;\n            }\n            if (count > max) {\n                max = count;\n                maxStr = words[i];\n            }\n        }\n        return maxStr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <edd6269cc6214603bd919436d21d6c67>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <edd6269cc6214603bd919436d21d6c67>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        var max = \"\";\n        var maxCount = 0;\n        for (var i = 0; i < words.Count; i++) {\n            var count = 0;\n            for (var j = 0; j < words[i].Length; j++) {\n                count += (words[i][j] == 'a' || words[i][j] == 'e' || words[i][j] == 'i' || words[i][j] == 'o' || words[i][j] == 'u' || words[i][j] == 'y') ? 1 : 0;\n            }\n            if (count > maxCount) {\n                maxCount = count;\n                max = words[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dab598945d6340a9863bb2d99eea8647>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dab598945d6340a9863bb2d99eea8647>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = 0;\n        var maxWord = \"\";\n        for (var word : words) {\n            var count = 0;\n            for (var c : word) {\n                if (count == 0) {\n                    count = 1;\n                }\n                else if (count > 0 && c != count) {\n                    count = 0;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8d0dc78k.cs(22,23): error CS1002: ; expected\n/tmp/tmp8d0dc78k.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmp8d0dc78k.cs(22,23): error CS1001: Identifier expected\n/tmp/tmp8d0dc78k.cs(24,24): error CS1002: ; expected\n/tmp/tmp8d0dc78k.cs(24,24): error CS1525: Invalid expression term ':'\n/tmp/tmp8d0dc78k.cs(24,24): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = \"\";\n        var maxCount = 0;\n        for (var word in words) {\n            var count = 0;\n            for (var i = 0; i < word.Length; i++) {\n                count += (word[i] == 'a') ? 1 : 0;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpx8epfkxm.cs(22,9): error CS1003: Syntax error, 'foreach' expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c == ' ') continue;\n                count++;\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnseza_7s.cs(22,26): error CS1002: ; expected\n/tmp/tmpnseza_7s.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpnseza_7s.cs(22,26): error CS1001: Identifier expected\n/tmp/tmpnseza_7s.cs(24,25): error CS1002: ; expected\n/tmp/tmpnseza_7s.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmpnseza_7s.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c == ' ') {\n                    count++;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg26sq_mx.cs(22,26): error CS1002: ; expected\n/tmp/tmpg26sq_mx.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpg26sq_mx.cs(22,26): error CS1001: Identifier expected\n/tmp/tmpg26sq_mx.cs(24,25): error CS1002: ; expected\n/tmp/tmpg26sq_mx.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmpg26sq_mx.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        string max = \"\";\n        int maxCount = 0;\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c != ' ') {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                maxCount = count;\n                max = word;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphnat37ge.cs(23,26): error CS1002: ; expected\n/tmp/tmphnat37ge.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmphnat37ge.cs(23,26): error CS1001: Identifier expected\n/tmp/tmphnat37ge.cs(25,25): error CS1002: ; expected\n/tmp/tmphnat37ge.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmphnat37ge.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (count == 0) {\n                    count++;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp27x03rm4.cs(22,26): error CS1002: ; expected\n/tmp/tmp27x03rm4.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmp27x03rm4.cs(22,26): error CS1001: Identifier expected\n/tmp/tmp27x03rm4.cs(24,25): error CS1002: ; expected\n/tmp/tmp27x03rm4.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmp27x03rm4.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        string max = \"\";\n        int maxCount = 0;\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c != ' ') {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                maxCount = count;\n                max = word;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphnat37ge.cs(23,26): error CS1002: ; expected\n/tmp/tmphnat37ge.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmphnat37ge.cs(23,26): error CS1001: Identifier expected\n/tmp/tmphnat37ge.cs(25,25): error CS1002: ; expected\n/tmp/tmphnat37ge.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmphnat37ge.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (count == 0) {\n                    count++;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp27x03rm4.cs(22,26): error CS1002: ; expected\n/tmp/tmp27x03rm4.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmp27x03rm4.cs(22,26): error CS1001: Identifier expected\n/tmp/tmp27x03rm4.cs(24,25): error CS1002: ; expected\n/tmp/tmp27x03rm4.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmp27x03rm4.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        var dict = new Dictionary<string, int>();\n        for (var word : words) {\n            dict.Add(word, dict.get_Item(word) + 1);\n        }\n        // Get the keys of the dictionary and sort them\n        var keys = dict.Keys.ToArray();\n        keys.Sort();\n        // Get the first element of the sorted keys\n        var max = keys[0];\n        // Get the count of the first element\n        var count = dict.get_Item(max);\n        // Compare the count of the first element with the other elements\n        for (var key : keys) {\n            if (dict.get_Item(key) == count) {\n                // If the count of the first element is the same as the other elements,\n                // then the first element is the one with maximum count\n                max = key;\n            }\n            else {\n                // If the count of the first element is not the same as the other elements,\n                // then the first element is not the one with maximum count\n                break;\n            }\n        }\n        // Return the first element\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxdvsifcf.cs(22,23): error CS1002: ; expected\n/tmp/tmpxdvsifcf.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmpxdvsifcf.cs(22,23): error CS1001: Identifier expected\n/tmp/tmpxdvsifcf.cs(33,22): error CS1002: ; expected\n/tmp/tmpxdvsifcf.cs(33,22): error CS1525: Invalid expression term ':'\n/tmp/tmpxdvsifcf.cs(33,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = 0;\n        var maxWord = \"\";\n        for (var word : words) {\n            var count = 0;\n            for (var ch : word) {\n                count += (ch == ' ') ? 0 : 1;\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgvq0fyg3.cs(22,23): error CS1002: ; expected\n/tmp/tmpgvq0fyg3.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmpgvq0fyg3.cs(22,23): error CS1001: Identifier expected\n/tmp/tmpgvq0fyg3.cs(24,25): error CS1002: ; expected\n/tmp/tmpgvq0fyg3.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmpgvq0fyg3.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                max = words[i];\n                maxCount = words[i].Length;\n            }\n            else if (words[i].Length == maxCount) {\n                if (words[i].CompareTo(max) < 0) {\n                    max = words[i];\n                }\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4c3518af79aa493dbda567724559ddde>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts.\n        var dict = new Dictionary<string, int>();\n        for (var word : words) {\n            dict.Add(word, dict.get_Item(word) + 1);\n        }\n\n        // Find the word with maximum count.\n        var maxCount = 0;\n        var maxWord = \"\";\n        for (var word in dict) {\n            if (dict[word] > maxCount) {\n                maxCount = dict[word];\n                maxWord = word;\n            }\n        }\n\n        // Return the word with maximum count.\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjqljgvxe.cs(22,23): error CS1002: ; expected\n/tmp/tmpjqljgvxe.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmpjqljgvxe.cs(22,23): error CS1001: Identifier expected\n/tmp/tmpjqljgvxe.cs(29,9): error CS1003: Syntax error, 'foreach' expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c != ' ') {\n                    count++;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbqtxqgt6.cs(23,26): error CS1002: ; expected\n/tmp/tmpbqtxqgt6.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmpbqtxqgt6.cs(23,26): error CS1001: Identifier expected\n/tmp/tmpbqtxqgt6.cs(25,25): error CS1002: ; expected\n/tmp/tmpbqtxqgt6.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmpbqtxqgt6.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        string max = words[0];\n        for (int i = 0; i < words.Count; i++) {\n            if (words[i].Length > max.Length) {\n                max = words[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd1f783847484f9ca49e9c5be6a1be65>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary that contains all the words in the list.\n        // The dictionary is a dictionary of string to int.\n        Dictionary<string, int> dict = new Dictionary<string, int>();\n        for (string word : words) {\n            dict.Add(word, 1);\n        }\n\n        // Create a list of words that have the maximum number of unique characters.\n        List<string> maxWords = new List<string>();\n        for (string word : dict.Keys) {\n            if (dict[word] == maxWords.Count) {\n                maxWords.Add(word);\n            }\n        }\n\n        // Return the first word in the list.\n        return maxWords.FirstOrDefault();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpi_gajy82.cs(23,26): error CS1002: ; expected\n/tmp/tmpi_gajy82.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmpi_gajy82.cs(23,26): error CS1001: Identifier expected\n/tmp/tmpi_gajy82.cs(29,26): error CS1002: ; expected\n/tmp/tmpi_gajy82.cs(29,26): error CS1525: Invalid expression term ':'\n/tmp/tmpi_gajy82.cs(29,26): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (count == 0) {\n                    count++;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp27x03rm4.cs(22,26): error CS1002: ; expected\n/tmp/tmp27x03rm4.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmp27x03rm4.cs(22,26): error CS1001: Identifier expected\n/tmp/tmp27x03rm4.cs(24,25): error CS1002: ; expected\n/tmp/tmp27x03rm4.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmp27x03rm4.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        var dict = new Dictionary<string, int>();\n        for (var word : words) {\n            dict.Add(word, dict.ContainsKey(word) ? dict[word] + 1 : 1);\n        }\n\n        // Find the word with maximum count\n        var maxCount = 0;\n        var maxWord = \"\";\n        for (var word : dict.Keys) {\n            if (dict[word] > maxCount) {\n                maxCount = dict[word];\n                maxWord = word;\n            }\n        }\n\n        // Return the word with maximum count\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1u_xifyz.cs(22,23): error CS1002: ; expected\n/tmp/tmp1u_xifyz.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmp1u_xifyz.cs(22,23): error CS1001: Identifier expected\n/tmp/tmp1u_xifyz.cs(29,23): error CS1002: ; expected\n/tmp/tmp1u_xifyz.cs(29,23): error CS1525: Invalid expression term ':'\n/tmp/tmp1u_xifyz.cs(29,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        var dict = new Dictionary<string, int>();\n        for (var word : words) {\n            dict.Add(word, 1);\n        }\n\n        // Find the word with maximum number of unique characters\n        var max = dict.Keys().First();\n        for (var key in dict) {\n            if (dict[key] > dict[max]) {\n                max = key;\n            }\n        }\n\n        // Return the word with maximum number of unique characters\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3bxplcq6.cs(22,23): error CS1002: ; expected\n/tmp/tmp3bxplcq6.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmp3bxplcq6.cs(22,23): error CS1001: Identifier expected\n/tmp/tmp3bxplcq6.cs(28,9): error CS1003: Syntax error, 'foreach' expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = 0;\n        var maxStr = \"\";\n        for (var i = 0; i < words.Count; i++) {\n            var count = 0;\n            for (var j = 0; j < words[i].Length; j++) {\n                if (words[i][j] != ' ') {\n                    count++;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxStr = words[i];\n            }\n        }\n        return maxStr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8b83feb345b24dd2a619d241a7577c4f>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        Hashtable<string, int> wordCounts = new Hashtable<string, int>();\n        for (string word : words) {\n            if (wordCounts.ContainsKey(word)) {\n                wordCounts[word]++;\n            }\n            else {\n                wordCounts[word] = 1;\n            }\n        }\n        // Sort the words in the dictionary by their counts\n        List<KeyValuePair<string, int>> sortedWords =\n            wordCounts.ToSortedList(new KeyValuePairComparer<string, int>());\n        // Return the first word in the sorted list\n        return sortedWords.First().Key;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyvbsmqhk.cs(22,26): error CS1002: ; expected\n/tmp/tmpyvbsmqhk.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpyvbsmqhk.cs(22,26): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        string max = words[0];\n        for (int i = 0; i < words.Count; i++) {\n            if (words[i].Length > max.Length) max = words[i];\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <13a62cd75b1043a69ac36d7fd1e789bd>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                max = words[i];\n                maxCount = words[i].Length;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <99909aa8faaa4f7da27edccea8b227fd>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        var dict = new Dictionary<string, int>();\n        for (var word : words) {\n            dict.Add(word, dict.get_Item(word) + 1);\n        }\n        // Get the keys of the dictionary\n        var keys = dict.Keys();\n        // Sort the keys based on their values\n        keys.Sort((a, b) => dict[a] > dict[b] ? -1 : 1);\n        // Return the first key\n        return keys[0];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprmz5n8gc.cs(22,23): error CS1002: ; expected\n/tmp/tmprmz5n8gc.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmprmz5n8gc.cs(22,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts\n        var dict = new Dictionary<string, int>();\n        for (var word : words) {\n            dict.Add(word, dict.get_Item(word) + 1);\n        }\n\n        // Find the word with maximum count\n        var max = dict.OrderByDescending(x => x.Value);\n        return max.Key;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4g6hgdbw.cs(22,23): error CS1002: ; expected\n/tmp/tmp4g6hgdbw.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmp4g6hgdbw.cs(22,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') ? 1 : 0;\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3yj5w6cu.cs(22,26): error CS1002: ; expected\n/tmp/tmp3yj5w6cu.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmp3yj5w6cu.cs(22,26): error CS1001: Identifier expected\n/tmp/tmp3yj5w6cu.cs(24,25): error CS1002: ; expected\n/tmp/tmp3yj5w6cu.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmp3yj5w6cu.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        string max = \"\";\n        int maxCount = 0;\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c == ' ') {\n                    continue;\n                }\n                count++;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy0ehsucp.cs(23,26): error CS1002: ; expected\n/tmp/tmpy0ehsucp.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmpy0ehsucp.cs(23,26): error CS1001: Identifier expected\n/tmp/tmpy0ehsucp.cs(25,25): error CS1002: ; expected\n/tmp/tmpy0ehsucp.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmpy0ehsucp.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary that maps each character to a unique integer.\n        // The dictionary will be used to count the number of unique characters\n        // in each word.\n        Dictionary<char, int> charDict = new Dictionary<char, int>();\n        for (char c : \"abcdefghijklmnopqrstuvwxyz\".ToCharArray()) {\n            charDict[c] = 0;\n        }\n        // Create a dictionary that maps each word to a unique integer.\n        // The dictionary will be used to count the number of words that\n        // contain the same number of unique characters.\n        Dictionary<string, int> wordDict = new Dictionary<string, int>();\n        for (string word : words) {\n            wordDict[word] = 0;\n        }\n        // Count the number of unique characters in each word.\n        for (string word : words) {\n            for (char c : word.ToCharArray()) {\n                charDict[c]++;\n            }\n        }\n        // Count the number of words that contain the same number of unique characters.\n        for (string word : words) {\n            wordDict[word]++;\n        }\n        // Find the word with maximum number of unique characters.\n        string maxWord = \"\";\n        int maxCharCount = 0;\n        for (string word : words) {\n            if (wordDict[word] > maxCharCount) {\n                maxCharCount = wordDict[word];\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpv2yd8chi.cs(24,21): error CS1002: ; expected\n/tmp/tmpv2yd8chi.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmpv2yd8chi.cs(24,21): error CS1001: Identifier expected\n/tmp/tmpv2yd8chi.cs(31,26): error CS1002: ; expected\n/tmp/tmpv2yd8chi.cs(31,26): error CS1525: Invalid expression term ':'\n/tmp/tmpv2yd8chi.cs(31,26): error CS1001: Identifier expected\n/tmp/tmpv2yd8chi.cs(35,26): error CS1002: ; expected\n/tmp/tmpv2yd8chi.cs(35,26): error CS1525: Invalid expression term ':'\n/tmp/tmpv2yd8chi.cs(35,26): error CS1001: Identifier expected\n/tmp/tmpv2yd8chi.cs(36,25): error CS1002: ; expected\n/tmp/tmpv2yd8chi.cs(36,25): error CS1525: Invalid expression term ':'\n/tmp/tmpv2yd8chi.cs(36,25): error CS1001: Identifier expected\n/tmp/tmpv2yd8chi.cs(41,26): error CS1002: ; expected\n/tmp/tmpv2yd8chi.cs(41,26): error CS1525: Invalid expression term ':'\n/tmp/tmpv2yd8chi.cs(41,26): error CS1001: Identifier expected\n/tmp/tmpv2yd8chi.cs(47,26): error CS1002: ; expected\n/tmp/tmpv2yd8chi.cs(47,26): error CS1525: Invalid expression term ':'\n/tmp/tmpv2yd8chi.cs(47,26): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        int max = 0;\n        string max_word = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (count == 0) {\n                    count++;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count > max) {\n                max = count;\n                max_word = word;\n            }\n        }\n        return max_word;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptcx0vz2a.cs(23,26): error CS1002: ; expected\n/tmp/tmptcx0vz2a.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmptcx0vz2a.cs(23,26): error CS1001: Identifier expected\n/tmp/tmptcx0vz2a.cs(25,25): error CS1002: ; expected\n/tmp/tmptcx0vz2a.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmptcx0vz2a.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0)\n            return \"\";\n        string max = words[0];\n        for (int i = 1; i < words.Count; i++)\n        {\n            if (words[i].Length > max.Length)\n                max = words[i];\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b02eb7237917477f8771f9e7eec29984>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                max = words[i];\n                maxCount = words[i].Length;\n            }\n            else if (words[i].Length == maxCount) {\n                if (words[i].CompareTo(max) < 0) {\n                    max = words[i];\n                }\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4c3518af79aa493dbda567724559ddde>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = \"\";\n        var maxCount = 0;\n        for (var word : words) {\n            var count = word.Length;\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgo3kofgs.cs(22,23): error CS1002: ; expected\n/tmp/tmpgo3kofgs.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmpgo3kofgs.cs(22,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = 0;\n        var maxWord = \"\";\n        for (var word in words) {\n            var count = word.Length;\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1z_5_tpj.cs(22,9): error CS1003: Syntax error, 'foreach' expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary that contains all the words in the list.\n        // The dictionary is a dictionary of string to int.\n        // The value of each key is the number of times the key occurs in the list.\n        Dictionary<string, int> dict = new Dictionary<string, int>();\n        for (string word : words) {\n            dict.Add(word, 1);\n        }\n\n        // Create a list of all the words in the dictionary.\n        // The list is sorted in lexicographical order.\n        List<string> sortedWords = new List<string>(dict.Keys);\n        sortedWords.Sort();\n\n        // Create a list of all the words in the dictionary that have the maximum number of unique characters.\n        // The list is sorted in lexicographical order.\n        List<string> maxWords = new List<string>();\n        for (string word : sortedWords) {\n            if (dict[word] == sortedWords.Count) {\n                maxWords.Add(word);\n            }\n        }\n\n        // Return the first word in the list.\n        return maxWords.FirstOrDefault();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpprmpjhdd.cs(24,26): error CS1002: ; expected\n/tmp/tmpprmpjhdd.cs(24,26): error CS1525: Invalid expression term ':'\n/tmp/tmpprmpjhdd.cs(24,26): error CS1001: Identifier expected\n/tmp/tmpprmpjhdd.cs(36,26): error CS1002: ; expected\n/tmp/tmpprmpjhdd.cs(36,26): error CS1525: Invalid expression term ':'\n/tmp/tmpprmpjhdd.cs(36,26): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Create a dictionary of words and their counts.\n        var dictionary = new Dictionary<string, int>();\n        for (var word : words) {\n            dictionary.Add(word, 0);\n        }\n        // Find the word with maximum number of unique characters.\n        var max = \"\";\n        var maxCount = 0;\n        for (var word : dictionary.Keys) {\n            if (dictionary[word] > maxCount) {\n                max = word;\n                maxCount = dictionary[word];\n            }\n        }\n        // Return the word with maximum number of unique characters.\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdbw5br79.cs(22,23): error CS1002: ; expected\n/tmp/tmpdbw5br79.cs(22,23): error CS1525: Invalid expression term ':'\n/tmp/tmpdbw5br79.cs(22,23): error CS1001: Identifier expected\n/tmp/tmpdbw5br79.cs(28,23): error CS1002: ; expected\n/tmp/tmpdbw5br79.cs(28,23): error CS1525: Invalid expression term ':'\n/tmp/tmpdbw5br79.cs(28,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord = \"\";\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') ? 1 : 0;\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc0x5sin3.cs(22,26): error CS1002: ; expected\n/tmp/tmpc0x5sin3.cs(22,26): error CS1525: Invalid expression term ':'\n/tmp/tmpc0x5sin3.cs(22,26): error CS1001: Identifier expected\n/tmp/tmpc0x5sin3.cs(24,25): error CS1002: ; expected\n/tmp/tmpc0x5sin3.cs(24,25): error CS1525: Invalid expression term ':'\n/tmp/tmpc0x5sin3.cs(24,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        string max = \"\";\n        int maxCount = 0;\n        for (string word : words) {\n            int count = 0;\n            for (char c : word.ToCharArray()) {\n                if (c == ' ') {\n                    continue;\n                }\n                count++;\n            }\n            if (count > maxCount) {\n                maxCount = count;\n                max = word;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4liqa44h.cs(23,26): error CS1002: ; expected\n/tmp/tmp4liqa44h.cs(23,26): error CS1525: Invalid expression term ':'\n/tmp/tmp4liqa44h.cs(23,26): error CS1001: Identifier expected\n/tmp/tmp4liqa44h.cs(25,25): error CS1002: ; expected\n/tmp/tmp4liqa44h.cs(25,25): error CS1525: Invalid expression term ':'\n/tmp/tmp4liqa44h.cs(25,25): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0)\n            return \"\";\n        string max = words[0];\n        int maxCount = words[0].Length;\n        for (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > maxCount) {\n                maxCount = words[i].Length;\n                max = words[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc7866be06d04b57aeb3fc8e3715b592>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = 0;\n        var maxStr = \"\";\n        for (var word in words) {\n            var count = 0;\n            for (var ch in word) {\n                count += (ch.ToLower() == ch) ? 1 : 0;\n            }\n            if (count > max) {\n                max = count;\n                maxStr = word;\n            }\n        }\n        return maxStr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1chucdpi.cs(22,9): error CS1003: Syntax error, 'foreach' expected\n/tmp/tmp1chucdpi.cs(24,13): error CS1003: Syntax error, 'foreach' expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        // Write your code here\n        if (words.Count == 0) return \"\";\n        string max = words[0];\n        for (int i = 0; i < words.Count; i++) {\n            if (words[i].Length > max.Length) {\n                max = words[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd1f783847484f9ca49e9c5be6a1be65>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = \"\";\n        var maxCount = 0;\n        for (var word in words) {\n            var count = word.Length;\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt7mrn01w.cs(22,9): error CS1003: Syntax error, 'foreach' expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}