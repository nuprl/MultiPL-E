{
  "name": "HumanEval_15_string_sequence",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static string StringSequence(long n) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n",
  "completions": [
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString();\n            if (i < n) result += \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;\n    }\n\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> StringSequence((0L, 1L, 2L, 3L, 4L, 5L))\n    // (\"0 1 2 3 4 5\")\n    public static string StringSequence(long n, long... numbers) {\n        string result = \"\";\n        for (long i = 0; i < numbers.Length; i++) {\n            result += numbers[i].ToString() + \" \";\n        }\n        return result;\n    }\n\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> StringSequence((0L, 1L, 2L, 3L, 4L, 5L))\n    // (\"0 1 2 3 4 5\")\n    public static string StringSequence(long n, IEnumerable<long> numbers) {\n        string result = \"\";\n        foreach (long i in numbers) {\n            result += i.ToString() + \" \";\n        }\n        return result;\n    }\n\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> StringSequence((0L, 1L, 2L, 3L, 4L, 5L))\n    // (\"0 1 2 3 4 5\")\n    public static string StringSequence(long n, IEnumerable<long> numbers, IEnumerator<long> enumerator) {\n        string result = \"\";\n        while (enumerator.MoveNext()) {\n            result += enumerator.Current.ToString() + \" \";\n        }\n        return result;\n    }\n\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> StringSequence((0L, 1L, 2L, 3L, 4L, 5L))\n    // (\"0 1 2 3 4 5\")\n    public static string StringSequence(long n, IEnumerable<long> numbers, IEnumerator<long",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        if (n < 0)\n            throw new Exception(\"Negative number not allowed\");\n        if (n == 0)\n            return \"\";\n        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString();\n            if (i < n) result += \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString();\n            if (i < n) result += \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;\n    }\n\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> StringSequence((0L, 1L))\n    // (\"0 1\")\n    // >>> StringSequence((5L, 2L))\n    // (\"0 1 2 3 4 5\")\n    public static string StringSequence(long n, long start) {\n        string result = \"\";\n        for (long i = start; i <= n; i++)\n            result += i + \" \";\n        return result;\n    }\n\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> StringSequence((0L, 1L, 2L))\n    // (\"0 1 2\")\n    // >>> StringSequence((5L, 2L, 3L))\n    // (\"0 1 2 3 4 5\")\n    public static string StringSequence(long n, long start, long step) {\n        string result = \"\";\n        for (long i = start; i <= n; i += step)\n            result += i + \" \";\n        return result;\n    }\n\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> StringSequence((0L, 1L, 2L, 3L))\n    // (\"0 1 2 3\")\n    // >>> StringSequence((5L, 2L, 3L, 4L))\n    // (\"0 1 2 3 4 5\")\n    public static string StringSequence(long n, long start, long step, long end) {\n        string result = \"\";\n        for (long i = start; i <= n; i += step)\n            result += i + \" \";\n        return result;\n    }\n\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> StringSequence((0L, 1L, 2L, 3L, 4L))\n    // (\"0 1 2 3 4\")\n    // >>> StringSequence((5L, 2L, 3L, 4L,",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString();\n            if (i < n) result += \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i.ToString() + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString();\n            if (i < n) result += \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        if (n < 0)\n            throw new Exception(\"n should be non-negative\");\n        if (n == 0)\n            return \"\";\n        string result = \"\";\n        for (long i = 0; i < n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString();\n            if (i < n)\n                result += \" \";\n        }\n        return result;\n    }\n\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> StringSequence((0L, 1L, 2L, 3L, 4L, 5L))\n    // (\"0 1 2 3 4 5\")\n    public static string StringSequence(long n, long... numbers) {\n        string result = \"\";\n        for (long i = 0; i < numbers.Length; i++) {\n            result += numbers[i].ToString();\n            if (i < numbers.Length - 1)\n                result += \" \";\n        }\n        return result;\n    }\n\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> StringSequence((0L, 1L, 2L, 3L, 4L, 5L), (6L, 7L, 8L, 9L, 10L, 11L))\n    // (\"0 1 2 3 4 5 6 7 8 9 10 11\")\n    public static string StringSequence(long n, IEnumerable<long> numbers) {\n        string result = \"\";\n        foreach (long i in numbers) {\n            result += i.ToString();\n            if (i < n)\n                result += \" \";\n        }\n        return result;\n    }\n\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> StringSequence((0L, 1L, 2L, 3L, 4L, 5L), (6L, 7L, 8L, 9L, 10L, 11L), (12L, 13L, 14L, 15L, 16L, 17L))\n    // (\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\")\n    public static string StringSequence(long n, IEnumerable<long> numbers, IEnumerable<long> numbers2) {\n        string result = \"\";\n        foreach (long i in numbers) {\n",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        return String.Join(\" \", Enumerable.Range(0, n).ToArray());",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return \"\";\n        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        if (n < 0)\n            throw new Exception(\"Negative number not allowed\");\n        if (n == 0)\n            return \"0\";\n        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        if (n < 0)\n            throw new Exception(\"n must be non-negative\");\n        if (n == 0)\n            return \"\";\n        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;\n    }\n\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> StringSequence((0L, 1L, 2L, 3L, 4L, 5L))\n    // (\"0 1 2 3 4 5\")\n    public static string StringSequence(long n, long... numbers) {\n        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        for (long i = 0; i < numbers.Length; i++) {\n            result += numbers[i].ToString() + \" \";\n        }\n        return result;\n    }\n\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> StringSequence((0L, 1L, 2L, 3L, 4L, 5L), (6L, 7L, 8L, 9L, 10L, 11L))\n    // (\"0 1 2 3 4 5 6 7 8 9 10 11\")\n    public static string StringSequence(long n, IEnumerable<long> numbers) {\n        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        for (long i = 0; i < numbers.Count; i++) {\n            result += numbers[i].ToString() + \" \";\n        }\n        return result;\n    }\n\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> StringSequence((0L, 1L, 2L, 3L, 4L, 5L), (6L, 7L, 8L, 9L, 10L, 11L), (12L, 13L, 14L, 15L, 16L, 17L))\n    // (\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\")\n    public static string StringSequence(long n, I",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        if (n < 0)\n            throw new Exception(\"n must be >= 0\");\n        if (n == 0)\n            return \"\";\n        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        if (n < 0)\n            throw new Exception(\"Negative argument\");\n        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;\n    }\n\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> StringSequence((0L, 1L, 2L, 3L, 4L, 5L))\n    // (\"0 1 2 3 4 5\")\n    public static string StringSequence(long n, long... numbers) {\n        string result = \"\";\n        for (long i = 0; i < numbers.Length; i++)\n            result += numbers[i] + \" \";\n        return result;\n    }\n\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> StringSequence((0L, 1L, 2L, 3L, 4L, 5L))\n    // (\"0 1 2 3 4 5\")\n    public static string StringSequence(long n, IEnumerable<long> numbers) {\n        string result = \"\";\n        foreach (long i in numbers)\n            result += i + \" \";\n        return result;\n    }\n\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> StringSequence((0L, 1L, 2L, 3L, 4L, 5L))\n    // (\"0 1 2 3 4 5\")\n    public static string StringSequence(long n, IEnumerator<long> numbers) {\n        string result = \"\";\n        while (numbers.MoveNext())\n            result += numbers.Current + \" \";\n        return result;\n    }\n\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> StringSequence((0L, 1L, 2L, 3L, 4L, 5L))\n    // (\"0 1 2 3 4 5\")\n    public static string StringSequence(long n, IList<long> numbers) {\n        string result = \"\";\n        for (long i = 0; i < numbers.Count; i++)\n            result += numbers[i] + \" \";\n        return result;\n    }\n\n    // Return",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        return String.Join(\" \", Enumerable.Range(0, n).ToArray());",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString();\n            if (i < n) result += \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        if (n < 0)\n            throw new Exception(\"n must be non-negative\");\n        if (n == 0)\n            return \"\";\n        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        if (n < 0)\n            throw new Exception(\"Negative argument\");\n        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;\n    }\n\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> StringSequence((0L, 1L, 2L, 3L, 4L, 5L))\n    // (\"0 1 2 3 4 5\")\n    // >>> StringSequence((0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 42L, 43L, 44L, 45L, 46L, 47L, 48L, 49L, 50L, 51L, 52L, 53L, 54L, 55L, 56L, 57L, 58L, 59L, 60L, 61L, 62L, 63L, 64L, 65L, 66L, 67L, 68L, 69L, 70L, 71L, 72L, 73L, 74L, 75L, 76L, 77L, 78L, 79L, 80L, 81L, 82L, 83L, 84L, 85L, 86L, 87L, 88L, 89L, 90L, 91L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L, 100L, 101L, 102L, 103L, 104L, 105L, 106L, 107L, 108L, 109L, 110L, 111L, 112L, 113L, 114L, 115L, 116L, 117L, 118L, 119L, 120L, 121L, 122L, 123L, 124L, 125L, 126L, 127L, 128L, 129L, 130L, 131L, 132L, 133",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString();\n            if (i < n) result += \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString();\n            if (i < n)\n                result += \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;\n    }\n\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> StringSequence((0L, 1L))\n    // (\"0 1\")\n    // >>> StringSequence((5L, 2L))\n    // (\"0 1 2 3 4 5 2\")\n    public static string StringSequence(long n, long start) {\n        string result = \"\";\n        for (long i = start; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;\n    }\n\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> StringSequence((0L, 1L, 2L))\n    // (\"0 1 2\")\n    // >>> StringSequence((5L, 2L, 3L))\n    // (\"0 1 2 3 4 5 2 3\")\n    public static string StringSequence(long n, long start, long step) {\n        string result = \"\";\n        for (long i = start; i <= n; i += step) {\n            result += i + \" \";\n        }\n        return result;\n    }\n\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> StringSequence((0L, 1L, 2L, 3L))\n    // (\"0 1 2 3\")\n    // >>> StringSequence((5L, 2L, 3L, 4L))\n    // (\"0 1 2 3 4 5 2 3 4\")\n    public static string StringSequence(long n, long start, long step, long skip) {\n        string result = \"\";\n        for (long i = start; i <= n; i += step) {\n            if (i % skip != 0) {\n                result += i + \" \";\n            }\n        }\n        return result;\n    }\n\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> StringSequence((0L, 1L, 2L,",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        return String.Join(\" \", Enumerable.Range(0, n).ToArray());",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        return String.Join(\" \", Enumerable.Range(0L, n));",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString();\n            if (i < n) result += \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString();\n            if (i < n) result += \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        return String.Join(\" \", Enumerable.Range(0L, n).ToArray());",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;",
    "        if (n < 0)\n            throw new Exception(\"n must be non-negative\");\n        if (n == 0)\n            return \"\";\n        string result = \"\";\n        for (long i = 0; i <= n; i++)\n            result += i + \" \";\n        return result;",
    "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return result;"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}