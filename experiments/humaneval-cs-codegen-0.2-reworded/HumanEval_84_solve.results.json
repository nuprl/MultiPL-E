{
  "name": "HumanEval_84_solve",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        if (N < 0)\n            throw new Exception(\"N must be positive\");\n        if (N > 10000)\n            throw new Exception(\"N must be less than 10000\");\n        return String.Join(\"\", Enumerable.Of(N).Select(x => String.PadLeft(String.Format(\"{0:b}\", x), 4, \"0\")).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjv1wdchg.cs(27,43): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N < 0)\n            return \"\";\n        if (N < 10)\n            return String.Format(\"{0}\", N);\n        if (N < 100)\n            return String.Format(\"{0}\", N / 10) + String.Format(\"{0}\", N % 10);\n        if (N < 1000)\n            return String.Format(\"{0}\", N / 100) + String.Format(\"{0}\", N % 100);\n        if (N < 10000)\n            return String.Format(\"{0}\", N / 1000) + String.Format(\"{0}\", N % 1000);\n        return String.Format(\"{0}\", N / 10000) + String.Format(\"{0}\", N % 10000);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e83acec4e5504622bf5d3b1afcecd829>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e83acec4e5504622bf5d3b1afcecd829>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        string result = \"\";\n        while (N > 0) {\n            result = (char)(N % 2 + 48) + result;\n            N /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a6d85343230741d88ced5c3cb6961689>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a6d85343230741d88ced5c3cb6961689>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) return \"\";\n        if (N == 0) return \"0\";\n        string s = \"\";\n        while (N > 0) {\n            s = s + (N % 2) + \"\";\n            N = N / 2;\n        }\n        return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <34375f2c80d947b8ac0dbfa2eb078f18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <34375f2c80d947b8ac0dbfa2eb078f18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        if (N < 0) return \"\";\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7dh2g1k_.cs(63,21): error CS1525: Invalid expression term '}'\n/tmp/tmp7dh2g1k_.cs(63,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N <= 0) {\n            return \"0\";\n        }\n        if (N == 1) {\n            return \"1\";\n        }\n        if (N == 2) {\n            return \"10\";\n        }\n        if (N == 3) {\n            return \"11\";\n        }\n        if (N == 4) {\n            return \"100\";\n        }\n        if (N == 5) {\n            return \"101\";\n        }\n        if (N == 6) {\n            return \"110\";\n        }\n        if (N == 7) {\n            return \"111\";\n        }\n        if (N == 8) {\n            return \"1000\";\n        }\n        if (N == 9) {\n            return \"1001\";\n        }\n        if (N == 10) {\n            return \"1010\";\n        }\n        if (N == 11) {\n            return \"1011\";\n        }\n        if (N == 12) {\n            return \"1100\";\n        }\n        if (N == 13) {\n            return \"1101\";\n        }\n        if (N == 14) {\n            return \"1110\";\n        }\n        if (N == 15) {\n            return \"1111\";\n        }\n        if (N == 16) {\n            return \"10000\";\n        }\n        if (N == 17) {\n            return \"10001\";\n        }\n        if (N == 18) {\n            return \"10010\";\n        }\n        if (N == 19) {\n            return \"10011\";\n        }\n        if (N == 20) {\n            return \"10100\";\n        }\n        if (N == 21) {\n            return \"10101\";\n        }\n        if (N == 22) {\n            return \"10110\";\n        }\n        if (N == 23) {\n            return \"10111\";\n        }\n        if (N == 24) {\n            return \"11000\";\n        }\n        if (N == 25) {\n            return \"11001\";\n        }\n        if (N == 26) {\n            return \"11010\";\n        }\n        if (N ==\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyjdv_a1d.cs(105,17): error CS1525: Invalid expression term '}'\n/tmp/tmpyjdv_a1d.cs(105,17): error CS1026: ) expected\n/tmp/tmpyjdv_a1d.cs(105,17): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        string result = \"\";\n        while (N > 0) {\n            result = (char)(N % 2 + 48) + result;\n            N = N / 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2fd3271a55e249488b95087265179ea8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2fd3271a55e249488b95087265179ea8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        if (N < 0) {\n            throw new Exception(\"N must be a positive integer\");\n        }\n        if (N > 10000) {\n            throw new Exception(\"N must be less than 10000\");\n        }\n        // Write your code here\n        return String.Join(\"\", Enumerable.Range(0, N).Select(x => (N % 2 == 0) ? \"0\" : \"1\").ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmhvabpcv.cs(30,52): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return \"100001\";\n        if (N == 34)\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4ebmp54v.cs(92,21): error CS1525: Invalid expression term '}'\n/tmp/tmp4ebmp54v.cs(92,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        return N.ToString(2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn_opbhdx.cs(24,27): error CS1503: Argument 1: cannot convert from 'int' to 'System.IFormatProvider'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) {\n            throw new Exception(\"N should be positive\");\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        if (N == 1) {\n            return \"1\";\n        }\n        if (N == 2) {\n            return \"10\";\n        }\n        if (N == 3) {\n            return \"11\";\n        }\n        if (N == 4) {\n            return \"100\";\n        }\n        if (N == 5) {\n            return \"101\";\n        }\n        if (N == 6) {\n            return \"110\";\n        }\n        if (N == 7) {\n            return \"111\";\n        }\n        if (N == 8) {\n            return \"1000\";\n        }\n        if (N == 9) {\n            return \"1001\";\n        }\n        if (N == 10) {\n            return \"1010\";\n        }\n        if (N == 11) {\n            return \"1011\";\n        }\n        if (N == 12) {\n            return \"1100\";\n        }\n        if (N == 13) {\n            return \"1101\";\n        }\n        if (N == 14) {\n            return \"1110\";\n        }\n        if (N == 15) {\n            return \"1111\";\n        }\n        if (N == 16) {\n            return \"10000\";\n        }\n        if (N == 17) {\n            return \"10001\";\n        }\n        if (N == 18) {\n            return \"10010\";\n        }\n        if (N == 19) {\n            return \"10011\";\n        }\n        if (N == 20) {\n            return \"10100\";\n        }\n        if (N == 21) {\n            return \"10101\";\n        }\n        if (N == 22) {\n            return \"10110\";\n        }\n        if (N == 23) {\n            return \"10111\";\n        }\n        if (N == 24) {\n            return \"11000\";\n        }\n        if (N == 25) {\n            return \"11001\";\n        }\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpadpdrln5.cs(22,26): error CS0161: 'Problem.Solve(long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        int count = 0;\n        while (N > 0) {\n            count++;\n            N = N / 2;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < count; i++) {\n            sb.Append(\"1\");\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5fb584b4c4e14cc1a902b6cad37abbf4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5fb584b4c4e14cc1a902b6cad37abbf4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return \"100001\";\n        if (N == 34)\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4ebmp54v.cs(92,21): error CS1525: Invalid expression term '}'\n/tmp/tmp4ebmp54v.cs(92,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        return N.ToString(\"b\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) {\n            throw new Exception(\"N must be positive\");\n        }\n        if (N > 10000) {\n            throw new Exception(\"N must be less than 10000\");\n        }\n        return String.Join(\"\", Enumerable.Range(0, N).Select(x => (N % 2 == 0) ? \"0\" : \"1\").ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl51kxtoz.cs(30,52): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        if (N < 0)\n            throw new Exception(\"N should be a positive integer.\");\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc9hbc263.cs(91,21): error CS1525: Invalid expression term '}'\n/tmp/tmpc9hbc263.cs(91,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp45tx2pd6.cs(26,13): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N < 0) return \"\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5q8972dt.cs(22,26): error CS0161: 'Problem.Solve(long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return \"100001\";\n        if (N == 34)\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4ebmp54v.cs(92,21): error CS1525: Invalid expression term '}'\n/tmp/tmp4ebmp54v.cs(92,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        string result = \"\";\n        while (N > 0) {\n            result += (N % 2) + \"\";\n            N /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6e34f44336274c6ebf281cf7b45a376a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6e34f44336274c6ebf281cf7b45a376a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\";\n        if (N ==\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpni8xuo3h.cs(63,17): error CS1525: Invalid expression term '}'\n/tmp/tmpni8xuo3h.cs(63,17): error CS1026: ) expected\n/tmp/tmpni8xuo3h.cs(63,17): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) {\n            return \"\";\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        if (N == 1) {\n            return \"1\";\n        }\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return (new string(Int64.ToBinaryString(sum))).ToLower();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5etoyy10.cs(38,34): error CS0117: 'long' does not contain a definition for 'ToBinaryString'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        return N.ToString(\"b\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N < 0)\n            return \"\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnxh5youx.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpnxh5youx.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1ee528009508463c93ac3e885ee90daf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1ee528009508463c93ac3e885ee90daf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) {\n            return \"\";\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        if (N == 1) {\n            return \"1\";\n        }\n        if (N == 2) {\n            return \"10\";\n        }\n        if (N == 3) {\n            return \"11\";\n        }\n        if (N == 4) {\n            return \"100\";\n        }\n        if (N == 5) {\n            return \"101\";\n        }\n        if (N == 6) {\n            return \"110\";\n        }\n        if (N == 7) {\n            return \"111\";\n        }\n        if (N == 8) {\n            return \"1000\";\n        }\n        if (N == 9) {\n            return \"1001\";\n        }\n        if (N == 10) {\n            return \"1010\";\n        }\n        if (N == 11) {\n            return \"1011\";\n        }\n        if (N == 12) {\n            return \"1100\";\n        }\n        if (N == 13) {\n            return \"1101\";\n        }\n        if (N == 14) {\n            return \"1110\";\n        }\n        if (N == 15) {\n            return \"1111\";\n        }\n        if (N == 16) {\n            return \"10000\";\n        }\n        if (N == 17) {\n            return \"10001\";\n        }\n        if (N == 18) {\n            return \"10010\";\n        }\n        if (N == 19) {\n            return \"10011\";\n        }\n        if (N == 20) {\n            return \"10100\";\n        }\n        if (N == 21) {\n            return \"10101\";\n        }\n        if (N == 22) {\n            return \"10110\";\n        }\n        if (N == 23) {\n            return \"10111\";\n        }\n        if (N == 24) {\n            return \"11000\";\n        }\n        if (N == 25) {\n            return \"11001\";\n        }\n        if (N == 26)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3ap94x24.cs(105,21): error CS1525: Invalid expression term '}'\n/tmp/tmp3ap94x24.cs(105,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        return N.ToString(\"b\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1ee528009508463c93ac3e885ee90daf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1ee528009508463c93ac3e885ee90daf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        return N.ToString(\"b\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return \"\" + sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c248e6a4b4784ced978b3e56388a549c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c248e6a4b4784ced978b3e56388a549c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        if (N < 0)\n            throw new Exception(\"N should be positive\");\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return \"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcbccgu5h.cs(92,20): error CS1010: Newline in constant\n/tmp/tmpcbccgu5h.cs(92,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1ee528009508463c93ac3e885ee90daf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1ee528009508463c93ac3e885ee90daf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N < 0)\n            throw new Exception(\"N should be positive\");\n        if (N > 10000)\n            throw new Exception(\"N should be less than 10000\");\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return String.format(\"{0:b}\", sum);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyaumy297.cs(37,23): error CS0117: 'string' does not contain a definition for 'format'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\";\n        if (N ==\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpni8xuo3h.cs(63,17): error CS1525: Invalid expression term '}'\n/tmp/tmpni8xuo3h.cs(63,17): error CS1026: ) expected\n/tmp/tmpni8xuo3h.cs(63,17): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return \"100001\";\n        if (N == 34)\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4ebmp54v.cs(92,21): error CS1525: Invalid expression term '}'\n/tmp/tmp4ebmp54v.cs(92,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) {\n            throw new Exception(\"N should be positive\");\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        if (N == 1) {\n            return \"1\";\n        }\n        if (N == 2) {\n            return \"10\";\n        }\n        if (N == 3) {\n            return \"11\";\n        }\n        if (N == 4) {\n            return \"100\";\n        }\n        if (N == 5) {\n            return \"101\";\n        }\n        if (N == 6) {\n            return \"110\";\n        }\n        if (N == 7) {\n            return \"111\";\n        }\n        if (N == 8) {\n            return \"1000\";\n        }\n        if (N == 9) {\n            return \"1001\";\n        }\n        if (N == 10) {\n            return \"1010\";\n        }\n        if (N == 11) {\n            return \"1011\";\n        }\n        if (N == 12) {\n            return \"1100\";\n        }\n        if (N == 13) {\n            return \"1101\";\n        }\n        if (N == 14) {\n            return \"1110\";\n        }\n        if (N == 15) {\n            return \"1111\";\n        }\n        if (N == 16) {\n            return \"10000\";\n        }\n        if (N == 17) {\n            return \"10001\";\n        }\n        if (N == 18) {\n            return \"10010\";\n        }\n        if (N == 19) {\n            return \"10011\";\n        }\n        if (N == 20) {\n            return \"10100\";\n        }\n        if (N == 21) {\n            return \"10101\";\n        }\n        if (N == 22) {\n            return \"10110\";\n        }\n        if (N == 23) {\n            return \"10111\";\n        }\n        if (N == 24) {\n            return \"11000\";\n        }\n        if (N == 25) {\n            return \"11001\";\n        }\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpadpdrln5.cs(22,26): error CS0161: 'Problem.Solve(long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        if (N < 0) {\n            throw new Exception(\"N should be positive\");\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        int digits = 0;\n        while (N > 0) {\n            digits++;\n            N /= 10;\n        }\n        char[] digits_array = new char[digits];\n        for (int i = 0; i < digits; i++) {\n            digits_array[i] = (char) ('0' + (N % 10));\n            N /= 10;\n        }\n        return new String(digits_array);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e3ff6d3cc7c24411b11133af5b66eb32>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e3ff6d3cc7c24411b11133af5b66eb32>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) {\n            return \"\";\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        if (N == 1) {\n            return \"1\";\n        }\n        if (N == 2) {\n            return \"10\";\n        }\n        if (N == 3) {\n            return \"11\";\n        }\n        if (N == 4) {\n            return \"100\";\n        }\n        if (N == 5) {\n            return \"101\";\n        }\n        if (N == 6) {\n            return \"110\";\n        }\n        if (N == 7) {\n            return \"111\";\n        }\n        if (N == 8) {\n            return \"1000\";\n        }\n        if (N == 9) {\n            return \"1001\";\n        }\n        if (N == 10) {\n            return \"1010\";\n        }\n        if (N == 11) {\n            return \"1011\";\n        }\n        if (N == 12) {\n            return \"1100\";\n        }\n        if (N == 13) {\n            return \"1101\";\n        }\n        if (N == 14) {\n            return \"1110\";\n        }\n        if (N == 15) {\n            return \"1111\";\n        }\n        if (N == 16) {\n            return \"10000\";\n        }\n        if (N == 17) {\n            return \"10001\";\n        }\n        if (N == 18) {\n            return \"10010\";\n        }\n        if (N == 19) {\n            return \"10011\";\n        }\n        if (N == 20) {\n            return \"10100\";\n        }\n        if (N == 21) {\n            return \"10101\";\n        }\n        if (N == 22) {\n            return \"10110\";\n        }\n        if (N == 23) {\n            return \"10111\";\n        }\n        if (N == 24) {\n            return \"11000\";\n        }\n        if (N == 25) {\n            return \"11001\";\n        }\n        if (N == 26)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3ap94x24.cs(105,21): error CS1525: Invalid expression term '}'\n/tmp/tmp3ap94x24.cs(105,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        return N.ToString(2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn_opbhdx.cs(24,27): error CS1503: Argument 1: cannot convert from 'int' to 'System.IFormatProvider'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        int len = (int) Math.log10(N);\n        string result = \"\";\n        for (int i = 0; i < len; i++) {\n            result += N % 2 + \"\";\n            N /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3e3280_l.cs(28,30): error CS0117: 'Math' does not contain a definition for 'log10'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) {\n            return \"\";\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        if (N == 1) {\n            return \"1\";\n        }\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return \"\" + sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e2fae41aa7e346109471ccad917a23d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e2fae41aa7e346109471ccad917a23d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        if (N < 0)\n            throw new Exception(\"N must be positive\");\n        if (N > 10000)\n            throw new Exception(\"N must be less than 10000\");\n        string result = \"\";\n        while (N > 0) {\n            result = (char)(N % 2 + 48) + result;\n            N /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d88e95a0edf74bfc808659b2d87de9c5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d88e95a0edf74bfc808659b2d87de9c5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        if (N < 0) {\n            throw new Exception(\"N should be positive\");\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        // Convert N to string\n        string NStr = N.ToString();\n        // Get the length of NStr\n        int NStrLength = NStr.Length;\n        // Get the first digit of NStr\n        int NStrFirstDigit = NStr[0];\n        // Get the second digit of NStr\n        int NStrSecondDigit = NStr[1];\n        // Get the third digit of NStr\n        int NStrThirdDigit = NStr[2];\n        // Get the fourth digit of NStr\n        int NStrFourthDigit = NStr[3];\n        // Get the fifth digit of NStr\n        int NStrFifthDigit = NStr[4];\n        // Get the sixth digit of NStr\n        int NStrSixthDigit = NStr[5];\n        // Get the seventh digit of NStr\n        int NStrSeventhDigit = NStr[6];\n        // Get the eighth digit of NStr\n        int NStrEighthDigit = NStr[7];\n        // Get the ninth digit of NStr\n        int NStrNinthDigit = NStr[8];\n        // Get the tenth digit of NStr\n        int NStrTenthDigit = NStr[9];\n        // Get the eleventh digit of NStr\n        int NStrEleventhDigit = NStr[10];\n        // Get the twelfth digit of NStr\n        int NStrTwelfthDigit = NStr[11];\n        // Get the thirteenth digit of NStr\n        int NStrThirteenthDigit = NStr[12];\n        // Get the fourteenth digit of NStr\n        int NStrFourteenthDigit = NStr[13];\n        // Get the fifteenth digit of NStr\n        int NStrFifteenthDigit = NStr[14];\n        // Get the sixteenth digit of NStr\n        int NStrSixteenthDigit = NStr[15];\n        // Get the seventeenth digit of NStr\n        int NStrSeventeenthDigit = NStr[16];\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphekxy_7o.cs(22,26): error CS0161: 'Problem.Solve(long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) {\n            return \"\";\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        if (N == 1) {\n            return \"1\";\n        }\n        string result = \"\";\n        while (N > 0) {\n            result = (char)(N % 2 + 48) + result;\n            N = N / 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5356e1e8b6e6405ab17a9f34bc94fccc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5356e1e8b6e6405ab17a9f34bc94fccc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        string result = \"\";\n        while (N > 0) {\n            result = (char)(N % 2 + 48) + result;\n            N = N / 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2fd3271a55e249488b95087265179ea8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2fd3271a55e249488b95087265179ea8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N < 0)\n            return \"\";\n        if (N > 10000)\n            return \"\";\n        int n = (int)N;\n        string s = \"\";\n        while (n > 0) {\n            s += n % 2;\n            n /= 2;\n        }\n        return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c66e4775d42b4c498f322593da849b8d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c66e4775d42b4c498f322593da849b8d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        string result = \"\";\n        while (N > 0) {\n            result = (char)(N % 2 + 48) + result;\n            N = N / 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2fd3271a55e249488b95087265179ea8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2fd3271a55e249488b95087265179ea8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) {\n            return \"\";\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        if (N == 1) {\n            return \"1\";\n        }\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return \"\" + sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e2fae41aa7e346109471ccad917a23d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e2fae41aa7e346109471ccad917a23d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        return N.ToString(\"b\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\";\n        if (N ==\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpni8xuo3h.cs(63,17): error CS1525: Invalid expression term '}'\n/tmp/tmpni8xuo3h.cs(63,17): error CS1026: ) expected\n/tmp/tmpni8xuo3h.cs(63,17): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        if (N < 0) {\n            throw new Exception(\"N should be a positive integer\");\n        }\n        if (N > 10000) {\n            throw new Exception(\"N should be less than 10000\");\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        // if N is 1, return 1\n        if (N == 1) {\n            return \"1\";\n        }\n        // if N is 2, return 10\n        if (N == 2) {\n            return \"10\";\n        }\n        // if N is 3, return 11\n        if (N == 3) {\n            return \"11\";\n        }\n        // if N is 4, return 100\n        if (N == 4) {\n            return \"100\";\n        }\n        // if N is 5, return 101\n        if (N == 5) {\n            return \"101\";\n        }\n        // if N is 6, return 110\n        if (N == 6) {\n            return \"110\";\n        }\n        // if N is 7, return 111\n        if (N == 7) {\n            return \"111\";\n        }\n        // if N is 8, return 1000\n        if (N == 8) {\n            return \"1000\";\n        }\n        // if N is 9, return 1001\n        if (N == 9) {\n            return \"1001\";\n        }\n        // if N is 10, return 1010\n        if (N == 10) {\n            return \"1010\";\n        }\n        // if N is 11, return 1011\n        if (N == 11) {\n            return \"1011\";\n        }\n        // if N is 12, return 1100\n        if (N == 12) {\n            return \"1100\";\n        }\n        // if N is 13, return 1101\n        if (N == 13) {\n            return \"1101\";\n        }\n        // if N is 14, return 1110\n        if (N == 14) {\n            return \"1110\";\n        }\n        // if N is 15, return 1111\n        if (N == 15) {\n            return \"1111\";\n        }\n        // if N is 16, return 10000\n        if (N\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjfz_nqqd.cs(93,14): error CS1026: ) expected\n/tmp/tmpjfz_nqqd.cs(93,14): error CS1525: Invalid expression term '}'\n/tmp/tmpjfz_nqqd.cs(93,14): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) {\n            return \"\";\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        if (N == 1) {\n            return \"1\";\n        }\n        if (N == 2) {\n            return \"10\";\n        }\n        if (N == 3) {\n            return \"11\";\n        }\n        if (N == 4) {\n            return \"100\";\n        }\n        if (N == 5) {\n            return \"101\";\n        }\n        if (N == 6) {\n            return \"110\";\n        }\n        if (N == 7) {\n            return \"111\";\n        }\n        if (N == 8) {\n            return \"1000\";\n        }\n        if (N == 9) {\n            return \"1001\";\n        }\n        if (N == 10) {\n            return \"1010\";\n        }\n        if (N == 11) {\n            return \"1011\";\n        }\n        if (N == 12) {\n            return \"1100\";\n        }\n        if (N == 13) {\n            return \"1101\";\n        }\n        if (N == 14) {\n            return \"1110\";\n        }\n        if (N == 15) {\n            return \"1111\";\n        }\n        if (N == 16) {\n            return \"10000\";\n        }\n        if (N == 17) {\n            return \"10001\";\n        }\n        if (N == 18) {\n            return \"10010\";\n        }\n        if (N == 19) {\n            return \"10011\";\n        }\n        if (N == 20) {\n            return \"10100\";\n        }\n        if (N == 21) {\n            return \"10101\";\n        }\n        if (N == 22) {\n            return \"10110\";\n        }\n        if (N == 23) {\n            return \"10111\";\n        }\n        if (N == 24) {\n            return \"11000\";\n        }\n        if (N == 25) {\n            return \"11001\";\n        }\n        if (N == 26)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3ap94x24.cs(105,21): error CS1525: Invalid expression term '}'\n/tmp/tmp3ap94x24.cs(105,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        return N.ToString(\"b\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        string result = \"\";\n        while (N > 0) {\n            result += N % 2;\n            N /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ea63694fd14f4706b8ab7d8669c0e1d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ea63694fd14f4706b8ab7d8669c0e1d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N < 0) return \"\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5q8972dt.cs(22,26): error CS0161: 'Problem.Solve(long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N < 0) return \"\";\n        if (N > 10000) return \"\";\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d79c9e45a2bb463ba5a13c40f3428539>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d79c9e45a2bb463ba5a13c40f3428539>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        return N.ToString(2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn_opbhdx.cs(24,27): error CS1503: Argument 1: cannot convert from 'int' to 'System.IFormatProvider'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return \"100001\";\n        if\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpo21bub45.cs(93,11): error CS1003: Syntax error, '(' expected\n/tmp/tmpo21bub45.cs(93,11): error CS1525: Invalid expression term '}'\n/tmp/tmpo21bub45.cs(93,11): error CS1026: ) expected\n/tmp/tmpo21bub45.cs(93,11): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        if (N < 0) {\n            throw new Exception(\"N should be positive\");\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        if (N == 1) {\n            return \"1\";\n        }\n        if (N == 2) {\n            return \"10\";\n        }\n        if (N == 3) {\n            return \"11\";\n        }\n        if (N == 4) {\n            return \"100\";\n        }\n        if (N == 5) {\n            return \"101\";\n        }\n        if (N == 6) {\n            return \"110\";\n        }\n        if (N == 7) {\n            return \"111\";\n        }\n        if (N == 8) {\n            return \"1000\";\n        }\n        if (N == 9) {\n            return \"1001\";\n        }\n        if (N == 10) {\n            return \"1010\";\n        }\n        if (N == 11) {\n            return \"1011\";\n        }\n        if (N == 12) {\n            return \"1100\";\n        }\n        if (N == 13) {\n            return \"1101\";\n        }\n        if (N == 14) {\n            return \"1110\";\n        }\n        if (N == 15) {\n            return \"1111\";\n        }\n        if (N == 16) {\n            return \"10000\";\n        }\n        if (N == 17) {\n            return \"10001\";\n        }\n        if (N == 18) {\n            return \"10010\";\n        }\n        if (N == 19) {\n            return \"10011\";\n        }\n        if (N == 20) {\n            return \"10100\";\n        }\n        if (N == 21) {\n            return \"10101\";\n        }\n        if (N == 22) {\n            return \"10110\";\n        }\n        if (N == 23) {\n            return \"10111\";\n        }\n        if (N == 24) {\n            return \"11000\";\n        }\n        if (N == 25) {\n            return \"11001\";\n        }\n        if (N == 26) {\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplhvchs9t.cs(106,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmplhvchs9t.cs(114,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        if (N < 0) {\n            throw new Exception(\"N should be a positive integer\");\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        string result = \"\";\n        while (N > 0) {\n            result = String.Concat(result, N % 2 == 0 ? \"0\" : \"1\");\n            N /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3003e5c57fc246349334ad192ed38500>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3003e5c57fc246349334ad192ed38500>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        return N.ToString(\"b\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) {\n            return \"\";\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        if (N == 1) {\n            return \"1\";\n        }\n        if (N == 2) {\n            return \"10\";\n        }\n        if (N == 3) {\n            return \"11\";\n        }\n        if (N == 4) {\n            return \"100\";\n        }\n        if (N == 5) {\n            return \"101\";\n        }\n        if (N == 6) {\n            return \"110\";\n        }\n        if (N == 7) {\n            return \"111\";\n        }\n        if (N == 8) {\n            return \"1000\";\n        }\n        if (N == 9) {\n            return \"1001\";\n        }\n        if (N == 10) {\n            return \"1010\";\n        }\n        if (N == 11) {\n            return \"1011\";\n        }\n        if (N == 12) {\n            return \"1100\";\n        }\n        if (N == 13) {\n            return \"1101\";\n        }\n        if (N == 14) {\n            return \"1110\";\n        }\n        if (N == 15) {\n            return \"1111\";\n        }\n        if (N == 16) {\n            return \"10000\";\n        }\n        if (N == 17) {\n            return \"10001\";\n        }\n        if (N == 18) {\n            return \"10010\";\n        }\n        if (N == 19) {\n            return \"10011\";\n        }\n        if (N == 20) {\n            return \"10100\";\n        }\n        if (N == 21) {\n            return \"10101\";\n        }\n        if (N == 22) {\n            return \"10110\";\n        }\n        if (N == 23) {\n            return \"10111\";\n        }\n        if (N == 24) {\n            return \"11000\";\n        }\n        if (N == 25) {\n            return \"11001\";\n        }\n        if (N == 26)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3ap94x24.cs(105,21): error CS1525: Invalid expression term '}'\n/tmp/tmp3ap94x24.cs(105,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        return String.Join(\"\", Enumerable.Range(0, N).Select(x => Math.Pow(2, x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplzlarthn.cs(24,52): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        int n = (int)N;\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 2;\n            n /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2a2b838968364a11b0902b150c30c1ec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2a2b838968364a11b0902b150c30c1ec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N < 0)\n            return \"\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnxh5youx.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpnxh5youx.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        return N.ToString(\"b\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return \"100001\";\n        if (N == 34)\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4ebmp54v.cs(92,21): error CS1525: Invalid expression term '}'\n/tmp/tmp4ebmp54v.cs(92,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) return \"\";\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp470gvnso.cs(22,26): error CS0161: 'Problem.Solve(long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\";\n        if (N ==\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpni8xuo3h.cs(63,17): error CS1525: Invalid expression term '}'\n/tmp/tmpni8xuo3h.cs(63,17): error CS1026: ) expected\n/tmp/tmpni8xuo3h.cs(63,17): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) {\n            throw new Exception(\"N should be positive\");\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        if (N == 1) {\n            return \"1\";\n        }\n        if (N == 2) {\n            return \"10\";\n        }\n        if (N == 3) {\n            return \"11\";\n        }\n        if (N == 4) {\n            return \"100\";\n        }\n        if (N == 5) {\n            return \"101\";\n        }\n        if (N == 6) {\n            return \"110\";\n        }\n        if (N == 7) {\n            return \"111\";\n        }\n        if (N == 8) {\n            return \"1000\";\n        }\n        if (N == 9) {\n            return \"1001\";\n        }\n        if (N == 10) {\n            return \"1010\";\n        }\n        if (N == 11) {\n            return \"1011\";\n        }\n        if (N == 12) {\n            return \"1100\";\n        }\n        if (N == 13) {\n            return \"1101\";\n        }\n        if (N == 14) {\n            return \"1110\";\n        }\n        if (N == 15) {\n            return \"1111\";\n        }\n        if (N == 16) {\n            return \"10000\";\n        }\n        if (N == 17) {\n            return \"10001\";\n        }\n        if (N == 18) {\n            return \"10010\";\n        }\n        if (N == 19) {\n            return \"10011\";\n        }\n        if (N == 20) {\n            return \"10100\";\n        }\n        if (N == 21) {\n            return \"10101\";\n        }\n        if (N == 22) {\n            return \"10110\";\n        }\n        if (N == 23) {\n            return \"10111\";\n        }\n        if (N == 24) {\n            return \"11000\";\n        }\n        if (N == 25) {\n            return \"11001\";\n        }\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpadpdrln5.cs(22,26): error CS0161: 'Problem.Solve(long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) return \"\";\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp470gvnso.cs(22,26): error CS0161: 'Problem.Solve(long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        return N.ToString(2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn_opbhdx.cs(24,27): error CS1503: Argument 1: cannot convert from 'int' to 'System.IFormatProvider'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        if (N < 0)\n            throw new Exception(\"N should be positive\");\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return \"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcbccgu5h.cs(92,20): error CS1010: Newline in constant\n/tmp/tmpcbccgu5h.cs(92,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        return N.ToString(\"b\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        return N.ToString(2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn_opbhdx.cs(24,27): error CS1503: Argument 1: cannot convert from 'int' to 'System.IFormatProvider'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) {\n            throw new Exception(\"N should be positive\");\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        if (N == 1) {\n            return \"1\";\n        }\n        if (N == 2) {\n            return \"10\";\n        }\n        if (N == 3) {\n            return \"11\";\n        }\n        if (N == 4) {\n            return \"100\";\n        }\n        if (N == 5) {\n            return \"101\";\n        }\n        if (N == 6) {\n            return \"110\";\n        }\n        if (N == 7) {\n            return \"111\";\n        }\n        if (N == 8) {\n            return \"1000\";\n        }\n        if (N == 9) {\n            return \"1001\";\n        }\n        if (N == 10) {\n            return \"1010\";\n        }\n        if (N == 11) {\n            return \"1011\";\n        }\n        if (N == 12) {\n            return \"1100\";\n        }\n        if (N == 13) {\n            return \"1101\";\n        }\n        if (N == 14) {\n            return \"1110\";\n        }\n        if (N == 15) {\n            return \"1111\";\n        }\n        if (N == 16) {\n            return \"10000\";\n        }\n        if (N == 17) {\n            return \"10001\";\n        }\n        if (N == 18) {\n            return \"10010\";\n        }\n        if (N == 19) {\n            return \"10011\";\n        }\n        if (N == 20) {\n            return \"10100\";\n        }\n        if (N == 21) {\n            return \"10101\";\n        }\n        if (N == 22) {\n            return \"10110\";\n        }\n        if (N == 23) {\n            return \"10111\";\n        }\n        if (N == 24) {\n            return \"11000\";\n        }\n        if (N == 25) {\n            return \"11001\";\n        }\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpadpdrln5.cs(22,26): error CS0161: 'Problem.Solve(long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        string result = \"\";\n        while (N > 0) {\n            result = (char)(N % 2 + 48) + result;\n            N = N / 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2fd3271a55e249488b95087265179ea8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2fd3271a55e249488b95087265179ea8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) {\n            return \"\";\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        if (N == 1) {\n            return \"1\";\n        }\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f0ab706136d741f7a91122dbe5a50705>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f0ab706136d741f7a91122dbe5a50705>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) return \"\";\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp470gvnso.cs(22,26): error CS0161: 'Problem.Solve(long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) {\n            return \"\";\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        string result = \"\";\n        while (N > 0) {\n            result = (char)(N % 2 + 48) + result;\n            N = N / 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <cb5bf06e402f45c79c44171cc5c20a39>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <cb5bf06e402f45c79c44171cc5c20a39>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        if (N < 0) {\n            throw new Exception(\"N should be positive\");\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        if (N == 1) {\n            return \"1\";\n        }\n        if (N == 2) {\n            return \"10\";\n        }\n        if (N == 3) {\n            return \"11\";\n        }\n        if (N == 4) {\n            return \"100\";\n        }\n        if (N == 5) {\n            return \"101\";\n        }\n        if (N == 6) {\n            return \"110\";\n        }\n        if (N == 7) {\n            return \"111\";\n        }\n        if (N == 8) {\n            return \"1000\";\n        }\n        if (N == 9) {\n            return \"1001\";\n        }\n        if (N == 10) {\n            return \"1010\";\n        }\n        if (N == 11) {\n            return \"1011\";\n        }\n        if (N == 12) {\n            return \"1100\";\n        }\n        if (N == 13) {\n            return \"1101\";\n        }\n        if (N == 14) {\n            return \"1110\";\n        }\n        if (N == 15) {\n            return \"1111\";\n        }\n        if (N == 16) {\n            return \"10000\";\n        }\n        if (N == 17) {\n            return \"10001\";\n        }\n        if (N == 18) {\n            return \"10010\";\n        }\n        if (N == 19) {\n            return \"10011\";\n        }\n        if (N == 20) {\n            return \"10100\";\n        }\n        if (N == 21) {\n            return \"10101\";\n        }\n        if (N == 22) {\n            return \"10110\";\n        }\n        if (N == 23) {\n            return \"10111\";\n        }\n        if (N == 24) {\n            return \"11000\";\n        }\n        if (N == 25) {\n            return \"11001\";\n        }\n        if (N == 26) {\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplhvchs9t.cs(106,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmplhvchs9t.cs(114,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) {\n            return \"\";\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        if (N == 1) {\n            return \"1\";\n        }\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return String.Format(\"{0:b}\", sum);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.TryFormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider, System.Span`1[T] destination, System.Int32& charsWritten) [0x000a0] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.TryFormat (System.Span`1[T] destination, System.Int32& charsWritten, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Text.StringBuilder.AppendFormatHelper (System.IFormatProvider provider, System.String format, System.ParamsArray args) [0x00308] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.String.FormatHelper (System.IFormatProvider provider, System.String format, System.ParamsArray args) [0x00023] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.String.Format (System.String format, System.Object arg0) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00058] in <7b8252e5e3b9484b80ebc6501d1e6efa>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <7b8252e5e3b9484b80ebc6501d1e6efa>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.TryFormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider, System.Span`1[T] destination, System.Int32& charsWritten) [0x000a0] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.TryFormat ",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        string result = \"\";\n        while (N > 0) {\n            result = (char)(N % 2 + 48) + result;\n            N = N / 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2fd3271a55e249488b95087265179ea8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2fd3271a55e249488b95087265179ea8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        return N.ToString(\"b\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        string result = \"\";\n        while (N > 0) {\n            result = (char)(N % 2 + 48) + result;\n            N = N / 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2fd3271a55e249488b95087265179ea8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2fd3271a55e249488b95087265179ea8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        if (N < 0)\n            throw new Exception(\"N should be positive\");\n        if (N == 0)\n            return \"0\";\n        string result = \"\";\n        while (N > 0) {\n            result = (char)(N % 2 + 48) + result;\n            N = N / 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <68b2b76811584b9b91cb96713426ba66>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <68b2b76811584b9b91cb96713426ba66>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1ee528009508463c93ac3e885ee90daf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1ee528009508463c93ac3e885ee90daf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N < 0) return \"\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"100\";\n        if (N == 4) return \"1000\";\n        if (N == 5) return \"10000\";\n        if (N == 6) return \"100000\";\n        if (N == 7) return \"1000000\";\n        if (N == 8) return \"10000000\";\n        if (N == 9) return \"100000000\";\n        if (N == 10) return \"1000000000\";\n        if (N == 11) return \"10000000000\";\n        if (N == 12) return \"100000000000\";\n        if (N == 13) return \"1000000000000\";\n        if (N == 14) return \"10000000000000\";\n        if (N == 15) return \"100000000000000\";\n        if (N == 16) return \"1000000000000000\";\n        if (N == 17) return \"10000000000000000\";\n        if (N == 18) return \"100000000000000000\";\n        if (N == 19) return \"1000000000000000000\";\n        if (N == 20) return \"10000000000000000000\";\n        if (N == 21) return \"100000000000000000000\";\n        if (N == 22) return \"1000000000000000000000\";\n        if (N == 23) return \"10000000000000000000000\";\n        if (N == 24) return \"100000000000000000000000\";\n        if (N == 25) return \"1000000000000000000000000\";\n        if (N == 26) return \"10000000000000000000000000\";\n        if (N == 27) return \"100000000000000000000000000\";\n        if (N == 28) return \"1000000000000000000000000000\";\n        if (N == 29) return \"10000000000000000000000000000\";\n        if (N == 30) return \"100000000000000000000000000000\";\n        if (N == 31) return \"1000000000000000000000000000000\";\n        if (N == 32) return \"10000000000000000000000000000000\";\n        if (N == 33) return \"100000000000000000000000000000000\";\n        if (N == 34) return \"1000000000000000000000000000000000\";\n        if (N == 35) return \"10000000000000000\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmhalas5i.cs(60,29): error CS1010: Newline in constant\n/tmp/tmpmhalas5i.cs(60,47): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) {\n            return \"\";\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        if (N == 1) {\n            return \"1\";\n        }\n        if (N == 2) {\n            return \"10\";\n        }\n        if (N == 3) {\n            return \"11\";\n        }\n        if (N == 4) {\n            return \"100\";\n        }\n        if (N == 5) {\n            return \"101\";\n        }\n        if (N == 6) {\n            return \"110\";\n        }\n        if (N == 7) {\n            return \"111\";\n        }\n        if (N == 8) {\n            return \"1000\";\n        }\n        if (N == 9) {\n            return \"1001\";\n        }\n        if (N == 10) {\n            return \"1010\";\n        }\n        if (N == 11) {\n            return \"1011\";\n        }\n        if (N == 12) {\n            return \"1100\";\n        }\n        if (N == 13) {\n            return \"1101\";\n        }\n        if (N == 14) {\n            return \"1110\";\n        }\n        if (N == 15) {\n            return \"1111\";\n        }\n        if (N == 16) {\n            return \"10000\";\n        }\n        if (N == 17) {\n            return \"10001\";\n        }\n        if (N == 18) {\n            return \"10010\";\n        }\n        if (N == 19) {\n            return \"10011\";\n        }\n        if (N == 20) {\n            return \"10100\";\n        }\n        if (N == 21) {\n            return \"10101\";\n        }\n        if (N == 22) {\n            return \"10110\";\n        }\n        if (N == 23) {\n            return \"10111\";\n        }\n        if (N == 24) {\n            return \"11000\";\n        }\n        if (N == 25) {\n            return \"11001\";\n        }\n        if (N == 26)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3ap94x24.cs(105,21): error CS1525: Invalid expression term '}'\n/tmp/tmp3ap94x24.cs(105,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) return \"\";\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp470gvnso.cs(22,26): error CS0161: 'Problem.Solve(long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        string result = \"\";\n        while (N > 0) {\n            result = (char)(N % 2 + 48) + result;\n            N = N / 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0041c600fa0a4338a5023d52c93804d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0041c600fa0a4338a5023d52c93804d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) {\n            throw new Exception(\"N should be positive\");\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        if (N == 1) {\n            return \"1\";\n        }\n        string result = \"\";\n        while (N > 0) {\n            result = (char)(N % 2 + 48) + result;\n            N = N / 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0d47f6c400184123aa394cb5fe056770>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0d47f6c400184123aa394cb5fe056770>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        return N.ToString(\"b\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        int[] digits = new int[N];\n        for (int i = 0; i < N; i++) {\n            digits[i] = N % 2;\n            N = N / 2;\n        }\n        return String.Join(\"\", digits);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpihcdnh7v.cs(26,25): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        return N.ToString(2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn_opbhdx.cs(24,27): error CS1503: Argument 1: cannot convert from 'int' to 'System.IFormatProvider'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) {\n            return \"\";\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        if (N == 1) {\n            return \"1\";\n        }\n        if (N == 2) {\n            return \"10\";\n        }\n        if (N == 3) {\n            return \"11\";\n        }\n        if (N == 4) {\n            return \"100\";\n        }\n        if (N == 5) {\n            return \"101\";\n        }\n        if (N == 6) {\n            return \"110\";\n        }\n        if (N == 7) {\n            return \"111\";\n        }\n        if (N == 8) {\n            return \"1000\";\n        }\n        if (N == 9) {\n            return \"1001\";\n        }\n        if (N == 10) {\n            return \"1010\";\n        }\n        if (N == 11) {\n            return \"1011\";\n        }\n        if (N == 12) {\n            return \"1100\";\n        }\n        if (N == 13) {\n            return \"1101\";\n        }\n        if (N == 14) {\n            return \"1110\";\n        }\n        if (N == 15) {\n            return \"1111\";\n        }\n        if (N == 16) {\n            return \"10000\";\n        }\n        if (N == 17) {\n            return \"10001\";\n        }\n        if (N == 18) {\n            return \"10010\";\n        }\n        if (N == 19) {\n            return \"10011\";\n        }\n        if (N == 20) {\n            return \"10100\";\n        }\n        if (N == 21) {\n            return \"10101\";\n        }\n        if (N == 22) {\n            return \"10110\";\n        }\n        if (N == 23) {\n            return \"10111\";\n        }\n        if (N == 24) {\n            return \"11000\";\n        }\n        if (N == 25) {\n            return \"11001\";\n        }\n        if (N == 26)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3ap94x24.cs(105,21): error CS1525: Invalid expression term '}'\n/tmp/tmp3ap94x24.cs(105,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        if (N < 0)\n            throw new Exception(\"N should be a positive integer\");\n        if (N > 10000)\n            throw new Exception(\"N should be less than 10000\");\n        //\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f041e6b909f146ee9ad5fce46076e4e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f041e6b909f146ee9ad5fce46076e4e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        string result = \"\";\n        while (N > 0) {\n            result = (char)(N % 2 + 48) + result;\n            N = N / 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2fd3271a55e249488b95087265179ea8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2fd3271a55e249488b95087265179ea8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return \"100001\";\n        if\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpo21bub45.cs(93,11): error CS1003: Syntax error, '(' expected\n/tmp/tmpo21bub45.cs(93,11): error CS1525: Invalid expression term '}'\n/tmp/tmpo21bub45.cs(93,11): error CS1026: ) expected\n/tmp/tmpo21bub45.cs(93,11): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        if (N < 0)\n            throw new Exception(\"N must be positive\");\n        if (N > 10000)\n            throw new Exception(\"N must be less than 10000\");\n        string result = \"\";\n        while (N > 0) {\n            result = (char)(N % 2 + 48) + result;\n            N = N / 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b0027ea0a4554d97abd1da6f94bc708f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b0027ea0a4554d97abd1da6f94bc708f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8d82291636a40c9963d20773472f4ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        return N.ToString(\"b\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) {\n            throw new Exception(\"N should be positive\");\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        if (N == 1) {\n            return \"1\";\n        }\n        if (N == 2) {\n            return \"10\";\n        }\n        if (N == 3) {\n            return \"11\";\n        }\n        if (N == 4) {\n            return \"100\";\n        }\n        if (N == 5) {\n            return \"101\";\n        }\n        if (N == 6) {\n            return \"110\";\n        }\n        if (N == 7) {\n            return \"111\";\n        }\n        if (N == 8) {\n            return \"1000\";\n        }\n        if (N == 9) {\n            return \"1001\";\n        }\n        if (N == 10) {\n            return \"1010\";\n        }\n        if (N == 11) {\n            return \"1011\";\n        }\n        if (N == 12) {\n            return \"1100\";\n        }\n        if (N == 13) {\n            return \"1101\";\n        }\n        if (N == 14) {\n            return \"1110\";\n        }\n        if (N == 15) {\n            return \"1111\";\n        }\n        if (N == 16) {\n            return \"10000\";\n        }\n        if (N == 17) {\n            return \"10001\";\n        }\n        if (N == 18) {\n            return \"10010\";\n        }\n        if (N == 19) {\n            return \"10011\";\n        }\n        if (N == 20) {\n            return \"10100\";\n        }\n        if (N == 21) {\n            return \"10101\";\n        }\n        if (N == 22) {\n            return \"10110\";\n        }\n        if (N == 23) {\n            return \"10111\";\n        }\n        if (N == 24) {\n            return \"11000\";\n        }\n        if (N == 25) {\n            return \"11001\";\n        }\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpadpdrln5.cs(22,26): error CS0161: 'Problem.Solve(long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) {\n            return \"\";\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        if (N == 1) {\n            return \"1\";\n        }\n        if (N == 2) {\n            return \"10\";\n        }\n        if (N == 3) {\n            return \"11\";\n        }\n        if (N == 4) {\n            return \"100\";\n        }\n        if (N == 5) {\n            return \"101\";\n        }\n        if (N == 6) {\n            return \"110\";\n        }\n        if (N == 7) {\n            return \"111\";\n        }\n        if (N == 8) {\n            return \"1000\";\n        }\n        if (N == 9) {\n            return \"1001\";\n        }\n        if (N == 10) {\n            return \"1010\";\n        }\n        if (N == 11) {\n            return \"1011\";\n        }\n        if (N == 12) {\n            return \"1100\";\n        }\n        if (N == 13) {\n            return \"1101\";\n        }\n        if (N == 14) {\n            return \"1110\";\n        }\n        if (N == 15) {\n            return \"1111\";\n        }\n        if (N == 16) {\n            return \"10000\";\n        }\n        if (N == 17) {\n            return \"10001\";\n        }\n        if (N == 18) {\n            return \"10010\";\n        }\n        if (N == 19) {\n            return \"10011\";\n        }\n        if (N == 20) {\n            return \"10100\";\n        }\n        if (N == 21) {\n            return \"10101\";\n        }\n        if (N == 22) {\n            return \"10110\";\n        }\n        if (N == 23) {\n            return \"10111\";\n        }\n        if (N == 24) {\n            return \"11000\";\n        }\n        if (N == 25) {\n            return \"11001\";\n        }\n        if (N == 26)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3ap94x24.cs(105,21): error CS1525: Invalid expression term '}'\n/tmp/tmp3ap94x24.cs(105,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return \"100001\";\n        if (N == 34)\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4ebmp54v.cs(92,21): error CS1525: Invalid expression term '}'\n/tmp/tmp4ebmp54v.cs(92,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        string result = \"\";\n        while (N > 0) {\n            result = (char)(N % 2 + 48) + result;\n            N = N / 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2fd3271a55e249488b95087265179ea8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2fd3271a55e249488b95087265179ea8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        int n = (int)N;\n        string result = \"\";\n        while (n > 0) {\n            result = (char)(n % 2 + 48) + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <85988bbb1c1f47dfa97534224fc98789>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <85988bbb1c1f47dfa97534224fc98789>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) {\n            return \"\";\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        if (N == 1) {\n            return \"1\";\n        }\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return \"\" + sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e2fae41aa7e346109471ccad917a23d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e2fae41aa7e346109471ccad917a23d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        return N.ToString(\"b\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        long sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return sum.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1ee528009508463c93ac3e885ee90daf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1ee528009508463c93ac3e885ee90daf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0)\n            return \"\";\n        if (N == 0)\n            return \"0\";\n        if (N == 1)\n            return \"1\";\n        if (N == 2)\n            return \"10\";\n        if (N == 3)\n            return \"11\";\n        if (N == 4)\n            return \"100\";\n        if (N == 5)\n            return \"101\";\n        if (N == 6)\n            return \"110\";\n        if (N == 7)\n            return \"111\";\n        if (N == 8)\n            return \"1000\";\n        if (N == 9)\n            return \"1001\";\n        if (N == 10)\n            return \"1010\";\n        if (N == 11)\n            return \"1011\";\n        if (N == 12)\n            return \"1100\";\n        if (N == 13)\n            return \"1101\";\n        if (N == 14)\n            return \"1110\";\n        if (N == 15)\n            return \"1111\";\n        if (N == 16)\n            return \"10000\";\n        if (N == 17)\n            return \"10001\";\n        if (N == 18)\n            return \"10010\";\n        if (N == 19)\n            return \"10011\";\n        if (N == 20)\n            return \"10100\";\n        if (N == 21)\n            return \"10101\";\n        if (N == 22)\n            return \"10110\";\n        if (N == 23)\n            return \"10111\";\n        if (N == 24)\n            return \"11000\";\n        if (N == 25)\n            return \"11001\";\n        if (N == 26)\n            return \"11010\";\n        if (N == 27)\n            return \"11011\";\n        if (N == 28)\n            return \"11100\";\n        if (N == 29)\n            return \"11101\";\n        if (N == 30)\n            return \"11110\";\n        if (N == 31)\n            return \"11111\";\n        if (N == 32)\n            return \"100000\";\n        if (N == 33)\n            return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1525: Invalid expression term '}'\n/tmp/tmpbbiqw_6w.cs(93,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N == 0) return \"0\";\n        if (N == 1) return \"1\";\n        if (N == 2) return \"10\";\n        if (N == 3) return \"11\";\n        if (N == 4) return \"100\";\n        if (N == 5) return \"101\";\n        if (N == 6) return \"110\";\n        if (N == 7) return \"111\";\n        if (N == 8) return \"1000\";\n        if (N == 9) return \"1001\";\n        if (N == 10) return \"1010\";\n        if (N == 11) return \"1011\";\n        if (N == 12) return \"1100\";\n        if (N == 13) return \"1101\";\n        if (N == 14) return \"1110\";\n        if (N == 15) return \"1111\";\n        if (N == 16) return \"10000\";\n        if (N == 17) return \"10001\";\n        if (N == 18) return \"10010\";\n        if (N == 19) return \"10011\";\n        if (N == 20) return \"10100\";\n        if (N == 21) return \"10101\";\n        if (N == 22) return \"10110\";\n        if (N == 23) return \"10111\";\n        if (N == 24) return \"11000\";\n        if (N == 25) return \"11001\";\n        if (N == 26) return \"11010\";\n        if (N == 27) return \"11011\";\n        if (N == 28) return \"11100\";\n        if (N == 29) return \"11101\";\n        if (N == 30) return \"11110\";\n        if (N == 31) return \"11111\";\n        if (N == 32) return \"100000\";\n        if (N == 33) return \"100001\";\n        if (N == 34) return \"100010\";\n        if (N == 35) return \"100011\";\n        if (N == 36) return \"100100\";\n        if (N == 37) return \"100101\";\n        if (N == 38) return \"100110\";\n        if (N == 39) return \"100111\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2ok45sz.cs(63,29): error CS1010: Newline in constant\n/tmp/tmpj2ok45sz.cs(63,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        return N.ToString(\"b\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T] format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a0649a06056346428bc7731a7a59929d>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) {\n            return \"\";\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        if (N == 1) {\n            return \"1\";\n        }\n        if (N == 2) {\n            return \"10\";\n        }\n        if (N == 3) {\n            return \"11\";\n        }\n        if (N == 4) {\n            return \"100\";\n        }\n        if (N == 5) {\n            return \"101\";\n        }\n        if (N == 6) {\n            return \"110\";\n        }\n        if (N == 7) {\n            return \"111\";\n        }\n        if (N == 8) {\n            return \"1000\";\n        }\n        if (N == 9) {\n            return \"1001\";\n        }\n        if (N == 10) {\n            return \"1010\";\n        }\n        if (N == 11) {\n            return \"1011\";\n        }\n        if (N == 12) {\n            return \"1100\";\n        }\n        if (N == 13) {\n            return \"1101\";\n        }\n        if (N == 14) {\n            return \"1110\";\n        }\n        if (N == 15) {\n            return \"1111\";\n        }\n        if (N == 16) {\n            return \"10000\";\n        }\n        if (N == 17) {\n            return \"10001\";\n        }\n        if (N == 18) {\n            return \"10010\";\n        }\n        if (N == 19) {\n            return \"10011\";\n        }\n        if (N == 20) {\n            return \"10100\";\n        }\n        if (N == 21) {\n            return \"10101\";\n        }\n        if (N == 22) {\n            return \"10110\";\n        }\n        if (N == 23) {\n            return \"10111\";\n        }\n        if (N == 24) {\n            return \"11000\";\n        }\n        if (N == 25) {\n            return \"11001\";\n        }\n        if (N == 26)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3ap94x24.cs(105,21): error CS1525: Invalid expression term '}'\n/tmp/tmp3ap94x24.cs(105,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        // Write your code here\n        if (N < 0) {\n            return \"\";\n        }\n        if (N == 0) {\n            return \"0\";\n        }\n        if (N == 1) {\n            return \"1\";\n        }\n        if (N == 2) {\n            return \"10\";\n        }\n        if (N == 3) {\n            return \"11\";\n        }\n        if (N == 4) {\n            return \"100\";\n        }\n        if (N == 5) {\n            return \"101\";\n        }\n        if (N == 6) {\n            return \"110\";\n        }\n        if (N == 7) {\n            return \"111\";\n        }\n        if (N == 8) {\n            return \"1000\";\n        }\n        if (N == 9) {\n            return \"1001\";\n        }\n        if (N == 10) {\n            return \"1010\";\n        }\n        if (N == 11) {\n            return \"1011\";\n        }\n        if (N == 12) {\n            return \"1100\";\n        }\n        if (N == 13) {\n            return \"1101\";\n        }\n        if (N == 14) {\n            return \"1110\";\n        }\n        if (N == 15) {\n            return \"1111\";\n        }\n        if (N == 16) {\n            return \"10000\";\n        }\n        if (N == 17) {\n            return \"10001\";\n        }\n        if (N == 18) {\n            return \"10010\";\n        }\n        if (N == 19) {\n            return \"10011\";\n        }\n        if (N == 20) {\n            return \"10100\";\n        }\n        if (N == 21) {\n            return \"10101\";\n        }\n        if (N == 22) {\n            return \"10110\";\n        }\n        if (N == 23) {\n            return \"10111\";\n        }\n        if (N == 24) {\n            return \"11000\";\n        }\n        if (N == 25) {\n            return \"11001\";\n        }\n        if (N == 26)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n",
      "timestamp": 1664292908,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3ap94x24.cs(105,21): error CS1525: Invalid expression term '}'\n/tmp/tmp3ap94x24.cs(105,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}