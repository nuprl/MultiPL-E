{
  "name": "HumanEval_124_valid_date",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        // Check if the date is empty.\n        if (date.Length == 0)\n            return false;\n\n        // Check if the date is in the correct format.\n        if (!date.Contains(\"-\") || !date.Contains(\"/\"))\n            return false;\n\n        // Check if the month is in the correct range.\n        if (!date.Contains(\"1\") && !date.Contains(\"2\") && !date.Contains(\"3\") && !date.Contains(\"4\") && !date.Contains(\"5\") && !date.Contains(\"6\") && !date.Contains(\"7\") && !date.Contains(\"8\") && !date.Contains(\"9\") && !date.Contains(\"10\") && !date.Contains(\"11\") && !date.Contains(\"12\"))\n            return false;\n\n        // Check if the month is in the correct range.\n        if (date.Contains(\"1\") || date.Contains(\"3\") || date.Contains(\"5\") || date.Contains(\"7\") || date.Contains(\"8\") || date.Contains(\"10\") || date.Contains(\"12\")) {\n            if (date.Contains(\"1\") || date.Contains(\"3\") || date.Contains(\"5\") || date.Contains(\"7\") || date.Contains(\"8\") || date.Contains(\"10\") || date.Contains(\"12\")) {\n                if (date.Contains(\"1\") || date.Contains(\"3\") || date.Contains(\"5\") || date.Contains(\"7\") || date.Contains(\"8\") || date.Contains(\"10\") || date.Contains(\"12\")) {\n                    if (date.Contains(\"1\") || date.Contains(\"3\") || date.Contains(\"5\") || date.Contains(\"7\") || date.Contains(\"8\") || date.Contains(\"10\") || date.Contains(\"12\")) {\n                        if (date.Contains(\"1\") || date.Contains(\"3\") || date.Contains(\"5\") || date.Contains(\"7\") || date.Contains(\"8\") || date.Contains(\"10\") || date.Contains(\"12\")) {\n                            if (date.Contains(\"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcztcbsip.cs(45,47): error CS1010: Newline in constant\n/tmp/tmpcztcbsip.cs(45,48): error CS1026: ) expected\n/tmp/tmpcztcbsip.cs(45,48): error CS1525: Invalid expression term '}'\n/tmp/tmpcztcbsip.cs(45,48): error CS1002: ; expected\n/tmp/tmpcztcbsip.cs(47,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpcztcbsip.cs(66,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(8, 4) == \"0000\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(1, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(9, 4) == \"0000\") return false;\n        if (date.Substring(0, 1) == \"0\") return false;\n        if (date.Substring(1, 1) == \"0\") return false;\n        if (date.Substring(2, 1) == \"0\") return false;\n        if (date.Substring(3, 1) == \"0\") return false;\n        if (date.Substring(4, 1) == \"0\") return false;\n        if (date.Substring(5, 1) == \"0\") return false;\n        if (date.Substring(6, 1) == \"0\") return false;\n        if (date.Substring(7, 1) == \"0\") return false;\n        if (date.Substring(8, 1) == \"0\") return false;\n        if (date.Substring(9, 1) == \"0\") return false;\n        if (date.Substring(0, 2) == \"00\") return false;\n        if (date.Substring(1, 2) == \"00\") return false;\n        if (date.Substring(2, 2) == \"00\") return false;\n        if (date.Substring(3, 2) == \"00\") return false;\n        if (date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjqxnf01c.cs(53,28): error CS1026: ) expected\n/tmp/tmpjqxnf01c.cs(53,28): error CS1525: Invalid expression term '}'\n/tmp/tmpjqxnf01c.cs(53,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 8)\n            return false;\n        if (date.Substring(0, 2) == \"0\" || date.Substring(0, 2) == \"1\" || date.Substring(0, 2) == \"2\" || date.Substring(0, 2) == \"3\" || date.Substring(0, 2) == \"4\" || date.Substring(0, 2) == \"5\" || date.Substring(0, 2) == \"6\" || date.Substring(0, 2) == \"7\" || date.Substring(0, 2) == \"8\" || date.Substring(0, 2) == \"9\" || date.Substring(0, 2) == \"10\" || date.Substring(0, 2) == \"11\" || date.Substring(0, 2) == \"12\")\n            return false;\n        if (date.Substring(3, 2) == \"0\" || date.Substring(3, 2) == \"1\" || date.Substring(3, 2) == \"2\" || date.Substring(3, 2) == \"3\" || date.Substring(3, 2) == \"4\" || date.Substring(3, 2) == \"5\" || date.Substring(3, 2) == \"6\" || date.Substring(3, 2) == \"7\" || date.Substring(3, 2) == \"8\" || date.Substring(3, 2) == \"9\" || date.Substring(3, 2) == \"10\" || date.Substring(3, 2) == \"11\" || date.Substring(3, 2) == \"12\")\n            return false;\n        if (date.Substring(6, 2) == \"0\" || date.Substring(6, 2) == \"1\" || date.Substring(6, 2) == \"2\" || date.Substring(6, 2) == \"3\" || date.Substring(6, 2) == \"4\" || date.Substring(6, 2) == \"5\" || date.Substring(6, 2) == \"6\" || date.Sub\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpv4kxor97.cs(35,238): error CS1026: ) expected\n/tmp/tmpv4kxor97.cs(35,238): error CS1525: Invalid expression term '}'\n/tmp/tmpv4kxor97.cs(35,238): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 10) return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\") return false;\n            if (date.Substring(2, 1) == \"0\") return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\") return false;\n            if (date.Substring(2, 1) == \"0\") return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\") return false;\n            if (date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\") return false;\n            if (date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 0) {\n            return false;\n        }\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(3, 2\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzaszw9m3.cs(66,36): error CS1026: ) expected\n/tmp/tmpzaszw9m3.cs(66,36): error CS1525: Invalid expression term '}'\n/tmp/tmpzaszw9m3.cs(66,36): error CS1002: ; expected\n/tmp/tmpzaszw9m3.cs(68,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpzaszw9m3.cs(87,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 10) return false;\n        if (date.IndexOf(\"-\") == -1) return false;\n        if (date.IndexOf(\"-\") == 0) return false;\n        if (date.IndexOf(\"-\") == date.Length - 1) return false;\n        if (date.IndexOf(\"-\") == 1) return false;\n        if (date.IndexOf(\"-\") == 2) return false;\n        if (date.IndexOf(\"-\") == 3) return false;\n        if (date.IndexOf(\"-\") == 4) return false;\n        if (date.IndexOf(\"-\") == 5) return false;\n        if (date.IndexOf(\"-\") == 6) return false;\n        if (date.IndexOf(\"-\") == 7) return false;\n        if (date.IndexOf(\"-\") == 8) return false;\n        if (date.IndexOf(\"-\") == 9) return false;\n        if (date.IndexOf(\"-\") == 10) return false;\n        if (date.IndexOf(\"-\") == 11) return false;\n        if (date.IndexOf(\"-\") == 12) return false;\n        if (date.IndexOf(\"-\") == 13) return false;\n        if (date.IndexOf(\"-\") == 14) return false;\n        if (date.IndexOf(\"-\") == 15) return false;\n        if (date.IndexOf(\"-\") == 16) return false;\n        if (date.IndexOf(\"-\") == 17) return false;\n        if (date.IndexOf(\"-\") == 18) return false;\n        if (date.IndexOf(\"-\") == 19) return false;\n        if (date.IndexOf(\"-\") == 20) return false;\n        if (date.IndexOf(\"-\") == 21) return false;\n        if (date.IndexOf(\"-\") == 22) return false;\n        if (date.IndexOf(\"-\") == 23) return false;\n        if (date.IndexOf(\"-\") == 24) return false;\n        if (date.IndexOf(\"-\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz_3qv_l9.cs(57,26): error CS1010: Newline in constant\n/tmp/tmpz_3qv_l9.cs(57,28): error CS1026: ) expected\n/tmp/tmpz_3qv_l9.cs(57,28): error CS1525: Invalid expression term '}'\n/tmp/tmpz_3qv_l9.cs(57,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 8)\n            return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) != \"0\")\n            return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_7e8n_5a.cs(57,40): error CS1026: ) expected\n/tmp/tmp_7e8n_5a.cs(57,40): error CS1525: Invalid expression term '}'\n/tmp/tmp_7e8n_5a.cs(57,40): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 8)\n            return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) != \"0\" && date.Substring(0, 2) != \"1\" && date.Substring(0, 2) != \"2\")\n                return false;\n            if (date.Substring(3, 2) != \"0\" && date.Substring(3, 2) != \"1\" && date.Substring(3, 2) != \"2\")\n                return false;\n            if (date.Substring(5, 2) != \"0\" && date.Substring(5, 2) != \"1\" && date.Substring(5, 2) != \"2\")\n                return false;\n            if (date.Substring(7, 2) != \"0\" && date.Substring(7, 2) != \"1\" && date.Substring(7, 2) != \"2\")\n                return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) != \"0\" && date.Substring(0, 2) != \"1\" && date.Substring(0, 2) != \"2\")\n                return false;\n            if (date.Substring(3, 2) != \"0\" && date.Substring(3, 2) != \"1\" && date.Substring(3, 2) != \"2\")\n                return false;\n            if (date.Substring(5, 2) != \"0\" && date.Substring(5, 2) != \"1\" && date.Substring(5, 2) != \"2\")\n                return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) != \"0\" && date.Substring(0, 2) != \"1\" && date.Substring(0, 2) != \"2\")\n                return false;\n            if (date.Substring(3, 2) != \"0\" && date.Substring(3, 2) != \"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpo8ic6juu.cs(54,72): error CS1010: Newline in constant\n/tmp/tmpo8ic6juu.cs(54,73): error CS1026: ) expected\n/tmp/tmpo8ic6juu.cs(54,73): error CS1525: Invalid expression term '}'\n/tmp/tmpo8ic6juu.cs(54,73): error CS1002: ; expected\n/tmp/tmpo8ic6juu.cs(56,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpo8ic6juu.cs(75,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbvxq67jw.cs(53,28): error CS1026: ) expected\n/tmp/tmpbvxq67jw.cs(53,28): error CS1525: Invalid expression term '}'\n/tmp/tmpbvxq67jw.cs(53,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp30i5aupq.cs(43,33): error CS1026: ) expected\n/tmp/tmp30i5aupq.cs(43,33): error CS1525: Invalid expression term '}'\n/tmp/tmp30i5aupq.cs(43,33): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 8) return false;\n        if (date.IndexOf(\"-\") == -1) return false;\n        if (date.IndexOf(\"-\") != 0) return false;\n        if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\")) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") - 1) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") - 2) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") - 3) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") - 4) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") - 5) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") - 6) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") - 7) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") - 8) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") - 9) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") - 10) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") - 11) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") - 12) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") - 13) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") - 14) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") - 15) return false;\n        if (date\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw6lqxsy_.cs(49,17): error CS1026: ) expected\n/tmp/tmpw6lqxsy_.cs(49,17): error CS1525: Invalid expression term '}'\n/tmp/tmpw6lqxsy_.cs(49,17): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 8)\n            return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) != \"0\")\n            return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\")\n            return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) == \"0\")\n            return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) != \"0\")\n            return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) == \"0\")\n            return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) != \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" || date.Substring(0, 2) == \"1\")\n            return false;\n        if (date.Substring(2, 2) == \"0\" || date.Substring(2, 2) == \"1\")\n            return false;\n        if (date.Substring(4, 2) == \"0\" || date.Substring(4, 2) == \"1\")\n            return false;\n        if (date.Substring(6, 2) == \"0\" || date.Substring(6, 2) == \"1\")\n            return false;\n        if (date.Substring(0, 2) == \"2\")\n            return false;\n        if (date.Substring(2, 2) == \"2\")\n            return false;\n        if (date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3ubpqqtv.cs(59,28): error CS1026: ) expected\n/tmp/tmp3ubpqqtv.cs(59,28): error CS1525: Invalid expression term '}'\n/tmp/tmp3ubpqqtv.cs(59,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length < 10)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length == 10) {\n            if (date[2] != '-')\n                return false;\n            if (date[5] != '-')\n                return false;\n            if (date[8] != '-')\n                return false;\n        }\n        if (date[0] < '0' || date[0] > '9')\n            return false;\n        if (date[1] < '0' || date[1] > '9')\n            return false;\n        if (date[2] < '0' || date[2] > '9')\n            return false;\n        if (date[3] < '0' || date[3] > '9')\n            return false;\n        if (date[4] < '0' || date[4] > '9')\n            return false;\n        if (date[5] < '0' || date[5] > '9')\n            return false;\n        if (date[6] < '0' || date[6] > '9')\n            return false;\n        if (date[7] < '0' || date[7] > '9')\n            return false;\n        if (date[8] < '0' || date[8] > '9')\n            return false;\n        if (date[9] < '0' || date[9] > '9')\n            return false;\n        if (date[10] < '0' || date[10] > '9')\n            return false;\n        if (date[11] < '0' || date[11] > '9')\n            return false;\n        if (date[12] < '0' || date[12] > '9')\n            return false;\n        if (date[13] < '0' || date[13] > '9')\n            return false;\n        if (date[14] < '0' || date[14] > '9')\n            return false;\n        if (date[15] < '0' ||\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6k7smyq7.cs(71,30): error CS1525: Invalid expression term '}'\n/tmp/tmp6k7smyq7.cs(71,30): error CS1026: ) expected\n/tmp/tmp6k7smyq7.cs(71,30): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 8)\n            return false;\n        if (date.IndexOf(\"-\") != 2)\n            return false;\n        if (date.IndexOf(\"/\") != 4)\n            return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 4)\n            return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 2)\n            return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") == 2)\n            return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 4)\n            return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") == 4)\n            return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 4)\n            return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") == 4)\n            return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 4)\n            return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") == 4)\n            return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 4)\n            return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") == 4)\n            return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 4)\n            return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") == 4)\n            return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 4)\n            return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") == 4)\n            return false;\n        if (date.IndexOf(\"-\") ==\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxfnoygp0.cs(65,33): error CS1525: Invalid expression term '}'\n/tmp/tmpxfnoygp0.cs(65,33): error CS1026: ) expected\n/tmp/tmpxfnoygp0.cs(65,33): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 10)\n            return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 9) {\n            if (date.Substring(0, 1) == \"0\" && date.Sub\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpop14xtdr.cs(70,56): error CS1026: ) expected\n/tmp/tmpop14xtdr.cs(70,56): error CS1525: Invalid expression term '}'\n/tmp/tmpop14xtdr.cs(70,56): error CS1002: ; expected\n/tmp/tmpop14xtdr.cs(72,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpop14xtdr.cs(91,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length < 8)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.IndexOf('-') == -1)\n            return false;\n        if (date.IndexOf('-') == 0)\n            return false;\n        if (date.IndexOf('-') == date.Length - 1)\n            return false;\n        if (date.IndexOf('-') == 1)\n            return false;\n        if (date.IndexOf('-') == 2)\n            return false;\n        if (date.IndexOf('-') == 3)\n            return false;\n        if (date.IndexOf('-') == 4)\n            return false;\n        if (date.IndexOf('-') == 5)\n            return false;\n        if (date.IndexOf('-') == 6)\n            return false;\n        if (date.IndexOf('-') == 7)\n            return false;\n        if (date.IndexOf('-') == 8)\n            return false;\n        if (date.IndexOf('-') == 9)\n            return false;\n        if (date.IndexOf('-') == 10)\n            return false;\n        if (date.IndexOf('-') == 11)\n            return false;\n        if (date.IndexOf('-') == 12)\n            return false;\n        if (date.IndexOf('-') == 13)\n            return false;\n        if (date.IndexOf('-') == 14)\n            return false;\n        if (date.IndexOf('-') == 15)\n            return false;\n        if (date.IndexOf('-') == 16)\n            return false;\n        if (date.IndexOf('-') == 17)\n            return false;\n        if (date.IndexOf('-') == 18)\n            return false;\n        if (date.IndexOf('-') == 19)\n            return false;\n        if (date.IndexOf('-') == 20)\n            return false;\n        if (date.IndexOf('-') == 21)\n            return false;\n        if (date.Index\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqrxi7dkf.cs(81,23): error CS1026: ) expected\n/tmp/tmpqrxi7dkf.cs(81,23): error CS1525: Invalid expression term '}'\n/tmp/tmpqrxi7dkf.cs(81,23): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        }\n        else {\n            if (date.IndexOf(\"/\") != -1) return false;\n        }\n        if (date.IndexOf(\"-\") == 0) {\n            if (date.Substring(0, 2) < \"01\" || date.Substring(0, 2) > \"12\") return false;\n            if (date.Substring(3, 2) < \"01\" || date.Substring(3, 2) > \"31\") return false;\n        }\n        else {\n            if (date.Substring(0, 1) < \"1\" || date.Substring(0, 1) > \"12\") return false;\n            if (date.Substring(1, 2) < \"01\" || date.Substring(1, 2) > \"30\") return false;\n        }\n        if (date.IndexOf(\"-\") == date.Length - 1) {\n            if (date.Substring(date.Length - 4, 4) < \"01\" || date.Substring(date.Length - 4, 4) > \"12\") return false;\n        }\n        else {\n            if (date.Substring(date.Length - 2, 2) < \"01\" || date.Substring(date.Length - 2, 2) > \"29\") return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnh34tnmu.cs(37,17): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpnh34tnmu.cs(37,48): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpnh34tnmu.cs(38,17): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpnh34tnmu.cs(38,48): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpnh34tnmu.cs(41,17): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpnh34tnmu.cs(41,47): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpnh34tnmu.cs(42,17): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpnh34tnmu.cs(42,48): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpnh34tnmu.cs(45,17): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpnh34tnmu.cs(45,62): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpnh34tnmu.cs(48,17): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpnh34tnmu.cs(48,62): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 8)\n            return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n            if (date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n            if (date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 1) == \"0\")\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6q1og50h.cs(82,45): error CS1525: Invalid expression term '}'\n/tmp/tmp6q1og50h.cs(82,45): error CS1002: ; expected\n/tmp/tmp6q1og50h.cs(84,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp6q1og50h.cs(103,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 10) return false;\n        if (date.Length == 10) {\n            if (date[2] != '-') return false;\n            if (date[5] != '-') return false;\n            if (date[8] != '-') return false;\n        }\n        if (date[0] < '0' || date[0] > '9') return false;\n        if (date[1] < '0' || date[1] > '9') return false;\n        if (date[2] < '0' || date[2] > '9') return false;\n        if (date[3] < '0' || date[3] > '9') return false;\n        if (date[4] < '0' || date[4] > '9') return false;\n        if (date[5] < '0' || date[5] > '9') return false;\n        if (date[6] < '0' || date[6] > '9') return false;\n        if (date[7] < '0' || date[7] > '9') return false;\n        if (date[8] < '0' || date[8] > '9') return false;\n        if (date[9] < '0' || date[9] > '9') return false;\n        if (date[10] < '0' || date[10] > '9') return false;\n        if (date[11] < '0' || date[11] > '9') return false;\n        if (date[12] < '0' || date[12] > '9') return false;\n        if (date[13] < '0' || date[13] > '9') return false;\n        if (date[14] < '0' || date[14] > '9') return false;\n        if (date[15] < '0' || date[15] > '9') return false;\n        if (date[16] < '0' || date[16] > '9') return false;\n        if (date[17\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_6nljie1.cs(52,20): error CS1003: Syntax error, ']' expected\n/tmp/tmp_6nljie1.cs(52,20): error CS1026: ) expected\n/tmp/tmp_6nljie1.cs(52,20): error CS1525: Invalid expression term '}'\n/tmp/tmp_6nljie1.cs(52,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 10)\n            return false;\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0)\n                return false;\n            if (date.Substring(0, 2).ToLower() != \"0\" && date.Substring(0, 2).ToLower() != \"1\" && date.Substring(0, 2).ToLower() != \"2\" && date.Substring(0, 2).ToLower() != \"3\" && date.Substring(0, 2).ToLower() != \"4\" && date.Substring(0, 2).ToLower() != \"5\" && date.Substring(0, 2).ToLower() != \"6\" && date.Substring(0, 2).ToLower() != \"7\" && date.Substring(0, 2).ToLower() != \"8\" && date.Substring(0, 2).ToLower() != \"9\" && date.Substring(0, 2).ToLower() != \"10\" && date.Substring(0, 2).ToLower() != \"11\" && date.Substring(0, 2).ToLower() != \"12\")\n                return false;\n            if (date.Substring(3, 2).ToLower() != \"0\" && date.Substring(3, 2).ToLower() != \"1\" && date.Substring(3, 2).ToLower() != \"2\" && date.Substring(3, 2).ToLower() != \"3\" && date.Substring(3, 2).ToLower() != \"4\" && date.Substring(3, 2).ToLower() != \"5\" && date.Substring(3, 2).ToLower() != \"6\" && date.Substring(3, 2).ToLower() != \"7\" && date.Substring(3, 2).ToLower() != \"8\" && date.Substring(3, 2).ToLower() != \"9\" && date.Substring(3, 2).ToLower() != \"10\" && date.Substring(3, 2).ToLower() != \"11\" && date.Substring(3, 2).ToLower() !=\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwis5jb2m.cs(36,544): error CS1525: Invalid expression term '}'\n/tmp/tmpwis5jb2m.cs(36,544): error CS1026: ) expected\n/tmp/tmpwis5jb2m.cs(36,544): error CS1002: ; expected\n/tmp/tmpwis5jb2m.cs(38,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpwis5jb2m.cs(57,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length != 10)\n            return false;\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 2)\n                return false;\n            if (date.IndexOf(\"-\") != 8)\n                return false;\n        }\n        else {\n            if (date.IndexOf(\"/\") != -1) {\n                if (date.IndexOf(\"/\") != 2)\n                    return false;\n                if (date.IndexOf(\"/\") != 8)\n                    return false;\n            }\n            else {\n                if (date.IndexOf(\".\") != -1) {\n                    if (date.IndexOf(\".\") != 2)\n                        return false;\n                    if (date.IndexOf(\".\") != 8)\n                        return false;\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 2)\n                return false;\n            if (date.IndexOf(\"-\") != 8)\n                return false;\n        }\n        else {\n            if (date.IndexOf(\"/\") != -1) {\n                if (date.IndexOf(\"/\") != 2)\n                    return false;\n                if (date.IndexOf(\"/\") != 8)\n                    return false;\n            }\n            else {\n                if (date.IndexOf(\".\") != -1) {\n                    if (date.IndexOf(\".\") != 2)\n                        return false;\n                    if (date.IndexOf(\".\") != 8)\n                        return false;\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 2)\n                return false;\n            if (date.IndexOf(\"-\") != 8)\n                return false;\n        }\n        else {\n            if (date.IndexOf(\"/\") != -1) {\n                if (date.IndexOf(\"/\") != 2)\n                    return false\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjomzowo_.cs(90,33): error CS1002: ; expected\n/tmp/tmpjomzowo_.cs(92,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpjomzowo_.cs(111,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.IndexOf(\"-\") != 3) return false;\n        if (date.IndexOf(\"/\") != 2) return false;\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Substring(0, 3).ToLower() != \"jan\") return false;\n            if (date.Substring(3, 2).ToLower() != \".\") return false;\n            if (date.Substring(5, 4).ToLower() != \"yyyy\") return false;\n        }\n        if (date.IndexOf(\"/\") == 2) {\n            if (date.Substring(0, 2).ToLower() != \"mm\") return false;\n            if (date.Substring(2, 1).ToLower() != \"-\") return false;\n            if (date.Substring(4, 2).ToLower() != \"dd\") return false;\n        }\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Substring(0, 2).ToLower() != \"mm\") return false;\n            if (date.Substring(2, 1).ToLower() != \"-\") return false;\n            if (date.Substring(4, 2).ToLower() != \"dd\") return false;\n        }\n        if (date.IndexOf(\"/\") == 2) {\n            if (date.Substring(0, 2).ToLower() != \"mm\") return false;\n            if (date.Substring(2, 1).ToLower() != \"-\") return false;\n            if (date.Substring(4, 2).ToLower() != \"dd\") return false;\n        }\n        if (date.IndexOf(\"/\") == 2) {\n            if (date.Substring(0, 2).ToLower() != \"mm\") return false;\n            if (date.Substring(2, 1).ToLower() != \"-\") return false;\n            if (date.Substring(4, 2).ToLower() != \"dd\") return false;\n        }\n        if (date.IndexOf(\"/\") == 2) {\n            if (date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6dn1qga_.cs(57,32): error CS1026: ) expected\n/tmp/tmp6dn1qga_.cs(57,32): error CS1525: Invalid expression term '}'\n/tmp/tmp6dn1qga_.cs(57,32): error CS1002: ; expected\n/tmp/tmp6dn1qga_.cs(59,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp6dn1qga_.cs(78,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length < 8) return false;\n        if (date.Length > 10) return false;\n        if (date.IndexOf(\"-\") == -1) return false;\n        if (date.IndexOf(\"-\") != 0) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\")) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 2) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 3) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 4) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 5) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 6) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 7) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 8) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 9) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 10) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 11) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 12) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 13) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 14) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 15) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 16) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp88leixsz.cs(49,46): error CS1026: ) expected\n/tmp/tmp88leixsz.cs(49,46): error CS1525: Invalid expression term '}'\n/tmp/tmp88leixsz.cs(49,46): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.IndexOf(\"-\") != 2) return false;\n        if (date.IndexOf(\"/\") != 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 0) return false;\n        if (date.IndexOf(\"-\") == 0 && date.IndexOf(\"/\") == 2) return false;\n        if (date.IndexOf(\"-\") == 0 && date.IndexOf(\"/\") == 0) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"-\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"-\") == 0) return false;\n        if (date.IndexOf(\"-\") == 0 && date.IndexOf(\"-\") == 2) return false;\n        if (date.IndexOf(\"-\") == 0 && date.IndexOf(\"-\") == 0) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"-\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"-\") == 0) return false;\n        if (date.IndexOf(\"-\") == 0 && date.IndexOf(\"-\") == 2) return false;\n        if (date.IndexOf(\"-\") == 0 && date.IndexOf(\"-\") == 0) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"-\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"-\") == 0) return false;\n        if (date.IndexOf(\"-\") == 0 && date.IndexOf(\"-\") == 2) return false;\n        if (date.IndexOf(\"-\") == 0 && date.IndexOf(\"-\") == 0) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"-\") == 2\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq91_clej.cs(47,61): error CS1026: ) expected\n/tmp/tmpq91_clej.cs(47,61): error CS1525: Invalid expression term '}'\n/tmp/tmpq91_clej.cs(47,61): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 10)\n            return false;\n        if (date.IndexOf(\"-\") == -1)\n            return false;\n        if (date.IndexOf(\"-\") == 0)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 1)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 2)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 3)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 4)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 5)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 6)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 7)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 8)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 9)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 10)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 11)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 12)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 13)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 14)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 15)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 16)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 17)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 18)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbuqe6d89.cs(73,45): error CS1026: ) expected\n/tmp/tmpbuqe6d89.cs(73,45): error CS1525: Invalid expression term '}'\n/tmp/tmpbuqe6d89.cs(73,45): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 10)\n            return false;\n        if (date.IndexOf(\"-\") == -1)\n            return false;\n        if (date.IndexOf(\"-\") == 0)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 1)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 2)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 3)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 4)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 5)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 6)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 7)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 8)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 9)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 10)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 11)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 12)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 13)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 14)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 15)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 16)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 17)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 18)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbuqe6d89.cs(73,45): error CS1026: ) expected\n/tmp/tmpbuqe6d89.cs(73,45): error CS1525: Invalid expression term '}'\n/tmp/tmpbuqe6d89.cs(73,45): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 8)\n            return false;\n        if (date.IndexOf(\"-\") == -1)\n            return false;\n        if (date.IndexOf(\"/\") == -1)\n            return false;\n        if (date.IndexOf(\"-\") > date.IndexOf(\"/\"))\n            return false;\n        if (date.IndexOf(\"-\") == 0)\n            return false;\n        if (date.IndexOf(\"/\") == 0)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 1)\n            return false;\n        if (date.IndexOf(\"/\") == date.Length - 1)\n            return false;\n        if (date.IndexOf(\"-\") < date.IndexOf(\"/\"))\n            return false;\n        if (date.IndexOf(\"-\") > date.IndexOf(\"/\"))\n            return false;\n        if (date.IndexOf(\"-\") < date.IndexOf(\"/\"))\n            return false;\n        if (date.IndexOf(\"-\") > date.IndexOf(\"/\"))\n            return false;\n        if (date.IndexOf(\"-\") < date.IndexOf(\"/\"))\n            return false;\n        if (date.IndexOf(\"-\") > date.IndexOf(\"/\"))\n            return false;\n        if (date.IndexOf(\"-\") < date.IndexOf(\"/\"))\n            return false;\n        if (date.IndexOf(\"-\") > date.IndexOf(\"/\"))\n            return false;\n        if (date.IndexOf(\"-\") < date.IndexOf(\"/\"))\n            return false;\n        if (date.IndexOf(\"-\") > date.IndexOf(\"/\"))\n            return false;\n        if (date.IndexOf(\"-\") < date.IndexOf(\"/\"))\n            return false;\n        if (date.IndexOf(\"-\") > date.IndexOf(\"/\"))\n            return false;\n        if (date.IndexOf(\"-\") < date.IndexOf(\"/\"))\n            return false;\n        if (date.IndexOf\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyh5gh_n7.cs(73,25): error CS1026: ) expected\n/tmp/tmpyh5gh_n7.cs(73,25): error CS1525: Invalid expression term '}'\n/tmp/tmpyh5gh_n7.cs(73,25): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 10) return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n            if (date.Substring(6, 2) == \"0\") return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\") return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 0) {\n            return false;\n        }\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n            if (date.Substring(6, 2) == \"0\") return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmp1ub0ui.cs(67,52): error CS1525: Invalid expression term '}'\n/tmp/tmpmp1ub0ui.cs(67,52): error CS1002: ; expected\n/tmp/tmpmp1ub0ui.cs(69,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpmp1ub0ui.cs(88,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"13\") return false;\n        if (date.Substring(3, 2) == \"13\") return false;\n        if (date.Substring(5, 2) == \"13\") return false;\n        if (date.Substring(7, 2) == \"13\") return false;\n        if (date.Substring(0, 2) == \"15\") return false;\n        if (date.Substring(3, 2) == \"15\") return false;\n        if (date.Substring(5, 2) == \"15\") return false;\n        if (date.Substring(7, 2) == \"15\") return false;\n        if (date.Substring(0, 2) == \"16\") return false;\n        if (date.Substring(3, 2) == \"16\") return false;\n        if (date.Substring(5, 2) == \"16\") return false;\n        if (date.Substring(7, 2) == \"16\") return false;\n        if (date.Substring(0, 2) == \"17\") return false;\n        if (date.Substring(3, 2) == \"17\") return false;\n        if (date.Substring(5, 2) == \"17\") return false;\n        if (date.Substring(7, 2) == \"17\") return false;\n        if (date.Substring(0, 2) == \"18\") return false;\n        if (date.Substring(3, 2) == \"18\") return false;\n        if (date.Substring(5, 2) == \"18\") return false;\n        if (date.Substring(7, 2) == \"18\") return false;\n        if (date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_a2zu2rt.cs(53,28): error CS1026: ) expected\n/tmp/tmp_a2zu2rt.cs(53,28): error CS1525: Invalid expression term '}'\n/tmp/tmp_a2zu2rt.cs(53,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 8) return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\") return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 9) {\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdukbbffm.cs(73,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpdukbbffm.cs(92,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 8)\n            return false;\n        if (date.IndexOf(\"-\") != 2)\n            return false;\n        if (date.IndexOf(\"/\") != 4)\n            return false;\n        if (date.IndexOf(\"-\") == 2) {\n            if (date.Substring(0, 2).ToLower() != \"01\" && date.Substring(0, 2).ToLower() != \"02\" && date.Substring(0, 2).ToLower() != \"03\" && date.Substring(0, 2).ToLower() != \"04\" && date.Substring(0, 2).ToLower() != \"05\" && date.Substring(0, 2).ToLower() != \"06\" && date.Substring(0, 2).ToLower() != \"07\" && date.Substring(0, 2).ToLower() != \"08\" && date.Substring(0, 2).ToLower() != \"09\" && date.Substring(0, 2).ToLower() != \"10\" && date.Substring(0, 2).ToLower() != \"11\" && date.Substring(0, 2).ToLower() != \"12\")\n                return false;\n            if (date.Substring(3, 2).ToLower() != \"01\" && date.Substring(3, 2).ToLower() != \"02\" && date.Substring(3, 2).ToLower() != \"03\" && date.Substring(3, 2).ToLower() != \"04\" && date.Substring(3, 2).ToLower() != \"05\" && date.Substring(3, 2).ToLower() != \"06\" && date.Substring(3, 2).ToLower() != \"07\" && date.Substring(3, 2).ToLower() != \"08\" && date.Substring(3, 2).ToLower() != \"09\" && date.Substring(3, 2).ToLower() != \"10\" && date.Substring(3, 2).ToLower() != \"11\" && date.Substring(3, 2).ToLower() != \"12\")\n                return false;\n        }\n        if (date\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl884r1xx.cs(41,17): error CS1026: ) expected\n/tmp/tmpl884r1xx.cs(41,17): error CS1525: Invalid expression term '}'\n/tmp/tmpl884r1xx.cs(41,17): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 10) return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\") return false;\n            if (date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\") return false;\n            if (date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\") return false;\n            if (date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\") return false;\n            if (date.Substring(1, 1) == \"0\") return false;\n            if (date.Substring(2, 1) == \"0\") return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 1) == \"0\") return false;\n            if (date.Substring(1,\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbprh0qao.cs(64,34): error CS1525: Invalid expression term '}'\n/tmp/tmpbprh0qao.cs(64,34): error CS1026: ) expected\n/tmp/tmpbprh0qao.cs(64,34): error CS1002: ; expected\n/tmp/tmpbprh0qao.cs(66,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpbprh0qao.cs(85,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        int month = 0;\n        int day = 0;\n        int year = 0;\n        int count = 0;\n        int[] monthDays = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        int[] monthDaysLeap = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        int[] monthDaysLeapLeap = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        int[] monthDaysLeapLeapLeap = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        int[] monthDaysLeapLeapLeapLeap = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        int[] monthDaysLeapLeapLeapLeapLeap = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        int[] monthDaysLeapLeapLeapLeapLeapLeap = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        int[] monthDaysLeapLeapLeapLeapLeapLeapLeap = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        int[] monthDaysLeapLeapLeapLeapLeapLeapLeapLeap = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        int[] monthDaysLeapLeapLeapLeapLeapLeapLeapLeapLeap = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        int[] monthDaysLeapLeapLeapLeapLeapLeapLeapLeapLeapLeap = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        int[] monthDaysLeapLeap\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2z1x4kb0.cs(43,32): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 10) return false;\n        if (date.IndexOf(\"-\") == -1) return false;\n        if (date.IndexOf(\"-\") == 0) return false;\n        if (date.IndexOf(\"-\") == date.Length - 1) return false;\n        if (date.IndexOf(\"-\") == 1) return false;\n        if (date.IndexOf(\"-\") == 2) return false;\n        if (date.IndexOf(\"-\") == 3) return false;\n        if (date.IndexOf(\"-\") == 4) return false;\n        if (date.IndexOf(\"-\") == 5) return false;\n        if (date.IndexOf(\"-\") == 6) return false;\n        if (date.IndexOf(\"-\") == 7) return false;\n        if (date.IndexOf(\"-\") == 8) return false;\n        if (date.IndexOf(\"-\") == 9) return false;\n        if (date.IndexOf(\"-\") == 10) return false;\n        if (date.IndexOf(\"-\") == 11) return false;\n        if (date.IndexOf(\"-\") == 12) return false;\n        if (date.IndexOf(\"-\") == 13) return false;\n        if (date.IndexOf(\"-\") == 14) return false;\n        if (date.IndexOf(\"-\") == 15) return false;\n        if (date.IndexOf(\"-\") == 16) return false;\n        if (date.IndexOf(\"-\") == 17) return false;\n        if (date.IndexOf(\"-\") == 18) return false;\n        if (date.IndexOf(\"-\") == 19) return false;\n        if (date.IndexOf(\"-\") == 20) return false;\n        if (date.IndexOf(\"-\") == 21) return false;\n        if (date.IndexOf(\"-\") == 22) return false;\n        if (date.IndexOf(\"-\") == 23) return false;\n        if (date.IndexOf(\"-\") == 24) return false;\n        if (date.IndexOf(\"-\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz_3qv_l9.cs(57,26): error CS1010: Newline in constant\n/tmp/tmpz_3qv_l9.cs(57,28): error CS1026: ) expected\n/tmp/tmpz_3qv_l9.cs(57,28): error CS1525: Invalid expression term '}'\n/tmp/tmpz_3qv_l9.cs(57,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length < 10) return false;\n        if (date.Length > 10) return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 13) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 14) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 16) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 19) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 20) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 23) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 24) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 26) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 27) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1stjgg07.cs(58,76): error CS1525: Invalid expression term '}'\n/tmp/tmp1stjgg07.cs(58,76): error CS1002: ; expected\n/tmp/tmp1stjgg07.cs(60,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp1stjgg07.cs(79,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        }\n        else if (date.IndexOf(\"/\") != -1) {\n            if (date.IndexOf(\"/\") != 0) return false;\n            if (date.IndexOf(\"/\") != date.Length - 1) return false;\n        }\n        else return false;\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        }\n        else if (date.IndexOf(\"/\") != -1) {\n            if (date.IndexOf(\"/\") != 0) return false;\n            if (date.IndexOf(\"/\") != date.Length - 1) return false;\n        }\n        else return false;\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        }\n        else if (date.IndexOf(\"/\") != -1) {\n            if (date.IndexOf(\"/\") != 0) return false;\n            if (date.IndexOf(\"/\") != date.Length - 1) return false;\n        }\n        else return false;\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        }\n        else if (date.IndexOf(\"/\") != -1) {\n            if (date.IndexOf(\"/\") != 0) return false;\n            if (date.IndexOf(\"/\") != date.Length - 1) return false;\n        }\n        else return false;\n        if (date\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5ye0c15l.cs(65,17): error CS1026: ) expected\n/tmp/tmp5ye0c15l.cs(65,17): error CS1525: Invalid expression term '}'\n/tmp/tmp5ye0c15l.cs(65,17): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) != \"0\") return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" || date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" || date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" || date.Substring(2, 2) != \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" || date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(0, 2) != \"0\" || date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) != \"0\" || date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbimukm_q.cs(43,33): error CS1026: ) expected\n/tmp/tmpbimukm_q.cs(43,33): error CS1525: Invalid expression term '}'\n/tmp/tmpbimukm_q.cs(43,33): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 8)\n            return false;\n        if (date.Substring(0, 2) == \"0\")\n            return false;\n        if (date.Substring(3, 2) == \"0\")\n            return false;\n        if (date.Substring(5, 2) == \"0\")\n            return false;\n        if (date.Substring(7, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) > \"12\")\n            return false;\n        if (date.Substring(3, 2) > \"12\")\n            return false;\n        if (date.Substring(5, 2) > \"12\")\n            return false;\n        if (date.Substring(7, 2) > \"12\")\n            return false;\n        if (date.Substring(0, 2) < \"1\")\n            return false;\n        if (date.Substring(3, 2) < \"1\")\n            return false;\n        if (date.Substring(5, 2) < \"1\")\n            return false;\n        if (date.Substring(7, 2) < \"1\")\n            return false;\n        if (date.Substring(0, 2) > \"31\")\n            return false;\n        if (date.Substring(3, 2) > \"31\")\n            return false;\n        if (date.Substring(5, 2) > \"31\")\n            return false;\n        if (date.Substring(7, 2) > \"31\")\n            return false;\n        if (date.Substring(0, 2) < \"1\")\n            return false;\n        if (date.Substring(3, 2) < \"1\")\n            return false;\n        if (date.Substring(5, 2) < \"1\")\n            return false;\n        if (date.Substring(7, 2) < \"1\")\n            return false;\n        if (date.Substring(0, 2) > \"30\")\n            return false;\n        if (date.Substring(3, 2) > \"30\")\n            return false;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptzu33we0.cs(39,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(41,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(43,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(45,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(47,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(49,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(51,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(53,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(55,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(57,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(59,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(61,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(63,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(65,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(67,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(69,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(71,13): error CS0019: Operator '>' cannot be applied to opera",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) > \"12\") return false;\n        if (date.Substring(3, 2) > \"12\") return false;\n        if (date.Substring(6, 2) > \"12\") return false;\n        if (date.Substring(0, 2) < \"1\") return false;\n        if (date.Substring(3, 2) < \"1\") return false;\n        if (date.Substring(6, 2) < \"1\") return false;\n        if (date.Substring(0, 2) > \"31\") return false;\n        if (date.Substring(3, 2) > \"31\") return false;\n        if (date.Substring(6, 2) > \"31\") return false;\n        if (date.Substring(0, 2) < \"1\") return false;\n        if (date.Substring(3, 2) < \"1\") return false;\n        if (date.Substring(6, 2) < \"1\") return false;\n        if (date.Substring(0, 2) > \"30\") return false;\n        if (date.Substring(3, 2) > \"30\") return false;\n        if (date.Substring(6, 2) > \"30\") return false;\n        if (date.Substring(0, 2) < \"1\") return false;\n        if (date.Substring(3, 2) < \"1\") return false;\n        if (date.Substring(6, 2) < \"1\") return false;\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuox0nr6n.cs(32,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(33,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(34,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(35,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(36,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(37,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(38,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(39,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(40,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(41,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(42,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(43,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(44,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(45,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(46,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(47,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(48,13): error CS0019: Operator '<' cannot be applied to opera",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length < 10) return false;\n        if (date.Length > 10) return false;\n        if (date.IndexOf(\"-\") == -1) return false;\n        if (date.IndexOf(\"-\") == 0) return false;\n        if (date.IndexOf(\"-\") == date.Length - 1) return false;\n        if (date.IndexOf(\"-\") == 1) return false;\n        if (date.IndexOf(\"-\") == 2) return false;\n        if (date.IndexOf(\"-\") == 3) return false;\n        if (date.IndexOf(\"-\") == 4) return false;\n        if (date.IndexOf(\"-\") == 5) return false;\n        if (date.IndexOf(\"-\") == 6) return false;\n        if (date.IndexOf(\"-\") == 7) return false;\n        if (date.IndexOf(\"-\") == 8) return false;\n        if (date.IndexOf(\"-\") == 9) return false;\n        if (date.IndexOf(\"-\") == 10) return false;\n        if (date.IndexOf(\"-\") == 11) return false;\n        if (date.IndexOf(\"-\") == 12) return false;\n        if (date.IndexOf(\"-\") == 13) return false;\n        if (date.IndexOf(\"-\") == 14) return false;\n        if (date.IndexOf(\"-\") == 15) return false;\n        if (date.IndexOf(\"-\") == 16) return false;\n        if (date.IndexOf(\"-\") == 17) return false;\n        if (date.IndexOf(\"-\") == 18) return false;\n        if (date.IndexOf(\"-\") == 19) return false;\n        if (date.IndexOf(\"-\") == 20) return false;\n        if (date.IndexOf(\"-\") == 21) return false;\n        if (date.IndexOf(\"-\") == 22) return false;\n        if (date.IndexOf(\"-\") == 23) return false;\n        if (date.IndexOf(\"-\") == 24) return false;\n        if (date.IndexOf(\"-\") ==\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn6ofkxjd.cs(57,33): error CS1525: Invalid expression term '}'\n/tmp/tmpn6ofkxjd.cs(57,33): error CS1026: ) expected\n/tmp/tmpn6ofkxjd.cs(57,33): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.IndexOf(\"-\") != 3) return false;\n        if (date.IndexOf(\"/\") != 2) return false;\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Substring(0, 3) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n            if (date.Substring(5, 2) == \"0\") return false;\n        }\n        if (date.IndexOf(\"/\") == 2) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(2, 2) == \"0\") return false;\n            if (date.Substring(4, 2) == \"0\") return false;\n        }\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Substring(0, 3) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n            if (date.Substring(5, 2) == \"0\") return false;\n        }\n        if (date.IndexOf(\"/\") == 2) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(2, 2) == \"0\") return false;\n            if (date.Substring(4, 2) == \"0\") return false;\n        }\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\") return false;\n        if\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptwde7dgl.cs(58,11): error CS1003: Syntax error, '(' expected\n/tmp/tmptwde7dgl.cs(58,11): error CS1525: Invalid expression term '}'\n/tmp/tmptwde7dgl.cs(58,11): error CS1026: ) expected\n/tmp/tmptwde7dgl.cs(58,11): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbvxq67jw.cs(53,28): error CS1026: ) expected\n/tmp/tmpbvxq67jw.cs(53,28): error CS1525: Invalid expression term '}'\n/tmp/tmpbvxq67jw.cs(53,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.IndexOf(\"-\") != 4) return false;\n        if (date.IndexOf(\"/\") != 4) return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") != 4) return false;\n        if (date.IndexOf(\"-\") != 4 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"-\") != 4 && date.IndexOf(\"/\") != 4) return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") == 4 && date.IndexOf(\"-\") == 4) return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") == 4 && date.IndexOf(\"-\") != 4) return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") == 4 && date.IndexOf(\"-\") != 4) return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") == 4 && date.IndexOf(\"-\") == 4) return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") == 4 && date.IndexOf(\"-\") == 4 && date.IndexOf(\"-\") != 4) return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") == 4 && date.IndexOf(\"-\") == 4 && date.IndexOf(\"-\") != 4) return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") == 4 && date.IndexOf(\"-\") == 4 && date.IndexOf(\"-\") == 4) return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") == 4 && date.IndexOf(\"-\") == 4 && date.IndexOf(\"-\") == 4 && date.IndexOf(\"-\") != 4) return false;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpab29cymi.cs(26,24): error CS0161: 'Problem.ValidDate(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length < 8)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.IndexOf(\"-\") == -1)\n            return false;\n        if (date.IndexOf(\"/\") == -1)\n            return false;\n        if (date.IndexOf(\"-\") < date.IndexOf(\"/\"))\n            return false;\n        if (date.IndexOf(\"-\") > date.IndexOf(\"/\"))\n            return false;\n        if (date.IndexOf(\"-\") == 0)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 1)\n            return false;\n        if (date.IndexOf(\"/\") == 0)\n            return false;\n        if (date.IndexOf(\"/\") == date.Length - 1)\n            return false;\n        if (date.IndexOf(\"/\") < date.IndexOf(\"-\"))\n            return false;\n        if (date.IndexOf(\"/\") > date.IndexOf(\"-\"))\n            return false;\n        if (date.IndexOf(\"/\") == 0)\n            return false;\n        if (date.IndexOf(\"/\") == date.Length - 1)\n            return false;\n        if (date.IndexOf(\"-\") == 0)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 1)\n            return false;\n        if (date.IndexOf(\"-\") < date.IndexOf(\"/\"))\n            return false;\n        if (date.IndexOf(\"-\") > date.IndexOf(\"/\"))\n            return false;\n        if (date.IndexOf(\"-\") == 0)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 1)\n            return false;\n        if (date.IndexOf(\"/\") == 0)\n            return false;\n        if (date.IndexOf(\"/\") == date.Length - 1)\n            return false;\n        if (date.IndexOf(\"/\") < date.IndexOf(\"-\"))\n            return false;\n        if (date.IndexOf\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2ddci4yd.cs(75,25): error CS1026: ) expected\n/tmp/tmp2ddci4yd.cs(75,25): error CS1525: Invalid expression term '}'\n/tmp/tmp2ddci4yd.cs(75,25): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 10)\n            return false;\n        if (date.IndexOf(\"-\") == -1)\n            return false;\n        if (date.IndexOf(\"-\") == 0)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 1)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 2)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 3)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 4)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 5)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 6)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 7)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 8)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 9)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 10)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 11)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 12)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 13)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 14)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 15)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 16)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 17)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length - 18)\n            return false;\n        if (date.IndexOf(\"-\") == date.Length\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbuqe6d89.cs(73,45): error CS1026: ) expected\n/tmp/tmpbuqe6d89.cs(73,45): error CS1525: Invalid expression term '}'\n/tmp/tmpbuqe6d89.cs(73,45): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length != 10)\n            return false;\n        if (date.IndexOf(\"-\") == -1)\n            return false;\n        if (date.IndexOf(\"-\") != 0)\n            return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\"))\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1)\n            return false;\n        if (date.IndexOf(\"-\") != date.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbb2hmjm9.cs(67,39): error CS1001: Identifier expected\n/tmp/tmpbb2hmjm9.cs(67,39): error CS1026: ) expected\n/tmp/tmpbb2hmjm9.cs(67,39): error CS1525: Invalid expression term '}'\n/tmp/tmpbb2hmjm9.cs(67,39): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.IndexOf(\"-\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"-\") == -1 && date.IndexOf(\"/\") == -1) return false;\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        }\n        if (date.IndexOf(\"/\") != -1) {\n            if (date.IndexOf(\"/\") != 0) return false;\n            if (date.IndexOf(\"/\") != date.Length - 1) return false;\n        }\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        }\n        if (date.IndexOf(\"/\") != -1) {\n            if (date.IndexOf(\"/\") != 0) return false;\n            if (date.IndexOf(\"/\") != date.Length - 1) return false;\n        }\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        }\n        if (date.IndexOf(\"/\") != -1) {\n            if (date.IndexOf(\"/\") != 0) return false;\n            if (date.IndexOf(\"/\") != date.Length - 1) return false;\n        }\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        }\n        if (date.IndexOf(\"/\") != -1) {\n            if (date.IndexOf(\"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpe3xwb07a.cs(61,30): error CS1010: Newline in constant\n/tmp/tmpe3xwb07a.cs(61,31): error CS1026: ) expected\n/tmp/tmpe3xwb07a.cs(61,31): error CS1525: Invalid expression term '}'\n/tmp/tmpe3xwb07a.cs(61,31): error CS1002: ; expected\n/tmp/tmpe3xwb07a.cs(63,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpe3xwb07a.cs(82,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 10) return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n            if (date.Substring(6, 2) == \"0\") return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\") return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 0) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length > 10) return false;\n        if (date.Length < 10) return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n            if (date.Substring(6, 2) == \"0\") return false;\n        }\n        if (date.Length ==\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz10qb_xv.cs(67,27): error CS1525: Invalid expression term '}'\n/tmp/tmpz10qb_xv.cs(67,27): error CS1026: ) expected\n/tmp/tmpz10qb_xv.cs(67,27): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 10) return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length == 9) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length ==\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxkei3yzc.cs(60,27): error CS1525: Invalid expression term '}'\n/tmp/tmpxkei3yzc.cs(60,27): error CS1026: ) expected\n/tmp/tmpxkei3yzc.cs(60,27): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 8)\n            return false;\n        if (date.Substring(0, 2) == \"0\")\n            return false;\n        if (date.Substring(3, 2) == \"0\")\n            return false;\n        if (date.Substring(5, 2) == \"0\")\n            return false;\n        if (date.Substring(7, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) > \"12\")\n            return false;\n        if (date.Substring(3, 2) > \"12\")\n            return false;\n        if (date.Substring(5, 2) > \"12\")\n            return false;\n        if (date.Substring(7, 2) > \"12\")\n            return false;\n        if (date.Substring(0, 2) < \"1\")\n            return false;\n        if (date.Substring(3, 2) < \"1\")\n            return false;\n        if (date.Substring(5, 2) < \"1\")\n            return false;\n        if (date.Substring(7, 2) < \"1\")\n            return false;\n        if (date.Substring(0, 2) > \"31\")\n            return false;\n        if (date.Substring(3, 2) > \"31\")\n            return false;\n        if (date.Substring(5, 2) > \"31\")\n            return false;\n        if (date.Substring(7, 2) > \"31\")\n            return false;\n        if (date.Substring(0, 2) < \"1\")\n            return false;\n        if (date.Substring(3, 2) < \"1\")\n            return false;\n        if (date.Substring(5, 2) < \"1\")\n            return false;\n        if (date.Substring(7, 2) < \"1\")\n            return false;\n        if (date.Substring(0, 2) > \"30\")\n            return false;\n        if (date.Substring(3, 2) > \"30\")\n            return false;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptzu33we0.cs(39,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(41,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(43,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(45,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(47,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(49,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(51,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(53,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(55,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(57,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(59,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(61,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(63,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(65,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(67,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(69,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(71,13): error CS0019: Operator '>' cannot be applied to opera",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(0, 2) > \"12\") return false;\n        if (date.Substring(3, 2) > \"12\") return false;\n        if (date.Substring(5, 2) > \"12\") return false;\n        if (date.Substring(7, 2) > \"12\") return false;\n        if (date.Substring(0, 2) < \"1\") return false;\n        if (date.Substring(3, 2) < \"1\") return false;\n        if (date.Substring(5, 2) < \"1\") return false;\n        if (date.Substring(7, 2) < \"1\") return false;\n        if (date.Substring(0, 2) > \"31\") return false;\n        if (date.Substring(3, 2) > \"31\") return false;\n        if (date.Substring(5, 2) > \"31\") return false;\n        if (date.Substring(7, 2) > \"31\") return false;\n        if (date.Substring(0, 2) < \"1\") return false;\n        if (date.Substring(3, 2) < \"1\") return false;\n        if (date.Substring(5, 2) < \"1\") return false;\n        if (date.Substring(7, 2) < \"1\") return false;\n        if (date.Substring(0, 2) > \"30\") return false;\n        if (date.Substring(3, 2) > \"30\") return false;\n        if (date.Substring(5, 2) > \"30\") return false;\n        if (date.Substring(7, 2) > \"30\") return false;\n        if (date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2w744d3p.cs(53,28): error CS1026: ) expected\n/tmp/tmp2w744d3p.cs(53,28): error CS1525: Invalid expression term '}'\n/tmp/tmp2w744d3p.cs(53,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length < 10)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.IndexOf(\"-\") == -1)\n            return false;\n        if (date.IndexOf(\"-\") != 0)\n            return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\"))\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") - 1)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") - 2)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") - 3)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") - 4)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") - 5)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") - 6)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") - 7)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") - 8)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") - 9)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") - 10)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") - 11)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") - 12)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") - 13)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") - 14)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") - 15)\n            return false\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxdi5r48k.cs(68,25): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) > \"12\") return false;\n        if (date.Substring(3, 2) > \"12\") return false;\n        if (date.Substring(6, 2) > \"12\") return false;\n        if (date.Substring(0, 2) < \"1\") return false;\n        if (date.Substring(3, 2) < \"1\") return false;\n        if (date.Substring(6, 2) < \"1\") return false;\n        if (date.Substring(0, 2) > \"31\") return false;\n        if (date.Substring(3, 2) > \"31\") return false;\n        if (date.Substring(6, 2) > \"31\") return false;\n        if (date.Substring(0, 2) < \"1\") return false;\n        if (date.Substring(3, 2) < \"1\") return false;\n        if (date.Substring(6, 2) < \"1\") return false;\n        if (date.Substring(0, 2) > \"30\") return false;\n        if (date.Substring(3, 2) > \"30\") return false;\n        if (date.Substring(6, 2) > \"30\") return false;\n        if (date.Substring(0, 2) < \"1\") return false;\n        if (date.Substring(3, 2) < \"1\") return false;\n        if (date.Substring(6, 2) < \"1\") return false;\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuox0nr6n.cs(32,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(33,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(34,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(35,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(36,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(37,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(38,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(39,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(40,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(41,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(42,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(43,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(44,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(45,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(46,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(47,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(48,13): error CS0019: Operator '<' cannot be applied to opera",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 8)\n            return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n            if (date.Substring(3, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 9) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 11) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 12) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 13) {\n            if\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoe29fy9e.cs(84,15): error CS1003: Syntax error, '(' expected\n/tmp/tmpoe29fy9e.cs(84,15): error CS1525: Invalid expression term '}'\n/tmp/tmpoe29fy9e.cs(84,15): error CS1026: ) expected\n/tmp/tmpoe29fy9e.cs(84,15): error CS1002: ; expected\n/tmp/tmpoe29fy9e.cs(86,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpoe29fy9e.cs(105,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length < 8)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length == 10) {\n            if (date[4] != '-')\n                return false;\n            if (date[7] != '-')\n                return false;\n        }\n        if (date[0] < '0' || date[0] > '9')\n            return false;\n        if (date[1] < '0' || date[1] > '9')\n            return false;\n        if (date[2] < '0' || date[2] > '9')\n            return false;\n        if (date[3] < '0' || date[3] > '9')\n            return false;\n        if (date[5] < '0' || date[5] > '9')\n            return false;\n        if (date[6] < '0' || date[6] > '9')\n            return false;\n        if (date[8] < '0' || date[8] > '9')\n            return false;\n        if (date[9] < '0' || date[9] > '9')\n            return false;\n        if (date[10] < '0' || date[10] > '9')\n            return false;\n        if (date[11] < '0' || date[11] > '9')\n            return false;\n        if (date[12] < '0' || date[12] > '9')\n            return false;\n        if (date[13] < '0' || date[13] > '9')\n            return false;\n        if (date[14] < '0' || date[14] > '9')\n            return false;\n        if (date[15] < '0' || date[15] > '9')\n            return false;\n        if (date[16] < '0' || date[16] > '9')\n            return false;\n        if (date[17] < '0' || date[17] > '9')\n            return false;\n        if (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnub7q5rp.cs(71,13): error CS1525: Invalid expression term '}'\n/tmp/tmpnub7q5rp.cs(71,13): error CS1026: ) expected\n/tmp/tmpnub7q5rp.cs(71,13): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 8)\n            return false;\n        if (date.IndexOf(\"-\") != 3)\n            return false;\n        if (date.IndexOf(\"/\") != 2)\n            return false;\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Substring(0, 3).ToLower() != \"jan\")\n                return false;\n            if (date.Substring(3, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(5, 2).ToLower() != \"01\")\n                return false;\n        }\n        if (date.IndexOf(\"/\") == 2) {\n            if (date.Substring(0, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(2, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(4, 2).ToLower() != \"01\")\n                return false;\n        }\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Substring(0, 3).ToLower() != \"jan\")\n                return false;\n            if (date.Substring(3, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(5, 2).ToLower() != \"01\")\n                return false;\n        }\n        if (date.IndexOf(\"/\") == 2) {\n            if (date.Substring(0, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(2, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(4, 2).ToLower() != \"01\")\n                return false;\n        }\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Substring(0, 3).ToLower() != \"jan\")\n                return false;\n            if (date.Substring(3, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(5\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmps2imfoqr.cs(72,33): error CS1026: ) expected\n/tmp/tmps2imfoqr.cs(72,33): error CS1525: Invalid expression term '}'\n/tmp/tmps2imfoqr.cs(72,33): error CS1002: ; expected\n/tmp/tmps2imfoqr.cs(74,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmps2imfoqr.cs(93,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdo_u3aqp.cs(43,33): error CS1026: ) expected\n/tmp/tmpdo_u3aqp.cs(43,33): error CS1525: Invalid expression term '}'\n/tmp/tmpdo_u3aqp.cs(43,33): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length < 8) return false;\n        if (date.Length > 12) return false;\n        if (date.IndexOf(\"-\") == -1) return false;\n        if (date.IndexOf(\"-\") != 0) return false;\n        if (date.IndexOf(\"-\") != date.Length - 3) return false;\n        if (date.IndexOf(\"-\") != date.Length - 2) return false;\n        if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        if (date.IndexOf(\"-\") != date.Length - 4) return false;\n        if (date.IndexOf(\"-\") != date.Length - 5) return false;\n        if (date.IndexOf(\"-\") != date.Length - 6) return false;\n        if (date.IndexOf(\"-\") != date.Length - 7) return false;\n        if (date.IndexOf(\"-\") != date.Length - 8) return false;\n        if (date.IndexOf(\"-\") != date.Length - 9) return false;\n        if (date.IndexOf(\"-\") != date.Length - 10) return false;\n        if (date.IndexOf(\"-\") != date.Length - 11) return false;\n        if (date.IndexOf(\"-\") != date.Length - 12) return false;\n        if (date.IndexOf(\"-\") != date.Length - 13) return false;\n        if (date.IndexOf(\"-\") != date.Length - 14) return false;\n        if (date.IndexOf(\"-\") != date.Length - 15) return false;\n        if (date.IndexOf(\"-\") != date.Length - 16) return false;\n        if (date.IndexOf(\"-\") != date.Length - 17) return false;\n        if (date.IndexOf(\"-\") != date.Length - 18) return false;\n        if (date.IndexOf(\"-\") != date.Length - 19) return false;\n        if (date.IndexOf(\"-\") != date.Length - 20) return false;\n        if (date.IndexOf(\"-\") != date.Length - 21) return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpf5oy1tat.cs(52,58): error CS1525: Invalid expression term '}'\n/tmp/tmpf5oy1tat.cs(52,58): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 10)\n            return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 9) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 11) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 12) {\n            if (date.Substring(0, 1) == \"0\")\n                \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcii3owzo.cs(78,45): error CS1525: Invalid expression term '}'\n/tmp/tmpcii3owzo.cs(78,45): error CS1002: ; expected\n/tmp/tmpcii3owzo.cs(81,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpcii3owzo.cs(100,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0o7z2agc.cs(53,28): error CS1026: ) expected\n/tmp/tmp0o7z2agc.cs(53,28): error CS1525: Invalid expression term '}'\n/tmp/tmp0o7z2agc.cs(53,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.Substring(0, 2) != \"0\" && date.Substring(0, 2) != \"1\" && date.Substring(0, 2) != \"2\" && date.Substring(0, 2) != \"3\" && date.Substring(0, 2) != \"4\" && date.Substring(0, 2) != \"5\" && date.Substring(0, 2) != \"6\" && date.Substring(0, 2) != \"7\" && date.Substring(0, 2) != \"8\" && date.Substring(0, 2) != \"9\" && date.Substring(0, 2) != \"10\" && date.Substring(0, 2) != \"11\" && date.Substring(0, 2) != \"12\") return false;\n            if (date.Substring(2, 2) != \"0\" && date.Substring(2, 2) != \"1\" && date.Substring(2, 2) != \"2\" && date.Substring(2, 2) != \"3\" && date.Substring(2, 2) != \"4\" && date.Substring(2, 2) != \"5\" && date.Substring(2, 2) != \"6\" && date.Substring(2, 2) != \"7\" && date.Substring(2, 2) != \"8\" && date.Substring(2, 2) != \"9\" && date.Substring(2, 2) != \"10\" && date.Substring(2, 2) != \"11\" && date.Substring(2, 2) != \"12\") return false;\n        }\n        else {\n            if (date.IndexOf(\"/\") != -1) return false;\n            if (date.IndexOf(\"-\") != -1) return false;\n            if (date.Substring(0, 2) != \"0\" && date.Substring(0, 2) != \"1\" && date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn_6rmboy.cs(37,94): error CS1026: ) expected\n/tmp/tmpn_6rmboy.cs(37,94): error CS1525: Invalid expression term '}'\n/tmp/tmpn_6rmboy.cs(37,94): error CS1002: ; expected\n/tmp/tmpn_6rmboy.cs(39,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpn_6rmboy.cs(58,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbvxq67jw.cs(53,28): error CS1026: ) expected\n/tmp/tmpbvxq67jw.cs(53,28): error CS1525: Invalid expression term '}'\n/tmp/tmpbvxq67jw.cs(53,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 8)\n            return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 9) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 11) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppdz9aj9k.cs(26,24): error CS0161: 'Problem.ValidDate(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.Substring(0, 2) == \"0\" || date.Substring(0, 2) == \"1\" || date.Substring(0, 2) == \"2\" || date.Substring(0, 2) == \"3\" || date.Substring(0, 2) == \"4\" || date.Substring(0, 2) == \"5\" || date.Substring(0, 2) == \"6\" || date.Substring(0, 2) == \"7\" || date.Substring(0, 2) == \"8\" || date.Substring(0, 2) == \"9\" || date.Substring(0, 2) == \"10\" || date.Substring(0, 2) == \"11\" || date.Substring(0, 2) == \"12\")\n            return false;\n        if (date.Substring(3, 2) == \"0\" || date.Substring(3, 2) == \"1\" || date.Substring(3, 2) == \"2\" || date.Substring(3, 2) == \"3\" || date.Substring(3, 2) == \"4\" || date.Substring(3, 2) == \"5\" || date.Substring(3, 2) == \"6\" || date.Substring(3, 2) == \"7\" || date.Substring(3, 2) == \"8\" || date.Substring(3, 2) == \"9\" || date.Substring(3, 2) == \"10\" || date.Substring(3, 2) == \"11\" || date.Substring(3, 2) == \"12\")\n            return false;\n        if (date.Substring(5, 2) == \"0\" || date.Substring(5, 2) == \"1\" || date.Substring(5, 2) == \"2\" || date.Substring(5, 2) == \"3\" || date.Substring(5, 2) == \"4\" || date.Substring(5, 2) == \"5\" || date.Substring(5, 2) == \"6\" || date.Substring(5,\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk9o5ts9r.cs(33,247): error CS1525: Invalid expression term '}'\n/tmp/tmpk9o5ts9r.cs(33,247): error CS1026: ) expected\n/tmp/tmpk9o5ts9r.cs(33,247): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(8, 4) == \"0000\") return false;\n        if (date.Substring(2, 2) > \"12\") return false;\n        if (date.Substring(5, 2) > \"31\") return false;\n        if (date.Substring(8, 4) > \"9999\") return false;\n        if (date.Substring(2, 2) < \"1\") return false;\n        if (date.Substring(5, 2) < \"1\") return false;\n        if (date.Substring(8, 4) < \"1\") return false;\n        if (date.Substring(2, 2) > \"2\") return false;\n        if (date.Substring(5, 2) > \"29\") return false;\n        if (date.Substring(8, 4) > \"9999\") return false;\n        if (date.Substring(2, 2) < \"1\") return false;\n        if (date.Substring(5, 2) < \"1\") return false;\n        if (date.Substring(8, 4) < \"1\") return false;\n        if (date.Substring(2, 2) > \"12\") return false;\n        if (date.Substring(5, 2) > \"31\") return false;\n        if (date.Substring(8, 4) > \"9999\") return false;\n        if (date.Substring(2, 2) < \"1\") return false;\n        if (date.Substring(5, 2) < \"1\") return false;\n        if (date.Substring(8, 4) < \"1\") return false;\n        if (date.Substring(2, 2) > \"12\") return false;\n        if (date.Substring(5, 2) > \"31\") return false;\n        if (date.Substring(8, 4) > \"9999\") return false;\n        if (date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpua6t0au2.cs(53,28): error CS1026: ) expected\n/tmp/tmpua6t0au2.cs(53,28): error CS1525: Invalid expression term '}'\n/tmp/tmpua6t0au2.cs(53,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpivwja512.cs(43,33): error CS1026: ) expected\n/tmp/tmpivwja512.cs(43,33): error CS1525: Invalid expression term '}'\n/tmp/tmpivwja512.cs(43,33): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(8, 4) == \"0000\") return false;\n        if (date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(8, 4) == \"0000\") return false;\n        if (date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(8, 4) == \"0000\") return false;\n        if (date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(8, 4) == \"0000\") return false;\n        if (date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(8, 4) == \"0000\") return false;\n        if (date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(8, 4) == \"0000\") return false;\n        if (date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(8, 4) == \"0000\") return false;\n        if (date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(8, 4) == \"0000\") return false;\n        if (date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuohd_4mb.cs(53,28): error CS1026: ) expected\n/tmp/tmpuohd_4mb.cs(53,28): error CS1525: Invalid expression term '}'\n/tmp/tmpuohd_4mb.cs(53,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 10) return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\") return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\") return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\") return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 9) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 11) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 12) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 13) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 14) {\n            if (date.Substring(0, 1) == \"0\") return false;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgw1tanlc.cs(73,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpgw1tanlc.cs(92,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 10)\n            return false;\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0)\n                return false;\n            if (date.Substring(0, 2).ToLower() != \"0\" && date.Substring(0, 2).ToLower() != \"1\" && date.Substring(0, 2).ToLower() != \"2\" && date.Substring(0, 2).ToLower() != \"3\" && date.Substring(0, 2).ToLower() != \"4\" && date.Substring(0, 2).ToLower() != \"5\" && date.Substring(0, 2).ToLower() != \"6\" && date.Substring(0, 2).ToLower() != \"7\" && date.Substring(0, 2).ToLower() != \"8\" && date.Substring(0, 2).ToLower() != \"9\" && date.Substring(0, 2).ToLower() != \"10\" && date.Substring(0, 2).ToLower() != \"11\" && date.Substring(0, 2).ToLower() != \"12\")\n                return false;\n            if (date.Substring(3, 2).ToLower() != \"0\" && date.Substring(3, 2).ToLower() != \"1\" && date.Substring(3, 2).ToLower() != \"2\" && date.Substring(3, 2).ToLower() != \"3\" && date.Substring(3, 2).ToLower() != \"4\" && date.Substring(3, 2).ToLower() != \"5\" && date.Substring(3, 2).ToLower() != \"6\" && date.Substring(3, 2).ToLower() != \"7\" && date.Substring(3, 2).ToLower() != \"8\" && date.Substring(3, 2).ToLower() != \"9\" && date.Substring(3, 2).ToLower() != \"10\" && date.Substring(3, 2).ToLower() != \"11\" && date.Substring(3, 2).ToLower() !=\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwis5jb2m.cs(36,544): error CS1525: Invalid expression term '}'\n/tmp/tmpwis5jb2m.cs(36,544): error CS1026: ) expected\n/tmp/tmpwis5jb2m.cs(36,544): error CS1002: ; expected\n/tmp/tmpwis5jb2m.cs(38,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpwis5jb2m.cs(57,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 8)\n            return false;\n        if (date.Substring(0, 2) == \"0\")\n            return false;\n        if (date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(4, 2) == \"0\")\n            return false;\n        if (date.Substring(6, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) > \"12\")\n            return false;\n        if (date.Substring(2, 2) > \"12\")\n            return false;\n        if (date.Substring(4, 2) > \"12\")\n            return false;\n        if (date.Substring(6, 2) > \"12\")\n            return false;\n        if (date.Substring(0, 2) < \"1\")\n            return false;\n        if (date.Substring(2, 2) < \"1\")\n            return false;\n        if (date.Substring(4, 2) < \"1\")\n            return false;\n        if (date.Substring(6, 2) < \"1\")\n            return false;\n        if (date.Substring(0, 2) > \"31\")\n            return false;\n        if (date.Substring(2, 2) > \"31\")\n            return false;\n        if (date.Substring(4, 2) > \"31\")\n            return false;\n        if (date.Substring(6, 2) > \"31\")\n            return false;\n        if (date.Substring(0, 2) < \"1\")\n            return false;\n        if (date.Substring(2, 2) < \"1\")\n            return false;\n        if (date.Substring(4, 2) < \"1\")\n            return false;\n        if (date.Substring(6, 2) < \"1\")\n            return false;\n        if (date.Substring(0, 2) > \"30\")\n            return false;\n        if (date.Substring(2, 2) > \"30\")\n            return false;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4eqj5x_4.cs(39,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(41,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(43,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(45,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(47,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(49,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(51,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(53,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(55,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(57,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(59,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(61,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(63,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(65,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(67,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(69,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(71,13): error CS0019: Operator '>' cannot be applied to opera",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length < 8)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 8) {\n            if (date.Sub\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyw_5623n.cs(70,25): error CS1026: ) expected\n/tmp/tmpyw_5623n.cs(70,25): error CS1525: Invalid expression term '}'\n/tmp/tmpyw_5623n.cs(70,25): error CS1002: ; expected\n/tmp/tmpyw_5623n.cs(72,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpyw_5623n.cs(91,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 10) return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\") return false;\n            if (date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\") return false;\n            if (date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\") return false;\n            if (date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\") return false;\n            if (date.Substring(1, 1) == \"0\") return false;\n            if (date.Substring(2, 1) == \"0\") return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 1) == \"0\") return false;\n            if (date.Substring(1,\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbprh0qao.cs(64,34): error CS1525: Invalid expression term '}'\n/tmp/tmpbprh0qao.cs(64,34): error CS1026: ) expected\n/tmp/tmpbprh0qao.cs(64,34): error CS1002: ; expected\n/tmp/tmpbprh0qao.cs(66,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpbprh0qao.cs(85,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.Substring(0, 2) != \"0\") return false;\n            if (date.Substring(2, 2) != \"1\") return false;\n            if (date.Substring(4, 2) != \"2\") return false;\n            if (date.Substring(6, 2) != \"3\") return false;\n            if (date.Substring(8, 2) != \"4\") return false;\n            if (date.Substring(10, 2) != \"5\") return false;\n            if (date.Substring(12, 2) != \"6\") return false;\n            if (date.Substring(14, 2) != \"7\") return false;\n            if (date.Substring(16, 2) != \"8\") return false;\n            if (date.Substring(18, 2) != \"9\") return false;\n            if (date.Substring(20, 2) != \"0\") return false;\n        }\n        else {\n            if (date.IndexOf(\"/\") != -1) return false;\n            if (date.IndexOf(\"-\") != -1) return false;\n            if (date.Substring(0, 2) != \"0\") return false;\n            if (date.Substring(2, 2) != \"1\") return false;\n            if (date.Substring(4, 2) != \"2\") return false;\n            if (date.Substring(6, 2) != \"3\") return false;\n            if (date.Substring(8, 2) != \"4\") return false;\n            if (date.Substring(10, 2) != \"5\") return false;\n            if (date.Substring(12, 2) != \"6\") return false;\n            if (date.Substring(14, 2) != \"7\") return false;\n            if (date.Substring(16, 2) != \"8\") return false;\n            if (date.Substring(18, 2)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6e2m4jsf.cs(55,38): error CS1026: ) expected\n/tmp/tmp6e2m4jsf.cs(55,38): error CS1525: Invalid expression term '}'\n/tmp/tmp6e2m4jsf.cs(55,38): error CS1002: ; expected\n/tmp/tmp6e2m4jsf.cs(57,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp6e2m4jsf.cs(76,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length < 10) return false;\n        if (date.Length > 10) return false;\n        if (date.IndexOf(\"-\") == -1) return false;\n        if (date.IndexOf(\"-\") == 0) return false;\n        if (date.IndexOf(\"-\") == date.Length - 1) return false;\n        if (date.IndexOf(\"-\") == 1) return false;\n        if (date.IndexOf(\"-\") == 2) return false;\n        if (date.IndexOf(\"-\") == 3) return false;\n        if (date.IndexOf(\"-\") == 4) return false;\n        if (date.IndexOf(\"-\") == 5) return false;\n        if (date.IndexOf(\"-\") == 6) return false;\n        if (date.IndexOf(\"-\") == 7) return false;\n        if (date.IndexOf(\"-\") == 8) return false;\n        if (date.IndexOf(\"-\") == 9) return false;\n        if (date.IndexOf(\"-\") == 10) return false;\n        if (date.IndexOf(\"-\") == 11) return false;\n        if (date.IndexOf(\"-\") == 12) return false;\n        if (date.IndexOf(\"-\") == 13) return false;\n        if (date.IndexOf(\"-\") == 14) return false;\n        if (date.IndexOf(\"-\") == 15) return false;\n        if (date.IndexOf(\"-\") == 16) return false;\n        if (date.IndexOf(\"-\") == 17) return false;\n        if (date.IndexOf(\"-\") == 18) return false;\n        if (date.IndexOf(\"-\") == 19) return false;\n        if (date.IndexOf(\"-\") == 20) return false;\n        if (date.IndexOf(\"-\") == 21) return false;\n        if (date.IndexOf(\"-\") == 22) return false;\n        if (date.IndexOf(\"-\") == 23) return false;\n        if (date.IndexOf(\"-\") == 24) return false;\n        if (date.IndexOf(\"-\") ==\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn6ofkxjd.cs(57,33): error CS1525: Invalid expression term '}'\n/tmp/tmpn6ofkxjd.cs(57,33): error CS1026: ) expected\n/tmp/tmpn6ofkxjd.cs(57,33): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 10) return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\") return false;\n            if (date.Substring(2, 1) == \"0\") return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\") return false;\n            if (date.Substring(2, 1) == \"0\") return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\")\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvmxlqli4.cs(65,45): error CS1525: Invalid expression term '}'\n/tmp/tmpvmxlqli4.cs(65,45): error CS1002: ; expected\n/tmp/tmpvmxlqli4.cs(67,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpvmxlqli4.cs(86,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.IndexOf(\"-\") != 3) return false;\n        if (date.IndexOf(\"/\") != 2) return false;\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Substring(0, 3) != \"0\" && date.Substring(0, 3) != \"1\" && date.Substring(0, 3) != \"2\" && date.Substring(0, 3) != \"3\" && date.Substring(0, 3) != \"4\" && date.Substring(0, 3) != \"5\" && date.Substring(0, 3) != \"6\" && date.Substring(0, 3) != \"7\" && date.Substring(0, 3) != \"8\" && date.Substring(0, 3) != \"9\" && date.Substring(0, 3) != \"10\" && date.Substring(0, 3) != \"11\" && date.Substring(0, 3) != \"12\") return false;\n            if (date.Substring(3, 2) != \"1\" && date.Substring(3, 2) != \"2\" && date.Substring(3, 2) != \"3\" && date.Substring(3, 2) != \"4\" && date.Substring(3, 2) != \"5\" && date.Substring(3, 2) != \"6\" && date.Substring(3, 2) != \"7\" && date.Substring(3, 2) != \"8\" && date.Substring(3, 2) != \"9\" && date.Substring(3, 2) != \"10\" && date.Substring(3, 2) != \"11\" && date.Substring(3, 2) != \"12\") return false;\n        }\n        if (date.IndexOf(\"/\") == 2) {\n            if (date.Substring(0, 2) != \"0\" && date.Substring(0, 2) != \"1\" && date.Substring(0, 2) != \"2\" && date.Substring(0, 2) != \"3\" &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfad5dgfc.cs(36,140): error CS1525: Invalid expression term '}'\n/tmp/tmpfad5dgfc.cs(36,140): error CS1026: ) expected\n/tmp/tmpfad5dgfc.cs(36,140): error CS1002: ; expected\n/tmp/tmpfad5dgfc.cs(38,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpfad5dgfc.cs(57,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 8)\n            return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 0) == \"0\")\n                return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 9) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 11) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 12) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 13) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmps7rp67vf.cs(26,24): error CS0161: 'Problem.ValidDate(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 10)\n            return false;\n        if (date.IndexOf(\"-\") != 2)\n            return false;\n        if (date.IndexOf(\"/\") != 4)\n            return false;\n        if (date.IndexOf(\"-\") == 2) {\n            if (date.Substring(0, 2) != \"01\" && date.Substring(0, 2) != \"02\" && date.Substring(0, 2) != \"03\" && date.Substring(0, 2) != \"04\" && date.Substring(0, 2) != \"05\" && date.Substring(0, 2) != \"06\" && date.Substring(0, 2) != \"07\" && date.Substring(0, 2) != \"08\" && date.Substring(0, 2) != \"09\" && date.Substring(0, 2) != \"10\" && date.Substring(0, 2) != \"11\" && date.Substring(0, 2) != \"12\")\n                return false;\n            if (date.Substring(3, 2) != \"01\" && date.Substring(3, 2) != \"02\" && date.Substring(3, 2) != \"03\" && date.Substring(3, 2) != \"04\" && date.Substring(3, 2) != \"05\" && date.Substring(3, 2) != \"06\" && date.Substring(3, 2) != \"07\" && date.Substring(3, 2) != \"08\" && date.Substring(3, 2) != \"09\" && date.Substring(3, 2) != \"10\" && date.Substring(3, 2) != \"11\" && date.Substring(3, 2) != \"12\")\n                return false;\n            if (date.Substring(6, 4) != \"0000\")\n                return false;\n        }\n        else if (date.IndexOf(\"/\") == 4) {\n            if (date.Substring(0, 1) != \"0\" && date.Substring(0, 1) != \"1\" && date.Substring(0,\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdm418d97.cs(44,96): error CS1525: Invalid expression term '}'\n/tmp/tmpdm418d97.cs(44,96): error CS1026: ) expected\n/tmp/tmpdm418d97.cs(44,96): error CS1002: ; expected\n/tmp/tmpdm418d97.cs(46,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpdm418d97.cs(65,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.IndexOf(\"-\") != 2) return false;\n        if (date.IndexOf(\"/\") != 4) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 4\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptsvfbk40.cs(47,61): error CS1026: ) expected\n/tmp/tmptsvfbk40.cs(47,61): error CS1525: Invalid expression term '}'\n/tmp/tmptsvfbk40.cs(47,61): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 10)\n            return false;\n        if (date.Substring(0, 2) == \"0\")\n            return false;\n        if (date.Substring(3, 2) == \"0\")\n            return false;\n        if (date.Substring(6, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\")\n            return false;\n        if (date.Substring(3, 2) == \"0\")\n            return false;\n        if (date.Substring(6, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\")\n            return false;\n        if (date.Substring(3, 2) == \"0\")\n            return false;\n        if (date.Substring(6, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\")\n            return false;\n        if (date.Substring(3, 2) == \"0\")\n            return false;\n        if (date.Substring(6, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\")\n            return false;\n        if (date.Substring(3, 2) == \"0\")\n            return false;\n        if (date.Substring(6, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\")\n            return false;\n        if (date.Substring(3, 2) == \"0\")\n            return false;\n        if (date.Substring(6, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\")\n            return false;\n        if (date.Substring(3, 2) == \"0\")\n            return false;\n        if (date.Substring(6, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\")\n            return false;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq9afh469.cs(26,24): error CS0161: 'Problem.ValidDate(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 10)\n            return false;\n        if (date.Substring(0, 2) == \"0\")\n            return false;\n        if (date.Substring(3, 2) == \"0\")\n            return false;\n        if (date.Substring(6, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) > \"12\")\n            return false;\n        if (date.Substring(3, 2) > \"12\")\n            return false;\n        if (date.Substring(6, 2) > \"12\")\n            return false;\n        if (date.Substring(0, 2) < \"1\")\n            return false;\n        if (date.Substring(3, 2) < \"1\")\n            return false;\n        if (date.Substring(6, 2) < \"1\")\n            return false;\n        if (date.Substring(0, 2) > \"31\")\n            return false;\n        if (date.Substring(3, 2) > \"31\")\n            return false;\n        if (date.Substring(6, 2) > \"31\")\n            return false;\n        if (date.Substring(0, 2) < \"1\")\n            return false;\n        if (date.Substring(3, 2) < \"1\")\n            return false;\n        if (date.Substring(6, 2) < \"1\")\n            return false;\n        if (date.Substring(0, 2) > \"30\")\n            return false;\n        if (date.Substring(3, 2) > \"30\")\n            return false;\n        if (date.Substring(6, 2) > \"30\")\n            return false;\n        if (date.Substring(0, 2) < \"1\")\n            return false;\n        if (date.Substring(3, 2) < \"1\")\n            return false;\n        if (date.Substring(6, 2) < \"1\")\n            return false;\n        if (date.Substring(0, 2) > \"29\")\n            return false;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoibnl9ya.cs(37,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpoibnl9ya.cs(39,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpoibnl9ya.cs(41,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpoibnl9ya.cs(43,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpoibnl9ya.cs(45,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpoibnl9ya.cs(47,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpoibnl9ya.cs(49,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpoibnl9ya.cs(51,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpoibnl9ya.cs(53,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpoibnl9ya.cs(55,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpoibnl9ya.cs(57,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpoibnl9ya.cs(59,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpoibnl9ya.cs(61,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpoibnl9ya.cs(63,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpoibnl9ya.cs(65,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpoibnl9ya.cs(67,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpoibnl9ya.cs(69,13): error CS0019: Operator '<' cannot be applied to opera",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 10) return false;\n        if (date.IndexOf(\"-\") == -1) return false;\n        if (date.IndexOf(\"-\") == 0) return false;\n        if (date.IndexOf(\"-\") == date.Length - 1) return false;\n        if (date.IndexOf(\"-\") == 1) return false;\n        if (date.IndexOf(\"-\") == 2) return false;\n        if (date.IndexOf(\"-\") == 3) return false;\n        if (date.IndexOf(\"-\") == 4) return false;\n        if (date.IndexOf(\"-\") == 5) return false;\n        if (date.IndexOf(\"-\") == 6) return false;\n        if (date.IndexOf(\"-\") == 7) return false;\n        if (date.IndexOf(\"-\") == 8) return false;\n        if (date.IndexOf(\"-\") == 9) return false;\n        if (date.IndexOf(\"-\") == 10) return false;\n        if (date.IndexOf(\"-\") == 11) return false;\n        if (date.IndexOf(\"-\") == 12) return false;\n        if (date.IndexOf(\"-\") == 13) return false;\n        if (date.IndexOf(\"-\") == 14) return false;\n        if (date.IndexOf(\"-\") == 15) return false;\n        if (date.IndexOf(\"-\") == 16) return false;\n        if (date.IndexOf(\"-\") == 17) return false;\n        if (date.IndexOf(\"-\") == 18) return false;\n        if (date.IndexOf(\"-\") == 19) return false;\n        if (date.IndexOf(\"-\") == 20) return false;\n        if (date.IndexOf(\"-\") == 21) return false;\n        if (date.IndexOf(\"-\") == 22) return false;\n        if (date.IndexOf(\"-\") == 23) return false;\n        if (date.IndexOf(\"-\") == 24) return false;\n        if (date.IndexOf(\"-\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz_3qv_l9.cs(57,26): error CS1010: Newline in constant\n/tmp/tmpz_3qv_l9.cs(57,28): error CS1026: ) expected\n/tmp/tmpz_3qv_l9.cs(57,28): error CS1525: Invalid expression term '}'\n/tmp/tmpz_3qv_l9.cs(57,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.IndexOf(\"-\") != 3) return false;\n        if (date.IndexOf(\"/\") != 2) return false;\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Substring(0, 3).ToLower() != \"jan\") return false;\n            if (date.Substring(3, 2).ToLower() != \".\") return false;\n            if (date.Substring(5, 4).ToLower() != \"yyyy\") return false;\n        }\n        if (date.IndexOf(\"/\") == 2) {\n            if (date.Substring(0, 2).ToLower() != \"mm\") return false;\n            if (date.Substring(2, 1).ToLower() != \"-\") return false;\n            if (date.Substring(4, 2).ToLower() != \"dd\") return false;\n        }\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Substring(0, 3).ToLower() != \"jan\") return false;\n            if (date.Substring(3, 2).ToLower() != \".\") return false;\n            if (date.Substring(5, 4).ToLower() != \"yyyy\") return false;\n        }\n        if (date.IndexOf(\"/\") == 2) {\n            if (date.Substring(0, 2).ToLower() != \"mm\") return false;\n            if (date.Substring(2, 1).ToLower() != \"-\") return false;\n            if (date.Substring(4, 2).ToLower() != \"dd\") return false;\n        }\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Substring(0, 3).ToLower() != \"jan\") return false;\n            if (date.Substring(3, 2).ToLower() != \".\") return false;\n            if (date.Substring(5, 4).ToLower() != \"yyyy\") return false;\n        }\n        if (date.IndexOf(\"/\") == 2) {\n            if (date.Sub\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_mzgh7ym.cs(57,25): error CS1026: ) expected\n/tmp/tmp_mzgh7ym.cs(57,25): error CS1525: Invalid expression term '}'\n/tmp/tmp_mzgh7ym.cs(57,25): error CS1002: ; expected\n/tmp/tmp_mzgh7ym.cs(59,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp_mzgh7ym.cs(78,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        int month = 0;\n        int day = 0;\n        int year = 0;\n        int[] days = new int[13];\n        days[0] = 31;\n        days[1] = 28;\n        days[2] = 31;\n        days[3] = 30;\n        days[4] = 31;\n        days[5] = 30;\n        days[6] = 31;\n        days[7] = 31;\n        days[8] = 30;\n        days[9] = 31;\n        days[10] = 30;\n        days[11] = 31;\n        days[12] = 31;\n        int[] months = new int[13];\n        months[0] = 31;\n        months[1] = 28;\n        months[2] = 31;\n        months[3] = 30;\n        months[4] = 31;\n        months[5] = 30;\n        months[6] = 31;\n        months[7] = 31;\n        months[8] = 30;\n        months[9] = 31;\n        months[10] = 30;\n        months[11] = 31;\n        months[12] = 31;\n        int[] separator = new int[3];\n        separator[0] = -1;\n        separator[1] = -1;\n        separator[2] = -1;\n        int[] separatorIndex = new int[3];\n        separatorIndex[0] = -1;\n        separatorIndex[1] = -1;\n        separatorIndex[2] = -1;\n        int[] separatorIndex2 = new int[3];\n        separatorIndex2[0] = -1;\n        separatorIndex2[1] = -1;\n        separatorIndex2[2] = -1;\n        int[] separatorIndex3 = new int[3];\n        separatorIndex3[0] = -1;\n        separatorIndex3[1] = -1;\n        separatorIndex3[2] = -1;\n        int[] separatorIndex4 = new int[3];\n        separatorIndex4[\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp98i73lnp.cs(77,25): error CS1003: Syntax error, ']' expected\n/tmp/tmp98i73lnp.cs(77,25): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        }\n        else {\n            if (date.IndexOf(\"/\") != -1) return false;\n        }\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        }\n        else {\n            if (date.IndexOf(\"/\") != -1) return false;\n        }\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        }\n        else {\n            if (date.IndexOf(\"/\") != -1) return false;\n        }\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        }\n        else {\n            if (date.IndexOf(\"/\") != -1) return false;\n        }\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        }\n        else {\n            if (date.IndexOf(\"/\") != -1) return false;\n        }\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        }\n        else {\n            if (date.IndexOf(\"/\") != -1) return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph1b3zu7q.cs(71,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmph1b3zu7q.cs(90,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 8) return false;\n        if (date.IndexOf('-') == -1) return false;\n        if (date.IndexOf('/') == -1) return false;\n        if (date.IndexOf('-') > date.IndexOf('/')) return false;\n        if (date.IndexOf('-') == 0) return false;\n        if (date.IndexOf('-') == date.Length - 1) return false;\n        if (date.IndexOf('/') == 0) return false;\n        if (date.IndexOf('/') == date.Length - 1) return false;\n        if (date.IndexOf('-') < date.IndexOf('/')) return false;\n        if (date.IndexOf('-') < date.IndexOf('/')) return false;\n        if (date.IndexOf('-') < date.IndexOf('/')) return false;\n        if (date.IndexOf('-') < date.IndexOf('/')) return false;\n        if (date.IndexOf('-') < date.IndexOf('/')) return false;\n        if (date.IndexOf('-') < date.IndexOf('/')) return false;\n        if (date.IndexOf('-') < date.IndexOf('/')) return false;\n        if (date.IndexOf('-') < date.IndexOf('/')) return false;\n        if (date.IndexOf('-') < date.IndexOf('/')) return false;\n        if (date.IndexOf('-') < date.IndexOf('/')) return false;\n        if (date.IndexOf('-') < date.IndexOf('/')) return false;\n        if (date.IndexOf('-') < date.IndexOf('/')) return false;\n        if (date.IndexOf('-') < date.IndexOf('/')) return false;\n        if (date.IndexOf('-') < date.IndexOf('/')) return false;\n        if (date.IndexOf('-') < date.IndexOf('\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz7gixr2b.cs(51,46): error CS1010: Newline in constant\n/tmp/tmpz7gixr2b.cs(51,46): error CS1011: Empty character literal\n/tmp/tmpz7gixr2b.cs(51,47): error CS1026: ) expected\n/tmp/tmpz7gixr2b.cs(51,47): error CS1525: Invalid expression term '}'\n/tmp/tmpz7gixr2b.cs(51,47): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.Substring(0, 2).Length != 2) return false;\n            if (date.Substring(3, 2).Length != 2) return false;\n        }\n        else {\n            if (date.IndexOf(\"/\") != -1) return false;\n            if (date.IndexOf(\"/\") != 0) return false;\n            if (date.Substring(0, 1).Length != 1) return false;\n            if (date.Substring(1, 2).Length != 2) return false;\n        }\n        if (date.Substring(0, 2).ToLower() == \"00\") return false;\n        if (date.Substring(3, 2).ToLower() == \"00\") return false;\n        if (date.Substring(5, 2).ToLower() == \"00\") return false;\n        if (date.Substring(0, 1).ToLower() == \"0\") return false;\n        if (date.Substring(1, 1).ToLower() == \"0\") return false;\n        if (date.Substring(2, 1).ToLower() == \"0\") return false;\n        if (date.Substring(3, 1).ToLower() == \"0\") return false;\n        if (date.Substring(4, 1).ToLower() == \"0\") return false;\n        if (date.Substring(5, 1).ToLower() == \"0\") return false;\n        if (date.Substring(6, 1).ToLower() == \"0\") return false;\n        if (date.Substring(7, 1).ToLower() == \"0\") return false;\n        if (date.Substring(0, 2).ToLower() == \"13\") return false;\n        if (date.Substring(3, 2).ToLower() == \"13\") return false;\n        if (date.Substring(5, 2).ToLower() == \"13\") return false;\n        if (date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdmjdfrvv.cs(54,28): error CS1026: ) expected\n/tmp/tmpdmjdfrvv.cs(54,28): error CS1525: Invalid expression term '}'\n/tmp/tmpdmjdfrvv.cs(54,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 10)\n            return false;\n        if (date.IndexOf(\"-\") == -1)\n            return false;\n        if (date.IndexOf(\"-\") > 3)\n            return false;\n        if (date.IndexOf(\"-\") < 2)\n            return false;\n        if (date.IndexOf(\"-\") == 2) {\n            if (date.Length == 2)\n                return false;\n            if (date.Length == 3) {\n                if (date.Substring(2, 1).ToLower() == \"0\")\n                    return false;\n            }\n        }\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Length == 3)\n                return false;\n            if (date.Length == 4) {\n                if (date.Substring(3, 1).ToLower() == \"0\")\n                    return false;\n            }\n        }\n        if (date.IndexOf(\"-\") == 4) {\n            if (date.Length == 4)\n                return false;\n            if (date.Length == 5) {\n                if (date.Substring(4, 1).ToLower() == \"0\")\n                    return false;\n            }\n        }\n        if (date.IndexOf(\"-\") == 5) {\n            if (date.Length == 5)\n                return false;\n            if (date.Length == 6) {\n                if (date.Substring(5, 1).ToLower() == \"0\")\n                    return false;\n            }\n        }\n        if (date.IndexOf(\"-\") == 6) {\n            if (date.Length == 6)\n                return false;\n            if (date.Length == 7) {\n                if (date.Substring(6, 1).ToLower() == \"0\")\n                    return false;\n            }\n        }\n        if (date.IndexOf(\"-\") == 7) {\n            if (date.Length == 7)\n                return false;\n            if (date.Length == 8) {\n                if (date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfykz3wnf.cs(83,36): error CS1026: ) expected\n/tmp/tmpfykz3wnf.cs(83,36): error CS1525: Invalid expression term '}'\n/tmp/tmpfykz3wnf.cs(83,36): error CS1002: ; expected\n/tmp/tmpfykz3wnf.cs(85,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpfykz3wnf.cs(104,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 10)\n            return false;\n        if (date.IndexOf(\"-\") != 2)\n            return false;\n        if (date.IndexOf(\"/\") != 4)\n            return false;\n        if (date.IndexOf(\"-\") == 2) {\n            if (date.Substring(0, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(2, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(4, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(6, 2).ToLower() != \"01\")\n                return false;\n        }\n        if (date.IndexOf(\"/\") == 4) {\n            if (date.Substring(0, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(2, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(4, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(6, 2).ToLower() != \"01\")\n                return false;\n        }\n        if (date.IndexOf(\"-\") == 2) {\n            if (date.Substring(0, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(2, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(4, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(6, 2).ToLower() != \"01\")\n                return false;\n        }\n        if (date.IndexOf(\"/\") == 4) {\n            if (date.Substring(0, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(2, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(4, 2).ToLower() != \"01\")\n                return false;\n            if\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4wfb6cqu.cs(72,15): error CS1003: Syntax error, '(' expected\n/tmp/tmp4wfb6cqu.cs(72,15): error CS1525: Invalid expression term '}'\n/tmp/tmp4wfb6cqu.cs(72,15): error CS1026: ) expected\n/tmp/tmp4wfb6cqu.cs(72,15): error CS1002: ; expected\n/tmp/tmp4wfb6cqu.cs(74,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp4wfb6cqu.cs(93,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2k_ntti3.cs(53,28): error CS1026: ) expected\n/tmp/tmp2k_ntti3.cs(53,28): error CS1525: Invalid expression term '}'\n/tmp/tmp2k_ntti3.cs(53,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) != \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\") return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\") return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\") return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\") return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(0, 2)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpiwrv8mgp.cs(43,33): error CS1026: ) expected\n/tmp/tmpiwrv8mgp.cs(43,33): error CS1525: Invalid expression term '}'\n/tmp/tmpiwrv8mgp.cs(43,33): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length < 8)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length == 10) {\n            if (date.Substring(4, 2) != \"0\")\n                return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(4, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 12) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 14) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 16) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 18) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 20) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 22) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 24) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 26) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 28) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 30) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfv6a0ih7.cs(26,24): error CS0161: 'Problem.ValidDate(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 8) return false;\n        if (date.IndexOf('-') == -1) return false;\n        if (date.IndexOf('/') == -1) return false;\n        if (date.IndexOf('-') > date.IndexOf('/')) return false;\n        if (date.IndexOf('/') > date.IndexOf('-')) return false;\n        if (date.IndexOf('-') < date.IndexOf('/')) return false;\n        if (date.IndexOf('/') < date.IndexOf('-')) return false;\n        if (date.IndexOf('-') > date.IndexOf('/')) return false;\n        if (date.IndexOf('/') > date.IndexOf('-')) return false;\n        if (date.IndexOf('-') < date.IndexOf('/')) return false;\n        if (date.IndexOf('/') < date.IndexOf('-')) return false;\n        if (date.IndexOf('-') > date.IndexOf('/')) return false;\n        if (date.IndexOf('/') > date.IndexOf('-')) return false;\n        if (date.IndexOf('-') < date.IndexOf('/')) return false;\n        if (date.IndexOf('/') < date.IndexOf('-')) return false;\n        if (date.IndexOf('-') > date.IndexOf('/')) return false;\n        if (date.IndexOf('/') > date.IndexOf('-')) return false;\n        if (date.IndexOf('-') < date.IndexOf('/')) return false;\n        if (date.IndexOf('/') < date.IndexOf('-')) return false;\n        if (date.IndexOf('-') > date.IndexOf('/')) return false;\n        if (date.IndexOf('/') > date.IndexOf('-')) return false;\n        if (date.IndexOf('-') < date.IndexOf('/')) return false;\n        if (date.IndexOf('/\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4sw6wfvw.cs(51,26): error CS1010: Newline in constant\n/tmp/tmp4sw6wfvw.cs(51,28): error CS1026: ) expected\n/tmp/tmp4sw6wfvw.cs(51,28): error CS1525: Invalid expression term '}'\n/tmp/tmp4sw6wfvw.cs(51,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) > \"12\") return false;\n        if (date.Substring(3, 2) > \"12\") return false;\n        if (date.Substring(6, 2) > \"12\") return false;\n        if (date.Substring(0, 2) < \"1\") return false;\n        if (date.Substring(3, 2) < \"1\") return false;\n        if (date.Substring(6, 2) < \"1\") return false;\n        if (date.Substring(0, 2) > \"31\") return false;\n        if (date.Substring(3, 2) > \"31\") return false;\n        if (date.Substring(6, 2) > \"31\") return false;\n        if (date.Substring(0, 2) < \"1\") return false;\n        if (date.Substring(3, 2) < \"1\") return false;\n        if (date.Substring(6, 2) < \"1\") return false;\n        if (date.Substring(0, 2) > \"30\") return false;\n        if (date.Substring(3, 2) > \"30\") return false;\n        if (date.Substring(6, 2) > \"30\") return false;\n        if (date.Substring(0, 2) < \"1\") return false;\n        if (date.Substring(3, 2) < \"1\") return false;\n        if (date.Substring(6, 2) < \"1\") return false;\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuox0nr6n.cs(32,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(33,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(34,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(35,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(36,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(37,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(38,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(39,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(40,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(41,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(42,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(43,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(44,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(45,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(46,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(47,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(48,13): error CS0019: Operator '<' cannot be applied to opera",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp19bu2a43.cs(43,33): error CS1026: ) expected\n/tmp/tmp19bu2a43.cs(43,33): error CS1525: Invalid expression term '}'\n/tmp/tmp19bu2a43.cs(43,33): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 10) return false;\n        if (date.IndexOf(\"-\") == -1) return false;\n        if (date.IndexOf(\"-\") != 0) return false;\n        if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\")) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") - 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") - 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") - 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") - 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") - 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") - 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") - 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") -\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl46hpmmh.cs(49,53): error CS1525: Invalid expression term '}'\n/tmp/tmpl46hpmmh.cs(49,53): error CS1026: ) expected\n/tmp/tmpl46hpmmh.cs(49,53): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.IndexOf(\"-\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\".\") != -1) return false;\n        if (date.IndexOf(\" \") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"-\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5bk0n9b1.cs(56,13): error CS1525: Invalid expression term '}'\n/tmp/tmp5bk0n9b1.cs(56,13): error CS1026: ) expected\n/tmp/tmp5bk0n9b1.cs(56,13): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length < 8) return false;\n        if (date.Length > 10) return false;\n        if (date.Length == 10) {\n            if (date.Substring(6, 2) != \"-\" || date.Substring(8, 2) != \"-\") return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(6, 2) != \"-\" || date.Substring(4, 2) != \"-\") return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(4, 2) != \"-\" || date.Substring(0, 2) != \"-\") return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 2) != \"-\" || date.Substring(0, 2) != \"-\") return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 2) != \"-\" || date.Substring(0, 2) != \"-\") return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) != \"-\" || date.Substring(0, 1) != \"-\") return false;\n        }\n        if (date.Length == 10) {\n            if (date.Substring(6, 2) != \"-\" || date.Substring(8, 2) != \"-\") return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(6, 2) != \"-\" || date.Substring(4, 2) != \"-\") return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(4, 2) != \"-\" || date.Substring(0, 2) != \"-\") return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 2) != \"-\" || date.Substring(0, 2) != \"-\") return false;\n        }\n        if (date.Length == 2) {\n            if\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqd7780mp.cs(61,15): error CS1003: Syntax error, '(' expected\n/tmp/tmpqd7780mp.cs(61,15): error CS1525: Invalid expression term '}'\n/tmp/tmpqd7780mp.cs(61,15): error CS1026: ) expected\n/tmp/tmpqd7780mp.cs(61,15): error CS1002: ; expected\n/tmp/tmpqd7780mp.cs(63,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpqd7780mp.cs(82,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 10) return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 9) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 11) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 12) {\n            if (date.Substring(0, 1) == \"0\") return false\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprgjr6mco.cs(64,58): error CS1002: ; expected\n/tmp/tmprgjr6mco.cs(66,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmprgjr6mco.cs(85,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 10) return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 9) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 11) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 12) {\n            if (date.Substring(0, 1) == \"0\") return false\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprgjr6mco.cs(64,58): error CS1002: ; expected\n/tmp/tmprgjr6mco.cs(66,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmprgjr6mco.cs(85,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        int month = 0;\n        int day = 0;\n        int year = 0;\n        int count = 0;\n        int monthCount = 0;\n        int dayCount = 0;\n        int yearCount = 0;\n        int monthLength = 0;\n        int dayLength = 0;\n        int yearLength = 0;\n        int[] monthLengths = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        int[] dayLengths = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        int[] yearLengths = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        string[] months = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n        string[] days = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n        string[] years = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"};\n        for (int i = 0; i < date.Length; i++) {\n            if (date[i] == '/') {\n                count++;\n                if (count == 1) {\n                    month =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvagjjris.cs(48,28): error CS1525: Invalid expression term '}'\n/tmp/tmpvagjjris.cs(48,28): error CS1002: ; expected\n/tmp/tmpvagjjris.cs(50,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpvagjjris.cs(69,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.IndexOf(\"-\") != 3) return false;\n        if (date.IndexOf(\"/\") != 2) return false;\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Substring(0, 3).ToLower() != \"jan\") return false;\n            if (date.Substring(3, 2).ToLower() != \".\") return false;\n            if (date.Substring(5, 4).ToLower() != \"yyyy\") return false;\n        }\n        if (date.IndexOf(\"/\") == 2) {\n            if (date.Substring(0, 2).ToLower() != \"mm\") return false;\n            if (date.Substring(2, 1).ToLower() != \"-\") return false;\n            if (date.Substring(4, 2).ToLower() != \"dd\") return false;\n        }\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Substring(6, 2).ToLower() != \"yyyy\") return false;\n        }\n        if (date.IndexOf(\"/\") == 2) {\n            if (date.Substring(7, 1).ToLower() != \"-\") return false;\n        }\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Substring(5, 2).ToLower() != \"yyyy\") return false;\n        }\n        if (date.IndexOf(\"/\") == 2) {\n            if (date.Substring(4, 1).ToLower() != \"-\") return false;\n        }\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Substring(3, 2).ToLower() != \"yyyy\") return false;\n        }\n        if (date.IndexOf(\"/\") == 2) {\n            if (date.Substring(2, 1).ToLower() != \"-\") return false;\n        }\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Substring(1, 2).ToLower() != \"yyyy\")\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0e_eafwl.cs(60,58): error CS1525: Invalid expression term '}'\n/tmp/tmp0e_eafwl.cs(60,58): error CS1002: ; expected\n/tmp/tmp0e_eafwl.cs(62,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp0e_eafwl.cs(81,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 10)\n            return false;\n        if (date.Length == 10) {\n            if (date[0] != '0' && date[0] != '1' && date[0] != '2' && date[0] != '3' && date[0] != '4' && date[0] != '5' && date[0] != '6' && date[0] != '7' && date[0] != '8' && date[0] != '9')\n                return false;\n            if (date[1] != '0' && date[1] != '1' && date[1] != '2' && date[1] != '3' && date[1] != '4' && date[1] != '5' && date[1] != '6' && date[1] != '7' && date[1] != '8' && date[1] != '9')\n                return false;\n            if (date[2] != '0' && date[2] != '1' && date[2] != '2' && date[2] != '3' && date[2] != '4' && date[2] != '5' && date[2] != '6' && date[2] != '7' && date[2] != '8' && date[2] != '9')\n                return false;\n            if (date[3] != '0' && date[3] != '1' && date[3] != '2' && date[3] != '3' && date[3] != '4' && date[3] != '5' && date[3] != '6' && date[3] != '7' && date[3] != '8' && date[3] != '9')\n                return false;\n            if (date[4] != '0' && date[4] != '1' && date[4] != '2' && date[4] != '3' && date[4] != '4' && date[4] != '5' && date[4] != '6\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzbj8fycd.cs(42,136): error CS1010: Newline in constant\n/tmp/tmpzbj8fycd.cs(42,138): error CS1026: ) expected\n/tmp/tmpzbj8fycd.cs(42,138): error CS1525: Invalid expression term '}'\n/tmp/tmpzbj8fycd.cs(42,138): error CS1002: ; expected\n/tmp/tmpzbj8fycd.cs(44,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpzbj8fycd.cs(63,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length < 8) return false;\n        if (date.Length > 10) return false;\n        if (date.IndexOf(\"-\") == -1) return false;\n        if (date.IndexOf(\"-\") != 0) return false;\n        if (date.IndexOf(\"-\") != date.Length - 3) return false;\n        if (date.IndexOf(\"-\") != date.Length - 2) return false;\n        if (date.IndexOf(\"-\") != date.Length - 4) return false;\n        if (date.IndexOf(\"-\") != date.Length - 5) return false;\n        if (date.IndexOf(\"-\") != date.Length - 6) return false;\n        if (date.IndexOf(\"-\") != date.Length - 7) return false;\n        if (date.IndexOf(\"-\") != date.Length - 8) return false;\n        if (date.IndexOf(\"-\") != date.Length - 9) return false;\n        if (date.IndexOf(\"-\") != date.Length - 10) return false;\n        if (date.IndexOf(\"-\") != date.Length - 11) return false;\n        if (date.IndexOf(\"-\") != date.Length - 12) return false;\n        if (date.IndexOf(\"-\") != date.Length - 13) return false;\n        if (date.IndexOf(\"-\") != date.Length - 14) return false;\n        if (date.IndexOf(\"-\") != date.Length - 15) return false;\n        if (date.IndexOf(\"-\") != date.Length - 16) return false;\n        if (date.IndexOf(\"-\") != date.Length - 17) return false;\n        if (date.IndexOf(\"-\") != date.Length - 18) return false;\n        if (date.IndexOf(\"-\") != date.Length - 19) return false;\n        if (date.IndexOf(\"-\") != date.Length - 20) return false;\n        if (date.IndexOf(\"-\") != date.Length - 21) return false;\n        if (date.IndexOf(\"-\") != date.Length - 22) return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyn0z4s1u.cs(52,58): error CS1525: Invalid expression term '}'\n/tmp/tmpyn0z4s1u.cs(52,58): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 8)\n            return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" || date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(4, 2) == \"0\" || date.Substring(4, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" || date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" || date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" || date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" || date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" || date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" || date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" || date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" || date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" || date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" || date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4idosdvf.cs(57,40): error CS1026: ) expected\n/tmp/tmp4idosdvf.cs(57,40): error CS1525: Invalid expression term '}'\n/tmp/tmp4idosdvf.cs(57,40): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(0, 2) > \"12\") return false;\n        if (date.Substring(3, 2) > \"12\") return false;\n        if (date.Substring(0, 2) < \"1\") return false;\n        if (date.Substring(3, 2) < \"1\") return false;\n        if (date.Substring(4, 2) < \"1\") return false;\n        if (date.Substring(5, 2) < \"1\") return false;\n        if (date.Substring(6, 2) < \"1\") return false;\n        if (date.Substring(7, 2) < \"1\") return false;\n        if (date.Substring(4, 2) > \"12\") return false;\n        if (date.Substring(6, 2) > \"12\") return false;\n        if (date.Substring(4, 2) < \"1\") return false;\n        if (date.Substring(6, 2) < \"1\") return false;\n        if (date.Substring(4, 2) > \"31\") return false;\n        if (date.Substring(6, 2) > \"31\") return false;\n        if (date.Substring(4, 2) < \"1\") return false;\n        if (date.Substring(6, 2) < \"1\") return false;\n        if (date.Substring(4, 2) > \"30\") return false;\n        if (date.Substring(6, 2) > \"30\") return false;\n        if (date.Substring(4, 2) < \"1\") return false;\n        if (date.Substring(6, 2) < \"1\") return false;\n        if (date.Substring(4, 2) > \"29\") return false;\n        if (date.Substring(6, 2) > \"29\") return false;\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp87_yizd3.cs(31,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp87_yizd3.cs(32,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp87_yizd3.cs(33,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp87_yizd3.cs(34,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp87_yizd3.cs(35,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp87_yizd3.cs(36,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp87_yizd3.cs(37,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp87_yizd3.cs(38,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp87_yizd3.cs(39,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp87_yizd3.cs(40,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp87_yizd3.cs(41,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp87_yizd3.cs(42,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp87_yizd3.cs(43,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp87_yizd3.cs(44,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp87_yizd3.cs(45,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp87_yizd3.cs(46,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp87_yizd3.cs(47,13): error CS0019: Operator '>' cannot be applied to opera",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 8)\n            return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) != \"0\")\n            return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) != \"0\")\n            return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\")\n            return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) != \"0\")\n            return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\")\n            return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) != \"0\")\n            return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\")\n            return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) != \"0\")\n            return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\")\n            return false;\n        if (date.Substring(4, 2) != \"0\"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvmwa6jvg.cs(57,40): error CS1026: ) expected\n/tmp/tmpvmwa6jvg.cs(57,40): error CS1525: Invalid expression term '}'\n/tmp/tmpvmwa6jvg.cs(57,40): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length < 8) return false;\n        if (date.Length > 10) return false;\n        if (date.IndexOf(\"-\") == -1) return false;\n        if (date.IndexOf(\"-\") == 0) return false;\n        if (date.IndexOf(\"-\") == date.Length - 1) return false;\n        if (date.IndexOf(\"-\") == date.Length - 2) return false;\n        if (date.IndexOf(\"-\") == date.Length - 3) return false;\n        if (date.IndexOf(\"-\") == date.Length - 4) return false;\n        if (date.IndexOf(\"-\") == date.Length - 5) return false;\n        if (date.IndexOf(\"-\") == date.Length - 6) return false;\n        if (date.IndexOf(\"-\") == date.Length - 7) return false;\n        if (date.IndexOf(\"-\") == date.Length - 8) return false;\n        if (date.IndexOf(\"-\") == date.Length - 9) return false;\n        if (date.IndexOf(\"-\") == date.Length - 10) return false;\n        if (date.IndexOf(\"-\") == date.Length - 11) return false;\n        if (date.IndexOf(\"-\") == date.Length - 12) return false;\n        if (date.IndexOf(\"-\") == date.Length - 13) return false;\n        if (date.IndexOf(\"-\") == date.Length - 14) return false;\n        if (date.IndexOf(\"-\") == date.Length - 15) return false;\n        if (date.IndexOf(\"-\") == date.Length - 16) return false;\n        if (date.IndexOf(\"-\") == date.Length - 17) return false;\n        if (date.IndexOf(\"-\") == date.Length - 18) return false;\n        if (date.IndexOf(\"-\") == date.Length - 19) return false;\n        if (date.IndexOf(\"-\") == date.Length - 20) return false;\n        if (date.IndexOf(\"-\") == date.Length - 21) return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0vbv9vik.cs(52,58): error CS1525: Invalid expression term '}'\n/tmp/tmp0vbv9vik.cs(52,58): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length < 8)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 9) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 11) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1gkaykow.cs(26,24): error CS0161: 'Problem.ValidDate(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 8)\n            return false;\n        if (date.Substring(0, 2) == \"0\")\n            return false;\n        if (date.Substring(3, 2) == \"0\")\n            return false;\n        if (date.Substring(5, 2) == \"0\")\n            return false;\n        if (date.Substring(7, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) > \"12\")\n            return false;\n        if (date.Substring(3, 2) > \"12\")\n            return false;\n        if (date.Substring(5, 2) > \"12\")\n            return false;\n        if (date.Substring(7, 2) > \"12\")\n            return false;\n        if (date.Substring(0, 2) < \"1\")\n            return false;\n        if (date.Substring(3, 2) < \"1\")\n            return false;\n        if (date.Substring(5, 2) < \"1\")\n            return false;\n        if (date.Substring(7, 2) < \"1\")\n            return false;\n        if (date.Substring(0, 2) > \"31\")\n            return false;\n        if (date.Substring(3, 2) > \"31\")\n            return false;\n        if (date.Substring(5, 2) > \"31\")\n            return false;\n        if (date.Substring(7, 2) > \"31\")\n            return false;\n        if (date.Substring(0, 2) < \"1\")\n            return false;\n        if (date.Substring(3, 2) < \"1\")\n            return false;\n        if (date.Substring(5, 2) < \"1\")\n            return false;\n        if (date.Substring(7, 2) < \"1\")\n            return false;\n        if (date.Substring(0, 2) > \"30\")\n            return false;\n        if (date.Substring(3, 2) > \"30\")\n            return false;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptzu33we0.cs(39,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(41,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(43,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(45,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(47,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(49,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(51,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(53,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(55,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(57,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(59,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(61,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(63,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(65,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(67,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(69,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptzu33we0.cs(71,13): error CS0019: Operator '>' cannot be applied to opera",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length != 10)\n            return false;\n        if (date.IndexOf('-') != -1)\n            return false;\n        if (date.IndexOf('/') != -1)\n            return false;\n        if (date.IndexOf('.') != -1)\n            return false;\n        if (date.IndexOf(' ') != -1)\n            return false;\n        if (date.IndexOf('/') != -1)\n            return false;\n        if (date.IndexOf('-') != -1)\n            return false;\n        if (date.IndexOf('/') != -1)\n            return false;\n        if (date.IndexOf('.') != -1)\n            return false;\n        if (date.IndexOf(' ') != -1)\n            return false;\n        if (date.IndexOf('/') != -1)\n            return false;\n        if (date.IndexOf('-') != -1)\n            return false;\n        if (date.IndexOf('/') != -1)\n            return false;\n        if (date.IndexOf('.') != -1)\n            return false;\n        if (date.IndexOf(' ') != -1)\n            return false;\n        if (date.IndexOf('/') != -1)\n            return false;\n        if (date.IndexOf('-') != -1)\n            return false;\n        if (date.IndexOf('/') != -1)\n            return false;\n        if (date.IndexOf('.') != -1)\n            return false;\n        if (date.IndexOf(' ') != -1)\n            return false;\n        if (date.IndexOf('/') != -1)\n            return false;\n        if (date.IndexOf('-') != -1)\n            return false;\n        if (date.IndexOf('/') != -1)\n            return false;\n        if (date.IndexOf('.') != -1)\n            return false;\n        if (date.IndexOf(' ') != -1)\n            return false;\n        if\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpf2te0u5y.cs(79,11): error CS1003: Syntax error, '(' expected\n/tmp/tmpf2te0u5y.cs(79,11): error CS1525: Invalid expression term '}'\n/tmp/tmpf2te0u5y.cs(79,11): error CS1026: ) expected\n/tmp/tmpf2te0u5y.cs(79,11): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        }\n        else {\n            if (date.IndexOf(\"/\") != -1) return false;\n        }\n        if (date.IndexOf(\"-\") == 0) {\n            if (date.Substring(0, 2).ToLower() != \"0\") return false;\n            if (date.Substring(2, 2).ToLower() != \"1\") return false;\n            if (date.Substring(4, 2).ToLower() != \"1\") return false;\n            if (date.Substring(6, 2).ToLower() != \"1\") return false;\n            if (date.Substring(8, 2).ToLower() != \"1\") return false;\n        }\n        else {\n            if (date.Substring(0, 1).ToLower() != \"0\") return false;\n            if (date.Substring(1, 1).ToLower() != \"1\") return false;\n            if (date.Substring(3, 1).ToLower() != \"1\") return false;\n            if (date.Substring(5, 1).ToLower() != \"1\") return false;\n            if (date.Substring(7, 1).ToLower() != \"1\") return false;\n            if (date.Substring(9, 1).ToLower() != \"1\") return false;\n        }\n        if (date.IndexOf(\"-\") == date.Length - 1) {\n            if (date.Substring(0, 2).ToLower() != \"1\") return false;\n            if (date.Substring(2, 2).ToLower() != \"1\") return false;\n            if (date.Substring(4, 2).ToLower() != \"1\") return false;\n            if (date.Substring(6, 2).ToLower() != \"1\") return false;\n            if (date.Substring(8, 2).ToLower() != \"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8jrejrbv.cs(56,51): error CS1010: Newline in constant\n/tmp/tmp8jrejrbv.cs(56,52): error CS1026: ) expected\n/tmp/tmp8jrejrbv.cs(56,52): error CS1525: Invalid expression term '}'\n/tmp/tmp8jrejrbv.cs(56,52): error CS1002: ; expected\n/tmp/tmp8jrejrbv.cs(58,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp8jrejrbv.cs(77,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.IndexOf(\"-\") != -1)\n        {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.Substring(0, 2).ToLower() != \"01\") return false;\n            if (date.Substring(3, 2).ToLower() != \"01\") return false;\n            if (date.Substring(6, 2).ToLower() != \"01\") return false;\n        }\n        else\n        {\n            if (date.IndexOf(\"/\") != 0) return false;\n            if (date.Substring(0, 2).ToLower() != \"01\") return false;\n            if (date.Substring(3, 2).ToLower() != \"01\") return false;\n            if (date.Substring(6, 2).ToLower() != \"01\") return false;\n        }\n        if (date.Substring(0, 2).ToLower() != \"01\") return false;\n        if (date.Substring(3, 2).ToLower() != \"01\") return false;\n        if (date.Substring(6, 2).ToLower() != \"01\") return false;\n        if (date.Substring(0, 2).ToLower() != \"01\") return false;\n        if (date.Substring(3, 2).ToLower() != \"01\") return false;\n        if (date.Substring(6, 2).ToLower() != \"01\") return false;\n        if (date.Substring(0, 2).ToLower() != \"01\") return false;\n        if (date.Substring(3, 2).ToLower() != \"01\") return false;\n        if (date.Substring(6, 2).ToLower() != \"01\") return false;\n        if (date.Substring(0, 2).ToLower() != \"01\") return false;\n        if (date.Substring(3, 2).ToLower() != \"01\") return false;\n        if (date.Substring(6, 2).ToLower() != \"01\") return false;\n        if (date.Substring(0,\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnkjyo7ez.cs(55,30): error CS1525: Invalid expression term '}'\n/tmp/tmpnkjyo7ez.cs(55,30): error CS1026: ) expected\n/tmp/tmpnkjyo7ez.cs(55,30): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"13\") return false;\n        if (date.Substring(3, 2) == \"13\") return false;\n        if (date.Substring(5, 2) == \"13\") return false;\n        if (date.Substring(7, 2) == \"13\") return false;\n        if (date.Substring(0, 2) == \"15\") return false;\n        if (date.Substring(3, 2) == \"15\") return false;\n        if (date.Substring(5, 2) == \"15\") return false;\n        if (date.Substring(7, 2) == \"15\") return false;\n        if (date.Substring(0, 2) == \"16\") return false;\n        if (date.Substring(3, 2) == \"16\") return false;\n        if (date.Substring(5, 2) == \"16\") return false;\n        if (date.Substring(7, 2) == \"16\") return false;\n        if (date.Substring(0, 2) == \"17\") return false;\n        if (date.Substring(3, 2) == \"17\") return false;\n        if (date.Substring(5, 2) == \"17\") return false;\n        if (date.Substring(7, 2) == \"17\") return false;\n        if (date.Substring(0, 2) == \"18\") return false;\n        if (date.Substring(3, 2) == \"18\") return false;\n        if (date.Substring(5, 2) == \"18\") return false;\n        if (date.Substring(7, 2) == \"18\") return false;\n        if (date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_a2zu2rt.cs(53,28): error CS1026: ) expected\n/tmp/tmp_a2zu2rt.cs(53,28): error CS1525: Invalid expression term '}'\n/tmp/tmp_a2zu2rt.cs(53,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 10)\n            return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n            if (date.Substring(3, 2) == \"0\")\n                return false;\n            if (date.Substring(6, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n            if (date.Substring(3, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n            if (date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n            if (date.Substring(1, 1) == \"0\")\n                return false;\n            if (date.Substring(2, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n            if (date.Substring(1, 1) == \"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy0cvra20.cs(80,41): error CS1010: Newline in constant\n/tmp/tmpy0cvra20.cs(80,42): error CS1026: ) expected\n/tmp/tmpy0cvra20.cs(80,42): error CS1525: Invalid expression term '}'\n/tmp/tmpy0cvra20.cs(80,42): error CS1002: ; expected\n/tmp/tmpy0cvra20.cs(82,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpy0cvra20.cs(101,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        // Check if the date is empty\n        if (date == \"\")\n            return false;\n\n        // Check if the date is in the correct format\n        if (date.Length != 8 || date.IndexOf(\"-\") != 2 || date.IndexOf(\"/\") != 4)\n            return false;\n\n        // Check if the month is valid\n        if (date.Substring(0, 2).ToLower() == \"00\")\n            return false;\n        if (date.Substring(0, 2).ToLower() == \"01\") {\n            if (date.Substring(3, 2).ToLower() == \"00\")\n                return false;\n            if (date.Substring(3, 2).ToLower() == \"29\")\n                return false;\n            if (date.Substring(3, 2).ToLower() == \"30\")\n                return false;\n            if (date.Substring(3, 2).ToLower() == \"31\")\n                return false;\n        }\n        if (date.Substring(0, 2).ToLower() == \"02\") {\n            if (date.Substring(3, 2).ToLower() == \"29\")\n                return false;\n            if (date.Substring(3, 2).ToLower() == \"30\")\n                return false;\n            if (date.Substring(3, 2).ToLower() == \"31\")\n                return false;\n        }\n        if (date.Substring(0, 2).ToLower() == \"03\") {\n            if (date.Substring(3, 2).ToLower() == \"31\")\n                return false;\n        }\n        if (date.Substring(0, 2).ToLower() == \"04\") {\n            if (date.Substring(3, 2).ToLower() == \"30\")\n                return false;\n            if (date.Substring(3, 2).ToLower() == \"31\")\n                return false;\n        }\n        if (date.Substring(0, 2).ToLower() == \"05\") {\n            if (date.Substring(3, 2).ToLower() == \"31\")\n                return false;\n        }\n        if (date.Substring(0, 2).ToLower\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5rgg676_.cs(70,41): error CS1026: ) expected\n/tmp/tmp5rgg676_.cs(70,41): error CS1525: Invalid expression term '}'\n/tmp/tmp5rgg676_.cs(70,41): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 8)\n            return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) != \"0\" && date.Substring(0, 2) != \"1\" && date.Substring(0, 2) != \"2\" && date.Substring(0, 2) != \"3\" && date.Substring(0, 2) != \"4\" && date.Substring(0, 2) != \"5\" && date.Substring(0, 2) != \"6\" && date.Substring(0, 2) != \"7\" && date.Substring(0, 2) != \"8\" && date.Substring(0, 2) != \"9\" && date.Substring(0, 2) != \"0\")\n                return false;\n            if (date.Substring(2, 2) != \"0\" && date.Substring(2, 2) != \"1\" && date.Substring(2, 2) != \"2\" && date.Substring(2, 2) != \"3\" && date.Substring(2, 2) != \"4\" && date.Substring(2, 2) != \"5\" && date.Substring(2, 2) != \"6\" && date.Substring(2, 2) != \"7\" && date.Substring(2, 2) != \"8\" && date.Substring(2, 2) != \"9\" && date.Substring(2, 2) != \"0\")\n                return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) != \"0\" && date.Substring(0, 2) != \"1\" && date.Substring(0, 2) != \"2\" && date.Substring(0, 2) != \"3\" && date.Substring(0, 2) != \"4\" && date.Substring(0, 2) != \"5\" && date.Substring(0, 2) != \"6\" && date.Substring(0, 2) != \"7\" && date.Sub\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpa651_n60.cs(40,273): error CS1026: ) expected\n/tmp/tmpa651_n60.cs(40,273): error CS1525: Invalid expression term '}'\n/tmp/tmpa651_n60.cs(40,273): error CS1002: ; expected\n/tmp/tmpa651_n60.cs(42,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpa651_n60.cs(61,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbvxq67jw.cs(53,28): error CS1026: ) expected\n/tmp/tmpbvxq67jw.cs(53,28): error CS1525: Invalid expression term '}'\n/tmp/tmpbvxq67jw.cs(53,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 8)\n            return false;\n        if (date.Substring(0, 2) == \"0\")\n            return false;\n        if (date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(4, 2) == \"0\")\n            return false;\n        if (date.Substring(6, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) > \"12\")\n            return false;\n        if (date.Substring(2, 2) > \"12\")\n            return false;\n        if (date.Substring(4, 2) > \"12\")\n            return false;\n        if (date.Substring(6, 2) > \"12\")\n            return false;\n        if (date.Substring(0, 2) < \"1\")\n            return false;\n        if (date.Substring(2, 2) < \"1\")\n            return false;\n        if (date.Substring(4, 2) < \"1\")\n            return false;\n        if (date.Substring(6, 2) < \"1\")\n            return false;\n        if (date.Substring(0, 2) > \"31\")\n            return false;\n        if (date.Substring(2, 2) > \"31\")\n            return false;\n        if (date.Substring(4, 2) > \"31\")\n            return false;\n        if (date.Substring(6, 2) > \"31\")\n            return false;\n        if (date.Substring(0, 2) < \"1\")\n            return false;\n        if (date.Substring(2, 2) < \"1\")\n            return false;\n        if (date.Substring(4, 2) < \"1\")\n            return false;\n        if (date.Substring(6, 2) < \"1\")\n            return false;\n        if (date.Substring(0, 2) > \"30\")\n            return false;\n        if (date.Substring(2, 2) > \"30\")\n            return false;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4eqj5x_4.cs(39,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(41,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(43,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(45,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(47,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(49,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(51,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(53,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(55,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(57,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(59,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(61,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(63,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(65,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(67,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(69,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(71,13): error CS0019: Operator '>' cannot be applied to opera",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.IndexOf(\"-\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"-\") == -1) return false;\n        if (date.IndexOf(\"/\") == -1) return false;\n        if (date.IndexOf(\"-\") == 0) return false;\n        if (date.IndexOf(\"/\") == 0) return false;\n        if (date.IndexOf(\"-\") == date.Length - 1) return false;\n        if (date.IndexOf(\"/\") == date.Length - 1) return false;\n        if (date.IndexOf(\"-\") == 1) return false;\n        if (date.IndexOf(\"/\") == 1) return false;\n        if (date.IndexOf(\"-\") == 2) return false;\n        if (date.IndexOf(\"/\") == 2) return false;\n        if (date.IndexOf(\"-\") == 3) return false;\n        if (date.IndexOf(\"/\") == 3) return false;\n        if (date.IndexOf(\"-\") == 4) return false;\n        if (date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"-\") == 5) return false;\n        if (date.IndexOf(\"/\") == 5) return false;\n        if (date.IndexOf(\"-\") == 6) return false;\n        if (date.IndexOf(\"/\") == 6) return false;\n        if (date.IndexOf(\"-\") == 7) return false;\n        if (date.IndexOf(\"/\") == 7) return false;\n        if (date.IndexOf(\"-\") == 8) return false;\n        if (date.IndexOf(\"/\") == 8) return false;\n        if (date.IndexOf(\"-\") == 9) return false;\n        if (date.IndexOf(\"/\") == 9) return false;\n        if (date.IndexOf(\"-\") == 10) return false;\n        if (date.IndexOf(\"/\") == 10) return false;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppa_hj5fw.cs(26,24): error CS0161: 'Problem.ValidDate(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) != \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\") return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\") return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\") return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\") return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(0, 2)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdwzkmfmg.cs(43,33): error CS1026: ) expected\n/tmp/tmpdwzkmfmg.cs(43,33): error CS1525: Invalid expression term '}'\n/tmp/tmpdwzkmfmg.cs(43,33): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbvxq67jw.cs(53,28): error CS1026: ) expected\n/tmp/tmpbvxq67jw.cs(53,28): error CS1525: Invalid expression term '}'\n/tmp/tmpbvxq67jw.cs(53,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 10) return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length == 9) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length ==\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxkei3yzc.cs(60,27): error CS1525: Invalid expression term '}'\n/tmp/tmpxkei3yzc.cs(60,27): error CS1026: ) expected\n/tmp/tmpxkei3yzc.cs(60,27): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(0, 2) > \"12\") return false;\n        if (date.Substring(3, 2) > \"12\") return false;\n        if (date.Substring(5, 2) > \"12\") return false;\n        if (date.Substring(0, 2) < \"1\") return false;\n        if (date.Substring(3, 2) < \"1\") return false;\n        if (date.Substring(5, 2) < \"1\") return false;\n        if (date.Substring(0, 2) > \"31\") return false;\n        if (date.Substring(3, 2) > \"31\") return false;\n        if (date.Substring(5, 2) > \"31\") return false;\n        if (date.Substring(0, 2) < \"1\") return false;\n        if (date.Substring(3, 2) < \"1\") return false;\n        if (date.Substring(5, 2) < \"1\") return false;\n        if (date.Substring(0, 2) > \"30\") return false;\n        if (date.Substring(3, 2) > \"30\") return false;\n        if (date.Substring(5, 2) > \"30\") return false;\n        if (date.Substring(0, 2) < \"1\") return false;\n        if (date.Substring(3, 2) < \"1\") return false;\n        if (date.Substring(5, 2) < \"1\") return false;\n        if (date.Substring(0, 2) > \"29\") return false;\n        if (date.Substring(3, 2) > \"29\") return false;\n        if (date.Substring(5, 2) > \"29\") return false;\n        if (date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4j6w43qc.cs(53,28): error CS1026: ) expected\n/tmp/tmp4j6w43qc.cs(53,28): error CS1525: Invalid expression term '}'\n/tmp/tmp4j6w43qc.cs(53,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        int month = 0;\n        int day = 0;\n        int year = 0;\n        try {\n            month = Convert.ToInt32(date.Substring(0, 2));\n            day = Convert.ToInt32(date.Substring(3, 2));\n            year = Convert.ToInt32(date.Substring(6, 4));\n        } catch (Exception e) {\n            return false;\n        }\n        if (month < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n        if (month == 2) {\n            if (day < 1 || day > 29) return false;\n        }\n        else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) return false;\n        }\n        else {\n            if (day < 1 || day > 31) return false;\n        }\n        if (year < 1900 || year > 2100) return false;\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length < 8)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) != \"0\" && date.Substring(0, 2) != \"1\" && date.Substring(0, 2) != \"2\")\n                return false;\n            if (date.Substring(3, 2) != \"0\" && date.Substring(3, 2) != \"1\" && date.Substring(3, 2) != \"2\")\n                return false;\n            if (date.Substring(5, 2) != \"0\" && date.Substring(5, 2) != \"1\" && date.Substring(5, 2) != \"2\")\n                return false;\n            if (date.Substring(7, 2) != \"0\" && date.Substring(7, 2) != \"1\" && date.Substring(7, 2) != \"2\")\n                return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) != \"0\" && date.Substring(0, 2) != \"1\" && date.Substring(0, 2) != \"2\")\n                return false;\n            if (date.Substring(3, 2) != \"0\" && date.Substring(3, 2) != \"1\" && date.Substring(3, 2) != \"2\")\n                return false;\n            if (date.Substring(5, 2) != \"0\" && date.Substring(5, 2) != \"1\" && date.Substring(5, 2) != \"2\")\n                return false;\n        }\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) != \"0\" && date.Substring(0, 2) != \"1\" && date.Substring(0, 2) != \"2\")\n                return false;\n            if (date.Substring(3, 2) != \"0\" && date.Substring(3, 2) != \"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpahtext6u.cs(54,72): error CS1010: Newline in constant\n/tmp/tmpahtext6u.cs(54,73): error CS1026: ) expected\n/tmp/tmpahtext6u.cs(54,73): error CS1525: Invalid expression term '}'\n/tmp/tmpahtext6u.cs(54,73): error CS1002: ; expected\n/tmp/tmpahtext6u.cs(56,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpahtext6u.cs(75,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"13\") return false;\n        if (date.Substring(3, 2) == \"13\") return false;\n        if (date.Substring(5, 2) == \"13\") return false;\n        if (date.Substring(7, 2) == \"13\") return false;\n        if (date.Substring(0, 2) == \"15\") return false;\n        if (date.Substring(3, 2) == \"15\") return false;\n        if (date.Substring(5, 2) == \"15\") return false;\n        if (date.Substring(7, 2) == \"15\") return false;\n        if (date.Substring(0, 2) == \"16\") return false;\n        if (date.Substring(3, 2) == \"16\") return false;\n        if (date.Substring(5, 2) == \"16\") return false;\n        if (date.Substring(7, 2) == \"16\") return false;\n        if (date.Substring(0, 2) == \"17\") return false;\n        if (date.Substring(3, 2) == \"17\") return false;\n        if (date.Substring(5, 2) == \"17\") return false;\n        if (date.Substring(7, 2) == \"17\") return false;\n        if (date.Substring(0, 2) == \"18\") return false;\n        if (date.Substring(3, 2) == \"18\") return false;\n        if (date.Substring(5, 2) == \"18\") return false;\n        if (date.Substring(7, 2) == \"18\") return false;\n        if (date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_a2zu2rt.cs(53,28): error CS1026: ) expected\n/tmp/tmp_a2zu2rt.cs(53,28): error CS1525: Invalid expression term '}'\n/tmp/tmp_a2zu2rt.cs(53,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.IndexOf(\"-\") != -1)\n        {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.Substring(0, 2).ToLower() != \"01\") return false;\n            if (date.Substring(2, 2).ToLower() != \"01\") return false;\n            if (date.Substring(4, 2).ToLower() != \"01\") return false;\n            if (date.Substring(6, 2).ToLower() != \"01\") return false;\n        }\n        else\n        {\n            if (date.IndexOf(\"/\") != -1)\n            {\n                if (date.IndexOf(\"/\") != 0) return false;\n                if (date.Substring(0, 2).ToLower() != \"01\") return false;\n                if (date.Substring(2, 2).ToLower() != \"01\") return false;\n                if (date.Substring(4, 2).ToLower() != \"01\") return false;\n                if (date.Substring(6, 2).ToLower() != \"01\") return false;\n            }\n            else\n            {\n                if (date.IndexOf(\"-\") != -1) return false;\n                if (date.IndexOf(\"/\") != -1) return false;\n                if (date.ToLower() != \"01-01-2000\") return false;\n            }\n        }\n        if (date.Substring(0, 2).ToLower() != \"01\") return false;\n        if (date.Substring(2, 2).ToLower() != \"01\") return false;\n        if (date.Substring(4, 2).ToLower() != \"01\") return false;\n        if (date.Substring(6, 2).ToLower() != \"01\") return false;\n        if (date.Substring(0, 2).ToLower() != \"01\") return false;\n        if (date.Substring(2, 2).ToLower() != \"01\") return false;\n        if (date.Substring(4, 2).ToLower() !=\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp01tzhq4v.cs(60,46): error CS1525: Invalid expression term '}'\n/tmp/tmp01tzhq4v.cs(60,46): error CS1026: ) expected\n/tmp/tmp01tzhq4v.cs(60,46): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length < 8)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) != \"0\" && date.Substring(0, 2) != \"1\" && date.Substring(0, 2) != \"2\" && date.Substring(0, 2) != \"3\" && date.Substring(0, 2) != \"4\" && date.Substring(0, 2) != \"5\" && date.Substring(0, 2) != \"6\" && date.Substring(0, 2) != \"7\" && date.Substring(0, 2) != \"8\" && date.Substring(0, 2) != \"9\" && date.Substring(0, 2) != \"10\" && date.Substring(0, 2) != \"11\" && date.Substring(0, 2) != \"12\")\n                return false;\n            if (date.Substring(3, 2) != \"0\" && date.Substring(3, 2) != \"1\" && date.Substring(3, 2) != \"2\" && date.Substring(3, 2) != \"3\" && date.Substring(3, 2) != \"4\" && date.Substring(3, 2) != \"5\" && date.Substring(3, 2) != \"6\" && date.Substring(3, 2) != \"7\" && date.Substring(3, 2) != \"8\" && date.Substring(3, 2) != \"9\" && date.Substring(3, 2) != \"10\" && date.Substring(3, 2) != \"11\" && date.Substring(3, 2) != \"12\")\n                return false;\n            if (date.Substring(6, 2) != \"0\" && date.Substring(6, 2) != \"1\" && date.Substring(6, 2) != \"2\" && date.Substring(6, 2) != \"3\" && date.Substring(6, 2) != \"4\" && date.Sub\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcc_mucf3.cs(38,180): error CS1026: ) expected\n/tmp/tmpcc_mucf3.cs(38,180): error CS1525: Invalid expression term '}'\n/tmp/tmpcc_mucf3.cs(38,180): error CS1002: ; expected\n/tmp/tmpcc_mucf3.cs(40,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpcc_mucf3.cs(59,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.IndexOf(\"-\") != 2) return false;\n        if (date.IndexOf(\"/\") != 4) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 3) return false;\n        if (date.IndexOf(\"-\") == 3 && date.IndexOf(\"/\") == 2) return false;\n        if (date.IndexOf(\"-\") == 3 && date.IndexOf(\"/\") == 3) return false;\n        if (date.IndexOf(\"-\") == 3 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") == 2) return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") == 3) return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"-\") == 5 && date.IndexOf(\"/\") == 2) return false;\n        if (date.IndexOf(\"-\") == 5 && date.IndexOf(\"/\") == 3) return false;\n        if (date.IndexOf(\"-\") == 5 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"-\") == 6 && date.IndexOf(\"/\") == 2) return false;\n        if (date.IndexOf(\"-\") == 6 && date.IndexOf(\"/\") == 3) return false;\n        if (date.IndexOf(\"-\") == 6 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"-\") == 7 && date.IndexOf(\"/\") == 2) return false;\n        if (date.IndexOf(\"-\") == 7 && date.IndexOf(\"/\") == 3\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1qw0d8ak.cs(47,61): error CS1026: ) expected\n/tmp/tmp1qw0d8ak.cs(47,61): error CS1525: Invalid expression term '}'\n/tmp/tmp1qw0d8ak.cs(47,61): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length < 4) return false;\n        if (date.Length > 10) return false;\n        if (date.IndexOf(\"-\") == -1) return false;\n        if (date.IndexOf(\"-\") != 0) return false;\n        if (date.IndexOf(\"-\") != date.Length - 3) return false;\n        if (date.IndexOf(\"-\") != date.Length - 2) return false;\n        if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        if (date.IndexOf(\"-\") != date.Length - 4) return false;\n        if (date.IndexOf(\"-\") != date.Length - 5) return false;\n        if (date.IndexOf(\"-\") != date.Length - 6) return false;\n        if (date.IndexOf(\"-\") != date.Length - 7) return false;\n        if (date.IndexOf(\"-\") != date.Length - 8) return false;\n        if (date.IndexOf(\"-\") != date.Length - 9) return false;\n        if (date.IndexOf(\"-\") != date.Length - 10) return false;\n        if (date.IndexOf(\"-\") != date.Length - 11) return false;\n        if (date.IndexOf(\"-\") != date.Length - 12) return false;\n        if (date.IndexOf(\"-\") != date.Length - 13) return false;\n        if (date.IndexOf(\"-\") != date.Length - 14) return false;\n        if (date.IndexOf(\"-\") != date.Length - 15) return false;\n        if (date.IndexOf(\"-\") != date.Length - 16) return false;\n        if (date.IndexOf(\"-\") != date.Length - 17) return false;\n        if (date.IndexOf(\"-\") != date.Length - 18) return false;\n        if (date.IndexOf(\"-\") != date.Length - 19) return false;\n        if (date.IndexOf(\"-\") != date.Length - 20) return false;\n        if (date.IndexOf(\"-\") != date.Length - 21) return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9kcmscat.cs(26,24): error CS0161: 'Problem.ValidDate(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 8)\n            return false;\n        if (date.IndexOf(\"-\") != 3)\n            return false;\n        if (date.IndexOf(\"/\") != 2)\n            return false;\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Substring(0, 3).ToLower() == \"jan\") {\n                if (date.Substring(4, 2).ToLower() == \"01\") {\n                    if (date.Substring(6, 2).ToLower() == \"01\") {\n                        return true;\n                    }\n                }\n            }\n            if (date.Substring(0, 3).ToLower() == \"feb\") {\n                if (date.Substring(4, 2).ToLower() == \"02\") {\n                    if (date.Substring(6, 2).ToLower() == \"01\") {\n                        return true;\n                    }\n                }\n            }\n            if (date.Substring(0, 3).ToLower() == \"mar\") {\n                if (date.Substring(4, 2).ToLower() == \"03\") {\n                    if (date.Substring(6, 2).ToLower() == \"01\") {\n                        return true;\n                    }\n                }\n            }\n            if (date.Substring(0, 3).ToLower() == \"apr\") {\n                if (date.Substring(4, 2).ToLower() == \"04\") {\n                    if (date.Substring(6, 2).ToLower() == \"01\") {\n                        return true;\n                    }\n                }\n            }\n            if (date.Substring(0, 3).ToLower() == \"may\") {\n                if (date.Substring(4, 2).ToLower() == \"05\") {\n                    if (date.Substring(6, 2).ToLower() == \"01\") {\n                        return true;\n                    }\n                }\n            }\n            if (date.Substring(0, 3).ToLower() == \"jun\") {\n                if (date.Substring(4, 2).ToLower() == \"06\") {\n                    if\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmf613q09.cs(73,23): error CS1003: Syntax error, '(' expected\n/tmp/tmpmf613q09.cs(73,23): error CS1525: Invalid expression term '}'\n/tmp/tmpmf613q09.cs(73,23): error CS1026: ) expected\n/tmp/tmpmf613q09.cs(73,23): error CS1002: ; expected\n/tmp/tmpmf613q09.cs(75,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpmf613q09.cs(94,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length < 10) return false;\n        if (date.Length > 10) return false;\n        if (date.IndexOf(\"-\") == -1) return false;\n        if (date.IndexOf(\"-\") == 0) return false;\n        if (date.IndexOf(\"-\") == date.Length - 1) return false;\n        if (date.IndexOf(\"-\") == 1) return false;\n        if (date.IndexOf(\"-\") == 2) return false;\n        if (date.IndexOf(\"-\") == 3) return false;\n        if (date.IndexOf(\"-\") == 4) return false;\n        if (date.IndexOf(\"-\") == 5) return false;\n        if (date.IndexOf(\"-\") == 6) return false;\n        if (date.IndexOf(\"-\") == 7) return false;\n        if (date.IndexOf(\"-\") == 8) return false;\n        if (date.IndexOf(\"-\") == 9) return false;\n        if (date.IndexOf(\"-\") == 10) return false;\n        if (date.IndexOf(\"-\") == 11) return false;\n        if (date.IndexOf(\"-\") == 12) return false;\n        if (date.IndexOf(\"-\") == 13) return false;\n        if (date.IndexOf(\"-\") == 14) return false;\n        if (date.IndexOf(\"-\") == 15) return false;\n        if (date.IndexOf(\"-\") == 16) return false;\n        if (date.IndexOf(\"-\") == 17) return false;\n        if (date.IndexOf(\"-\") == 18) return false;\n        if (date.IndexOf(\"-\") == 19) return false;\n        if (date.IndexOf(\"-\") == 20) return false;\n        if (date.IndexOf(\"-\") == 21) return false;\n        if (date.IndexOf(\"-\") == 22) return false;\n        if (date.IndexOf(\"-\") == 23) return false;\n        if (date.IndexOf(\"-\") == 24) return false;\n        if (date.IndexOf(\"-\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuabahplc.cs(57,26): error CS1010: Newline in constant\n/tmp/tmpuabahplc.cs(57,28): error CS1026: ) expected\n/tmp/tmpuabahplc.cs(57,28): error CS1525: Invalid expression term '}'\n/tmp/tmpuabahplc.cs(57,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 10)\n            return false;\n        if (date.IndexOf('-') == -1)\n            return false;\n        if (date.IndexOf('-') > 2)\n            return false;\n        if (date.IndexOf('-') < 2)\n            return false;\n        if (date.IndexOf('/') == -1)\n            return false;\n        if (date.IndexOf('/') > 2)\n            return false;\n        if (date.IndexOf('/') < 2)\n            return false;\n        if (date.IndexOf('/') == 2)\n            return false;\n        if (date.IndexOf('/') == 3)\n            return false;\n        if (date.IndexOf('/') == 4)\n            return false;\n        if (date.IndexOf('/') == 5)\n            return false;\n        if (date.IndexOf('/') == 6)\n            return false;\n        if (date.IndexOf('/') == 7)\n            return false;\n        if (date.IndexOf('/') == 8)\n            return false;\n        if (date.IndexOf('/') == 9)\n            return false;\n        if (date.IndexOf('/') == 10)\n            return false;\n        if (date.IndexOf('/') == 11)\n            return false;\n        if (date.IndexOf('/') == 12)\n            return false;\n        if (date.IndexOf('/') == 13)\n            return false;\n        if (date.IndexOf('/') == 14)\n            return false;\n        if (date.IndexOf('/') == 15)\n            return false;\n        if (date.IndexOf('/') == 16)\n            return false;\n        if (date.IndexOf('/') == 17)\n            return false;\n        if (date.IndexOf('/') == 18)\n            return false;\n        if (date.IndexOf('/') == 19)\n            return false;\n        if (date.IndexOf('/\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5cmijo_x.cs(81,26): error CS1010: Newline in constant\n/tmp/tmp5cmijo_x.cs(81,28): error CS1026: ) expected\n/tmp/tmp5cmijo_x.cs(81,28): error CS1525: Invalid expression term '}'\n/tmp/tmp5cmijo_x.cs(81,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 10)\n            return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxdkc8xes.cs(26,24): error CS0161: 'Problem.ValidDate(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 10) return false;\n        if (date.IndexOf(\"-\") == -1) return false;\n        if (date.IndexOf(\"-\") == 0) return false;\n        if (date.IndexOf(\"-\") == date.Length - 1) return false;\n        if (date.IndexOf(\"-\") == date.Length - 2) return false;\n        if (date.IndexOf(\"-\") == date.Length - 3) return false;\n        if (date.IndexOf(\"-\") == date.Length - 4) return false;\n        if (date.IndexOf(\"-\") == date.Length - 5) return false;\n        if (date.IndexOf(\"-\") == date.Length - 6) return false;\n        if (date.IndexOf(\"-\") == date.Length - 7) return false;\n        if (date.IndexOf(\"-\") == date.Length - 8) return false;\n        if (date.IndexOf(\"-\") == date.Length - 9) return false;\n        if (date.IndexOf(\"-\") == date.Length - 10) return false;\n        if (date.IndexOf(\"-\") == date.Length - 11) return false;\n        if (date.IndexOf(\"-\") == date.Length - 12) return false;\n        if (date.IndexOf(\"-\") == date.Length - 13) return false;\n        if (date.IndexOf(\"-\") == date.Length - 14) return false;\n        if (date.IndexOf(\"-\") == date.Length - 15) return false;\n        if (date.IndexOf(\"-\") == date.Length - 16) return false;\n        if (date.IndexOf(\"-\") == date.Length - 17) return false;\n        if (date.IndexOf(\"-\") == date.Length - 18) return false;\n        if (date.IndexOf(\"-\") == date.Length - 19) return false;\n        if (date.IndexOf(\"-\") == date.Length - 20) return false;\n        if (date.IndexOf(\"-\") == date.Length - 21) return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzf580_mk.cs(52,58): error CS1525: Invalid expression term '}'\n/tmp/tmpzf580_mk.cs(52,58): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length < 10) return false;\n        if (date.Length > 10) return false;\n        if (date.IndexOf(\"-\") == -1) return false;\n        if (date.IndexOf(\"-\") == 0) return false;\n        if (date.IndexOf(\"-\") == date.Length - 1) return false;\n        if (date.IndexOf(\"-\") == 1) return false;\n        if (date.IndexOf(\"-\") == 2) return false;\n        if (date.IndexOf(\"-\") == 3) return false;\n        if (date.IndexOf(\"-\") == 4) return false;\n        if (date.IndexOf(\"-\") == 5) return false;\n        if (date.IndexOf(\"-\") == 6) return false;\n        if (date.IndexOf(\"-\") == 7) return false;\n        if (date.IndexOf(\"-\") == 8) return false;\n        if (date.IndexOf(\"-\") == 9) return false;\n        if (date.IndexOf(\"-\") == 10) return false;\n        if (date.IndexOf(\"-\") == 11) return false;\n        if (date.IndexOf(\"-\") == 12) return false;\n        if (date.IndexOf(\"-\") == 13) return false;\n        if (date.IndexOf(\"-\") == 14) return false;\n        if (date.IndexOf(\"-\") == 15) return false;\n        if (date.IndexOf(\"-\") == 16) return false;\n        if (date.IndexOf(\"-\") == 17) return false;\n        if (date.IndexOf(\"-\") == 18) return false;\n        if (date.IndexOf(\"-\") == 19) return false;\n        if (date.IndexOf(\"-\") == 20) return false;\n        if (date.IndexOf(\"-\") == 21) return false;\n        if (date.IndexOf(\"-\") == 22) return false;\n        if (date.IndexOf(\"-\") == 23) return false;\n        if (date.IndexOf(\"-\") == 24) return false;\n        if (date.IndexOf(\"-\") ==\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn6ofkxjd.cs(57,33): error CS1525: Invalid expression term '}'\n/tmp/tmpn6ofkxjd.cs(57,33): error CS1026: ) expected\n/tmp/tmpn6ofkxjd.cs(57,33): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        }\n        else {\n            if (date.IndexOf(\"/\") != 0) return false;\n            if (date.IndexOf(\"/\") != date.Length - 1) return false;\n        }\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        }\n        else {\n            if (date.IndexOf(\"/\") != 0) return false;\n            if (date.IndexOf(\"/\") != date.Length - 1) return false;\n        }\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        }\n        else {\n            if (date.IndexOf(\"/\") != 0) return false;\n            if (date.IndexOf(\"/\") != date.Length - 1) return false;\n        }\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        }\n        else {\n            if (date.IndexOf(\"/\") != 0) return false;\n            if (date.IndexOf(\"/\") != date.Length - 1) return false;\n        }\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        }\n        else {\n            if (date.IndexOf(\"/\") != 0) return false;\n            if\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpo6xs8dgb.cs(67,15): error CS1003: Syntax error, '(' expected\n/tmp/tmpo6xs8dgb.cs(67,15): error CS1525: Invalid expression term '}'\n/tmp/tmpo6xs8dgb.cs(67,15): error CS1026: ) expected\n/tmp/tmpo6xs8dgb.cs(67,15): error CS1002: ; expected\n/tmp/tmpo6xs8dgb.cs(69,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpo6xs8dgb.cs(88,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.IndexOf(\"-\") == -1) return false;\n        if (date.IndexOf(\"-\") != 0) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\")) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 2) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 3) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 4) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 5) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 6) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 7) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 8) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 9) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 10) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 11) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 12) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 13) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 14) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 15) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 16) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 17) return false;\n        if (date.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp595qrvmh.cs(49,18): error CS1001: Identifier expected\n/tmp/tmp595qrvmh.cs(49,18): error CS1026: ) expected\n/tmp/tmp595qrvmh.cs(49,18): error CS1525: Invalid expression term '}'\n/tmp/tmp595qrvmh.cs(49,18): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 10)\n            return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 9) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 11) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd2kjay62.cs(26,24): error CS0161: 'Problem.ValidDate(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 10) return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\") return false;\n            if (date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\") return false;\n            if (date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\") return false;\n            if (date.Substring(1, 1) == \"0\") return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(2, 2) == \"0\") return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 2) == \"0\")\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgmh91wzf.cs(65,45): error CS1525: Invalid expression term '}'\n/tmp/tmpgmh91wzf.cs(65,45): error CS1002: ; expected\n/tmp/tmpgmh91wzf.cs(67,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpgmh91wzf.cs(86,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0o7z2agc.cs(53,28): error CS1026: ) expected\n/tmp/tmp0o7z2agc.cs(53,28): error CS1525: Invalid expression term '}'\n/tmp/tmp0o7z2agc.cs(53,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.IndexOf(\"-\") != 3) return false;\n        if (date.IndexOf(\"/\") != 2) return false;\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Substring(0, 3) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n        }\n        if (date.IndexOf(\"/\") == 2) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(2, 1) == \"0\") return false;\n        }\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Substring(3, 1) == \"0\") return false;\n        }\n        if (date.IndexOf(\"/\") == 2) {\n            if (date.Substring(2, 1) == \"0\") return false;\n        }\n        if (date.Substring(0, 2) < \"01\" || date.Substring(0, 2) > \"12\") return false;\n        if (date.Substring(3, 2) < \"01\" || date.Substring(3, 2) > \"31\") return false;\n        if (date.Substring(5, 2) < \"01\" || date.Substring(5, 2) > \"30\") return false;\n        if (date.Substring(7, 2) < \"01\" || date.Substring(7, 2) > \"29\") return false;\n        if (date.Substring(1, 1) < \"1\" || date.Substring(1, 1) > \"12\") return false;\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1q2b_nnp.cs(45,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp1q2b_nnp.cs(45,44): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp1q2b_nnp.cs(46,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp1q2b_nnp.cs(46,44): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp1q2b_nnp.cs(47,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp1q2b_nnp.cs(47,44): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp1q2b_nnp.cs(48,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp1q2b_nnp.cs(48,44): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp1q2b_nnp.cs(49,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp1q2b_nnp.cs(49,43): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 10)\n            return true;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n            if (date.Substring(0, 2) == \"1\" && date.Substring(2, 2) == \"0\")\n                return false;\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"1\")\n                return false;\n            if (date.Substring(0, 2) == \"2\" && date.Substring(2, 2) == \"0\")\n                return false;\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"2\")\n                return false;\n            if (date.Substring(0, 2) == \"3\" && date.Substring(2, 2) == \"0\")\n                return false;\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"3\")\n                return false;\n            if (date.Substring(0, 2) == \"4\" && date.Substring(2, 2) == \"0\")\n                return false;\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"4\")\n                return false;\n            if (date.Substring(0, 2) == \"5\" && date.Substring(2, 2) == \"0\")\n                return false;\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"5\")\n                return false;\n            if (date.Substring(0, 2) == \"6\" && date.Substring(2, 2) == \"0\")\n                return false;\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2,\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3fx2ha55.cs(58,65): error CS1525: Invalid expression term '}'\n/tmp/tmp3fx2ha55.cs(58,65): error CS1026: ) expected\n/tmp/tmp3fx2ha55.cs(58,65): error CS1002: ; expected\n/tmp/tmp3fx2ha55.cs(60,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp3fx2ha55.cs(79,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) {\n            return false;\n        }\n        if (date.Length > 10) {\n            return false;\n        }\n        if (date.Length < 10) {\n            return false;\n        }\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\") {\n                return false;\n            }\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\") {\n                return false;\n            }\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\") {\n                return false;\n            }\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 2) == \"0\") {\n                return false;\n            }\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 2) == \"0\") {\n                return false;\n            }\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\") {\n                return false;\n            }\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\") {\n                return false;\n            }\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\") {\n                return false;\n            }\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 1) == \"0\") {\n                return false;\n            }\n        }\n        if (date.Length == 9) {\n            if (date.Substring(0, 1) == \"0\") {\n                return false;\n            }\n        }\n        if (date.Length == 11) {\n            if (date.Substring(0, 1) == \"0\") {\n                return false;\n            }\n        }\n        if (date.Length == 13) {\n            if (date\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0rel45eh.cs(92,21): error CS1026: ) expected\n/tmp/tmp0rel45eh.cs(92,21): error CS1525: Invalid expression term '}'\n/tmp/tmp0rel45eh.cs(92,21): error CS1002: ; expected\n/tmp/tmp0rel45eh.cs(94,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp0rel45eh.cs(113,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 8)\n            return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) != \"0\")\n            return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) != \"0\")\n            return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) != \"0\")\n            return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) == \"0\"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplu8m5jrp.cs(57,40): error CS1026: ) expected\n/tmp/tmplu8m5jrp.cs(57,40): error CS1525: Invalid expression term '}'\n/tmp/tmplu8m5jrp.cs(57,40): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length < 10) return false;\n        if (date.Length > 10) return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n        }\n        if (date.Length == 13) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n            if (date.Substring(5, 2) == \"0\") return false;\n        }\n        if (date.Length == 16) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n            if (date.Substring(5, 2) == \"0\") return false;\n            if (date.Substring(7, 2) == \"0\") return false;\n        }\n        if (date.Length == 19) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n            if (date.Substring(5, 2) == \"0\") return false;\n            if (date.Substring(7, 2) == \"0\") return false;\n            if (date.Substring(9, 2) == \"0\") return false;\n        }\n        if (date.Length == 20) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n            if (date.Substring(5, 2) == \"0\") return false;\n            if (date.Substring(7, 2) == \"0\") return false;\n            if (date.Substring(9, 2) == \"0\") return false;\n            if (date.Substring(11, 2) == \"0\") return false;\n        }\n        if (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2un2qxo6.cs(60,13): error CS1525: Invalid expression term '}'\n/tmp/tmp2un2qxo6.cs(60,13): error CS1026: ) expected\n/tmp/tmp2un2qxo6.cs(60,13): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 10) return false;\n        if (date.IndexOf('-') == -1) return false;\n        if (date.IndexOf('/') == -1) return false;\n        if (date.IndexOf('-') < date.IndexOf('/')) return false;\n        if (date.IndexOf('-') > date.IndexOf('/')) return false;\n        if (date.IndexOf('/') < date.IndexOf('-')) return false;\n        if (date.IndexOf('/') > date.IndexOf('-')) return false;\n        if (date.IndexOf('-') < date.IndexOf('/')) return false;\n        if (date.IndexOf('-') > date.IndexOf('/')) return false;\n        if (date.IndexOf('/') < date.IndexOf('-')) return false;\n        if (date.IndexOf('/') > date.IndexOf('-')) return false;\n        if (date.IndexOf('-') < date.IndexOf('/')) return false;\n        if (date.IndexOf('-') > date.IndexOf('/')) return false;\n        if (date.IndexOf('/') < date.IndexOf('-')) return false;\n        if (date.IndexOf('/') > date.IndexOf('-')) return false;\n        if (date.IndexOf('-') < date.IndexOf('/')) return false;\n        if (date.IndexOf('-') > date.IndexOf('/')) return false;\n        if (date.IndexOf('/') < date.IndexOf('-')) return false;\n        if (date.IndexOf('/') > date.IndexOf('-')) return false;\n        if (date.IndexOf('-') < date.IndexOf('/')) return false;\n        if (date.IndexOf('-') > date.IndexOf('/')) return false;\n        if (date.IndexOf('/') < date.IndexOf('-')) return false;\n        if (date.IndexOf('/\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgnqs0v_z.cs(51,26): error CS1010: Newline in constant\n/tmp/tmpgnqs0v_z.cs(51,28): error CS1026: ) expected\n/tmp/tmpgnqs0v_z.cs(51,28): error CS1525: Invalid expression term '}'\n/tmp/tmpgnqs0v_z.cs(51,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length < 10)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.IndexOf(\"-\") == -1)\n            return false;\n        if (date.IndexOf(\"-\") != 0)\n            return false;\n        if (date.IndexOf(\"-\") != date.Length - 1)\n            return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\"))\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") - 1)\n            return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") - 1)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1)\n            return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") + 1)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 2)\n            return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") + 2)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 3)\n            return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") + 3)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 4)\n            return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") + 4)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 5)\n            return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") + 5)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 6)\n            return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") + 6)\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbjgv5hj2.cs(67,60): error CS1525: Invalid expression term '}'\n/tmp/tmpbjgv5hj2.cs(67,60): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 8)\n            return false;\n        if (date.IndexOf(\"-\") == -1)\n            return false;\n        if (date.IndexOf(\"-\") != 0)\n            return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\"))\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 2)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 3)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 4)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 5)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 6)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 7)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 8)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 9)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 10)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 11)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 12)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 13)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 14)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 15)\n            return false;\n        if (date.IndexOf(\"-\") != date.IndexOf\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwmbpt5ic.cs(67,46): error CS1026: ) expected\n/tmp/tmpwmbpt5ic.cs(67,46): error CS1525: Invalid expression term '}'\n/tmp/tmpwmbpt5ic.cs(67,46): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 10) return false;\n        if (date.IndexOf(\"-\") == -1) return false;\n        if (date.IndexOf(\"-\") == 0) return false;\n        if (date.IndexOf(\"-\") == date.Length - 1) return false;\n        if (date.IndexOf(\"-\") == date.Length - 2) return false;\n        if (date.IndexOf(\"-\") == date.Length - 3) return false;\n        if (date.IndexOf(\"-\") == date.Length - 4) return false;\n        if (date.IndexOf(\"-\") == date.Length - 5) return false;\n        if (date.IndexOf(\"-\") == date.Length - 6) return false;\n        if (date.IndexOf(\"-\") == date.Length - 7) return false;\n        if (date.IndexOf(\"-\") == date.Length - 8) return false;\n        if (date.IndexOf(\"-\") == date.Length - 9) return false;\n        if (date.IndexOf(\"-\") == date.Length - 10) return false;\n        if (date.IndexOf(\"-\") == date.Length - 11) return false;\n        if (date.IndexOf(\"-\") == date.Length - 12) return false;\n        if (date.IndexOf(\"-\") == date.Length - 13) return false;\n        if (date.IndexOf(\"-\") == date.Length - 14) return false;\n        if (date.IndexOf(\"-\") == date.Length - 15) return false;\n        if (date.IndexOf(\"-\") == date.Length - 16) return false;\n        if (date.IndexOf(\"-\") == date.Length - 17) return false;\n        if (date.IndexOf(\"-\") == date.Length - 18) return false;\n        if (date.IndexOf(\"-\") == date.Length - 19) return false;\n        if (date.IndexOf(\"-\") == date.Length - 20) return false;\n        if (date.IndexOf(\"-\") == date.Length - 21) return\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzf580_mk.cs(52,58): error CS1525: Invalid expression term '}'\n/tmp/tmpzf580_mk.cs(52,58): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 8)\n            return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) != \"0\" && date.Substring(0, 2) != \"1\" && date.Substring(0, 2) != \"2\")\n                return false;\n            if (date.Substring(3, 2) != \"0\" && date.Substring(3, 2) != \"1\" && date.Substring(3, 2) != \"2\")\n                return false;\n            if (date.Substring(5, 2) != \"0\" && date.Substring(5, 2) != \"1\" && date.Substring(5, 2) != \"2\")\n                return false;\n            if (date.Substring(7, 2) != \"0\" && date.Substring(7, 2) != \"1\" && date.Substring(7, 2) != \"2\")\n                return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 1) != \"0\" && date.Substring(0, 1) != \"1\" && date.Substring(0, 1) != \"2\")\n                return false;\n            if (date.Substring(2, 1) != \"0\" && date.Substring(2, 1) != \"1\" && date.Substring(2, 1) != \"2\")\n                return false;\n            if (date.Substring(4, 1) != \"0\" && date.Substring(4, 1) != \"1\" && date.Substring(4, 1) != \"2\")\n                return false;\n            if (date.Substring(6, 1) != \"0\" && date.Substring(6, 1) != \"1\" && date.Substring(6, 1) != \"2\")\n                return false;\n        }\n        if (date.Length == 9) {\n            if (date.Substring(0, 1) != \"0\" && date.Substring(0, 1) != \"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphak1eyyt.cs(54,72): error CS1010: Newline in constant\n/tmp/tmphak1eyyt.cs(54,73): error CS1026: ) expected\n/tmp/tmphak1eyyt.cs(54,73): error CS1525: Invalid expression term '}'\n/tmp/tmphak1eyyt.cs(54,73): error CS1002: ; expected\n/tmp/tmphak1eyyt.cs(56,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmphak1eyyt.cs(75,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) > \"12\") return false;\n        if (date.Substring(3, 2) > \"12\") return false;\n        if (date.Substring(6, 2) > \"12\") return false;\n        if (date.Substring(0, 2) < \"1\") return false;\n        if (date.Substring(3, 2) < \"1\") return false;\n        if (date.Substring(6, 2) < \"1\") return false;\n        if (date.Substring(0, 2) > \"31\") return false;\n        if (date.Substring(3, 2) > \"31\") return false;\n        if (date.Substring(6, 2) > \"31\") return false;\n        if (date.Substring(0, 2) < \"1\") return false;\n        if (date.Substring(3, 2) < \"1\") return false;\n        if (date.Substring(6, 2) < \"1\") return false;\n        if (date.Substring(0, 2) > \"30\") return false;\n        if (date.Substring(3, 2) > \"30\") return false;\n        if (date.Substring(6, 2) > \"30\") return false;\n        if (date.Substring(0, 2) < \"1\") return false;\n        if (date.Substring(3, 2) < \"1\") return false;\n        if (date.Substring(6, 2) < \"1\") return false;\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuox0nr6n.cs(32,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(33,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(34,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(35,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(36,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(37,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(38,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(39,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(40,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(41,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(42,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(43,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(44,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(45,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(46,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(47,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmpuox0nr6n.cs(48,13): error CS0019: Operator '<' cannot be applied to opera",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) != \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\") return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\") return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\") return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\") return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(0, 2)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdwzkmfmg.cs(43,33): error CS1026: ) expected\n/tmp/tmpdwzkmfmg.cs(43,33): error CS1525: Invalid expression term '}'\n/tmp/tmpdwzkmfmg.cs(43,33): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0o7z2agc.cs(53,28): error CS1026: ) expected\n/tmp/tmp0o7z2agc.cs(53,28): error CS1525: Invalid expression term '}'\n/tmp/tmp0o7z2agc.cs(53,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.Substring(0, 2) == \"0\" || date.Substring(0, 2) == \"1\" || date.Substring(0, 2) == \"2\" || date.Substring(0, 2) == \"3\" || date.Substring(0, 2) == \"4\" || date.Substring(0, 2) == \"5\" || date.Substring(0, 2) == \"6\" || date.Substring(0, 2) == \"7\" || date.Substring(0, 2) == \"8\" || date.Substring(0, 2) == \"9\" || date.Substring(0, 2) == \"10\" || date.Substring(0, 2) == \"11\" || date.Substring(0, 2) == \"12\")\n            if (date.Substring(2, 2) == \"0\" || date.Substring(2, 2) == \"1\" || date.Substring(2, 2) == \"2\" || date.Substring(2, 2) == \"3\" || date.Substring(2, 2) == \"4\" || date.Substring(2, 2) == \"5\" || date.Substring(2, 2) == \"6\" || date.Substring(2, 2) == \"7\" || date.Substring(2, 2) == \"8\" || date.Substring(2, 2) == \"9\" || date.Substring(2, 2) == \"10\" || date.Substring(2, 2) == \"11\" || date.Substring(2, 2) == \"12\")\n                if (date.Substring(4, 2) == \"0\" || date.Substring(4, 2) == \"1\" || date.Substring(4, 2) == \"2\" || date.Substring(4, 2) == \"3\" || date.Substring(4, 2) == \"4\" || date.Substring(4, 2) == \"5\" || date.Substring(4, 2) == \"6\" || date.Substring(4, 2) == \"7\" || date.Sub\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpm_45f480.cs(31,277): error CS1026: ) expected\n/tmp/tmpm_45f480.cs(31,277): error CS1525: Invalid expression term '}'\n/tmp/tmpm_45f480.cs(31,277): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 8)\n            return false;\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0)\n                return false;\n            if (date.Substring(0, 2).ToLower() != \"0\" && date.Substring(0, 2).ToLower() != \"1\" && date.Substring(0, 2).ToLower() != \"2\" && date.Substring(0, 2).ToLower() != \"3\" && date.Substring(0, 2).ToLower() != \"4\" && date.Substring(0, 2).ToLower() != \"5\" && date.Substring(0, 2).ToLower() != \"6\" && date.Substring(0, 2).ToLower() != \"7\" && date.Substring(0, 2).ToLower() != \"8\" && date.Substring(0, 2).ToLower() != \"9\" && date.Substring(0, 2).ToLower() != \"10\" && date.Substring(0, 2).ToLower() != \"11\" && date.Substring(0, 2).ToLower() != \"12\")\n                return false;\n            if (date.Substring(3, 2).ToLower() != \"0\" && date.Substring(3, 2).ToLower() != \"1\" && date.Substring(3, 2).ToLower() != \"2\" && date.Substring(3, 2).ToLower() != \"3\" && date.Substring(3, 2).ToLower() != \"4\" && date.Substring(3, 2).ToLower() != \"5\" && date.Substring(3, 2).ToLower() != \"6\" && date.Substring(3, 2).ToLower() != \"7\" && date.Substring(3, 2).ToLower() != \"8\" && date.Substring(3, 2).ToLower() != \"9\" && date.Substring(3, 2).ToLower() != \"10\" && date.Substring(3, 2).ToLower() != \"11\" && date.Substring(3, 2).ToLower() !=\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph2ygjbpk.cs(36,544): error CS1525: Invalid expression term '}'\n/tmp/tmph2ygjbpk.cs(36,544): error CS1026: ) expected\n/tmp/tmph2ygjbpk.cs(36,544): error CS1002: ; expected\n/tmp/tmph2ygjbpk.cs(38,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmph2ygjbpk.cs(57,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) > \"12\") return false;\n        if (date.Substring(3, 2) > \"12\") return false;\n        if (date.Substring(6, 2) > \"12\") return false;\n        if (date.Substring(0, 2) < \"1\") return false;\n        if (date.Substring(3, 2) < \"1\") return false;\n        if (date.Substring(6, 2) < \"1\") return false;\n        if (date.Substring(0, 2) > \"31\") return false;\n        if (date.Substring(3, 2) > \"31\") return false;\n        if (date.Substring(6, 2) > \"31\") return false;\n        if (date.Substring(0, 2) < \"1\") return false;\n        if (date.Substring(3, 2) < \"1\") return false;\n        if (date.Substring(6, 2) < \"1\") return false;\n        if (date.Substring(0, 2) > \"30\") return false;\n        if (date.Substring(3, 2) > \"30\") return false;\n        if (date.Substring(6, 2) > \"30\") return false;\n        if (date.Substring(0, 2) < \"1\") return false;\n        if (date.Substring(3, 2) < \"1\") return false;\n        if (date.Substring(6, 2) < \"1\") return false;\n        if (date.Substring(0, 2) > \"29\") return false;\n        if (date.Substring(3, 2) > \"29\") return false;\n        if (date.Substring(6, 2) > \"29\") return false;\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptlfmtzzc.cs(32,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptlfmtzzc.cs(33,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptlfmtzzc.cs(34,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptlfmtzzc.cs(35,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptlfmtzzc.cs(36,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptlfmtzzc.cs(37,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptlfmtzzc.cs(38,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptlfmtzzc.cs(39,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptlfmtzzc.cs(40,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptlfmtzzc.cs(41,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptlfmtzzc.cs(42,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptlfmtzzc.cs(43,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptlfmtzzc.cs(44,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptlfmtzzc.cs(45,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptlfmtzzc.cs(46,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptlfmtzzc.cs(47,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptlfmtzzc.cs(48,13): error CS0019: Operator '<' cannot be applied to opera",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 10) return false;\n        if (date.IndexOf(\"-\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\".\") != -1) return false;\n        if (date.IndexOf(\" \") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"-\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"-\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"-\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"-\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"-\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"-\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"-\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"-\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"-\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"-\") != -1) return false;\n        if (date.IndexOf(\"/\") != -1) return false;\n        if (date.IndexOf(\"-\") != -1) return false;\n        if (date.Index\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcr0jl93b.cs(56,23): error CS1026: ) expected\n/tmp/tmpcr0jl93b.cs(56,23): error CS1525: Invalid expression term '}'\n/tmp/tmpcr0jl93b.cs(56,23): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.Substring(0, 2).ToLower() != \"0\" && date.Substring(0, 2).ToLower() != \"1\" && date.Substring(0, 2).ToLower() != \"2\" && date.Substring(0, 2).ToLower() != \"3\" && date.Substring(0, 2).ToLower() != \"4\" && date.Substring(0, 2).ToLower() != \"5\" && date.Substring(0, 2).ToLower() != \"6\" && date.Substring(0, 2).ToLower() != \"7\" && date.Substring(0, 2).ToLower() != \"8\" && date.Substring(0, 2).ToLower() != \"9\" && date.Substring(0, 2).ToLower() != \"10\" && date.Substring(0, 2).ToLower() != \"11\" && date.Substring(0, 2).ToLower() != \"12\") return false;\n            if (date.Substring(2, 2).ToLower() != \"0\" && date.Substring(2, 2).ToLower() != \"1\" && date.Substring(2, 2).ToLower() != \"2\" && date.Substring(2, 2).ToLower() != \"3\" && date.Substring(2, 2).ToLower() != \"4\" && date.Substring(2, 2).ToLower() != \"5\" && date.Substring(2, 2).ToLower() != \"6\" && date.Substring(2, 2).ToLower() != \"7\" && date.Substring(2, 2).ToLower() != \"8\" && date.Substring(2, 2).ToLower() != \"9\" && date.Substring(2, 2).ToLower() != \"10\" && date.Substring(2, 2).ToLower() != \"11\" && date.Substring(2, 2).ToLower() != \"12\") return false;\n            \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplj8xs6ug.cs(35,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmplj8xs6ug.cs(54,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqls9i7_r.cs(53,28): error CS1026: ) expected\n/tmp/tmpqls9i7_r.cs(53,28): error CS1525: Invalid expression term '}'\n/tmp/tmpqls9i7_r.cs(53,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 10)\n            return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n            if (date.Substring(3, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n            if (date.Substring(3, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n            if (date.Substring(3, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n            if (date.Substring(3, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n            if (date.Substring(3, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n            if (date.Substring(3, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n            if (date.Substring(3, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n            if (date.Substring(3, 2) == \"0\")\n                return false;\n        }\n        if (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkp1enob9.cs(81,13): error CS1525: Invalid expression term '}'\n/tmp/tmpkp1enob9.cs(81,13): error CS1026: ) expected\n/tmp/tmpkp1enob9.cs(81,13): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 10) return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n            if (date.Substring(6, 2) == \"0\") return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\") return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 0) return false;\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\") return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpryc_3__c.cs(68,41): error CS1010: Newline in constant\n/tmp/tmpryc_3__c.cs(68,43): error CS1026: ) expected\n/tmp/tmpryc_3__c.cs(68,43): error CS1525: Invalid expression term '}'\n/tmp/tmpryc_3__c.cs(68,43): error CS1002: ; expected\n/tmp/tmpryc_3__c.cs(70,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpryc_3__c.cs(89,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqls9i7_r.cs(53,28): error CS1026: ) expected\n/tmp/tmpqls9i7_r.cs(53,28): error CS1525: Invalid expression term '}'\n/tmp/tmpqls9i7_r.cs(53,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length < 8)\n            return false;\n        if (date.Length > 12)\n            return false;\n        if (date.IndexOf(\"-\") == -1)\n            return false;\n        if (date.IndexOf(\"-\") != 0)\n            return false;\n        if (date.IndexOf(\"-\") != date.Length - 3)\n            return false;\n        if (date.IndexOf(\"-\") != date.Length - 2)\n            return false;\n        if (date.IndexOf(\"-\") != date.Length - 1)\n            return false;\n        if (date.IndexOf(\"-\") == 0)\n            return false;\n        if (date.IndexOf(\"-\") == 1)\n            return false;\n        if (date.IndexOf(\"-\") == 2)\n            return false;\n        if (date.IndexOf(\"-\") == 3)\n            return false;\n        if (date.IndexOf(\"-\") == 4)\n            return false;\n        if (date.IndexOf(\"-\") == 5)\n            return false;\n        if (date.IndexOf(\"-\") == 6)\n            return false;\n        if (date.IndexOf(\"-\") == 7)\n            return false;\n        if (date.IndexOf(\"-\") == 8)\n            return false;\n        if (date.IndexOf(\"-\") == 9)\n            return false;\n        if (date.IndexOf(\"-\") == 10)\n            return false;\n        if (date.IndexOf(\"-\") == 11)\n            return false;\n        if (date.IndexOf(\"-\") == 12)\n            return false;\n        if (date.IndexOf(\"-\") == 13)\n            return false;\n        if (date.IndexOf(\"-\") == 14)\n            return false;\n        if (date.IndexOf(\"-\") == 15)\n            return false;\n        if (date.IndexOf(\"-\") == 16)\n            return false;\n        if (date.IndexOf(\"-\") == 17)\n            return false;\n        if (date.IndexOf(\"-\") == 18)\n            return false\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpva0jydjm.cs(80,25): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length != 10)\n            return false;\n        if (date.IndexOf('-') == -1)\n            return false;\n        if (date.IndexOf('/') == -1)\n            return false;\n        if (date.IndexOf('-') < date.IndexOf('/'))\n            return false;\n        if (date.IndexOf('-') > date.IndexOf('/'))\n            return false;\n        if (date.IndexOf('/') < date.IndexOf('-'))\n            return false;\n        if (date.IndexOf('/') > date.IndexOf('-'))\n            return false;\n        if (date.IndexOf('-') < date.IndexOf('/'))\n            return false;\n        if (date.IndexOf('-') > date.IndexOf('/'))\n            return false;\n        if (date.IndexOf('/') < date.IndexOf('-'))\n            return false;\n        if (date.IndexOf('/') > date.IndexOf('-'))\n            return false;\n        if (date.IndexOf('-') < date.IndexOf('/'))\n            return false;\n        if (date.IndexOf('-') > date.IndexOf('/'))\n            return false;\n        if (date.IndexOf('/') < date.IndexOf('-'))\n            return false;\n        if (date.IndexOf('/') > date.IndexOf('-'))\n            return false;\n        if (date.IndexOf('-') < date.IndexOf('/'))\n            return false;\n        if (date.IndexOf('-') > date.IndexOf('/'))\n            return false;\n        if (date.IndexOf('/') < date.IndexOf('-'))\n            return false;\n        if (date.IndexOf('/') > date.IndexOf('-'))\n            return false;\n        if (date.IndexOf('-') < date.IndexOf('/'))\n            return false;\n        if (date.IndexOf('-') > date.IndexOf('/'))\n            return false;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293098,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9_qdgh1u.cs(26,24): error CS0161: 'Problem.ValidDate(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.IndexOf(\"-\") != 2) return false;\n        if (date.IndexOf(\"/\") != 4) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\")) return false;\n        if (date.IndexOf(\"/\") != date.LastIndexOf(\"/\")) return false;\n        if (date.IndexOf(\"-\") == date.LastIndexOf(\"-\")) {\n            if (date.Substring(0, 2) == \"00\") return false;\n            if (date.Substring(3, 2) == \"00\") return false;\n        }\n        if (date.IndexOf(\"/\") == date.LastIndexOf(\"/\")) {\n            if (date.Substring(0, 1) == \"0\") return false;\n            if (date.Substring(1, 2) == \"0\") return false;\n        }\n        if (date.Substring(0, 1) == \"0\") return false;\n        if (date.Substring(1, 1) == \"0\") return false;\n        if (date.Substring(2, 1) == \"0\") return false;\n        if (date.Substring(3, 1) == \"0\") return false;\n        if (date.Substring(4, 1) == \"0\") return false;\n        if (date.Substring(5, 1) == \"0\") return false;\n        if (date.Substring(6, 1) == \"0\") return false;\n        if (date.Substring(7, 1) == \"0\") return false;\n        if (date.Substring(0, 2) == \"00\") return false;\n        if (date.Substring(3, 2) == \"00\") return false;\n        if (date.Substring(5, 2) == \"00\") return false;\n        if (date.Substring(7, 2) == \"00\") return false;\n        if (date.Substring(0, 4) == \"0000\") return false;\n        if (date.Substring(3, 4) == \"0000\") return false;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplfakvhu9.cs(26,24): error CS0161: 'Problem.ValidDate(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) {\n            return false;\n        }\n        if (date.Length < 8) {\n            return false;\n        }\n        if (date.Length > 10) {\n            return false;\n        }\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) != \"0\" && date.Substring(0, 2) != \"1\" && date.Substring(0, 2) != \"2\" && date.Substring(0, 2) != \"3\" && date.Substring(0, 2) != \"4\" && date.Substring(0, 2) != \"5\" && date.Substring(0, 2) != \"6\" && date.Substring(0, 2) != \"7\" && date.Substring(0, 2) != \"8\" && date.Substring(0, 2) != \"9\" && date.Substring(0, 2) != \"10\" && date.Substring(0, 2) != \"11\" && date.Substring(0, 2) != \"12\") {\n                return false;\n            }\n            if (date.Substring(3, 2) != \"0\" && date.Substring(3, 2) != \"1\" && date.Substring(3, 2) != \"2\" && date.Substring(3, 2) != \"3\" && date.Substring(3, 2) != \"4\" && date.Substring(3, 2) != \"5\" && date.Substring(3, 2) != \"6\" && date.Substring(3, 2) != \"7\" && date.Substring(3, 2) != \"8\" && date.Substring(3, 2) != \"9\" && date.Substring(3, 2) != \"10\" && date.Substring(3, 2) != \"11\" && date.Substring(3, 2) != \"12\") {\n                return false;\n            }\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) != \"0\" && date.Substring(0, 2) != \"1\" && date.Substring(0, 2) != \"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2145wyjo.cs(45,103): error CS1010: Newline in constant\n/tmp/tmp2145wyjo.cs(45,104): error CS1026: ) expected\n/tmp/tmp2145wyjo.cs(45,104): error CS1525: Invalid expression term '}'\n/tmp/tmp2145wyjo.cs(45,104): error CS1002: ; expected\n/tmp/tmp2145wyjo.cs(47,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp2145wyjo.cs(66,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 10)\n            return false;\n        if (date.IndexOf(\"-\") != 2)\n            return false;\n        if (date.IndexOf(\"/\") != 4)\n            return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 4)\n            return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 2)\n            return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 1)\n            return false;\n        if (date.IndexOf(\"-\") == 1 && date.IndexOf(\"/\") == 4)\n            return false;\n        if (date.IndexOf(\"-\") == 1 && date.IndexOf(\"/\") == 2)\n            return false;\n        if (date.IndexOf(\"-\") == 1 && date.IndexOf(\"/\") == 1)\n            return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 4)\n            return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 2)\n            return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 1)\n            return false;\n        if (date.IndexOf(\"-\") == 1 && date.IndexOf(\"/\") == 4)\n            return false;\n        if (date.IndexOf(\"-\") == 1 && date.IndexOf(\"/\") == 2)\n            return false;\n        if (date.IndexOf(\"-\") == 1 && date.IndexOf(\"/\") == 1)\n            return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 4)\n            return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 2)\n            return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 1)\n            return false;\n        if (date.IndexOf(\"-\") ==\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptjod9fwp.cs(65,33): error CS1525: Invalid expression term '}'\n/tmp/tmptjod9fwp.cs(65,33): error CS1026: ) expected\n/tmp/tmptjod9fwp.cs(65,33): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length < 8) return false;\n        if (date.Length > 10) return false;\n        if (date.IndexOf(\"-\") == -1) return false;\n        if (date.IndexOf(\"-\") != 0) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\")) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"/\") - 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"/\") + 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"/\") - 2) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"/\") + 2) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"/\") - 3) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"/\") + 3) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"/\") - 4) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"/\") + 4) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"/\") - 5) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"/\") + 5) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"/\") - 6) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"/\") + 6) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"/\") - 7) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"/\") + 7) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"/\") - 8) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"/\") + 8) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwnbzvuxf.cs(49,46): error CS1026: ) expected\n/tmp/tmpwnbzvuxf.cs(49,46): error CS1525: Invalid expression term '}'\n/tmp/tmpwnbzvuxf.cs(49,46): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 8)\n            return false;\n        if (date.Substring(0, 2) == \"0\")\n            return false;\n        if (date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(4, 2) == \"0\")\n            return false;\n        if (date.Substring(6, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) > \"12\")\n            return false;\n        if (date.Substring(2, 2) > \"12\")\n            return false;\n        if (date.Substring(4, 2) > \"12\")\n            return false;\n        if (date.Substring(6, 2) > \"12\")\n            return false;\n        if (date.Substring(0, 2) < \"1\")\n            return false;\n        if (date.Substring(2, 2) < \"1\")\n            return false;\n        if (date.Substring(4, 2) < \"1\")\n            return false;\n        if (date.Substring(6, 2) < \"1\")\n            return false;\n        if (date.Substring(0, 2) > \"31\")\n            return false;\n        if (date.Substring(2, 2) > \"31\")\n            return false;\n        if (date.Substring(4, 2) > \"31\")\n            return false;\n        if (date.Substring(6, 2) > \"31\")\n            return false;\n        if (date.Substring(0, 2) < \"1\")\n            return false;\n        if (date.Substring(2, 2) < \"1\")\n            return false;\n        if (date.Substring(4, 2) < \"1\")\n            return false;\n        if (date.Substring(6, 2) < \"1\")\n            return false;\n        if (date.Substring(0, 2) > \"30\")\n            return false;\n        if (date.Substring(2, 2) > \"30\")\n            return false;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4eqj5x_4.cs(39,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(41,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(43,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(45,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(47,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(49,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(51,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(53,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(55,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(57,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(59,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(61,13): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(63,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(65,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(67,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(69,13): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmp4eqj5x_4.cs(71,13): error CS0019: Operator '>' cannot be applied to opera",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length < 10)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.IndexOf('-') == -1)\n            return false;\n        if (date.IndexOf('-') == 0)\n            return false;\n        if (date.IndexOf('-') == date.Length - 1)\n            return false;\n        if (date.IndexOf('-') == 1)\n            return false;\n        if (date.IndexOf('-') == 2)\n            return false;\n        if (date.IndexOf('-') == 3)\n            return false;\n        if (date.IndexOf('-') == 4)\n            return false;\n        if (date.IndexOf('-') == 5)\n            return false;\n        if (date.IndexOf('-') == 6)\n            return false;\n        if (date.IndexOf('-') == 7)\n            return false;\n        if (date.IndexOf('-') == 8)\n            return false;\n        if (date.IndexOf('-') == 9)\n            return false;\n        if (date.IndexOf('-') == 10)\n            return false;\n        if (date.IndexOf('-') == 11)\n            return false;\n        if (date.IndexOf('-') == 12)\n            return false;\n        if (date.IndexOf('-') == 13)\n            return false;\n        if (date.IndexOf('-') == 14)\n            return false;\n        if (date.IndexOf('-') == 15)\n            return false;\n        if (date.IndexOf('-') == 16)\n            return false;\n        if (date.IndexOf('-') == 17)\n            return false;\n        if (date.IndexOf('-') == 18)\n            return false;\n        if (date.IndexOf('-') == 19)\n            return false;\n        if (date.IndexOf('-') == 20)\n            return false;\n        if (date.IndexOf('-') == 21)\n            return false;\n        if (date.Index\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp82gti0iz.cs(81,23): error CS1026: ) expected\n/tmp/tmp82gti0iz.cs(81,23): error CS1525: Invalid expression term '}'\n/tmp/tmp82gti0iz.cs(81,23): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length < 10) return false;\n        if (date.Length > 10) return false;\n        if (date.IndexOf(\"-\") == -1) return false;\n        if (date.IndexOf(\"-\") != 0) return false;\n        if (date.IndexOf(\"-\") != date.Length - 1) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\")) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") - 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") - 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") - 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") - 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") - 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") - 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1) return false;\n        if (date.IndexOf(\"-\") != date.LastIndexOf(\"-\") - 1) return false;\n        if (date.IndexOf(\"-\") != date.IndexOf(\"-\") + 1) return false;\n        if (date.IndexOf(\"-\") != date.Last\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptqh1gm5e.cs(49,43): error CS1026: ) expected\n/tmp/tmptqh1gm5e.cs(49,43): error CS1525: Invalid expression term '}'\n/tmp/tmptqh1gm5e.cs(49,43): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 10)\n            return false;\n        if (date.IndexOf(\"-\") != 2)\n            return false;\n        if (date.IndexOf(\"/\") != 4)\n            return false;\n        if (date.IndexOf(\"-\") == 2) {\n            if (date.Substring(0, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(2, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(4, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(6, 2).ToLower() != \"01\")\n                return false;\n        }\n        if (date.IndexOf(\"/\") == 4) {\n            if (date.Substring(0, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(2, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(4, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(6, 2).ToLower() != \"01\")\n                return false;\n        }\n        if (date.IndexOf(\"-\") == 2) {\n            if (date.Substring(0, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(2, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(4, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(6, 2).ToLower() != \"01\")\n                return false;\n        }\n        if (date.IndexOf(\"/\") == 4) {\n            if (date.Substring(0, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(2, 2).ToLower() != \"01\")\n                return false;\n            if (date.Substring(4, 2).ToLower() != \"01\")\n                return false;\n            if\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4wfb6cqu.cs(72,15): error CS1003: Syntax error, '(' expected\n/tmp/tmp4wfb6cqu.cs(72,15): error CS1525: Invalid expression term '}'\n/tmp/tmp4wfb6cqu.cs(72,15): error CS1026: ) expected\n/tmp/tmp4wfb6cqu.cs(72,15): error CS1002: ; expected\n/tmp/tmp4wfb6cqu.cs(74,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp4wfb6cqu.cs(93,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.IndexOf(\"-\") != 4) return false;\n        if (date.IndexOf(\"/\") != 4) return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") != 4) return false;\n        if (date.IndexOf(\"-\") != 4 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"-\") != 4 && date.IndexOf(\"/\") != 4) return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") == 4 && date.IndexOf(\"-\") == 4) return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") == 4 && date.IndexOf(\"-\") != 4) return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") == 4 && date.IndexOf(\"-\") != 4) return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") != 4 && date.IndexOf(\"-\") != 4) return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") != 4 && date.IndexOf(\"-\") != 4) return false;\n        if (date.IndexOf(\"-\") != 4 && date.IndexOf(\"/\") == 4 && date.IndexOf(\"-\") != 4) return false;\n        if (date.IndexOf(\"-\") != 4 && date.IndexOf(\"/\") == 4 && date.IndexOf(\"-\") != 4) return false;\n        if (date.IndexOf(\"-\") != 4 && date.IndexOf(\"/\") != 4 && date.IndexOf(\"-\") != 4) return false;\n        if (date.IndexOf(\"-\") != 4 && date.IndexOf(\"/\") != 4 && date.IndexOf(\"-\") != 4) return false;\n        if (date.IndexOf(\"-\") == 4 &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnf7vkrzg.cs(44,38): error CS1525: Invalid expression term '}'\n/tmp/tmpnf7vkrzg.cs(44,38): error CS1026: ) expected\n/tmp/tmpnf7vkrzg.cs(44,38): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 10)\n            return false;\n        if (date.IndexOf(\"-\") != 2)\n            return false;\n        if (date.IndexOf(\"/\") != 4)\n            return false;\n        if (date.IndexOf(\"-\") == 2) {\n            if (date.Substring(0, 2) < \"01\" || date.Substring(0, 2) > \"12\")\n                return false;\n            if (date.Substring(2, 2) < \"01\" || date.Substring(2, 2) > \"31\")\n                return false;\n        }\n        if (date.IndexOf(\"/\") == 4) {\n            if (date.Substring(0, 2) < \"01\" || date.Substring(0, 2) > \"12\")\n                return false;\n            if (date.Substring(2, 2) < \"01\" || date.Substring(2, 2) > \"30\")\n                return false;\n        }\n        if (date.IndexOf(\"/\") == 2) {\n            if (date.Substring(2, 2) < \"01\" || date.Substring(2, 2) > \"29\")\n                return false;\n        }\n        if (date.IndexOf(\"-\") == 4) {\n            if (date.Substring(4, 2) < \"01\" || date.Substring(4, 2) > \"12\")\n                return false;\n        }\n        if (date.IndexOf(\"/\") == 6) {\n            if (date.Substring(4, 2) < \"01\" || date.Substring(4, 2) > \"12\")\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293098,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptnek8bri.cs(36,17): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptnek8bri.cs(36,48): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptnek8bri.cs(38,17): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptnek8bri.cs(38,48): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptnek8bri.cs(42,17): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptnek8bri.cs(42,48): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptnek8bri.cs(44,17): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptnek8bri.cs(44,48): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptnek8bri.cs(48,17): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptnek8bri.cs(48,48): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptnek8bri.cs(52,17): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptnek8bri.cs(52,48): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptnek8bri.cs(56,17): error CS0019: Operator '<' cannot be applied to operands of type 'string' and 'string'\n/tmp/tmptnek8bri.cs(56,48): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.IndexOf(\"-\") != 4) return false;\n        if (date.IndexOf(\"/\") != 2) return false;\n        if (date.IndexOf(\"-\") == 4) {\n            if (date.Substring(0, 2) == \"00\") return false;\n            if (date.Substring(2, 2) == \"00\") return false;\n        }\n        if (date.IndexOf(\"/\") == 2) {\n            if (date.Substring(0, 2) == \"00\") return false;\n            if (date.Substring(2, 2) == \"00\") return false;\n        }\n        if (date.Substring(0, 1) == \"0\") return false;\n        if (date.Substring(1, 1) == \"0\") return false;\n        if (date.Substring(2, 1) == \"0\") return false;\n        if (date.Substring(3, 1) == \"0\") return false;\n        if (date.Substring(4, 1) == \"0\") return false;\n        if (date.Substring(5, 1) == \"0\") return false;\n        if (date.Substring(6, 1) == \"0\") return false;\n        if (date.Substring(7, 1) == \"0\") return false;\n        if (date.Substring(0, 2) == \"20\") return false;\n        if (date.Substring(2, 2) == \"20\") return false;\n        if (date.Substring(4, 2) == \"20\") return false;\n        if (date.Substring(6, 2) == \"20\") return false;\n        if (date.Substring(0, 4) == \"2000\") return false;\n        if (date.Substring(2, 4) == \"2000\") return false;\n        if (date.Substring(4, 4) == \"2000\") return false;\n        if (date.Substring(6, 4) == \"2000\") return false;\n        if (date.Substring(0, 6) == \"2012\") return false\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmps2cuisiq.cs(55,57): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 10)\n            return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxdkc8xes.cs(26,24): error CS0161: 'Problem.ValidDate(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 8)\n            return false;\n        if (date.IndexOf(\"-\") != 2)\n            return false;\n        if (date.IndexOf(\"/\") != 4)\n            return false;\n        if (date.IndexOf(\"-\") == 2) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n            if (date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.IndexOf(\"/\") == 4) {\n            if (date.Substring(0, 4) == \"0\")\n                return false;\n            if (date.Substring(4, 2) == \"0\")\n                return false;\n        }\n        if (date.Substring(0, 2) == \"0\")\n            return false;\n        if (date.Substring(2, 2) == \"0\")\n            return false;\n        if (date.Substring(4, 2) == \"0\")\n            return false;\n        if (date.Substring(6, 2) == \"0\")\n            return false;\n        if (date.Substring(0, 2) < \"01\" || date.Substring(0, 2) > \"12\")\n            return false;\n        if (date.Substring(2, 2) < \"01\" || date.Substring(2, 2) > \"12\")\n            return false;\n        if (date.Substring(4, 2) < \"01\" || date.Substring(4, 2) > \"12\")\n            return false;\n        if (date.Substring(6, 2) < \"01\" || date.Substring(6, 2) > \"31\")\n            return false;\n        if (date.Substring(0, 2) == \"01\" && date.Substring(2, 2) == \"31\")\n            return false;\n        if (date.Substring(0, 2) == \"02\" && date.Substring(2, 2) == \"29\")\n            return false;\n        if (date.Substring(0, 2) == \"03\" && date\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptrdvcrg1.cs(67,49): error CS1026: ) expected\n/tmp/tmptrdvcrg1.cs(67,49): error CS1525: Invalid expression term '}'\n/tmp/tmptrdvcrg1.cs(67,49): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 10) return false;\n        if (date.IndexOf(\"-\") == -1) return false;\n        if (date.IndexOf(\"/\") == -1) return false;\n        if (date.IndexOf(\"-\") == 0) return false;\n        if (date.IndexOf(\"/\") == 0) return false;\n        if (date.IndexOf(\"-\") == date.Length - 1) return false;\n        if (date.IndexOf(\"/\") == date.Length - 1) return false;\n        if (date.IndexOf(\"-\") == 1) return false;\n        if (date.IndexOf(\"/\") == 1) return false;\n        if (date.IndexOf(\"-\") == 2) return false;\n        if (date.IndexOf(\"/\") == 2) return false;\n        if (date.IndexOf(\"-\") == 3) return false;\n        if (date.IndexOf(\"/\") == 3) return false;\n        if (date.IndexOf(\"-\") == 4) return false;\n        if (date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"-\") == 5) return false;\n        if (date.IndexOf(\"/\") == 5) return false;\n        if (date.IndexOf(\"-\") == 6) return false;\n        if (date.IndexOf(\"/\") == 6) return false;\n        if (date.IndexOf(\"-\") == 7) return false;\n        if (date.IndexOf(\"/\") == 7) return false;\n        if (date.IndexOf(\"-\") == 8) return false;\n        if (date.IndexOf(\"/\") == 8) return false;\n        if (date.IndexOf(\"-\") == 9) return false;\n        if (date.IndexOf(\"/\") == 9) return false;\n        if (date.IndexOf(\"-\") == 10) return false;\n        if (date.IndexOf(\"/\") == 10) return false;\n        if (date.IndexOf(\"-\") == 11) return false;\n        if (date\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpp5tape8v.cs(57,17): error CS1026: ) expected\n/tmp/tmpp5tape8v.cs(57,17): error CS1525: Invalid expression term '}'\n/tmp/tmpp5tape8v.cs(57,17): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length < 8) return false;\n        if (date.Length > 10) return false;\n        if (date.Length == 10 && date[4] != '-') return false;\n        if (date.Length == 8 && date[2] != '-') return false;\n        if (date.Length == 10 && date[2] == '-' && date[5] != '-') return false;\n        if (date.Length == 8 && date[2] == '-' && date[5] == '-') return false;\n        if (date.Length == 10 && date[2] == '-' && date[5] == '-' && date[8] != '-') return false;\n        if (date.Length == 8 && date[2] == '-' && date[5] == '-' && date[8] == '-') return false;\n        if (date.Length == 10 && date[2] == '-' && date[5] == '-' && date[8] == '-' && date[10] != '-') return false;\n        if (date.Length == 8 && date[2] == '-' && date[5] == '-' && date[8] == '-' && date[10] == '-') return false;\n        if (date.Length == 10 && date[2] == '-' && date[5] == '-' && date[8] == '-' && date[10] == '-' && date[12] != '-') return false;\n        if (date.Length == 8 && date[2] == '-' && date[5] == '-' && date[8] == '-' && date[10] == '-' && date[12] == '-') return false;\n        if (date.Length == 10 && date[2] == '-' && date[5] == '-' && date[8] == '-' && date[10] == '-' && date[12] == '-' && date[14] != '-') return false;\n        if (date.Length == 8 && date[2] == '-' && date[5] == '-' && date[8] == '-' && date[10] == '-' && date\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprlvlqemp.cs(41,110): error CS1026: ) expected\n/tmp/tmprlvlqemp.cs(41,110): error CS1525: Invalid expression term '}'\n/tmp/tmprlvlqemp.cs(41,110): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.IndexOf(\"-\") != 2) return false;\n        if (date.IndexOf(\"/\") != 4) return false;\n        if (date.IndexOf(\"-\") != 2) return false;\n        if (date.IndexOf(\"/\") != 4) return false;\n        if (date.IndexOf(\"-\") != 2) return false;\n        if (date.IndexOf(\"/\") != 4) return false;\n        if (date.IndexOf(\"-\") != 2) return false;\n        if (date.IndexOf(\"/\") != 4) return false;\n        if (date.IndexOf(\"-\") != 2) return false;\n        if (date.IndexOf(\"/\") != 4) return false;\n        if (date.IndexOf(\"-\") != 2) return false;\n        if (date.IndexOf(\"/\") != 4) return false;\n        if (date.IndexOf(\"-\") != 2) return false;\n        if (date.IndexOf(\"/\") != 4) return false;\n        if (date.IndexOf(\"-\") != 2) return false;\n        if (date.IndexOf(\"/\") != 4) return false;\n        if (date.IndexOf(\"-\") != 2) return false;\n        if (date.IndexOf(\"/\") != 4) return false;\n        if (date.IndexOf(\"-\") != 2) return false;\n        if (date.IndexOf(\"/\") != 4) return false;\n        if (date.IndexOf(\"-\") != 2) return false;\n        if (date.IndexOf(\"/\") != 4) return false;\n        if (date.IndexOf(\"-\") != 2) return false;\n        if (date.IndexOf(\"/\") != 4) return false;\n        if (date.IndexOf(\"-\") != 2) return false;\n        if (date.IndexOf(\"/\") != 4) return false;\n        if (date.IndexOf(\"-\") != 2) return false;\n        if (date.IndexOf(\"/\") != 4) return false;\n        if (date.IndexOf(\"-\") != 2\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5m2rvktu.cs(57,35): error CS1026: ) expected\n/tmp/tmp5m2rvktu.cs(57,35): error CS1525: Invalid expression term '}'\n/tmp/tmp5m2rvktu.cs(57,35): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.IndexOf(\"-\") != 3) return false;\n        if (date.IndexOf(\"/\") != 2) return false;\n        if (date.IndexOf(\"-\") == 3 && date.IndexOf(\"/\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 3) return false;\n        if (date.IndexOf(\"-\") == 3 && date.IndexOf(\"-\") == 3) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"-\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"-\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"-\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"-\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"-\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"-\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"-\") == 2) return false;\n        if (date.IndexOf(\"-\") == 2 && date.IndexOf(\"/\") == 2\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnvrfctyj.cs(47,61): error CS1026: ) expected\n/tmp/tmpnvrfctyj.cs(47,61): error CS1525: Invalid expression term '}'\n/tmp/tmpnvrfctyj.cs(47,61): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) != \"0\") return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\" && date.Substring(4, 2) == \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\" && date.Substring(4, 2) != \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\" && date.Substring(4, 2) == \"0\" && date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) != \"0\"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp513anjoh.cs(40,71): error CS1026: ) expected\n/tmp/tmp513anjoh.cs(40,71): error CS1525: Invalid expression term '}'\n/tmp/tmp513anjoh.cs(40,71): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 8)\n            return false;\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) != \"0\" && date.Substring(0, 2) != \"1\" && date.Substring(0, 2) != \"2\" && date.Substring(0, 2) != \"3\" && date.Substring(0, 2) != \"4\" && date.Substring(0, 2) != \"5\" && date.Substring(0, 2) != \"6\" && date.Substring(0, 2) != \"7\" && date.Substring(0, 2) != \"8\" && date.Substring(0, 2) != \"9\" && date.Substring(0, 2) != \"10\" && date.Substring(0, 2) != \"11\" && date.Substring(0, 2) != \"12\")\n                return false;\n            if (date.Substring(2, 2) != \"0\" && date.Substring(2, 2) != \"1\" && date.Substring(2, 2) != \"2\" && date.Substring(2, 2) != \"3\" && date.Substring(2, 2) != \"4\" && date.Substring(2, 2) != \"5\" && date.Substring(2, 2) != \"6\" && date.Substring(2, 2) != \"7\" && date.Substring(2, 2) != \"8\" && date.Substring(2, 2) != \"9\" && date.Substring(2, 2) != \"10\" && date.Substring(2, 2) != \"11\" && date.Substring(2, 2) != \"12\")\n                return false;\n        }\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) != \"0\" && date.Substring(0, 2) != \"1\" && date.Substring(0, 2) != \"2\" && date.Substring(0, 2) != \"3\" && date.Sub\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn30cir7w.cs(40,149): error CS1026: ) expected\n/tmp/tmpn30cir7w.cs(40,149): error CS1525: Invalid expression term '}'\n/tmp/tmpn30cir7w.cs(40,149): error CS1002: ; expected\n/tmp/tmpn30cir7w.cs(42,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpn30cir7w.cs(61,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length != 10)\n            return false;\n        if (date.IndexOf(\"-\") != -1) {\n            if (date.IndexOf(\"-\") != 2)\n                return false;\n            if (date.Substring(0, 2).ToLower() != \"0\")\n                return false;\n            if (date.Substring(3, 2).ToLower() != \"0\")\n                return false;\n            if (date.Substring(6, 2).ToLower() != \"0\")\n                return false;\n        }\n        else {\n            if (date.IndexOf(\"/\") != -1)\n                return false;\n            if (date.Substring(0, 2).ToLower() != \"0\")\n                return false;\n            if (date.Substring(3, 2).ToLower() != \"0\")\n                return false;\n            if (date.Substring(6, 2).ToLower() != \"0\")\n                return false;\n        }\n        if (date.Substring(0, 2).ToLower() != \"0\")\n            return false;\n        if (date.Substring(3, 2).ToLower() != \"0\")\n            return false;\n        if (date.Substring(6, 2).ToLower() != \"0\")\n            return false;\n        if (date.Substring(0, 2).ToLower() != \"0\")\n            return false;\n        if (date.Substring(3, 2).ToLower() != \"0\")\n            return false;\n        if (date.Substring(6, 2).ToLower() != \"0\")\n            return false;\n        if (date.Substring(0, 2).ToLower() != \"0\")\n            return false;\n        if (date.Substring(3, 2).ToLower() != \"0\")\n            return false;\n        if (date.Substring(6, 2).ToLower() != \"0\")\n            return false;\n        if (date.Substring(0, 2).ToLower() != \"0\")\n            return false;\n        if (date.Substring(3, 2).ToLower() != \"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpiopi65ce.cs(71,47): error CS1010: Newline in constant\n/tmp/tmpiopi65ce.cs(71,48): error CS1026: ) expected\n/tmp/tmpiopi65ce.cs(71,48): error CS1525: Invalid expression term '}'\n/tmp/tmpiopi65ce.cs(71,48): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 10)\n            return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 9) {\n            if (date.Substring(0, 1) == \"0\" && date.Sub\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpop14xtdr.cs(70,56): error CS1026: ) expected\n/tmp/tmpop14xtdr.cs(70,56): error CS1525: Invalid expression term '}'\n/tmp/tmpop14xtdr.cs(70,56): error CS1002: ; expected\n/tmp/tmpop14xtdr.cs(72,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpop14xtdr.cs(91,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 8)\n            return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) != \"0\" && date.Substring(0, 2) != \"1\" && date.Substring(0, 2) != \"2\")\n                return false;\n            if (date.Substring(3, 2) != \"0\" && date.Substring(3, 2) != \"1\" && date.Substring(3, 2) != \"2\")\n                return false;\n            if (date.Substring(5, 2) != \"0\" && date.Substring(5, 2) != \"1\" && date.Substring(5, 2) != \"2\")\n                return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) != \"0\" && date.Substring(0, 2) != \"1\" && date.Substring(0, 2) != \"2\")\n                return false;\n            if (date.Substring(3, 2) != \"0\" && date.Substring(3, 2) != \"1\" && date.Substring(3, 2) != \"2\")\n                return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) != \"0\" && date.Substring(0, 2) != \"1\" && date.Substring(0, 2) != \"2\")\n                return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) != \"0\" && date.Substring(0, 1) != \"1\" && date.Substring(0, 1) != \"2\")\n                return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) != \"0\" && date.Substring(0, 1) != \"1\" && date.Substring(0, 1) != \"2\")\n                return false;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpb1l5nth4.cs(60,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpb1l5nth4.cs(79,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) != \"0\") return false;\n        if (date.Substring(4, 2) == \"0\" && date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) == \"0\") return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\") return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\") return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\") return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(0, 2) != \"0\" && date.Substring(2, 2) != \"0\") return false;\n        if (date.Substring(4, 2) != \"0\" && date.Substring(6, 2) != \"0\") return false;\n        if (date.Substring(0, 2)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpiwrv8mgp.cs(43,33): error CS1026: ) expected\n/tmp/tmpiwrv8mgp.cs(43,33): error CS1525: Invalid expression term '}'\n/tmp/tmpiwrv8mgp.cs(43,33): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length < 8)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 1) == \"0\" && date.Substring(1, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 10) {\n            if (date.Substring(0, 1) == \"0\" && date.Sub\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpygjoa_k7.cs(70,56): error CS1026: ) expected\n/tmp/tmpygjoa_k7.cs(70,56): error CS1525: Invalid expression term '}'\n/tmp/tmpygjoa_k7.cs(70,56): error CS1002: ; expected\n/tmp/tmpygjoa_k7.cs(72,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpygjoa_k7.cs(91,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 8)\n            return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) != \"0\" && date.Substring(0, 2) != \"1\" && date.Substring(0, 2) != \"2\" && date.Substring(0, 2) != \"3\" && date.Substring(0, 2) != \"4\" && date.Substring(0, 2) != \"5\" && date.Substring(0, 2) != \"6\" && date.Substring(0, 2) != \"7\" && date.Substring(0, 2) != \"8\" && date.Substring(0, 2) != \"9\" && date.Substring(0, 2) != \"0\" && date.Substring(0, 2) != \"1\" && date.Substring(0, 2) != \"2\" && date.Substring(0, 2) != \"3\" && date.Substring(0, 2) != \"4\" && date.Substring(0, 2) != \"5\" && date.Substring(0, 2) != \"6\" && date.Substring(0, 2) != \"7\" && date.Substring(0, 2) != \"8\" && date.Substring(0, 2) != \"9\")\n                return false;\n        }\n        if (date.Length == 8) {\n            if (date.Substring(0, 2) != \"0\" && date.Substring(0, 2) != \"1\" && date.Substring(0, 2) != \"2\" && date.Substring(0, 2) != \"3\" && date.Substring(0, 2) != \"4\" && date.Substring(0, 2) != \"5\" && date.Substring(0, 2) != \"6\" && date.Substring(0, 2) != \"7\" && date.Substring(0, 2) != \"8\" && date.Substring(0, 2) != \"9\" && date.Substring(0, 2) != \"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd94rt3p5.cs(38,351): error CS1010: Newline in constant\n/tmp/tmpd94rt3p5.cs(38,352): error CS1026: ) expected\n/tmp/tmpd94rt3p5.cs(38,352): error CS1525: Invalid expression term '}'\n/tmp/tmpd94rt3p5.cs(38,352): error CS1002: ; expected\n/tmp/tmpd94rt3p5.cs(40,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpd94rt3p5.cs(59,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length != 10)\n            return false;\n        if (date.IndexOf('-') != -1) {\n            if (date.IndexOf('-') != 2)\n                return false;\n            if (date.IndexOf('-') != 5)\n                return false;\n            if (date.IndexOf('-') != 8)\n                return false;\n            if (date.IndexOf('-') != 10)\n                return false;\n        }\n        else {\n            if (date.IndexOf('-') != 1)\n                return false;\n            if (date.IndexOf('-') != 4)\n                return false;\n            if (date.IndexOf('-') != 7)\n                return false;\n            if (date.IndexOf('-') != 9)\n                return false;\n            if (date.IndexOf('-') != 11)\n                return false;\n        }\n        if (date.IndexOf('-') != -1) {\n            if (date.IndexOf('-') != 2)\n                return false;\n            if (date.IndexOf('-') != 5)\n                return false;\n            if (date.IndexOf('-') != 8)\n                return false;\n            if (date.IndexOf('-') != 10)\n                return false;\n        }\n        else {\n            if (date.IndexOf('-') != 1)\n                return false;\n            if (date.IndexOf('-') != 4)\n                return false;\n            if (date.IndexOf('-') != 7)\n                return false;\n            if (date.IndexOf('-') != 9)\n                return false;\n            if (date.IndexOf('-') != 11)\n                return false;\n        }\n        if (date.IndexOf('-') != -1) {\n            if (date.IndexOf('-') != 2)\n                return false;\n            if (date.IndexOf('-') != 5)\n                return false;\n            if (date.IndexOf('-') != 8)\n                return false;\n            if (date.IndexOf('-') != 10)\n                \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpulemj4zd.cs(82,41): error CS1525: Invalid expression term '}'\n/tmp/tmpulemj4zd.cs(82,41): error CS1002: ; expected\n/tmp/tmpulemj4zd.cs(85,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpulemj4zd.cs(104,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.IndexOf(\"-\") != 3) return false;\n        if (date.IndexOf(\"/\") != 2) return false;\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Substring(0, 3) == \"0\") return false;\n            if (date.Substring(3, 2) == \"0\") return false;\n        }\n        if (date.IndexOf(\"/\") == 2) {\n            if (date.Substring(0, 2) == \"0\") return false;\n            if (date.Substring(2, 1) == \"0\") return false;\n        }\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Substring(3, 1) == \"0\") return false;\n        }\n        if (date.IndexOf(\"/\") == 2) {\n            if (date.Substring(2, 1) == \"0\") return false;\n        }\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Substring(3, 1) == \"0\") return false;\n        }\n        if (date.IndexOf(\"/\") == 2) {\n            if (date.Substring(2, 1) == \"0\") return false;\n        }\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Substring(3, 1) == \"0\") return false;\n        }\n        if (date.IndexOf(\"/\") == 2) {\n            if (date.Substring(2, 1) == \"0\") return false;\n        }\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Substring(3, 1) == \"0\") return false;\n        }\n        if (date.IndexOf(\"/\") == 2) {\n            if (date.Substring(2, 1) == \"0\") return false;\n        }\n        if (date.IndexOf(\"-\") == 3) {\n            if (date.Substring(3, 1) == \"0\") return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp49f9nm66.cs(66,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp49f9nm66.cs(85,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0) return false;\n        if (date.Length > 10) return false;\n        if (date.Length < 10) return false;\n        if (date.IndexOf(\"-\") == -1) return false;\n        if (date.IndexOf(\"-\") == 0) return false;\n        if (date.IndexOf(\"-\") == date.Length - 1) return false;\n        if (date.IndexOf(\"-\") == 1) return false;\n        if (date.IndexOf(\"-\") == 2) return false;\n        if (date.IndexOf(\"-\") == 3) return false;\n        if (date.IndexOf(\"-\") == 4) return false;\n        if (date.IndexOf(\"-\") == 5) return false;\n        if (date.IndexOf(\"-\") == 6) return false;\n        if (date.IndexOf(\"-\") == 7) return false;\n        if (date.IndexOf(\"-\") == 8) return false;\n        if (date.IndexOf(\"-\") == 9) return false;\n        if (date.IndexOf(\"-\") == 10) return false;\n        if (date.IndexOf(\"-\") == 11) return false;\n        if (date.IndexOf(\"-\") == 12) return false;\n        if (date.IndexOf(\"-\") == 13) return false;\n        if (date.IndexOf(\"-\") == 14) return false;\n        if (date.IndexOf(\"-\") == 15) return false;\n        if (date.IndexOf(\"-\") == 16) return false;\n        if (date.IndexOf(\"-\") == 17) return false;\n        if (date.IndexOf(\"-\") == 18) return false;\n        if (date.IndexOf(\"-\") == 19) return false;\n        if (date.IndexOf(\"-\") == 20) return false;\n        if (date.IndexOf(\"-\") == 21) return false;\n        if (date.IndexOf(\"-\") == 22) return false;\n        if (date.IndexOf(\"-\") == 23) return false;\n        if (date.IndexOf(\"-\") == 24) return false;\n        if (date.IndexOf(\"-\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293096,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz_3qv_l9.cs(57,26): error CS1010: Newline in constant\n/tmp/tmpz_3qv_l9.cs(57,28): error CS1026: ) expected\n/tmp/tmpz_3qv_l9.cs(57,28): error CS1525: Invalid expression term '}'\n/tmp/tmpz_3qv_l9.cs(57,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.IndexOf(\"-\") != -1)\n        {\n            if (date.IndexOf(\"-\") != 0) return false;\n            if (date.Substring(0, 2).ToLower() != \"0\" && date.Substring(0, 2).ToLower() != \"1\" && date.Substring(0, 2).ToLower() != \"2\") return false;\n            if (date.Substring(3, 2).ToLower() != \"0\" && date.Substring(3, 2).ToLower() != \"1\" && date.Substring(3, 2).ToLower() != \"2\") return false;\n            if (date.Substring(5, 2).ToLower() != \"0\" && date.Substring(5, 2).ToLower() != \"1\" && date.Substring(5, 2).ToLower() != \"2\") return false;\n        }\n        else\n        {\n            if (date.IndexOf(\"/\") != 0) return false;\n            if (date.Substring(0, 2).ToLower() != \"0\" && date.Substring(0, 2).ToLower() != \"1\" && date.Substring(0, 2).ToLower() != \"2\") return false;\n            if (date.Substring(3, 2).ToLower() != \"0\" && date.Substring(3, 2).ToLower() != \"1\" && date.Substring(3, 2).ToLower() != \"2\") return false;\n            if (date.Substring(5, 2).ToLower() != \"0\" && date.Substring(5, 2).ToLower() != \"1\" && date.Substring(5, 2).ToLower() != \"2\") return false;\n        }\n        if (date.Substring(0, 2).ToLower() != \"0\" && date.Substring(0, 2).ToLower() != \"1\" && date.Substring(0, 2).ToLower() != \"2\") return false;\n        if (date.Substring(3, 2).ToLower() != \"0\" && date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpirc1alpq.cs(44,69): error CS1026: ) expected\n/tmp/tmpirc1alpq.cs(44,69): error CS1525: Invalid expression term '}'\n/tmp/tmpirc1alpq.cs(44,69): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length < 10) return false;\n        if (date.Length > 10) return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(9, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(9, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(9, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\") return false;\n        if (date.Substring(9, 2) == \"0\") return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(5, 2) == \"0\") return false;\n        if (date.Substring(7, 2) == \"0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpeeifafnh.cs(53,37): error CS1010: Newline in constant\n/tmp/tmpeeifafnh.cs(53,39): error CS1026: ) expected\n/tmp/tmpeeifafnh.cs(53,39): error CS1525: Invalid expression term '}'\n/tmp/tmpeeifafnh.cs(53,39): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 10) return false;\n        if (date.Substring(0, 2) == \"0\") return false;\n        if (date.Substring(3, 2) == \"0\") return false;\n        if (date.Substring(6, 2) == \"0\") return false;\n        if (date.Substring(0, 2) > \"12\") return false;\n        if (date.Substring(3, 2) > \"12\") return false;\n        if (date.Substring(6, 2) > \"12\") return false;\n        if (date.Substring(0, 2) < \"1\") return false;\n        if (date.Substring(3, 2) < \"1\") return false;\n        if (date.Substring(6, 2) < \"1\") return false;\n        if (date.Substring(0, 2) > \"31\") return false;\n        if (date.Substring(3, 2) > \"31\") return false;\n        if (date.Substring(6, 2) > \"31\") return false;\n        if (date.Substring(0, 2) < \"1\") return false;\n        if (date.Substring(3, 2) < \"1\") return false;\n        if (date.Substring(6, 2) < \"1\") return false;\n        if (date.Substring(0, 2) > \"30\") return false;\n        if (date.Substring(3, 2) > \"30\") return false;\n        if (date.Substring(6, 2) > \"30\") return false;\n        if (date.Substring(0, 2) < \"1\") return false;\n        if (date.Substring(3, 2) < \"1\") return false;\n        if (date.Substring(6, 2) < \"1\") return false;\n        if (date.Substring(0, 2) > \"29\") return false;\n        if (date.Substring(3, 2) > \"29\") return false;\n        if (date.Substring(6, 2) > \"29\") return false;\n        if (date.Substring(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293098,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsuafz65l.cs(53,28): error CS1026: ) expected\n/tmp/tmpsuafz65l.cs(53,28): error CS1525: Invalid expression term '}'\n/tmp/tmpsuafz65l.cs(53,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 10)\n            return true;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2, 2) == \"0\")\n                return false;\n            if (date.Substring(0, 2) == \"0\" && date.Substring(2,\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293098,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3_c8nemg.cs(58,65): error CS1525: Invalid expression term '}'\n/tmp/tmp3_c8nemg.cs(58,65): error CS1026: ) expected\n/tmp/tmp3_c8nemg.cs(58,65): error CS1002: ; expected\n/tmp/tmp3_c8nemg.cs(60,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp3_c8nemg.cs(79,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\")\n            return false;\n        if (date.Length != 10)\n            return false;\n        if (date.IndexOf(\"-\") != 2)\n            return false;\n        if (date.IndexOf(\"/\") != 4)\n            return false;\n        if (date.IndexOf(\"-\") == 2) {\n            if (date.Substring(0, 2) == \"00\")\n                return false;\n            if (date.Substring(2, 2) == \"00\")\n                return false;\n            if (date.Substring(4, 2) == \"00\")\n                return false;\n        }\n        if (date.IndexOf(\"/\") == 4) {\n            if (date.Substring(0, 2) == \"00\")\n                return false;\n            if (date.Substring(2, 2) == \"00\")\n                return false;\n            if (date.Substring(4, 2) == \"00\")\n                return false;\n        }\n        if (date.Substring(0, 2) == \"00\")\n            return false;\n        if (date.Substring(2, 2) == \"00\")\n            return false;\n        if (date.Substring(4, 2) == \"00\")\n            return false;\n        if (date.Substring(6, 2) == \"00\")\n            return false;\n        if (date.Substring(8, 2) == \"00\")\n            return false;\n        if (date.Substring(0, 2) < \"01\" || date.Substring(0, 2) > \"12\")\n            return false;\n        if (date.Substring(2, 2) < \"01\" || date.Substring(2, 2) > \"12\")\n            return false;\n        if (date.Substring(4, 2) < \"01\" || date.Substring(4, 2) > \"12\")\n            return false;\n        if (date.Substring(6, 2) < \"01\" || date.Substring(6, 2) > \"12\")\n            return false;\n        if (date.Substring(8, 2) < \"01\" || date.Substring(8,\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293098,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjxzm61kl.cs(69,61): error CS1525: Invalid expression term '}'\n/tmp/tmpjxzm61kl.cs(69,61): error CS1026: ) expected\n/tmp/tmpjxzm61kl.cs(69,61): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date.Length == 0)\n            return false;\n        if (date.Length > 10)\n            return false;\n        if (date.Length < 10)\n            return false;\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n            if (date.Substring(3, 2) == \"0\")\n                return false;\n            if (date.Substring(6, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 7) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n            if (date.Substring(3, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 6) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 5) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 4) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 3) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 2) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 1) {\n            if (date.Substring(0, 1) == \"0\")\n                return false;\n        }\n        if (date.Length == 0) {\n            return false;\n        }\n        if (date.Length == 10) {\n            if (date.Substring(0, 2) == \"0\")\n                return false;\n            if (date.Substring(3, 2) == \"0\")\n                return false;\n            if (date.Substring(6, 2) == \"0\")\n                return false;\n        }\n        if (date.Length == 7) {\n            if (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293098,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp126w8bm_.cs(83,17): error CS1525: Invalid expression term '}'\n/tmp/tmp126w8bm_.cs(83,17): error CS1026: ) expected\n/tmp/tmp126w8bm_.cs(83,17): error CS1002: ; expected\n/tmp/tmp126w8bm_.cs(85,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp126w8bm_.cs(104,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == \"\") return false;\n        if (date.Length != 8) return false;\n        if (date.IndexOf(\"-\") != 4) return false;\n        if (date.IndexOf(\"/\") != 4) return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"-\") == 4 && date.IndexOf(\"/\") != 4) return false;\n        if (date.IndexOf(\"/\") == 4 && date.IndexOf(\"-\") != 4) return false;\n        if (date.IndexOf(\"/\") == 4 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"/\") == 4 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"/\") == 4 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"/\") == 4 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"/\") == 4 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"/\") == 4 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"/\") == 4 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"/\") == 4 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"/\") == 4 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"/\") == 4 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"/\") == 4 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"/\") == 4 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"/\") == 4 && date.IndexOf(\"/\") == 4) return false;\n        if (date.IndexOf(\"/\") == 4 && date.IndexOf(\"/\") == 4\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293098,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5ofc90sd.cs(47,61): error CS1026: ) expected\n/tmp/tmp5ofc90sd.cs(47,61): error CS1525: Invalid expression term '}'\n/tmp/tmp5ofc90sd.cs(47,61): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}