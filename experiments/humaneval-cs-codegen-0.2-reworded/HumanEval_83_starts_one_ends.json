{
  "name": "HumanEval_83_starts_one_ends",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer n, return the count of the numbers of n-digit\n    // positive integers that start or end with 1.\n    public static long StartsOneEnds(long n) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L)) == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L)) == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L)) == (18000L));\n    }\n\n}\n",
  "completions": [
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n            for (long j = 0; j < 9; j++) {\n                if (i % 10 == 1) {\n                    count++;\n                }\n                i = i + j;\n            }\n        }\n        return count;",
    "        if (n == 0) return 0;\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += Math.Pow(10, n - 1) - Math.Pow(10, i - 1);\n        }\n        return count;",
    "        if (n < 1)\n            throw new Exception(\"n should be positive\");\n        if (n == 1)\n            return 1;\n        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            long j = i;\n            while (j > 0 && j % 10 == 0)\n                j /= 10;\n            if (j == 1)\n                sum++;\n        }\n        return sum;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        digits[0] = 0;\n        digits[n - 1] = 0;\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] * digits[i + 1];\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                count += i;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n            for (long j = 1; j <= 9; j++) {\n                if (i % j == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        long[] result = new long[n];\n        for (int i = 0; i < n; i++) {\n            result[i] = 0;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (digits[i] == 1 || digits[j] == 1) {\n                    result[i]++;\n                }\n            }\n        }\n        return result[0];",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 1 ? 1 : 0;\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        return digits.Count(x => x == 1 || x == 0);",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i == 1 || i == 10) {\n                count++;\n            }\n            for (long j = 1; j <= 9; j++) {\n                if (i == j) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        if (n < 1)\n            throw new Exception(\"n must be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += (i == 1 || i == n) ? 1 : 0;\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        return StartsOneEnds(digits);",
    "        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 1;\n        long[] digits = new long[n];\n        for (int i = 0; i < n; i++)\n            digits[i] = 0;\n        digits[0] = 1;\n        for (int i = 1; i < n; i++) {\n            digits[i] = 1;\n            for (int j = i - 1; j >= 0; j--) {\n                digits[j]++;\n                if (digits[j] == 10) {\n                    digits[j] = 0;\n                    digits[j + 1]++;\n                }\n            }\n        }\n        return digits[n - 1];",
    "        if (n < 1)\n            throw new Exception(\"n should be positive\");\n        if (n == 1)\n            return 1;\n        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            long nDigits = n - i;\n            long nDigitsStartOne = (nDigits / 2) * 2 + 1;\n            long nDigitsEndOne = nDigitsStartOne + 1;\n            long nDigitsStartZero = (nDigits / 2) * 2;\n            long nDigitsEndZero = nDigitsStartZero + 1;\n            sum += (nDigitsStartOne + nDigitsEndOne) * (nDigitsStartZero + nDigitsEndZero);\n        }\n        return sum;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i;\n        }\n        return StartsOneEnds(digits);",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++)\n            digits[i] = i + 1;\n        for (int i = 0; i < n; i++) {\n            digits[i] = 1;\n            for (int j = 0; j < n - 1; j++)\n                digits[j] *= 10;\n            digits[n - 1] = 1;\n        }\n        long result = 0;\n        for (int i = 0; i < n; i++)\n            result += digits[i];\n        return result;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++)\n            digits[i] = i + 1;\n        for (int i = 0; i < n; i++)\n            digits[i] *= 10;\n        for (int i = 0; i < n; i++)\n            digits[i] += i;\n        long result = 0;\n        for (int i = 0; i < n; i++) {\n            int start = 0;\n            int end = n - 1;\n            while (start < end) {\n                if (digits[start] == digits[end]) {\n                    result++;\n                    start++;\n                    end--;\n                }\n                else if (digits[start] < digits[end])\n                    start++;\n                else\n                    end--;\n            }\n        }\n        return result;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        return StartsOneEnds(digits);",
    "        if (n == 0) return 0;\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += Math.Pow(10, n - 1) * (Math.Pow(10, i) - 1);\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                count += (i - 1) / 2;\n            }\n            else {\n                count += (i - 1) / 2 + 1;\n            }\n        }\n        return count;",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += (i == 1 || i == n) ? 1 : 0;\n        }\n        return count;",
    "        if (n < 1) return 0;\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            long j = i;\n            while (j > 0 && j % 10 == 1) {\n                count++;\n                j /= 10;\n            }\n            while (j > 0 && j % 10 != 1) {\n                j /= 10;\n            }\n        }\n        return count;",
    "        long result = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                result++;\n            }\n            if (i % 10 == 0) {\n                result++;\n            }\n        }\n        return result;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i == 1) {\n                count++;\n            }\n            else if (i % 2 == 0) {\n                count += i / 2;\n            }\n            else {\n                count += i / 2 + 1;\n            }\n        }\n        return count;",
    "        // Write your code here\n        long[] digits = new long[n];\n        long[] result = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        for (int i = 0; i < n; i++) {\n            result[i] = 0;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < digits[i]; j++) {\n                result[i] += (j == 0 || j == digits[i] - 1) ? 1 : 0;\n            }\n        }\n        return result[0];",
    "        if (n < 1)\n            throw new Exception(\"n must be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            long j = i;\n            while (j > 0 && j % 10 == 1) {\n                count++;\n                j /= 10;\n            }\n            if (j > 0) {\n                count += (j - 1) / 10 + 1;\n            }\n        }\n        return count;",
    "        if (n < 1)\n            return 0;\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += (i == 1 || i == n) ? 1 : 0;\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i == 1 || i == 10) {\n                count++;\n            }\n            for (long j = 1; j < 10; j++) {\n                if (i == j || i == j * 10) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        if (n < 1) return 0;\n        long count = 0;\n        for (int i = 1; i <= n; i++) {\n            count += (i == 1 || i == n) ? 1 : 0;\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += (i % 10 == 1) ? 1 : 0;\n        }\n        return count;",
    "        if (n < 1)\n            throw new Exception(\"n must be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += (i == 1 || i == n) ? 1 : 0;\n        }\n        return count;",
    "        if (n < 1) return 0;\n        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        return StartsOneEnds(digits, 0, n - 1);",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i == 1 || i == 10) {\n                count++;\n            }\n            for (long j = 1; j < 10; j++) {\n                if (i == j) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        if (n < 1)\n            throw new Exception(\"n must be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            long j = i;\n            while (j > 0 && j % 10 == 1) {\n                count++;\n                j /= 10;\n            }\n            if (j > 0)\n                count += (j - 1) / 10;\n        }\n        return count;",
    "        if (n < 1) return 0;\n        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 1 ? 1 : 0;\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i;\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 0 ? 0 : 1;\n            if (digits[i] == 0) {\n                digits[i] = 9;\n            }\n            else {\n                digits[i]--;\n            }\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        digits[0] = 1;\n        digits[n - 1] = 1;\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] * digits[i + 1];\n        }\n        return count;",
    "        long result = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result += i;\n            }\n        }\n        return result;",
    "        if (n < 1) return 0;\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += (i % 10 == 1) ? 1 : 0;\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        return Count(digits, 1, n);",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        digits[0] = 0;\n        digits[n - 1] = 0;\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 1 ? 1 : 0;\n        }\n        return count;",
    "        if (n < 1)\n            throw new Exception(\"n should be positive\");\n        if (n == 1)\n            return 1;\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += StartsOneEnds(n - i);\n            count += StartsOneEnds(i);\n        }\n        return count;",
    "        if (n < 1)\n            throw new Exception(\"n must be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += (i == 1 || i == n) ? 1 : 0;\n        }\n        return count;",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = 1;\n        }\n        digits[0] = 0;\n        digits[n - 1] = 0;\n        long result = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < digits[i]; j++) {\n                digits[i + 1] = digits[i + 1] + 1;\n            }\n            for (int j = 0; j < digits[i + 1]; j++) {\n                digits[i] = digits[i] + 1;\n            }\n            result = result + digits[i];\n        }\n        return result;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            long j = i;\n            while (j > 0 && j % 10 == 1) {\n                count++;\n                j /= 10;\n            }\n            while (j > 0 && j % 10 != 1) {\n                j /= 10;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                count += i;\n            }\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        digits[0] = 0;\n        digits[n - 1] = 0;\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 1 ? 1 : 0;\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i;\n        }\n        return StartsOneEnds(digits, n);",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++)\n            digits[i] = i + 1;\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n            for (int j = 0; j < i; j++) {\n                digits[j] = 0;\n            }\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            if (digits[i] == 1)\n                count++;\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n            if (i % 10 == 0) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            long j = i;\n            while (j > 0 && j % 10 == 1) {\n                count++;\n                j /= 10;\n            }\n            if (j == 1) {\n                count++;\n            }\n        }\n        return count;",
    "        // Write your code here\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += Math.Sqrt(i) - 1;\n        }\n        return count;",
    "        if (n < 1) return 0;\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            long j = i;\n            while (j > 0 && j % 10 == 1) {\n                count++;\n                j /= 10;\n            }\n            if (j > 0) {\n                count += (j - 1) / 10 + 1;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i == 1 || i == 10) {\n                count++;\n            }\n            for (long j = 1; j <= 9; j++) {\n                if (i == j || i == j * 10) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n            if (i % 10 == 9) {\n                count++;\n            }\n        }\n        return count;",
    "        if (n < 1)\n            return 0;\n        long[] digits = new long[n];\n        for (int i = 0; i < n; i++)\n            digits[i] = i + 1;\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            long start = digits[i];\n            long end = start;\n            while (end < n) {\n                end++;\n                if (end == n)\n                    break;\n                if (end % 10 == 1)\n                    count++;\n            }\n            if (start == 1)\n                count++;\n        }\n        return count;",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += StartsOneEnds(n - i);\n            count += StartsOneEnds(i);\n        }\n        return count;",
    "        if (n < 1)\n            throw new Exception(\"n must be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            long j = i;\n            while (j > 0 && j % 10 == 0) {\n                count++;\n                j /= 10;\n            }\n            if (j == 1)\n                count++;\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (long i = 1; i <= n; i++) {\n            digits[i - 1] = i;\n        }\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            count += digits[i] == 1 ? 1 : 0;\n        }\n        return count;",
    "        // Write your code here\n        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = 0;\n        }\n        digits[0] = 1;\n        for (int i = 1; i < n; i++) {\n            digits[i] = digits[i - 1] + digits[i - 1];\n        }\n        return digits[n - 1];",
    "        long result = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result += i;\n            }\n        }\n        return result;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        digits[0] = 0;\n        digits[n - 1] = 0;\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 1 ? 1 : 0;\n        }\n        return count;",
    "        if (n < 1) return 0;\n        if (n == 1) return 1;\n        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            sum += Math.Pow(i, n) - Math.Pow(i - 1, n);\n        }\n        return sum;",
    "        if (n == 0) return 0;\n        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 1 ? 1 : 0;\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 1 ? 1 : 0;\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++)\n            digits[i] = i + 1;\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (digits[i] == 1 && digits[j] > 1)\n                    count++;\n                if (digits[i] > 1 && digits[j] == 1)\n                    count++;\n            }\n        }\n        return count;",
    "        // Write your code here\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                count += i / 2;\n            }\n            else {\n                count += i / 2 + 1;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i == 1 || i == 10) {\n                count++;\n            }\n            for (long j = 1; j <= 9; j++) {\n                if (i == j || i == j * 10) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                count += i / 2;\n            }\n            else {\n                count += i / 2 + 1;\n            }\n        }\n        return count;",
    "        if (n < 1)\n            throw new Exception(\"n must be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            long digit = i % 10;\n            if (digit == 1) {\n                count++;\n            }\n            else if (digit > 1) {\n                count += 2;\n            }\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i;\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 0 ? 0 : 1;\n            digits[i] = digits[i] == 0 ? 1 : 0;\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i;\n        }\n        long result = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (digits[i] == 1 && digits[j] == 1) {\n                    result++;\n                }\n                if (digits[i] == 1 && digits[j] == 0) {\n                    result++;\n                }\n                if (digits[i] == 0 && digits[j] == 1) {\n                    result++;\n                }\n            }\n        }\n        return result;",
    "        if (n == 0) return 0;\n        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 1 ? 1 : 0;\n        }\n        return count;",
    "        if (n < 1) return 0;\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += (i == 1 || i == n) ? 1 : 0;\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++)\n            digits[i] = i + 1;\n        long result = 0;\n        for (int i = 0; i < n; i++) {\n            digits[i] = digits[i] * 10;\n            for (int j = 0; j < digits[i]; j++) {\n                int k = i + j;\n                if (k >= n)\n                    break;\n                if (digits[k] == 1)\n                    result++;\n            }\n        }\n        return result;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n            if (i % 10 == 9) {\n                count++;\n            }\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        digits[0] = 0;\n        digits[n - 1] = 0;\n        long result = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (digits[i] == 1 && digits[j] == 1) {\n                    result++;\n                }\n            }\n        }\n        return result;",
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        long[] result = new long[n];\n        for (int i = 0; i < n; i++) {\n            result[i] = 0;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (digits[i] == 1 && digits[j] == 1) {\n                    result[i]++;\n                }\n            }\n        }\n        return result[0];",
    "        if (n < 1) return 0;\n        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            sum += Math.Pow(10, n - 1) - Math.Pow(10, i - 1);\n        }\n        return sum;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                count += i / 2;\n            }\n            else {\n                count += i / 2 + 1;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i == 1 || i == 10) {\n                count++;\n            }\n            else {\n                count += (i - 1) / 9 + 1;\n            }\n        }\n        return count;",
    "        if (n < 1)\n            throw new Exception(\"n should be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0)\n                continue;\n            count += Math.pow(10, n - 1) - 1;\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n            if (i % 10 == 0) {\n                count++;\n            }\n        }\n        return count;",
    "        if (n < 1)\n            throw new Exception(\"n must be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            long j = i;\n            while (j > 0 && j % 10 == 0) {\n                count++;\n                j /= 10;\n            }\n            if (j == 1)\n                count++;\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            long j = i;\n            while (j > 0 && j % 10 == 1) {\n                count++;\n                j /= 10;\n            }\n            if (j == 1) {\n                count++;\n            }\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i;\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 0 ? 0 : 1;\n            digits[i] = digits[i] == 0 ? 1 : 0;\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                count++;\n            }\n            else {\n                count += i;\n            }\n        }\n        return count;",
    "        if (n < 1)\n            throw new Exception(\"n must be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            long num = i;\n            while (num > 0) {\n                num /= 10;\n                count++;\n            }\n            if (num == 1)\n                count++;\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        digits[n - 1] = 0;\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 1 ? 1 : 0;\n        }\n        return count;",
    "        if (n < 1)\n            throw new Exception(\"n must be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += (i == 1 || i == n) ? 1 : 0;\n        }\n        return count;",
    "        long result = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result += i / 2;\n            }\n            else {\n                result += i / 2 + 1;\n            }\n        }\n        return result;",
    "        long result = 0;\n        for (long i = 1; i <= n; i++) {\n            long j = i;\n            while (j > 0) {\n                if (j % 10 == 1) {\n                    result++;\n                    break;\n                }\n                j /= 10;\n            }\n        }\n        return result;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n            if (i % 10 == 0) {\n                count++;\n            }\n        }\n        return count;",
    "        if (n < 1) return 0;\n        long[] dp = new long[n + 1];\n        dp[0] = 1;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2];\n        }\n        return dp[n];",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 1 ? 1 : 0;\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            long j = i;\n            while (j > 0) {\n                if (j % 10 == 1) {\n                    count++;\n                    break;\n                }\n                j /= 10;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            long j = i;\n            while (j > 0 && j % 10 == 1) {\n                count++;\n                j /= 10;\n            }\n            if (j > 0) {\n                count++;\n            }\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 1 ? 1 : 0;\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i;\n        }\n        digits[0] = 1;\n        digits[n - 1] = 1;\n        long result = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (digits[i] == 1 && digits[j] == 1) {\n                    result++;\n                }\n            }\n        }\n        return result;",
    "        if (n < 1) return 0;\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += (i == 1 || i == n) ? 1 : 0;\n        }\n        return count;",
    "        if (n < 1) return 0;\n        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 1 ? 1 : 0;\n        }\n        return count;",
    "        if (n < 1)\n            throw new Exception(\"n must be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i == 1 || i == 10)\n                count++;\n            for (long j = 1; j < 10; j++) {\n                if (i == j)\n                    count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i == 1 || i == 10) {\n                count++;\n            }\n            for (long j = 1; j < 10; j++) {\n                if (i == j) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        if (n < 1)\n            throw new Exception(\"n must be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            long j = i;\n            while (j > 0 && j % 10 == 0) {\n                j /= 10;\n                count++;\n            }\n            if (j == 1)\n                count++;\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n            if (i % 10 == 0) {\n                count++;\n            }\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i;\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 0 ? 0 : 1;\n            digits[i]--;\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 1 ? 1 : 0;\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i;\n        }\n        long result = 0;\n        for (int i = 0; i < n; i++) {\n            int j = i;\n            while (j < n && digits[j] == digits[j - 1]) {\n                j++;\n            }\n            if (j - i == 1) {\n                result++;\n            }\n            for (int k = i + 1; k < j; k++) {\n                digits[k] = digits[k] + 1;\n            }\n        }\n        return result;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;",
    "        if (n < 1)\n            throw new Exception(\"n must be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            long num = i;\n            while (num > 0) {\n                if (num % 10 == 1)\n                    count++;\n                num /= 10;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i == 1 || i == 10) {\n                count++;\n            }\n            for (long j = 1; j < i; j++) {\n                if (i % j == 0) {\n                    break;\n                }\n                else {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                count++;\n            }\n            else {\n                count += i;\n            }\n        }\n        return count;",
    "        if (n < 1)\n            throw new Exception(\"n must be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 10 == 1)\n                count++;\n            if (i % 10 == 0)\n                count++;\n        }\n        return count;",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += StartsOneEnds(n - i);\n            count += StartsOneEnds(i);\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        return StartsOneEnds(digits);\n    }\n\n    // Given a positive integer n, return the count of the numbers of n-digit\n    // positive integers that start or end with 1.\n    public static long StartsOneEnds(long[] digits) {\n        long[] digits_copy = new long[digits.Length];\n        for (int i = 0; i < digits.Length; i++) {\n            digits_copy[i] = digits[i];\n        }\n        return StartsOneEnds(digits_copy);\n    }\n\n    // Given a positive integer n, return the count of the numbers of n-digit\n    // positive integers that start or end with 1.\n    public static long StartsOneEnds(long[] digits, int start, int end) {\n        long[] digits_copy = new long[digits.Length];\n        for (int i = 0; i < digits.Length; i++) {\n            digits_copy[i] = digits[i];\n        }\n        return StartsOneEnds(digits_copy, start, end);\n    }\n\n    // Given a positive integer n, return the count of the numbers of n-digit\n    // positive integers that start or end with 1.\n    public static long StartsOneEnds(long[] digits, int start, int end, int step) {\n        long[] digits_copy = new long[digits.Length];\n        for (int i = 0; i < digits.Length; i++) {\n            digits_copy[i] = digits[i];\n        }\n        return StartsOneEnds(digits_copy, start, end, step);\n    }\n\n    // Given a positive integer n, return the count of the numbers of n-digit\n    // positive integers that start or end with 1.\n    public static long StartsOneEnds(long[] digits, int start, int end, int step, int[] results) {\n        long[] digits_copy = new long[digits.Length];\n        for (int i = 0; i < digits.Length; i++) {",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 1 ? 1 : 0;\n        }\n        return count;",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += StartsOneEnds(n - i);\n            count += StartsOneEnds(i);\n        }\n        return count;",
    "        if (n == 0) return 0;\n        long[] digits = new long[n];\n        for (int i = 0; i < n; i++)\n            digits[i] = 0;\n        for (int i = 0; i < n; i++) {\n            digits[i] = 1;\n            for (int j = 0; j < i; j++) {\n                digits[i] *= 10;\n                digits[i] += 1;\n            }\n        }\n        long result = 0;\n        for (int i = 0; i < n; i++) {\n            if (digits[i] == 1) {\n                result++;\n                for (int j = 0; j < i; j++) {\n                    digits[j] = 0;\n                }\n            }\n        }\n        return result;",
    "        if (n < 1)\n            throw new Exception(\"n must be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += Math.pow(10, n - 1) + Math.pow(10, n - 1) - 1;\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i == 1 || i == 10) {\n                count++;\n            }\n            for (long j = 1; j < 10; j++) {\n                if (i == j) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        if (n < 1)\n            throw new Exception(\"n must be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += (i % 10 == 1) ? 1 : 0;\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        return Count(digits, 1, n);",
    "        if (n < 1)\n            throw new Exception(\"n must be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            long num = i;\n            while (num > 0) {\n                if (num % 10 == 1)\n                    count++;\n                num /= 10;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i == 1 || i == 10) {\n                count++;\n            }\n            else {\n                count += (i - 1) / 9 + 1;\n            }\n        }\n        return count;",
    "        if (n < 1) return 0;\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += (i == 1 || i == n) ? 1 : 0;\n        }\n        return count;",
    "        long result = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result += i;\n            }\n        }\n        return result;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        return StartsOneEnds(digits);",
    "        if (n < 1) return 0;\n        if (n == 1) return 1;\n        long sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += Math.Pow(10, n - i) + Math.Pow(10, i - 1);\n        }\n        return sum;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i == 1 || i == 10) {\n                count++;\n            }\n            for (long j = 1; j <= 9; j++) {\n                if (i == j || i == j * 10) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 1 ? 1 : 0;\n        }\n        return count;",
    "        if (n < 1)\n            throw new Exception(\"n should be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += (i == 1 || i == n) ? 1 : 0;\n        }\n        return count;",
    "        if (n < 1)\n            throw new Exception(\"n must be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            long j = i;\n            while (j > 0 && j % 10 == 0)\n                j /= 10;\n            if (j == 1)\n                count++;\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                count += i / 2;\n            }\n            else {\n                count += i / 2 + 1;\n            }\n        }\n        return count;",
    "        if (n < 1)\n            throw new Exception(\"n must be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            long j = i;\n            while (j > 0 && j % 10 == 1) {\n                count++;\n                j /= 10;\n            }\n            while (j > 0 && j % 10 == 0) {\n                count++;\n                j /= 10;\n            }\n        }\n        return count;",
    "        if (n < 1)\n            throw new Exception(\"n must be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += (i == 1 || i == n) ? 1 : 0;\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i == 1 || i == 10) {\n                count++;\n            }\n            for (long j = 1; j <= 9; j++) {\n                if (i == j || i == j * 10) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        if (n < 1)\n            throw new Exception(\"n should be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            long num = i;\n            while (num > 0) {\n                num /= 10;\n                count++;\n            }\n            if (num == 1)\n                count++;\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        long result = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (digits[i] == 1 && digits[j] == 1) {\n                    result++;\n                }\n                if (digits[i] == 1 && digits[j] == 0) {\n                    result++;\n                }\n                if (digits[i] == 0 && digits[j] == 1) {\n                    result++;\n                }\n            }\n        }\n        return result;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                count += i / 2;\n            }\n            else {\n                count += i / 2 + 1;\n            }\n        }\n        return count;",
    "        if (n < 1) return 0;\n        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 1 ? 1 : 0;\n        }\n        return count;",
    "        // Write your code here\n        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i;\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 1 ? 1 : 0;\n            digits[i] = digits[i] + 1;\n            for (int j = 0; j < i; j++) {\n                digits[j] = digits[j] + 1;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n            for (long j = 0; j < i; j++) {\n                if (j % 10 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                count += i / 2;\n            }\n            else {\n                count += i / 2 + 1;\n            }\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        return StartsOneEnds(digits);",
    "        // Write your code here\n        long[] digits = new long[n];\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            digits[i] = i;\n        }\n        for (int i = 0; i < n; i++) {\n            if (digits[i] == 1) {\n                count++;\n            }\n            digits[i] = digits[i] + 1;\n            for (int j = 0; j < n; j++) {\n                if (digits[j] == 10) {\n                    digits[j] = 0;\n                }\n                else {\n                    digits[j] = digits[j] + 1;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i == 1 || i == 10) {\n                count++;\n            }\n            for (long j = 1; j <= 9; j++) {\n                if (i == j || i == j * 10) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        if (n == 0)\n            return 0;\n        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = 1;\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] * (digits[i] - 1) / 2;\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++)\n            digits[i] = i + 1;\n        for (int i = 0; i < n; i++) {\n            digits[i] = 1;\n            for (int j = 0; j < i; j++) {\n                digits[i] *= 10;\n                digits[i] += digits[j];\n            }\n        }\n        return digits[n - 1];",
    "        long result = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result += i / 2;\n            }\n            else {\n                result += i / 2 + 1;\n            }\n        }\n        return result;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            long j = i;\n            while (j > 0 && j % 10 == 1) {\n                count++;\n                j /= 10;\n            }\n            if (j == 1) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i == 1 || i == 10) {\n                count++;\n            }\n            for (long j = 1; j <= 9; j++) {\n                if (i == j || i == j * 10) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n            if (i % 10 == 9) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i == 1 || i == 10) {\n                count++;\n            }\n            for (long j = 1; j <= 9; j++) {\n                if (i == j || i == j * 10) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                count += i / 2;\n            }\n            else {\n                count += i / 2 + 1;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                count += i / 2;\n            }\n            else {\n                count += i / 2 + 1;\n            }\n        }\n        return count;",
    "        if (n < 1) return 0;\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += (i == 1 || i == n) ? 1 : 0;\n        }\n        return count;",
    "        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 1;\n        if (n == 2)\n            return 2;\n        if (n == 3)\n            return 3;\n        if (n == 4)\n            return 4;\n        if (n == 5)\n            return 5;\n        if (n == 6)\n            return 6;\n        if (n == 7)\n            return 7;\n        if (n == 8)\n            return 8;\n        if (n == 9)\n            return 9;\n        if (n == 10)\n            return 10;\n        if (n == 11)\n            return 11;\n        if (n == 12)\n            return 12;\n        if (n == 13)\n            return 13;\n        if (n == 14)\n            return 14;\n        if (n == 15)\n            return 15;\n        if (n == 16)\n            return 16;\n        if (n == 17)\n            return 17;\n        if (n == 18)\n            return 18;\n        if (n == 19)\n            return 19;\n        if (n == 20)\n            return 20;\n        if (n == 21)\n            return 21;\n        if (n == 22)\n            return 22;\n        if (n == 23)\n            return 23;\n        if (n == 24)\n            return 24;\n        if (n == 25)\n            return 25;\n        if (n == 26)\n            return 26;\n        if (n == 27)\n            return 27;\n        if (n == 28)\n            return 28;\n        if (n == 29)\n            return 29;\n        if (n == 30)\n            return 30;\n        if (n == 31)\n            return 31;\n        if (n == 32)\n            return 32;\n        if (n == 33)\n            return 33;\n        if (n == 34)\n            return 34;\n        if (n == 35)\n            return 35;\n        if (n == 36)\n            return 36;\n        if (n == 37)\n            return 37;\n        if (n == 38)\n            return 38;\n        if (n ==",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                count += i / 2;\n            }\n            else {\n                count += i / 2 - 1;\n            }\n        }\n        return count;",
    "        if (n == 0) return 0;\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += (i == 1 || i == n) ? 1 : 0;\n        }\n        return count;",
    "        if (n < 1)\n            throw new Exception(\"n must be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            long num = i;\n            while (num > 0) {\n                num /= 10;\n                count++;\n            }\n            if (i > 1)\n                count++;\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                count++;\n            }\n            else {\n                count += i;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                count += i / 2;\n            }\n            else {\n                count += i / 2 - 1;\n            }\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 1 ? 1 : 0;\n        }\n        return count;",
    "        // Write your code here\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                count += i / 2;\n            }\n            else {\n                count += i / 2 + 1;\n            }\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i;\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 0 ? 0 : 1;\n        }\n        return count;",
    "        if (n < 1) return 0;\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += Math.pow(10, n - 1) - i + 1;\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        digits[0] = 1;\n        digits[n - 1] = 1;\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] * digits[i + 1];\n        }\n        return count;",
    "        long result = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result += i / 2;\n            }\n            else {\n                result += i / 2 + 1;\n            }\n        }\n        return result;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        digits[0] = 0;\n        digits[n - 1] = 0;\n        long result = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (digits[i] == 1 && digits[j] == 1) {\n                    result++;\n                }\n            }\n        }\n        return result;",
    "        long[] digits = new long[n];\n        for (long i = 1; i <= n; i++) {\n            digits[i - 1] = i;\n        }\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            count += digits[i] == 1 ? 1 : 0;\n        }\n        return count;",
    "        if (n < 1)\n            throw new Exception(\"n must be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            long num = i;\n            while (num > 0) {\n                if (num % 10 == 1)\n                    count++;\n                num /= 10;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i == 1 || i == 10) {\n                count++;\n            }\n            for (long j = 1; j < 10; j++) {\n                if (i == j || i == j * 10) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long result = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result += i;\n            }\n        }\n        return result;",
    "        if (n < 1) return 0;\n        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        digits[n - 1] = 0;\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 1 ? 1 : 0;\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        digits[0] = 1;\n        digits[n - 1] = 1;\n        long result = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < digits[i]; j++) {\n                for (int k = 0; k < digits[i + 1]; k++) {\n                    result += Math.Pow(10, i) + Math.Pow(10, i + 1);\n                }\n            }\n        }\n        return result;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i;\n        }\n        digits[0] = 1;\n        digits[n - 1] = 1;\n        long result = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (digits[i] == 1 && digits[j] == 1) {\n                    result++;\n                }\n            }\n        }\n        return result;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        return Count(digits, digits.Length - 1);",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        return Count(digits, 1, n);",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++)\n            digits[i] = i + 1;\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (digits[i] == 1 && digits[j] > 1) {\n                    count++;\n                    digits[j]--;\n                }\n                if (digits[i] > 1 && digits[j] == 1) {\n                    count++;\n                    digits[i]--;\n                }\n            }\n        }\n        return count;",
    "        if (n < 1) return 0;\n        long count = 0;\n        for (int i = 1; i <= n; i++) {\n            count += (i == 1 || i == n) ? 1 : 0;\n        }\n        return count;",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += (i + 1) * (i + 1);\n        }\n        return sum;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                count += i;\n            }\n        }\n        return count;",
    "        if (n == 0) return 0;\n        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < digits[i]; j++) {\n                sum += digits[i] * digits[i - j - 1];\n            }\n        }\n        return sum;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i;\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 0 ? 0 : 1;\n            if (digits[i] == 0) {\n                digits[i] = 9;\n            }\n            else {\n                digits[i]--;\n            }\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++)\n            digits[i] = i + 1;\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n            for (int j = 0; j < i; j++) {\n                digits[i] *= 10;\n                digits[i] += digits[j];\n            }\n        }\n        return digits[n - 1];",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 1 ? 1 : 0;\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i;\n        }\n        digits[0] = 1;\n        digits[n - 1] = 1;\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] * digits[i + 1];\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        digits[0] = 1;\n        digits[n - 1] = 1;\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] * digits[i + 1] * digits[i + 2] * digits[i + 3] * digits[i + 4];\n        }\n        return count;",
    "        if (n == 0) return 0;\n        long[] dp = new long[n + 1];\n        dp[0] = 1;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2];\n        }\n        return dp[n];",
    "        if (n < 1)\n            throw new Exception(\"n must be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            long j = i;\n            while (j > 0 && j % 10 == 0) {\n                count++;\n                j /= 10;\n            }\n            if (j == 1)\n                count++;\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        return StartsOneEnds(digits);\n    }\n\n    // Given a positive integer n, return the count of the numbers of n-digit\n    // positive integers that start or end with 1.\n    public static long StartsOneEnds(long[] digits) {\n        long[] digits_count = new long[10];\n        for (int i = 0; i < digits.Length; i++) {\n            digits_count[digits[i] - 1]++;\n        }\n        long result = 0;\n        for (int i = 0; i < digits_count.Length; i++) {\n            if (digits_count[i] % 2 == 1) {\n                result += digits_count[i];\n            }\n        }\n        return result;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i;\n        }\n        digits[0] = 1;\n        digits[n - 1] = 1;\n        for (int i = 1; i < n - 1; i++) {\n            digits[i] = digits[i - 1] + digits[i + 1];\n        }\n        return digits[n - 2];",
    "        if (n < 1)\n            throw new Exception(\"n must be positive\");\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += (i % 10 == 1) ? 1 : 0;\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            long j = i;\n            while (j > 0) {\n                if (j % 10 == 1) {\n                    count++;\n                    break;\n                }\n                j /= 10;\n            }\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 1 ? 1 : 0;\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i + 1;\n        }\n        return digits.Count(x => x == 1 || x == 10);",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += StartsOneEnds(n - i);\n            count += StartsOneEnds(i);\n        }\n        return count;",
    "        long[] digits = new long[n];\n        for (int i = 0; i < n; i++) {\n            digits[i] = i;\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            count += digits[i] == 1 ? 1 : 0;\n            digits[i] = digits[i] + 1;\n            if (digits[i] == 10) {\n                digits[i] = 0;\n            }\n        }\n        return count;"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}