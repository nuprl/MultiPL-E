{
  "name": "HumanEval_135_can_arrange",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min <= max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] > arr[mid - 1]) {\n                return mid - 1;\n            }\n            if (arr[mid] < arr[mid - 1]) {\n                max = mid - 1;\n            }\n            else {\n                min = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6w43ikm1.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6w43ikm1.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6w43ikm1.cs(26,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6w43ikm1.cs(26,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2fe14aa9fcdf48818e1c63dbac7d7d6a>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x0001a] in <2fe14aa9fcdf48818e1c63dbac7d7d6a>:0 \n  at Problem.Main (System.String[] args) [0x0003c] in <2fe14aa9fcdf48818e1c63dbac7d7d6a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x0001a] in <2fe14aa9fcdf48818e1c63dbac7d7d6a>:0 \n  at Problem.Main (System.String[] args) [0x0003c] in <2fe14aa9fcdf48818e1c63dbac7d7d6a>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long result = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpv0dgmxtn.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpv0dgmxtn.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min <= max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] > arr[mid - 1]) {\n                return mid - 1;\n            }\n            if (arr[mid] < arr[mid - 1]) {\n                max = mid - 1;\n            }\n            else {\n                min = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6w43ikm1.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6w43ikm1.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6w43ikm1.cs(26,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6w43ikm1.cs(26,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzs_yiclq.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzs_yiclq.cs(22,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2iy6gtmj.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2iy6gtmj.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min <= max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] < arr[mid + 1]) {\n                return mid;\n            }\n            if (arr[mid] < arr[mid - 1]) {\n                return mid - 1;\n            }\n            if (arr[mid] < arr[mid - 1]) {\n                return mid - 1;\n            }\n            if (arr[mid] < arr[mid + 1]) {\n                return mid;\n            }\n            min = mid + 1;\n            max = mid - 1;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzdemv3g5.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzdemv3g5.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzdemv3g5.cs(26,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzdemv3g5.cs(26,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzdemv3g5.cs(29,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzdemv3g5.cs(29,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzdemv3g5.cs(32,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzdemv3g5.cs(32,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long max_index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max_index = i;\n                break;\n            }\n        }\n        if (max_index == -1) {\n            return -1;\n        }\n        for (int i = max_index; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpi6ve6qaw.cs(30,22): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1) {\n            return -1;\n        }\n        for (long i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2yekgvdp.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(31,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(31,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1) {\n            return -1;\n        }\n        for (int i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp65ih5b4u.cs(30,22): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long max_index = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                max_index = i;\n                break;\n            }\n        }\n        return max_index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5p0rrma2.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5p0rrma2.cs(22,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2fe14aa9fcdf48818e1c63dbac7d7d6a>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x0001a] in <2fe14aa9fcdf48818e1c63dbac7d7d6a>:0 \n  at Problem.Main (System.String[] args) [0x0003c] in <2fe14aa9fcdf48818e1c63dbac7d7d6a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x0001a] in <2fe14aa9fcdf48818e1c63dbac7d7d6a>:0 \n  at Problem.Main (System.String[] args) [0x0003c] in <2fe14aa9fcdf48818e1c63dbac7d7d6a>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min < max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] > arr[mid + 1]) {\n                max = mid;\n            } else {\n                min = mid + 1;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk6gl5pwy.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk6gl5pwy.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2iy6gtmj.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2iy6gtmj.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1) {\n            return -1;\n        }\n        for (long i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplyrnn4ep.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplyrnn4ep.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplyrnn4ep.cs(31,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplyrnn4ep.cs(31,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min <= max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] < arr[mid + 1]) {\n                return mid;\n            }\n            if (arr[mid] > arr[mid + 1]) {\n                max = mid - 1;\n            } else {\n                min = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc7c8o965.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpc7c8o965.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpc7c8o965.cs(26,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpc7c8o965.cs(26,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2iy6gtmj.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2iy6gtmj.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long max_index = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                max_index = i;\n                break;\n            }\n        }\n        return max_index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5p0rrma2.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5p0rrma2.cs(22,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min <= max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] <= arr[mid - 1]) {\n                min = mid + 1;\n            }\n            else {\n                max = mid - 1;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph840344q.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmph840344q.cs(23,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkp2zi9fr.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkp2zi9fr.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long max_index = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max_index = i;\n                break;\n            }\n        }\n        return max_index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4l6n_9ju.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4l6n_9ju.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2iy6gtmj.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2iy6gtmj.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min < max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] < arr[mid + 1]) {\n                max = mid;\n            }\n            else {\n                min = mid + 1;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpslbax25a.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpslbax25a.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2iy6gtmj.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2iy6gtmj.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long max_index = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                max_index = i;\n                break;\n            }\n        }\n        return max_index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5p0rrma2.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5p0rrma2.cs(22,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] < arr[i + 1]) {\n                max = i;\n                break;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65919ce6d1c248d4b2d34fecdf25b188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65919ce6d1c248d4b2d34fecdf25b188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] < arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2ea654fdad944429b13419713fe29be0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2ea654fdad944429b13419713fe29be0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzs_yiclq.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzs_yiclq.cs(22,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2iy6gtmj.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2iy6gtmj.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min < max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] < arr[mid + 1]) {\n                max = mid;\n            }\n            else {\n                min = mid + 1;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpslbax25a.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpslbax25a.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1) {\n            return -1;\n        }\n        for (long i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2yekgvdp.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(31,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(31,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1) {\n            return -1;\n        }\n        for (long i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2yekgvdp.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(31,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(31,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.First();\n        long min = arr.Last();\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] < max && arr[i] > arr[i + 1]) {\n                max = arr[i];\n            }\n        }\n        if (max < min) {\n            return -1;\n        }\n        for (int i = arr.Count - 1; i > 0; i--) {\n            if (arr[i] > min && arr[i] < arr[i - 1]) {\n                min = arr[i];\n            }\n        }\n        if (max == min) {\n            return -1;\n        }\n        return max - min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c94f467b40654355a29968d5ce3346bb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c94f467b40654355a29968d5ce3346bb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min < max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] < arr[mid + 1]) {\n                max = mid;\n            }\n            else {\n                min = mid + 1;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpslbax25a.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpslbax25a.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min < max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] > arr[mid + 1]) {\n                max = mid;\n            } else {\n                min = mid + 1;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk6gl5pwy.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk6gl5pwy.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long max_index = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max_index = i;\n                break;\n            }\n        }\n        if (max_index == -1) {\n            return -1;\n        }\n        for (long i = max_index; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                max_index = i;\n                break;\n            }\n        }\n        return max_index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn7o51o33.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpn7o51o33.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpn7o51o33.cs(31,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpn7o51o33.cs(31,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] < arr[i + 1]) {\n                max = i;\n                break;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65919ce6d1c248d4b2d34fecdf25b188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65919ce6d1c248d4b2d34fecdf25b188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min <= max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] > arr[mid - 1]) {\n                return mid - 1;\n            }\n            if (arr[mid] < arr[mid - 1]) {\n                max = mid - 1;\n            }\n            else {\n                min = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6w43ikm1.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6w43ikm1.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6w43ikm1.cs(26,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6w43ikm1.cs(26,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzs_yiclq.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzs_yiclq.cs(22,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2iy6gtmj.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2iy6gtmj.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min <= max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] > arr[mid - 1]) {\n                return mid - 1;\n            }\n            if (arr[mid] < arr[mid - 1]) {\n                max = mid - 1;\n            } else {\n                min = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoznpbo0v.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoznpbo0v.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoznpbo0v.cs(26,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoznpbo0v.cs(26,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1)\n            return -1;\n        for (long i = maxIndex; i > 0; i--) {\n            if (arr[i] > arr[i - 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9uuohv40.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp9uuohv40.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp9uuohv40.cs(30,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp9uuohv40.cs(30,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] < arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2ea654fdad944429b13419713fe29be0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2ea654fdad944429b13419713fe29be0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2iy6gtmj.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2iy6gtmj.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1) {\n            return -1;\n        }\n        for (int i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp65ih5b4u.cs(30,22): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.First();\n        for (int i = 1; i < arr.Count(); i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        for (int i = 0; i < arr.Count(); i++) {\n            if (arr[i] > max) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0f40c8f69ea649e884bbb7a98afb6e7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0f40c8f69ea649e884bbb7a98afb6e7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2iy6gtmj.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2iy6gtmj.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1) {\n            return -1;\n        }\n        for (int i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp65ih5b4u.cs(30,22): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long result = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] < arr[i + 1]) {\n                result = i;\n                break;\n            }\n        }\n        if (result == -1) {\n            return max;\n        }\n        for (long i = result + 1; i < arr.Count; i++) {\n            if (arr[i] < arr[i - 1]) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2vapx388.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2vapx388.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2vapx388.cs(31,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2vapx388.cs(31,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min <= max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] > arr[mid - 1]) {\n                return mid - 1;\n            }\n            else if (arr[mid] < arr[mid - 1]) {\n                max = mid - 1;\n            }\n            else {\n                min = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp76fdxdpr.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp76fdxdpr.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp76fdxdpr.cs(26,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp76fdxdpr.cs(26,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] < arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsj78o4z3.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpsj78o4z3.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.First();\n        for (int i = 1; i < arr.Count(); i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        for (int i = 0; i < arr.Count(); i++) {\n            if (arr[i] >= max) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <830ce3a10f924ee1bebd4915d49e4801>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <830ce3a10f924ee1bebd4915d49e4801>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2iy6gtmj.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2iy6gtmj.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <aad70263ec564daebcfb032c7ceb65b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <aad70263ec564daebcfb032c7ceb65b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long max_index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                max_index = i;\n                break;\n            }\n        }\n        return max_index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d5f55da5adc943b19c114e143774eba7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d5f55da5adc943b19c114e143774eba7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long result = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpv0dgmxtn.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpv0dgmxtn.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2iy6gtmj.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2iy6gtmj.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1) {\n            return -1;\n        }\n        for (int i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp65ih5b4u.cs(30,22): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5876ed05945548fa8fdecaf6a3b7ca66>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5876ed05945548fa8fdecaf6a3b7ca66>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzs_yiclq.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzs_yiclq.cs(22,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min < max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] > arr[mid + 1]) {\n                max = mid;\n            } else {\n                min = mid + 1;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk6gl5pwy.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk6gl5pwy.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2iy6gtmj.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2iy6gtmj.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min <= max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] < arr[mid + 1]) {\n                return mid;\n            }\n            if (arr[mid] > arr[mid + 1]) {\n                max = mid - 1;\n            } else {\n                min = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc7c8o965.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpc7c8o965.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpc7c8o965.cs(26,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpc7c8o965.cs(26,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] < arr[i + 1]) {\n                max = i;\n                break;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65919ce6d1c248d4b2d34fecdf25b188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65919ce6d1c248d4b2d34fecdf25b188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2iy6gtmj.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2iy6gtmj.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2iy6gtmj.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2iy6gtmj.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkp2zi9fr.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkp2zi9fr.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1) {\n            return -1;\n        }\n        for (int i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8xcfj_uu.cs(30,22): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2fe14aa9fcdf48818e1c63dbac7d7d6a>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x0001a] in <2fe14aa9fcdf48818e1c63dbac7d7d6a>:0 \n  at Problem.Main (System.String[] args) [0x0003c] in <2fe14aa9fcdf48818e1c63dbac7d7d6a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x0001a] in <2fe14aa9fcdf48818e1c63dbac7d7d6a>:0 \n  at Problem.Main (System.String[] args) [0x0003c] in <2fe14aa9fcdf48818e1c63dbac7d7d6a>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long result = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <50bf390b129b422aac8e12674463cde4>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x0001a] in <50bf390b129b422aac8e12674463cde4>:0 \n  at Problem.Main (System.String[] args) [0x0003c] in <50bf390b129b422aac8e12674463cde4>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x0001a] in <50bf390b129b422aac8e12674463cde4>:0 \n  at Problem.Main (System.String[] args) [0x0003c] in <50bf390b129b422aac8e12674463cde4>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] < arr[i + 1]) {\n                max = i;\n                break;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65919ce6d1c248d4b2d34fecdf25b188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65919ce6d1c248d4b2d34fecdf25b188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2iy6gtmj.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2iy6gtmj.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2fe14aa9fcdf48818e1c63dbac7d7d6a>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x0001a] in <2fe14aa9fcdf48818e1c63dbac7d7d6a>:0 \n  at Problem.Main (System.String[] args) [0x0003c] in <2fe14aa9fcdf48818e1c63dbac7d7d6a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x0001a] in <2fe14aa9fcdf48818e1c63dbac7d7d6a>:0 \n  at Problem.Main (System.String[] args) [0x0003c] in <2fe14aa9fcdf48818e1c63dbac7d7d6a>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <aad70263ec564daebcfb032c7ceb65b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <aad70263ec564daebcfb032c7ceb65b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1) {\n            return -1;\n        }\n        for (long i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2yekgvdp.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(31,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(31,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] < arr[i + 1]) {\n                max = i;\n                break;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65919ce6d1c248d4b2d34fecdf25b188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65919ce6d1c248d4b2d34fecdf25b188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkp2zi9fr.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkp2zi9fr.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min < max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] > arr[mid + 1]) {\n                max = mid;\n            }\n            else {\n                min = mid + 1;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8xdj9fku.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8xdj9fku.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long max_index = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                max_index = i;\n                break;\n            }\n        }\n        return max_index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5p0rrma2.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5p0rrma2.cs(22,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long max_index = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                max_index = i;\n                break;\n            }\n        }\n        return max_index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5p0rrma2.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5p0rrma2.cs(22,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1) {\n            return -1;\n        }\n        for (int i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8xcfj_uu.cs(30,22): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1) {\n            return -1;\n        }\n        for (long i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2yekgvdp.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(31,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(31,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2iy6gtmj.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2iy6gtmj.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min < max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] > arr[mid + 1]) {\n                max = mid;\n            }\n            else {\n                min = mid + 1;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8xdj9fku.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8xdj9fku.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzs_yiclq.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzs_yiclq.cs(22,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long max_index = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max_index = i;\n                break;\n            }\n        }\n        if (max_index == -1) {\n            return -1;\n        }\n        for (long i = max_index; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpplfrni8o.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpplfrni8o.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpplfrni8o.cs(31,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpplfrni8o.cs(31,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] < arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2ea654fdad944429b13419713fe29be0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2ea654fdad944429b13419713fe29be0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzs_yiclq.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzs_yiclq.cs(22,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1) {\n            return -1;\n        }\n        for (long i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2yekgvdp.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(31,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(31,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min <= max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] > arr[mid - 1]) {\n                return mid;\n            }\n            if (arr[mid] > arr[mid + 1]) {\n                max = mid - 1;\n            } else {\n                min = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn7mbq_se.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpn7mbq_se.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpn7mbq_se.cs(26,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpn7mbq_se.cs(26,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long max_index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                max_index = i;\n                break;\n            }\n        }\n        return max_index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d5f55da5adc943b19c114e143774eba7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d5f55da5adc943b19c114e143774eba7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min < max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] > arr[mid + 1]) {\n                max = mid;\n            }\n            else {\n                min = mid + 1;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8xdj9fku.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8xdj9fku.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] < arr[i + 1]) {\n                max = i;\n                break;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65919ce6d1c248d4b2d34fecdf25b188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65919ce6d1c248d4b2d34fecdf25b188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <aad70263ec564daebcfb032c7ceb65b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <aad70263ec564daebcfb032c7ceb65b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1) {\n            return -1;\n        }\n        for (long i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2yekgvdp.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(31,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(31,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.First();\n        for (long i = 1; i < arr.Count(); i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        for (long i = 0; i < arr.Count(); i++) {\n            if (arr[i] >= max) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4aj90nva.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4aj90nva.cs(22,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4aj90nva.cs(26,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min <= max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] < arr[mid + 1]) {\n                return mid;\n            }\n            if (arr[mid] > arr[mid + 1]) {\n                max = mid - 1;\n            } else {\n                min = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc7c8o965.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpc7c8o965.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpc7c8o965.cs(26,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpc7c8o965.cs(26,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min <= max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] > arr[mid - 1]) {\n                return mid;\n            }\n            if (arr[mid] < arr[mid - 1]) {\n                max = mid - 1;\n            } else {\n                min = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkguur2a9.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkguur2a9.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkguur2a9.cs(26,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkguur2a9.cs(26,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkp2zi9fr.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkp2zi9fr.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1) {\n            return max;\n        }\n        for (int i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n                break;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_zegu7oi.cs(30,22): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2iy6gtmj.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2iy6gtmj.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkp2zi9fr.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkp2zi9fr.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min <= max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] > arr[mid - 1]) {\n                return mid;\n            }\n            if (arr[mid] < arr[mid - 1]) {\n                max = mid - 1;\n            } else {\n                min = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkguur2a9.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkguur2a9.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkguur2a9.cs(26,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkguur2a9.cs(26,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] < arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2ea654fdad944429b13419713fe29be0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2ea654fdad944429b13419713fe29be0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkp2zi9fr.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkp2zi9fr.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzs_yiclq.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzs_yiclq.cs(22,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min <= max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] <= arr[mid + 1]) {\n                min = mid + 1;\n            }\n            else {\n                max = mid - 1;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzs_b5jjr.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzs_b5jjr.cs(23,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min <= max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] < arr[mid + 1]) {\n                return mid;\n            }\n            else if (arr[mid] > arr[mid + 1]) {\n                max = mid - 1;\n            }\n            else {\n                min = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvqww6i5s.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvqww6i5s.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvqww6i5s.cs(26,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvqww6i5s.cs(26,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzs_yiclq.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzs_yiclq.cs(22,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzs_yiclq.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzs_yiclq.cs(22,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzs_yiclq.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzs_yiclq.cs(22,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] < arr[i + 1]) {\n                max = i;\n                break;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65919ce6d1c248d4b2d34fecdf25b188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65919ce6d1c248d4b2d34fecdf25b188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min <= max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] <= arr[mid + 1]) {\n                min = mid + 1;\n            }\n            else {\n                max = mid - 1;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzs_b5jjr.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzs_b5jjr.cs(23,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkp2zi9fr.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkp2zi9fr.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long result = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpp6r87slg.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpp6r87slg.cs(22,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzs_yiclq.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzs_yiclq.cs(22,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long max_index = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max_index = i;\n                break;\n            }\n        }\n        if (max_index == -1) {\n            return max;\n        }\n        for (long i = max_index; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n                break;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1_3u5i1t.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp1_3u5i1t.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp1_3u5i1t.cs(31,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp1_3u5i1t.cs(31,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min < max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] > arr[mid + 1]) {\n                max = mid;\n            }\n            else {\n                min = mid + 1;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8xdj9fku.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8xdj9fku.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min <= max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] > arr[mid - 1]) {\n                return mid;\n            }\n            if (arr[mid] < arr[mid - 1]) {\n                max = mid - 1;\n            } else {\n                min = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkguur2a9.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkguur2a9.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkguur2a9.cs(26,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkguur2a9.cs(26,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5876ed05945548fa8fdecaf6a3b7ca66>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5876ed05945548fa8fdecaf6a3b7ca66>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] < arr[i + 1]) {\n                max = i;\n                break;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp335s_wcu.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp335s_wcu.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <aad70263ec564daebcfb032c7ceb65b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <aad70263ec564daebcfb032c7ceb65b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                return i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a93e5bf598ca4b609ba00d124cfe1bb2>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <a93e5bf598ca4b609ba00d124cfe1bb2>:0 \n  at Problem.Main (System.String[] args) [0x0003c] in <a93e5bf598ca4b609ba00d124cfe1bb2>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <a93e5bf598ca4b609ba00d124cfe1bb2>:0 \n  at Problem.Main (System.String[] args) [0x0003c] in <a93e5bf598ca4b609ba00d124cfe1bb2>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzs_yiclq.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzs_yiclq.cs(22,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long max_index = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max_index = i;\n                break;\n            }\n        }\n        return max_index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4l6n_9ju.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4l6n_9ju.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzs_yiclq.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzs_yiclq.cs(22,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1) {\n            return max;\n        }\n        for (long i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdi3juwda.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdi3juwda.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdi3juwda.cs(31,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdi3juwda.cs(31,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2iy6gtmj.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2iy6gtmj.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1) {\n            return -1;\n        }\n        for (long i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2yekgvdp.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(31,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(31,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long result = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                result = i;\n                break;\n            }\n        }\n        if (result == -1) {\n            return max;\n        }\n        for (long i = result + 1; i < arr.Count; i++) {\n            if (arr[i] > arr[i - 1]) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz6an_vjg.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpz6an_vjg.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpz6an_vjg.cs(31,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpz6an_vjg.cs(31,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long max_index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                max_index = i;\n                break;\n            }\n        }\n        return max_index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d5f55da5adc943b19c114e143774eba7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d5f55da5adc943b19c114e143774eba7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long max_index = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max_index = i;\n                break;\n            }\n        }\n        return max_index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4l6n_9ju.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4l6n_9ju.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1) {\n            return max;\n        }\n        for (int i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_d85xpkx.cs(30,22): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min <= max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] < arr[mid + 1]) {\n                return mid;\n            }\n            if (arr[mid] > arr[mid + 1]) {\n                max = mid - 1;\n            } else {\n                min = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc7c8o965.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpc7c8o965.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpc7c8o965.cs(26,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpc7c8o965.cs(26,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.First();\n        long min = arr.Last();\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n            if (arr[i] < min) {\n                min = arr[i];\n            }\n        }\n        if (max < min) {\n            return -1;\n        }\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] < max && arr[i] > min) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpirr9wlm2.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpirr9wlm2.cs(23,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpirr9wlm2.cs(25,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpirr9wlm2.cs(26,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpirr9wlm2.cs(33,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpirr9wlm2.cs(33,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1) {\n            return -1;\n        }\n        for (int i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp65ih5b4u.cs(30,22): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkp2zi9fr.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkp2zi9fr.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1) {\n            return max;\n        }\n        for (long i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdi3juwda.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdi3juwda.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdi3juwda.cs(31,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdi3juwda.cs(31,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzs_yiclq.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzs_yiclq.cs(22,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzs_yiclq.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzs_yiclq.cs(22,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2iy6gtmj.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2iy6gtmj.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzs_yiclq.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzs_yiclq.cs(22,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min <= max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] <= arr[mid - 1]) {\n                max = mid - 1;\n            } else {\n                min = mid + 1;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpykfs5doo.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpykfs5doo.cs(23,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1) {\n            return -1;\n        }\n        for (long i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2yekgvdp.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(31,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(31,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.First();\n        for (int i = 1; i < arr.Count(); i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        for (int i = 0; i < arr.Count(); i++) {\n            if (arr[i] >= max) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <830ce3a10f924ee1bebd4915d49e4801>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <830ce3a10f924ee1bebd4915d49e4801>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1) {\n            return -1;\n        }\n        for (long i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2yekgvdp.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(31,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(31,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1) {\n            return -1;\n        }\n        for (long i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2yekgvdp.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(31,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2yekgvdp.cs(31,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1) {\n            return max;\n        }\n        for (long i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdi3juwda.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdi3juwda.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdi3juwda.cs(31,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdi3juwda.cs(31,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2iy6gtmj.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2iy6gtmj.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <aad70263ec564daebcfb032c7ceb65b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <aad70263ec564daebcfb032c7ceb65b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex == -1) {\n            return -1;\n        }\n        for (int i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp65ih5b4u.cs(30,22): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min < max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] > arr[mid + 1]) {\n                max = mid;\n            } else {\n                min = mid + 1;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk6gl5pwy.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk6gl5pwy.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2iy6gtmj.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2iy6gtmj.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2iy6gtmj.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2iy6gtmj.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2iy6gtmj.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2iy6gtmj.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <4b3de69ec1dc48db800cbf3d8e70ce20>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min <= max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] > arr[mid - 1]) {\n                return mid;\n            }\n            if (arr[mid] < arr[mid - 1]) {\n                max = mid - 1;\n            } else {\n                min = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkguur2a9.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkguur2a9.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkguur2a9.cs(26,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkguur2a9.cs(26,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long min = 0;\n        while (min < max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] < arr[mid + 1]) {\n                max = mid;\n            } else {\n                min = mid + 1;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293283,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp30vv0i9k.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp30vv0i9k.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkp2zi9fr.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkp2zi9fr.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2iy6gtmj.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2iy6gtmj.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n",
      "timestamp": 1664293282,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzs_yiclq.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzs_yiclq.cs(22,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}