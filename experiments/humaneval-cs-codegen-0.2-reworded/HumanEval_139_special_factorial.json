{
  "name": "HumanEval_139_special_factorial",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    public static long SpecialFactorial(long n) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n",
  "completions": [
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new Exception(\"Negative numbers are not allowed\");\n        }\n        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n == 0) return 1;\n        return n * SpecialFactorial(n - 1);",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        long result = 1;\n        for (long i = n; i > 0; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        long result = 1;\n        for (long i = n; i > 0; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new System.ArgumentException(\"n should be greater than 0\");\n        }\n        if (n == 0) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n == 0) return 1;\n        return n * SpecialFactorial(n - 1);",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n == 0) return 1;\n        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return 1;\n        long result = 1;\n        for (long i = n; i > 1; i--)\n            result *= i;\n        return result;",
    "        if (n < 0) {\n            throw new System.ArgumentException(\"n should be greater than 0\");\n        }\n        long result = 1;\n        for (long i = n; i > 0; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0)\n            throw new System.ArgumentException(\"n must be greater than 0\");\n        if (n == 0)\n            return 1;\n        long result = 1;\n        for (long i = 1; i <= n; i++)\n            result *= i;\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new System.ArgumentException(\"n should be greater than 0\");\n        }\n        if (n == 0) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new System.ArgumentException(\"n must be greater than 0\");\n        }\n        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        long result = 1;\n        for (long i = n; i > 1; i--)\n            result *= i;\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0)\n            throw new System.ArgumentException(\"n should be >= 0\");\n        long result = 1;\n        for (long i = n; i > 0; i--)\n            result *= i;\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        if (n == 0) return 1;\n        return n * SpecialFactorial(n - 1);",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n == 0) return 1;\n        return n * SpecialFactorial(n - 1);",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0)\n            throw new Exception(\"Invalid input\");\n        if (n == 0)\n            return 1;\n        return n * SpecialFactorial(n - 1);",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be greater than 0\");\n        }\n        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--)\n            result *= i;\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return 1;\n        return n * SpecialFactorial(n - 1);",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        long result = 1;\n        for (long i = n; i > 1; i--)\n            result *= i;\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++)\n            result *= i;\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        long result = 1;\n        for (long i = n; i > 1; i--)\n            result *= i;\n        return result;",
    "        if (n == 0) return 1;\n        return n * SpecialFactorial(n - 1);",
    "        if (n == 0) return 1;\n        return n * SpecialFactorial(n - 1);",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        long result = 1;\n        for (long i = n; i > 0; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n == 0) return 1;\n        return n * SpecialFactorial(n - 1);",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        if (n == 0) return 1;\n        return n * SpecialFactorial(n - 1);",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 0; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        long result = 1;\n        for (long i = n; i > 0; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n == 0) return 1;\n        return n * SpecialFactorial(n - 1);",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        long result = 1;\n        for (long i = n; i > 1; i--)\n            result *= i;\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return 1;\n        long result = 1;\n        for (long i = n; i > 1; i--)\n            result *= i;\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        if (n == 0) return 1;\n        return n * SpecialFactorial(n - 1);",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        if (n == 0) return 1;\n        return n * SpecialFactorial(n - 1);",
    "        if (n == 0) return 1;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 6;\n        if (n == 4) return 24;\n        if (n == 5) return 120;\n        if (n == 6) return 720;\n        if (n == 7) return 5040;\n        if (n == 8) return 40320;\n        if (n == 9) return 362880;\n        if (n == 10) return 3628800;\n        if (n == 11) return 39916800;\n        if (n == 12) return 479001600;\n        if (n == 13) return 6227020800;\n        if (n == 14) return 87178291200;\n        if (n == 15) return 1307674368000;\n        if (n == 16) return 20922789888000;\n        if (n == 17) return 355687428096000;\n        if (n == 18) return 6402373705728000;\n        if (n == 19) return 121645100408832000;\n        if (n == 20) return 2432902008176640000;\n        if (n == 21) return 51090942171709440000;\n        if (n == 22) return 1124000727777607680000;\n        if (n == 23) return 25852016738884976640000;\n        if (n == 24) return 620448401733239439360000;\n        if (n == 25) return 15511210043330985984000000;\n        if (n == 26) return 403291461126605635584000000;\n        if (n == 27) return 10888869450418352160768000000;\n        if (n == 28) return 304888344611713860501504000000;\n        if (n == 29) return 8841761993739701954543616000000;\n        if (n == 30) return 265252859812191058636308480000000;\n        if (n == 31) return 8222838654177922818252480000000;\n        if (n == 32) return 26",
    "        if (n == 0) return 1;\n        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++)\n            result *= i;\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return 1;\n        return n * SpecialFactorial(n - 1);",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new System.ArgumentException(\"Negative argument\");\n        }\n        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++)\n            result *= i;\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        long result = 1;\n        for (long i = n; i > 0; i--)\n            result *= i;\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        long result = 1;\n        for (long i = n; i > 0; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        if (n == 0) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return 1;\n        long result = 1;\n        for (long i = n; i > 0; i--)\n            result *= i;\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        if (n == 0) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        long result = 1;\n        for (long i = n; i > 0; i--)\n            result *= i;\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 0; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++)\n            result *= i;\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        long result = 1;\n        for (long i = n; i > 1; i--)\n            result *= i;\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0)\n            throw new System.ArgumentException(\"n should be greater than 0\");\n        long result = 1;\n        for (long i = n; i > 0; i--)\n            result *= i;\n        return result;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        long result = 1;\n        for (long i = n; i > 0; i--)\n            result *= i;\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 0; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        long result = 1;\n        for (long i = n; i > 0; i--) {\n            result *= i;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = n; i > 1; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        long result = 1;\n        for (long i = n; i > 0; i--) {\n            result *= i;\n        }\n        return result;",
    "        if (n == 0) return 1;\n        return n * SpecialFactorial(n - 1);"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}