{
  "name": "HumanEval_56_correct_bracketing",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // write your code here\n        if (brackets.Length == 0)\n            return true;\n        if (brackets.Length == 1)\n            return false;\n        if (brackets.Length % 2 == 0)\n            return false;\n        int count = 0;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<')\n                count++;\n            else if (brackets[i] == '>')\n                count--;\n        }\n        return count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <69ae09d5454e4cb4ac2239212ea3bd7b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <69ae09d5454e4cb4ac2239212ea3bd7b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets we've seen.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        bool seen = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seen_close = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seen_open = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seen_close_open = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seen_open_close = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seen_open_close_open = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seen_open_close_close = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seen_open_close_open_close = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seen_open_close_open_close_open = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seen_open_close_open_close_open_close = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seen_open_close_open_close_open_close_open = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seen_open_close_open_close_open_close_open_close = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seen_open_close_open_close_open_close_open_close\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293425,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5dwgddp_.cs(49,62): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293425,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmgf0bld0.cs(23,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpmgf0bld0.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpmgf0bld0.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpmgf0bld0.cs(27,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpmgf0bld0.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpmgf0bld0.cs(29,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpmgf0bld0.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpmgf0bld0.cs(31,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpmgf0bld0.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpmgf0bld0.cs(33,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpmgf0bld0.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpmgf0bld0.cs(35,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpmgf0bld0.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpmgf0bld0.cs(37,17): error CS012",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Create a stack to hold the brackets.\n        Stack<char> stack = new Stack<char>();\n        // Loop through the brackets.\n        for (int i = 0; i < brackets.Length; i++) {\n            // If the bracket is an opening bracket, push it onto the stack.\n            if (brackets[i] == '<') {\n                stack.Push(brackets[i]);\n            }\n            // If the bracket is a closing bracket, pop it off the stack.\n            else if (brackets[i] == '>') {\n                // If the stack is empty, return false.\n                if (stack.IsEmpty()) {\n                    return false;\n                }\n                // Pop the top element off the stack.\n                char top = stack.Pop();\n                // If the top element is not the same as the bracket, return false.\n                if (top != '<') {\n                    return false;\n                }\n            }\n        }\n        // If the stack is empty, return true.\n        if (stack.IsEmpty()) {\n            return true;\n        }\n        // Pop the top element off the stack.\n        char top = stack.Pop();\n        // If the top element is not the same as the bracket, return false.\n        if (top != '>') {\n            return false;\n        }\n        // If the stack is not empty, return false.\n        return !stack.IsEmpty();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293425,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmbctketl.cs(31,27): error CS1061: 'Stack<char>' does not contain a definition for 'IsEmpty' and no accessible extension method 'IsEmpty' accepting a first argument of type 'Stack<char>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpmbctketl.cs(35,22): error CS0136: A local or parameter named 'top' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpmbctketl.cs(43,19): error CS1061: 'Stack<char>' does not contain a definition for 'IsEmpty' and no accessible extension method 'IsEmpty' accepting a first argument of type 'Stack<char>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpmbctketl.cs(53,23): error CS1061: 'Stack<char>' does not contain a definition for 'IsEmpty' and no accessible extension method 'IsEmpty' accepting a first argument of type 'Stack<char>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen.\n        Stack<char> stack = new Stack<char>();\n        // We'll also use a queue to keep track of the brackets we've seen.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft2 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight2 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft3 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight3 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft4 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight4 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft5 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight5 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft6 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight6 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft7 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight7 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft8 = false;\n        // We'll use a boolean to keep track of whether we\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293425,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcj147m9q.cs(25,14): warning CS0219: The variable 'seenLeft' is assigned but its value is never used\n/tmp/tmpcj147m9q.cs(27,14): warning CS0219: The variable 'seenRight' is assigned but its value is never used\n/tmp/tmpcj147m9q.cs(29,14): warning CS0219: The variable 'seenLeft2' is assigned but its value is never used\n/tmp/tmpcj147m9q.cs(31,14): warning CS0219: The variable 'seenRight2' is assigned but its value is never used\n/tmp/tmpcj147m9q.cs(33,14): warning CS0219: The variable 'seenLeft3' is assigned but its value is never used\n/tmp/tmpcj147m9q.cs(35,14): warning CS0219: The variable 'seenRight3' is assigned but its value is never used\n/tmp/tmpcj147m9q.cs(37,14): warning CS0219: The variable 'seenLeft4' is assigned but its value is never used\n/tmp/tmpcj147m9q.cs(39,14): warning CS0219: The variable 'seenRight4' is assigned but its value is never used\n/tmp/tmpcj147m9q.cs(41,14): warning CS0219: The variable 'seenLeft5' is assigned but its value is never used\n/tmp/tmpcj147m9q.cs(43,14): warning CS0219: The variable 'seenRight5' is assigned but its value is never used\n/tmp/tmpcj147m9q.cs(45,14): warning CS0219: The variable 'seenLeft6' is assigned but its value is never used\n/tmp/tmpcj147m9q.cs(47,14): warning CS0219: The variable 'seenRight6' is assigned but its value is never used\n/tmp/tmpcj147m9q.cs(49,14): warning CS0219: The variable 'seenLeft7' is assigned but its value is never used\n/tmp/tmpcj147m9q.cs(51,14): warning CS0219: The variable 'seenRight7' is assigned but its value is never used\n/tmp/tmpcj147m9q.cs(53,14): warning CS0219: The variable 'seenLeft8' is assigned but its value is never used\n/tmp/tmpcj147m9q.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Write your code here\n        if (brackets.Length == 0)\n            return true;\n        int openBrackets = 0;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<')\n                openBrackets++;\n            else if (brackets[i] == '>')\n                openBrackets--;\n        }\n        return openBrackets == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <863e5660838343f2b6f26642cc288a78>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <863e5660838343f2b6f26642cc288a78>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Write your code here\n        if (brackets.Length == 0)\n            return true;\n        if (brackets.Length == 1)\n            return true;\n        if (brackets.Length == 2)\n            return brackets[0] == '<' && brackets[1] == '>';\n        if (brackets[0] == '<') {\n            if (brackets[1] == '<') {\n                if (brackets[2] == '>') {\n                    if (brackets[3] == '>')\n                        return true;\n                    else\n                        return false;\n                }\n                else\n                    return false;\n            }\n            else\n                return false;\n        }\n        else\n            return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <12f9603bd8f040a3be0045ce675cc9e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <12f9603bd8f040a3be0045ce675cc9e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We use a boolean to keep track of whether we have seen a left bracket.\n        bool left = false;\n        // We use a boolean to keep track of whether we have seen a right bracket.\n        bool right = false;\n        // We use a boolean to keep track of whether we have seen a left bracket.\n        bool left2 = false;\n        // We use a boolean to keep track of whether we have seen a right bracket.\n        bool right2 = false;\n        // We use a boolean to keep track of whether we have seen a left bracket.\n        bool left3 = false;\n        // We use a boolean to keep track of whether we have seen a right bracket.\n        bool right3 = false;\n        // We use a boolean to keep track of whether we have seen a left bracket.\n        bool left4 = false;\n        // We use a boolean to keep track of whether we have seen a right bracket.\n        bool right4 = false;\n        // We use a boolean to keep track of whether we have seen a left bracket.\n        bool left5 = false;\n        // We use a boolean to keep track of whether we have seen a right bracket.\n        bool right5 = false;\n        // We use a boolean to keep track of whether we have seen a left bracket.\n        bool left6 = false;\n        // We use a boolean to keep track of whether we have seen a right bracket.\n        bool right6 = false;\n        // We use a boolean to keep track of whether we have seen a left bracket.\n        bool left7 = false;\n        // We use a boolean to keep track of whether we have seen a right bracket.\n        bool right7 = false;\n        // We use a boolean to keep track of whether we have seen a left bracket.\n        bool left8 = false;\n        // We use a boolean to keep track of whether we have seen a right bracket.\n        bool right8 = false;\n        // We use a boolean to keep track of whether we have seen a left bracket.\n        bool left9 = false\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293425,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_ufniirh.cs(57,27): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We will use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We will use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We will use a boolean to keep track of whether we have seen a left bracket.\n        bool seenLeft = false;\n        // We will use a boolean to keep track of whether we have seen a right bracket.\n        bool seenRight = false;\n        // We will use a boolean to keep track of whether we have seen a left bracket.\n        bool seenLeft2 = false;\n        // We will use a boolean to keep track of whether we have seen a right bracket.\n        bool seenRight2 = false;\n        // We will use a boolean to keep track of whether we have seen a left bracket.\n        bool seenLeft3 = false;\n        // We will use a boolean to keep track of whether we have seen a right bracket.\n        bool seenRight3 = false;\n        // We will use a boolean to keep track of whether we have seen a left bracket.\n        bool seenLeft4 = false;\n        // We will use a boolean to keep track of whether we have seen a right bracket.\n        bool seenRight4 = false;\n        // We will use a boolean to keep track of whether we have seen a left bracket.\n        bool seenLeft5 = false;\n        // We will use a boolean to keep track of whether we have seen a right bracket.\n        bool seenRight5 = false;\n        // We will use a boolean to keep track of whether we have seen a left bracket.\n        bool seenLeft6 = false;\n        // We will use a boolean to keep track of whether we have seen a right bracket.\n        bool seenRight6 = false;\n        // We will use a boolean to keep track of whether we have seen a left bracket.\n        bool seenLeft7 = false;\n        // We will use a boolean to keep track of whether we have seen a right bracket.\n        bool seenRight7 = false;\n        // We will use a boolean to keep track of whether we have seen a left bracket.\n        bool seenLeft8 = false;\n        // We will use a boolean to keep track of whether we have seen a right bracket.\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293425,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppr9ppzua.cs(25,14): warning CS0219: The variable 'seenLeft' is assigned but its value is never used\n/tmp/tmppr9ppzua.cs(27,14): warning CS0219: The variable 'seenRight' is assigned but its value is never used\n/tmp/tmppr9ppzua.cs(29,14): warning CS0219: The variable 'seenLeft2' is assigned but its value is never used\n/tmp/tmppr9ppzua.cs(31,14): warning CS0219: The variable 'seenRight2' is assigned but its value is never used\n/tmp/tmppr9ppzua.cs(33,14): warning CS0219: The variable 'seenLeft3' is assigned but its value is never used\n/tmp/tmppr9ppzua.cs(35,14): warning CS0219: The variable 'seenRight3' is assigned but its value is never used\n/tmp/tmppr9ppzua.cs(37,14): warning CS0219: The variable 'seenLeft4' is assigned but its value is never used\n/tmp/tmppr9ppzua.cs(39,14): warning CS0219: The variable 'seenRight4' is assigned but its value is never used\n/tmp/tmppr9ppzua.cs(41,14): warning CS0219: The variable 'seenLeft5' is assigned but its value is never used\n/tmp/tmppr9ppzua.cs(43,14): warning CS0219: The variable 'seenRight5' is assigned but its value is never used\n/tmp/tmppr9ppzua.cs(45,14): warning CS0219: The variable 'seenLeft6' is assigned but its value is never used\n/tmp/tmppr9ppzua.cs(47,14): warning CS0219: The variable 'seenRight6' is assigned but its value is never used\n/tmp/tmppr9ppzua.cs(49,14): warning CS0219: The variable 'seenLeft7' is assigned but its value is never used\n/tmp/tmppr9ppzua.cs(51,14): warning CS0219: The variable 'seenRight7' is assigned but its value is never used\n/tmp/tmppr9ppzua.cs(53,14): warning CS0219: The variable 'seenLeft8' is assigned but its value is never used\n/tmp/tmppr9ppzua.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a character.\n        boolean inChar = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean inNumber = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean inFloat = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean inHex = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean inOctal = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean inBinary = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean inExponent = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean inFloatExponent = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean inFloatNumber = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean inFloatExponentPart = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean inFloatFractionalPart = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean inFloatExponentPartPart = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean inFloatSign = false;\n        // We'll use a boolean to keep track of whether we're\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293425,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph07ua56r.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmph07ua56r.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmph07ua56r.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmph07ua56r.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmph07ua56r.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmph07ua56r.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmph07ua56r.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmph07ua56r.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmph07ua56r.cs(41,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmph07ua56r.cs(43,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmph07ua56r.cs(45,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmph07ua56r.cs(47,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmph07ua",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[256];\n        for (int i = 0; i < brackets.Length; i++) {\n            brackets_count[brackets[i]]++;\n        }\n        for (int i = 0; i < 256; i++) {\n            if (brackets_count[i] > 0 && brackets_count[i] != brackets.Length - 1)\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293425,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3faf7066333a4bf4ad75ca871cabe842>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3faf7066333a4bf4ad75ca871cabe842>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen.\n        Stack<char> stack = new Stack<char>();\n        // We'll also keep track of the number of brackets we've seen.\n        int count = 0;\n        // We'll also keep track of whether we've seen a matching pair of brackets.\n        bool matched = false;\n        // We'll also keep track of whether we've seen an opening bracket.\n        bool opened = false;\n        // We'll also keep track of whether we've seen a closing bracket.\n        bool closed = false;\n        // We'll also keep track of whether we've seen a closing bracket.\n        bool seen = false;\n        // We'll also keep track of whether we've seen a closing bracket.\n        bool seen2 = false;\n        // We'll also keep track of whether we've seen a closing bracket.\n        bool seen3 = false;\n        // We'll also keep track of whether we've seen a closing bracket.\n        bool seen4 = false;\n        // We'll also keep track of whether we've seen a closing bracket.\n        bool seen5 = false;\n        // We'll also keep track of whether we've seen a closing bracket.\n        bool seen6 = false;\n        // We'll also keep track of whether we've seen a closing bracket.\n        bool seen7 = false;\n        // We'll also keep track of whether we've seen a closing bracket.\n        bool seen8 = false;\n        // We'll also keep track of whether we've seen a closing bracket.\n        bool seen9 = false;\n        // We'll also keep track of whether we've seen a closing bracket.\n        bool seen10 = false;\n        // We'll also keep track of whether we've seen a closing bracket.\n        bool seen11 = false;\n        // We'll also keep track of whether we've seen a closing bracket.\n        bool seen12 = false;\n        // We'll also keep track of whether we've seen a closing bracket.\n        bool seen13 = false;\n        // We'll also keep track of whether we've seen a closing bracket.\n        bool seen14 = false;\n        // We'll also keep track of whether we've seen a closing bracket.\n        bool seen15 = false;\n        // We'll also keep track of\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293425,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprjfte7lb.cs(23,13): warning CS0219: The variable 'count' is assigned but its value is never used\n/tmp/tmprjfte7lb.cs(25,14): warning CS0219: The variable 'matched' is assigned but its value is never used\n/tmp/tmprjfte7lb.cs(27,14): warning CS0219: The variable 'opened' is assigned but its value is never used\n/tmp/tmprjfte7lb.cs(29,14): warning CS0219: The variable 'closed' is assigned but its value is never used\n/tmp/tmprjfte7lb.cs(31,14): warning CS0219: The variable 'seen' is assigned but its value is never used\n/tmp/tmprjfte7lb.cs(33,14): warning CS0219: The variable 'seen2' is assigned but its value is never used\n/tmp/tmprjfte7lb.cs(35,14): warning CS0219: The variable 'seen3' is assigned but its value is never used\n/tmp/tmprjfte7lb.cs(37,14): warning CS0219: The variable 'seen4' is assigned but its value is never used\n/tmp/tmprjfte7lb.cs(39,14): warning CS0219: The variable 'seen5' is assigned but its value is never used\n/tmp/tmprjfte7lb.cs(41,14): warning CS0219: The variable 'seen6' is assigned but its value is never used\n/tmp/tmprjfte7lb.cs(43,14): warning CS0219: The variable 'seen7' is assigned but its value is never used\n/tmp/tmprjfte7lb.cs(45,14): warning CS0219: The variable 'seen8' is assigned but its value is never used\n/tmp/tmprjfte7lb.cs(47,14): warning CS0219: The variable 'seen9' is assigned but its value is never used\n/tmp/tmprjfte7lb.cs(49,14): warning CS0219: The variable 'seen10' is assigned but its value is never used\n/tmp/tmprjfte7lb.cs(51,14): warning CS0219: The variable 'seen11' is assigned but its value is never used\n/tmp/tmprjfte7lb.cs(53,14): warning CS0219: The variable 'seen12' is assigned but its value is never used\n/tmp/tmprjfte7lb.cs(55,14): warning CS0219: The variable 'seen13' is assigned but its value is never used\n/tmp/tmprjfte7lb.cs(57,14): warning CS0219: The variable 'seen14' is assigned but its value is never used\n/tmp/tmprjfte7lb.cs(59,",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[2];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                brackets_count[0]++;\n            }\n            else if (brackets[i] == '>') {\n                brackets_count[1]++;\n            }\n        }\n        return brackets_count[0] == brackets_count[1];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2e419119c08f47d390669616bf144411>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2e419119c08f47d390669616bf144411>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Write your code here\n        if (brackets.Length == 0)\n            return true;\n        int left = 0;\n        int right = 0;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<')\n                left++;\n            else if (brackets[i] == '>')\n                right++;\n        }\n        if (left == right)\n            return true;\n        else\n            return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7b7b2b9ffce1446396d381ee15d1f04b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7b7b2b9ffce1446396d381ee15d1f04b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString2 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString3 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString4 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString5 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString6 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString7 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString8 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString9 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString10 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString11 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString12 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString13 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString14 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293425,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz558x22l.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(41,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(43,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(45,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(47,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        if (brackets.Length == 1) return false;\n        if (brackets.Length % 2 != 0) return false;\n        int[] openBrackets = new int[brackets.Length];\n        int[] closeBrackets = new int[brackets.Length];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') openBrackets[i] = 1;\n            else if (brackets[i] == '>') openBrackets[i] = 2;\n            else return false;\n        }\n        for (int i = 0; i < brackets.Length; i++) {\n            if (openBrackets[i] == 1) {\n                closeBrackets[i] = 0;\n            }\n            else if (openBrackets[i] == 2) {\n                closeBrackets[i] = 1;\n            }\n            else return false;\n        }\n        for (int i = 0; i < brackets.Length; i++) {\n            if (closeBrackets[i] == 0) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <97e459f5602d4433986daec4eeefb3c9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <97e459f5602d4433986daec4eeefb3c9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0)\n            return true;\n        int[] bracket_count = new int[2];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<')\n                bracket_count[0]++;\n            else if (brackets[i] == '>')\n                bracket_count[1]++;\n        }\n        if (bracket_count[0] != bracket_count[1])\n            return false;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                if (i + 1 < brackets.Length && brackets[i + 1] == '>')\n                    return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a8f6d0473a7142e0acb84efe0b1f9a9e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a8f6d0473a7142e0acb84efe0b1f9a9e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We will use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We will use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We will use a boolean to keep track of whether we are in a\n        // string of brackets.\n        boolean inBrackets = false;\n        // We will use a boolean to keep track of whether we are in a\n        // string of brackets.\n        boolean inString = false;\n        // We will use a boolean to keep track of whether we are in a\n        // string of brackets.\n        boolean inChar = false;\n        // We will use a boolean to keep track of whether we are in a\n        // string of brackets.\n        boolean inChar2 = false;\n        // We will use a boolean to keep track of whether we are in a\n        // string of brackets.\n        boolean inChar3 = false;\n        // We will use a boolean to keep track of whether we are in a\n        // string of brackets.\n        boolean inChar4 = false;\n        // We will use a boolean to keep track of whether we are in a\n        // string of brackets.\n        boolean inChar5 = false;\n        // We will use a boolean to keep track of whether we are in a\n        // string of brackets.\n        boolean inChar6 = false;\n        // We will use a boolean to keep track of whether we are in a\n        // string of brackets.\n        boolean inChar7 = false;\n        // We will use a boolean to keep track of whether we are in a\n        // string of brackets.\n        boolean inChar8 = false;\n        // We will use a boolean to keep track of whether we are in a\n        // string of brackets.\n        boolean inChar9 = false;\n        // We will use a boolean to keep track of whether we are in a\n        // string of brackets.\n        boolean inChar10 = false;\n        // We will use a boolean to keep track of whether we are in a\n        // string of brackets.\n        boolean inChar11 = false;\n        // We will use a boolean to keep track of whether we\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293425,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbogovgd7.cs(26,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpbogovgd7.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpbogovgd7.cs(32,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpbogovgd7.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpbogovgd7.cs(38,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpbogovgd7.cs(41,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpbogovgd7.cs(44,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpbogovgd7.cs(47,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpbogovgd7.cs(50,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpbogovgd7.cs(53,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpbogovgd7.cs(56,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpbogovgd7.cs(59,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpbogov",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Write your code here\n        if (brackets.Length == 0)\n            return true;\n        int openBrackets = 0;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<')\n                openBrackets++;\n            else if (brackets[i] == '>')\n                openBrackets--;\n        }\n        return openBrackets == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <863e5660838343f2b6f26642cc288a78>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <863e5660838343f2b6f26642cc288a78>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool leftRight = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool rightLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool leftRightRight = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool rightLeftRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool leftRightRight = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool rightLeftLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool leftRightLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool rightLeftLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool leftRightLeftLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool rightLeftLeftLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool leftRightLeftLeft\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293425,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxlgnzs_0.cs(58,31): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Write your code here\n        int[] brackets_count = new int[256];\n        for (int i = 0; i < brackets.Length; i++) {\n            brackets_count[brackets[i]]++;\n        }\n        for (int i = 0; i < brackets_count.Length; i++) {\n            if (brackets_count[i] != 0) {\n                if (brackets_count[i] % 2 != 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <eb03955a70c646b690058d3108cb2f0a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <eb03955a70c646b690058d3108cb2f0a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Write your code here\n        if (brackets.Length == 0) return true;\n        if (brackets.Length == 1) return false;\n        if (brackets.Length == 2) return true;\n        if (brackets.Length == 3) return true;\n        if (brackets.Length == 4) return true;\n        if (brackets.Length == 5) return true;\n        if (brackets.Length == 6) return true;\n        if (brackets.Length == 7) return true;\n        if (brackets.Length == 8) return true;\n        if (brackets.Length == 9) return true;\n        if (brackets.Length == 10) return true;\n        if (brackets.Length == 11) return true;\n        if (brackets.Length == 12) return true;\n        if (brackets.Length == 13) return true;\n        if (brackets.Length == 14) return true;\n        if (brackets.Length == 15) return true;\n        if (brackets.Length == 16) return true;\n        if (brackets.Length == 17) return true;\n        if (brackets.Length == 18) return true;\n        if (brackets.Length == 19) return true;\n        if (brackets.Length == 20) return true;\n        if (brackets.Length == 21) return true;\n        if (brackets.Length == 22) return true;\n        if (brackets.Length == 23) return true;\n        if (brackets.Length == 24) return true;\n        if (brackets.Length == 25) return true;\n        if (brackets.Length == 26) return true;\n        if (brackets.Length == 27) return true;\n        if (brackets.Length == 28) return true;\n        if (brackets.Length == 29) return true;\n        if (brackets.Length == 30) return true;\n        if (brackets.Length == 31) return true;\n        if (brackets.Length == 32) return true;\n        if (brackets.Length == 33) return true;\n        if (brackets.Length == 34) return true;\n        if (brackets.Length == 35) return true;\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293425,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpf74o7upm.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // If the string is empty, return true.\n        if (brackets.Length == 0) return true;\n        // If the string is not empty, but does not contain any opening brackets, return false.\n        if (brackets.IndexOf(\"<\") == -1) return false;\n        // If the string is not empty, but does not contain any closing brackets, return false.\n        if (brackets.IndexOf(\">\") == -1) return false;\n        // If the string is not empty, but does not contain any opening brackets, return false.\n        if (brackets.IndexOf(\"<>\") == -1) return false;\n        // If the string is not empty, but does not contain any closing brackets, return false.\n        if (brackets.IndexOf(\"<<>\") == -1) return false;\n        // If the string is not empty, but does not contain any opening brackets, return false.\n        if (brackets.IndexOf(\"><<>\") == -1) return false;\n        // If the string is not empty, but does not contain any opening brackets, return false.\n        if (brackets.IndexOf(\"<><>\") == -1) return false;\n        // If the string is not empty, but does not contain any closing brackets, return false.\n        if (brackets.IndexOf(\"<><\") == -1) return false;\n        // If the string is not empty, but does not contain any opening brackets, return false.\n        if (brackets.IndexOf(\"<<><\") == -1) return false;\n        // If the string is not empty, but does not contain any closing brackets, return false.\n        if (brackets.IndexOf(\"<><<\") == -1) return false;\n        // If the string is not empty, but does not contain any opening brackets, return false.\n        if (brackets.IndexOf(\"<<><<\") == -1) return false;\n        // If the string is not empty, but does not contain any closing brackets, return false.\n        if (brackets.IndexOf(\"<><<<\") == -1) return false;\n        // If the string is not empty, but does not contain any opening brackets, return false.\n        if (brackets.IndexOf(\"<><\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293425,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3c2gnqet.cs(45,30): error CS1010: Newline in constant\n/tmp/tmp3c2gnqet.cs(45,34): error CS1026: ) expected\n/tmp/tmp3c2gnqet.cs(45,34): error CS1525: Invalid expression term '}'\n/tmp/tmp3c2gnqet.cs(45,34): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        bool seenOpenBracket = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseBracket = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket2 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseBracket2 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket3 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseBracket3 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket4 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseBracket4 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket5 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseBracket5 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket6 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseBracket6 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket7 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseBracket7 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket8 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293425,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjxz0mqrj.cs(23,14): warning CS0219: The variable 'seenOpenBracket' is assigned but its value is never used\n/tmp/tmpjxz0mqrj.cs(25,14): warning CS0219: The variable 'seenCloseBracket' is assigned but its value is never used\n/tmp/tmpjxz0mqrj.cs(27,14): warning CS0219: The variable 'seenOpenBracket2' is assigned but its value is never used\n/tmp/tmpjxz0mqrj.cs(29,14): warning CS0219: The variable 'seenCloseBracket2' is assigned but its value is never used\n/tmp/tmpjxz0mqrj.cs(31,14): warning CS0219: The variable 'seenOpenBracket3' is assigned but its value is never used\n/tmp/tmpjxz0mqrj.cs(33,14): warning CS0219: The variable 'seenCloseBracket3' is assigned but its value is never used\n/tmp/tmpjxz0mqrj.cs(35,14): warning CS0219: The variable 'seenOpenBracket4' is assigned but its value is never used\n/tmp/tmpjxz0mqrj.cs(37,14): warning CS0219: The variable 'seenCloseBracket4' is assigned but its value is never used\n/tmp/tmpjxz0mqrj.cs(39,14): warning CS0219: The variable 'seenOpenBracket5' is assigned but its value is never used\n/tmp/tmpjxz0mqrj.cs(41,14): warning CS0219: The variable 'seenCloseBracket5' is assigned but its value is never used\n/tmp/tmpjxz0mqrj.cs(43,14): warning CS0219: The variable 'seenOpenBracket6' is assigned but its value is never used\n/tmp/tmpjxz0mqrj.cs(45,14): warning CS0219: The variable 'seenCloseBracket6' is assigned but its value is never used\n/tmp/tmpjxz0mqrj.cs(47,14): warning CS0219: The variable 'seenOpenBracket7' is assigned but its value is never used\n/tmp/tmpjxz0mqrj.cs(49,14): warning CS0219: The variable 'seenCloseBracket7' is assigned but its value is never used\n/tmp/tmpjxz0mqrj.cs(51,14): warning CS0219: The variable 'seenOpenBracket8' is assigned but its value is never used\n/tmp/tmpjxz0mqrj.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var openBrackets = new List<char>();\n        for (var c : brackets) {\n            if (c == '<') {\n                openBrackets.Add('>');\n            }\n            else {\n                openBrackets.Add('<');\n            }\n        }\n        if (openBrackets.Count == 0) {\n            return true;\n        }\n        for (var c : openBrackets) {\n            if (openBrackets.IndexOf(c) == -1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293425,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp83_cr4xi.cs(21,20): error CS1002: ; expected\n/tmp/tmp83_cr4xi.cs(21,20): error CS1525: Invalid expression term ':'\n/tmp/tmp83_cr4xi.cs(21,20): error CS1001: Identifier expected\n/tmp/tmp83_cr4xi.cs(32,20): error CS1002: ; expected\n/tmp/tmp83_cr4xi.cs(32,20): error CS1525: Invalid expression term ':'\n/tmp/tmp83_cr4xi.cs(32,20): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        bool seenOpenBracket = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseBracket = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket2 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseBracket2 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket3 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseBracket3 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket4 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseBracket4 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket5 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseBracket5 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket6 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseBracket6 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket7 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseBracket7 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8wpwpshm.cs(25,14): warning CS0219: The variable 'seenOpenBracket' is assigned but its value is never used\n/tmp/tmp8wpwpshm.cs(27,14): warning CS0219: The variable 'seenCloseBracket' is assigned but its value is never used\n/tmp/tmp8wpwpshm.cs(29,14): warning CS0219: The variable 'seenOpenBracket2' is assigned but its value is never used\n/tmp/tmp8wpwpshm.cs(31,14): warning CS0219: The variable 'seenCloseBracket2' is assigned but its value is never used\n/tmp/tmp8wpwpshm.cs(33,14): warning CS0219: The variable 'seenOpenBracket3' is assigned but its value is never used\n/tmp/tmp8wpwpshm.cs(35,14): warning CS0219: The variable 'seenCloseBracket3' is assigned but its value is never used\n/tmp/tmp8wpwpshm.cs(37,14): warning CS0219: The variable 'seenOpenBracket4' is assigned but its value is never used\n/tmp/tmp8wpwpshm.cs(39,14): warning CS0219: The variable 'seenCloseBracket4' is assigned but its value is never used\n/tmp/tmp8wpwpshm.cs(41,14): warning CS0219: The variable 'seenOpenBracket5' is assigned but its value is never used\n/tmp/tmp8wpwpshm.cs(43,14): warning CS0219: The variable 'seenCloseBracket5' is assigned but its value is never used\n/tmp/tmp8wpwpshm.cs(45,14): warning CS0219: The variable 'seenOpenBracket6' is assigned but its value is never used\n/tmp/tmp8wpwpshm.cs(47,14): warning CS0219: The variable 'seenCloseBracket6' is assigned but its value is never used\n/tmp/tmp8wpwpshm.cs(49,14): warning CS0219: The variable 'seenOpenBracket7' is assigned but its value is never used\n/tmp/tmp8wpwpshm.cs(51,14): warning CS0219: The variable 'seenCloseBracket7' is assigned but its value is never used\n/tmp/tmp8wpwpshm.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n        for (var i = 0; i < brackets.Length; i++) {\n            var c = brackets[i];\n            if (c == '<') {\n                stack.Push('>');\n            }\n            else if (c == '>') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                stack.Pop();\n            }\n        }\n        return stack.Count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Write your code here\n        if (brackets.Length == 0)\n            return true;\n        if (brackets.Length == 1)\n            return false;\n        if (brackets.Length % 2 != 0)\n            return false;\n        int open = 0;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<')\n                open++;\n            else if (brackets[i] == '>')\n                open--;\n            if (open < 0)\n                return false;\n        }\n        return open == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var openBrackets = new ArrayList<char>();\n        var closeBrackets = new ArrayList<char>();\n        for (var i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                openBrackets.Add(brackets[i]);\n            }\n            else if (brackets[i] == '>') {\n                closeBrackets.Add(brackets[i]);\n            }\n        }\n        if (openBrackets.Count != closeBrackets.Count) {\n            return false;\n        }\n        for (var i = 0; i < openBrackets.Count; i++) {\n            if (openBrackets[i] != closeBrackets[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpugfebrox.cs(20,32): error CS0246: The type or namespace name 'ArrayList<>' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpugfebrox.cs(21,33): error CS0246: The type or namespace name 'ArrayList<>' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpugfebrox.cs(30,13): error CS0019: Operator '!=' cannot be applied to operands of type 'method group' and 'method group'\n/tmp/tmpugfebrox.cs(33,25): error CS0019: Operator '<' cannot be applied to operands of type 'int' and 'method group'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString2 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString3 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString4 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString5 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString6 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString7 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString8 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString9 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString10 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString11 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString12 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString13 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString14 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293425,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz558x22l.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(41,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(43,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(45,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(47,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left2 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right2 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left3 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right3 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left4 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right4 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left5 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right5 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left6 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right6 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left7 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right7 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left8 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right8 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left9 = false;\n        // We'll use a\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpi3ij9460.cs(23,14): warning CS0219: The variable 'left' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(25,14): warning CS0219: The variable 'right' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(27,14): warning CS0219: The variable 'left2' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(29,14): warning CS0219: The variable 'right2' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(31,14): warning CS0219: The variable 'left3' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(33,14): warning CS0219: The variable 'right3' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(35,14): warning CS0219: The variable 'left4' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(37,14): warning CS0219: The variable 'right4' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(39,14): warning CS0219: The variable 'left5' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(41,14): warning CS0219: The variable 'right5' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(43,14): warning CS0219: The variable 'left6' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(45,14): warning CS0219: The variable 'right6' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(47,14): warning CS0219: The variable 'left7' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(49,14): warning CS0219: The variable 'right7' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(51,14): warning CS0219: The variable 'left8' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(53,14): warning CS0219: The variable 'right8' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(55,14): warning CS0219: The variable 'left9' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int openBrackets = 0;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                openBrackets++;\n            }\n            else if (brackets[i] == '>') {\n                openBrackets--;\n            }\n        }\n        return openBrackets == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c76b9a83273943dbad74728284af9073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c76b9a83273943dbad74728284af9073>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        bool inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        bool inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        bool inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        bool inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        bool inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        bool inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        bool inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        bool inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        bool inString =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyaeq65h5.cs(57,24): error CS1525: Invalid expression term '}'\n/tmp/tmpyaeq65h5.cs(57,24): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < brackets.Length; i++) {\n            char c = brackets[i];\n            if (c == '<') {\n                stack.Push('>');\n            }\n            else if (c == '>') {\n                if (stack.IsEmpty()) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (top != '<') {\n                    return false;\n                }\n            }\n            else {\n                stack.Push(c);\n            }\n        }\n        return stack.IsEmpty();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7aqarggm.cs(28,27): error CS1061: 'Stack<char>' does not contain a definition for 'IsEmpty' and no accessible extension method 'IsEmpty' accepting a first argument of type 'Stack<char>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp7aqarggm.cs(40,22): error CS1061: 'Stack<char>' does not contain a definition for 'IsEmpty' and no accessible extension method 'IsEmpty' accepting a first argument of type 'Stack<char>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets we've seen.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        bool seen = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool closed = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seen_opening = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seen_closing = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seen_closing_opening = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seen_opening_closing = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seen_closing_opening_closing = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seen_opening_closing_opening = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seen_opening_closing_opening_closing = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seen_opening_opening_closing = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seen_opening_opening_closing_closing = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seen_opening_opening_opening = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seen_opening_opening_opening_closing = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seen_\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxpx97zia.cs(51,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                count++;\n            }\n            else if (brackets[i] == '>') {\n                count--;\n            }\n        }\n        return count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <783d03d06a4840fd8753b0b69a633719>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <783d03d06a4840fd8753b0b69a633719>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Write your code here\n        if (brackets.Length == 0)\n            return true;\n        int[] bracket_count = new int[2];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<')\n                bracket_count[0]++;\n            else if (brackets[i] == '>')\n                bracket_count[1]++;\n        }\n        if (bracket_count[0] != bracket_count[1])\n            return false;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                if (i + 1 < brackets.Length && brackets[i + 1] == '>') {\n                    i++;\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <00983ff2c9f948e78afd86514c1385c9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <00983ff2c9f948e78afd86514c1385c9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we're inside a bracket.\n        boolean inBracket = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenClosingBracket = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenOpeningBracket = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenEnd = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenStart = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenStartEnd = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenStartStart = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenStartEndEnd = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenStartStartEnd = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenStartStartStart = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenStartStartEndEnd = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenStartStartStartEnd = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenStartStartStartEndEnd = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenStartStartStartStartEnd = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8yucq9by.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp8yucq9by.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp8yucq9by.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp8yucq9by.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp8yucq9by.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp8yucq9by.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp8yucq9by.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp8yucq9by.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp8yucq9by.cs(41,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp8yucq9by.cs(43,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp8yucq9by.cs(45,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp8yucq9by.cs(47,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp8yucq",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a boolean to keep track of whether we're in a string or not.\n        bool in_string = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool in_comment = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool in_comment_line = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool in_comment_block = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool in_comment_block_line = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool in_comment_block_block = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool in_comment_block_block_line = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool in_comment_block_block_block = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool in_comment_block_block_block_line = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool in_comment_block_block_block_block = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool in_comment_block_block_block_block_line = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool in_comment_block_block_block_block_block = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool in_comment_block_block_block_block_block_line = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwfx8o5gc.cs(23,14): warning CS0219: The variable 'in_string' is assigned but its value is never used\n/tmp/tmpwfx8o5gc.cs(25,14): warning CS0219: The variable 'in_comment' is assigned but its value is never used\n/tmp/tmpwfx8o5gc.cs(27,14): warning CS0219: The variable 'in_comment_line' is assigned but its value is never used\n/tmp/tmpwfx8o5gc.cs(29,14): warning CS0219: The variable 'in_comment_block' is assigned but its value is never used\n/tmp/tmpwfx8o5gc.cs(31,14): warning CS0219: The variable 'in_comment_block_line' is assigned but its value is never used\n/tmp/tmpwfx8o5gc.cs(33,14): warning CS0219: The variable 'in_comment_block_block' is assigned but its value is never used\n/tmp/tmpwfx8o5gc.cs(35,14): warning CS0219: The variable 'in_comment_block_block_line' is assigned but its value is never used\n/tmp/tmpwfx8o5gc.cs(37,14): warning CS0219: The variable 'in_comment_block_block_block' is assigned but its value is never used\n/tmp/tmpwfx8o5gc.cs(39,14): warning CS0219: The variable 'in_comment_block_block_block_line' is assigned but its value is never used\n/tmp/tmpwfx8o5gc.cs(41,14): warning CS0219: The variable 'in_comment_block_block_block_block' is assigned but its value is never used\n/tmp/tmpwfx8o5gc.cs(43,14): warning CS0219: The variable 'in_comment_block_block_block_block_line' is assigned but its value is never used\n/tmp/tmpwfx8o5gc.cs(45,14): warning CS0219: The variable 'in_comment_block_block_block_block_block' is assigned but its value is never used\n/tmp/tmpwfx8o5gc.cs(47,14): warning CS0219: The variable 'in_comment_block_block_block_block_block_line' is assigned but its value is never used\n/tmp/tmpwfx8o5gc.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // write your code here\n        int[] brackets_count = new int[2];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                brackets_count[0]++;\n            }\n            else if (brackets[i] == '>') {\n                brackets_count[1]++;\n            }\n        }\n        return brackets_count[0] == brackets_count[1];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9eb7fcfdfd5b4f1f940988a0e9f5895e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9eb7fcfdfd5b4f1f940988a0e9f5895e>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[256];\n        for (int i = 0; i < brackets.Length; i++) {\n            brackets_count[brackets[i]]++;\n        }\n        for (int i = 0; i < 256; i++) {\n            if (brackets_count[i] != 0 && brackets_count[i] != brackets.Length - 1) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <52b9736d684d42ffa93483a0300a62b5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <52b9736d684d42ffa93483a0300a62b5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen so far.\n        Stack<char> stack = new Stack<char>();\n        // We'll also use a queue to keep track of the brackets we've seen so far.\n        // This is necessary because we need to be able to peek at the next character\n        // in the string.\n        Queue<char> queue = new Queue<char>();\n\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        // This is necessary because we need to be able to peek at the next character\n        // in the string.\n        boolean seenLeft = false;\n\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        // This is necessary because we need to be able to peek at the next character\n        // in the string.\n        boolean seenRight = false;\n\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // before we've seen a right bracket.\n        // This is necessary because we need to be able to peek at the next character\n        // in the string.\n        boolean seenLeftBeforeRight = false;\n\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // before we've seen a left bracket.\n        // This is necessary because we need to be able to peek at the next character\n        // in the string.\n        boolean seenRightBeforeLeft = false;\n\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // before we've seen a right bracket.\n        // This is necessary because we need to be able to peek at the next character\n        // in the string.\n        boolean seenLeftBeforeRightBeforeRight = false;\n\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // before we've seen a left bracket.\n        // This is necessary because we need to be able to peek at the next character\n        // in the string.\n        boolean seenRightBeforeLeftBeforeLeft = false;\n\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // before we've seen a left bracket.\n        // This is necessary because we need to be able\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy5qxywey.cs(30,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpy5qxywey.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpy5qxywey.cs(41,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpy5qxywey.cs(47,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpy5qxywey.cs(53,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpy5qxywey.cs(59,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpy5qxywey.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we're inside an opening bracket.\n        bool inOpeningBracket = false;\n        // We'll use a boolean to keep track of whether we're inside a closing bracket.\n        bool inClosingBracket = false;\n        // We'll use a boolean to keep track of whether we're inside an empty bracket.\n        bool inEmptyBracket = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        bool seenOpeningBracket = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket = false;\n        // We'll use a boolean to keep track of whether we've seen an empty bracket.\n        bool seenEmptyBracket = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket2 = false;\n        // We'll use a boolean to keep track of whether we've seen an empty bracket.\n        bool seenEmptyBracket2 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket3 = false;\n        // We'll use a boolean to keep track of whether we've seen an empty bracket.\n        bool seenEmptyBracket3 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket4 = false;\n        // We'll use a boolean to keep track of whether we've seen an empty bracket.\n        bool seenEmptyBracket4 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket5 = false;\n        // We'll use a boolean to keep track of whether we've seen an empty bracket.\n        bool seenEmptyBracket5 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp51y5e628.cs(25,14): warning CS0219: The variable 'inOpeningBracket' is assigned but its value is never used\n/tmp/tmp51y5e628.cs(27,14): warning CS0219: The variable 'inClosingBracket' is assigned but its value is never used\n/tmp/tmp51y5e628.cs(29,14): warning CS0219: The variable 'inEmptyBracket' is assigned but its value is never used\n/tmp/tmp51y5e628.cs(31,14): warning CS0219: The variable 'seenOpeningBracket' is assigned but its value is never used\n/tmp/tmp51y5e628.cs(33,14): warning CS0219: The variable 'seenClosingBracket' is assigned but its value is never used\n/tmp/tmp51y5e628.cs(35,14): warning CS0219: The variable 'seenEmptyBracket' is assigned but its value is never used\n/tmp/tmp51y5e628.cs(37,14): warning CS0219: The variable 'seenClosingBracket2' is assigned but its value is never used\n/tmp/tmp51y5e628.cs(39,14): warning CS0219: The variable 'seenEmptyBracket2' is assigned but its value is never used\n/tmp/tmp51y5e628.cs(41,14): warning CS0219: The variable 'seenClosingBracket3' is assigned but its value is never used\n/tmp/tmp51y5e628.cs(43,14): warning CS0219: The variable 'seenEmptyBracket3' is assigned but its value is never used\n/tmp/tmp51y5e628.cs(45,14): warning CS0219: The variable 'seenClosingBracket4' is assigned but its value is never used\n/tmp/tmp51y5e628.cs(47,14): warning CS0219: The variable 'seenEmptyBracket4' is assigned but its value is never used\n/tmp/tmp51y5e628.cs(49,14): warning CS0219: The variable 'seenClosingBracket5' is assigned but its value is never used\n/tmp/tmp51y5e628.cs(51,14): warning CS0219: The variable 'seenEmptyBracket5' is assigned but its value is never used\n/tmp/tmp51y5e628.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets we've seen.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        bool seenOpenBracket = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket2 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket2 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket3 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket3 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket4 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket4 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket5 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket5 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket6 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket6 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket7 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket7 = false;\n        // We'll use a boolean to\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbfc6vnsr.cs(25,14): warning CS0219: The variable 'seenOpenBracket' is assigned but its value is never used\n/tmp/tmpbfc6vnsr.cs(27,14): warning CS0219: The variable 'seenClosingBracket' is assigned but its value is never used\n/tmp/tmpbfc6vnsr.cs(29,14): warning CS0219: The variable 'seenOpenBracket2' is assigned but its value is never used\n/tmp/tmpbfc6vnsr.cs(31,14): warning CS0219: The variable 'seenClosingBracket2' is assigned but its value is never used\n/tmp/tmpbfc6vnsr.cs(33,14): warning CS0219: The variable 'seenOpenBracket3' is assigned but its value is never used\n/tmp/tmpbfc6vnsr.cs(35,14): warning CS0219: The variable 'seenClosingBracket3' is assigned but its value is never used\n/tmp/tmpbfc6vnsr.cs(37,14): warning CS0219: The variable 'seenOpenBracket4' is assigned but its value is never used\n/tmp/tmpbfc6vnsr.cs(39,14): warning CS0219: The variable 'seenClosingBracket4' is assigned but its value is never used\n/tmp/tmpbfc6vnsr.cs(41,14): warning CS0219: The variable 'seenOpenBracket5' is assigned but its value is never used\n/tmp/tmpbfc6vnsr.cs(43,14): warning CS0219: The variable 'seenClosingBracket5' is assigned but its value is never used\n/tmp/tmpbfc6vnsr.cs(45,14): warning CS0219: The variable 'seenOpenBracket6' is assigned but its value is never used\n/tmp/tmpbfc6vnsr.cs(47,14): warning CS0219: The variable 'seenClosingBracket6' is assigned but its value is never used\n/tmp/tmpbfc6vnsr.cs(49,14): warning CS0219: The variable 'seenOpenBracket7' is assigned but its value is never used\n/tmp/tmpbfc6vnsr.cs(51,14): warning CS0219: The variable 'seenClosingBracket7' is assigned but its value is never used\n/tmp/tmpbfc6vnsr.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var bracketCount = 0;\n        for (var i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                bracketCount++;\n            }\n            else if (brackets[i] == '>') {\n                bracketCount--;\n            }\n        }\n        return bracketCount == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fcc73f4975564de49301804cda130f65>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fcc73f4975564de49301804cda130f65>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] bracket_count = new int[256];\n        for (int i = 0; i < brackets.Length; i++) {\n            bracket_count[brackets[i]]++;\n        }\n        for (int i = 0; i < 256; i++) {\n            if (bracket_count[i] != 0 && bracket_count[i] != brackets.Length - 1) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3e93ec7d76a940b99af84ee2d36ba5b2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3e93ec7d76a940b99af84ee2d36ba5b2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n        for (var i = 0; i < brackets.Length; i++) {\n            var c = brackets[i];\n            if (c == '<') {\n                stack.Push('>');\n            }\n            else if (c == '>') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                stack.Pop();\n            }\n            else {\n                stack.Push(c);\n            }\n        }\n        return stack.Count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[2];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') brackets_count[0]++;\n            else if (brackets[i] == '>') brackets_count[1]++;\n        }\n        return brackets_count[0] == brackets_count[1];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5496c6f0b1e749ccb23db77a89c8cacd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5496c6f0b1e749ccb23db77a89c8cacd>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n        for (var i = 0; i < brackets.Length; i++) {\n            var c = brackets[i];\n            if (c == '<') {\n                stack.Push('>');\n            }\n            else if (c == '>') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                stack.Pop();\n            }\n        }\n        return stack.Count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0)\n            return true;\n        int openBrackets = 0;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<')\n                openBrackets++;\n            else if (brackets[i] == '>')\n                openBrackets--;\n            if (openBrackets < 0)\n                return false;\n        }\n        return openBrackets == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        bool seenOpen = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClose = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket\n        // that is not an opening bracket.\n        bool seenBadClose = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket\n        // that is not an opening bracket.\n        bool seenBadOpen = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket\n        // that is not an opening bracket.\n        bool seenBadClose2 = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket\n        // that is not an opening bracket.\n        bool seenBadOpen2 = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket\n        // that is not an opening bracket.\n        bool seenBadClose3 = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket\n        // that is not an opening bracket.\n        bool seenBadOpen3 = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket\n        // that is not an opening bracket.\n        bool seenBadClose4 = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket\n        // that is not an opening bracket.\n        bool seenBadOpen4 = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket\n        // that is not an opening bracket.\n        bool seenBadClose5 = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket\n        // that is not an opening bracket.\n        bool seenBadOpen5 = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket\n        // that is not an opening bracket.\n        bool seenBadClose6 = false;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpm33ujx4z.cs(23,14): warning CS0219: The variable 'seenOpen' is assigned but its value is never used\n/tmp/tmpm33ujx4z.cs(25,14): warning CS0219: The variable 'seenClose' is assigned but its value is never used\n/tmp/tmpm33ujx4z.cs(28,14): warning CS0219: The variable 'seenBadClose' is assigned but its value is never used\n/tmp/tmpm33ujx4z.cs(31,14): warning CS0219: The variable 'seenBadOpen' is assigned but its value is never used\n/tmp/tmpm33ujx4z.cs(34,14): warning CS0219: The variable 'seenBadClose2' is assigned but its value is never used\n/tmp/tmpm33ujx4z.cs(37,14): warning CS0219: The variable 'seenBadOpen2' is assigned but its value is never used\n/tmp/tmpm33ujx4z.cs(40,14): warning CS0219: The variable 'seenBadClose3' is assigned but its value is never used\n/tmp/tmpm33ujx4z.cs(43,14): warning CS0219: The variable 'seenBadOpen3' is assigned but its value is never used\n/tmp/tmpm33ujx4z.cs(46,14): warning CS0219: The variable 'seenBadClose4' is assigned but its value is never used\n/tmp/tmpm33ujx4z.cs(49,14): warning CS0219: The variable 'seenBadOpen4' is assigned but its value is never used\n/tmp/tmpm33ujx4z.cs(52,14): warning CS0219: The variable 'seenBadClose5' is assigned but its value is never used\n/tmp/tmpm33ujx4z.cs(55,14): warning CS0219: The variable 'seenBadOpen5' is assigned but its value is never used\n/tmp/tmpm33ujx4z.cs(58,14): warning CS0219: The variable 'seenBadClose6' is assigned but its value is never used\n/tmp/tmpm33ujx4z.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[256];\n        for (int i = 0; i < brackets.Length; i++) {\n            brackets_count[brackets[i]]++;\n        }\n        for (int i = 0; i < brackets_count.Length; i++) {\n            if (brackets_count[i] != 0 && brackets_count[i] != brackets.Length - 1) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b4f402b899a9491aa274dc11d84b87e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b4f402b899a9491aa274dc11d84b87e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // if (brackets.Length == 0) return true;\n        // if (brackets.Length == 1) return true;\n        // if (brackets.Length == 2) return true;\n        // if (brackets.Length == 3) return true;\n        // if (brackets.Length == 4) return true;\n        // if (brackets.Length == 5) return true;\n        // if (brackets.Length == 6) return true;\n        // if (brackets.Length == 7) return true;\n        // if (brackets.Length == 8) return true;\n        // if (brackets.Length == 9) return true;\n        // if (brackets.Length == 10) return true;\n        // if (brackets.Length == 11) return true;\n        // if (brackets.Length == 12) return true;\n        // if (brackets.Length == 13) return true;\n        // if (brackets.Length == 14) return true;\n        // if (brackets.Length == 15) return true;\n        // if (brackets.Length == 16) return true;\n        // if (brackets.Length == 17) return true;\n        // if (brackets.Length == 18) return true;\n        // if (brackets.Length == 19) return true;\n        // if (brackets.Length == 20) return true;\n        // if (brackets.Length == 21) return true;\n        // if (brackets.Length == 22) return true;\n        // if (brackets.Length == 23) return true;\n        // if (brackets.Length == 24) return true;\n        // if (brackets.Length == 25) return true;\n        // if (brackets.Length == 26) return true;\n        // if (brackets.Length == 27) return true;\n        // if (brackets.Length == 28) return true;\n        // if (brackets.Length == 29) return true;\n        // if (brackets.Length == 30) return true;\n        // if (brackets.Length == 31) return true;\n        // if (brackets.Length == 32) return true;\n        // if (brackets.Length == 33) return true;\n        //\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2574v41a.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[2];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') brackets_count[0]++;\n            else if (brackets[i] == '>') brackets_count[1]++;\n        }\n        return brackets_count[0] == brackets_count[1];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5496c6f0b1e749ccb23db77a89c8cacd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5496c6f0b1e749ccb23db77a89c8cacd>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[256];\n        for (int i = 0; i < brackets.Length; i++) {\n            brackets_count[brackets[i]]++;\n        }\n        for (int i = 0; i < brackets_count.Length; i++) {\n            if (brackets_count[i] != 0 && brackets_count[i] != brackets.Length - 1) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b4f402b899a9491aa274dc11d84b87e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b4f402b899a9491aa274dc11d84b87e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var bracketCount = 0;\n        for (var i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                bracketCount++;\n            }\n            else if (brackets[i] == '>') {\n                bracketCount--;\n            }\n        }\n        return bracketCount == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fcc73f4975564de49301804cda130f65>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fcc73f4975564de49301804cda130f65>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd0vavo4q.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(29,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpd0vavo4q.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(31,17): error CS0128: A local variable or function named 'inString' is already defined in this scope\n/tmp/tmpd0vavo4q.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(33,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpd0vavo4q.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(35,17): error CS0128: A local variable or function named 'inString' is already defined in this scope\n/tmp/tmpd0vavo4q.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(37,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpd0vavo4q.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(39,17): error CS0128:",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen.\n        Stack<char> stack = new Stack<char>();\n        // We'll also keep track of the number of brackets we've seen.\n        int bracketCount = 0;\n        // We'll also keep track of whether we've seen an opening bracket.\n        bool seenOpeningBracket = false;\n        // We'll also keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket = false;\n        // We'll also keep track of whether we've seen a closing bracket\n        // that is not an opening bracket.\n        bool seenNonOpeningBracket = false;\n        // We'll also keep track of whether we've seen an opening bracket\n        // that is not a closing bracket.\n        bool seenNonClosingBracket = false;\n        // We'll also keep track of whether we've seen a closing bracket\n        // that is not an opening bracket.\n        bool seenNonClosingBracket2 = false;\n        // We'll also keep track of whether we've seen a closing bracket\n        // that is not an opening bracket.\n        bool seenNonOpeningBracket2 = false;\n        // We'll also keep track of whether we've seen a closing bracket\n        // that is not an opening bracket.\n        bool seenNonClosingBracket3 = false;\n        // We'll also keep track of whether we've seen a closing bracket\n        // that is not an opening bracket.\n        bool seenNonOpeningBracket3 = false;\n        // We'll also keep track of whether we've seen a closing bracket\n        // that is not an opening bracket.\n        bool seenNonClosingBracket4 = false;\n        // We'll also keep track of whether we've seen a closing bracket\n        // that is not an opening bracket.\n        bool seenNonOpeningBracket4 = false;\n        // We'll also keep track of whether we've seen a closing bracket\n        // that is not an opening bracket.\n        bool seenNonClosingBracket5 = false;\n        // We'll also keep track of whether we've seen a closing bracket\n        // that is not an opening bracket.\n        bool seenNonOpeningBracket5 = false;\n        // We'll also keep track of whether we've seen a closing bracket\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpaqg6cwcl.cs(23,13): warning CS0219: The variable 'bracketCount' is assigned but its value is never used\n/tmp/tmpaqg6cwcl.cs(25,14): warning CS0219: The variable 'seenOpeningBracket' is assigned but its value is never used\n/tmp/tmpaqg6cwcl.cs(27,14): warning CS0219: The variable 'seenClosingBracket' is assigned but its value is never used\n/tmp/tmpaqg6cwcl.cs(30,14): warning CS0219: The variable 'seenNonOpeningBracket' is assigned but its value is never used\n/tmp/tmpaqg6cwcl.cs(33,14): warning CS0219: The variable 'seenNonClosingBracket' is assigned but its value is never used\n/tmp/tmpaqg6cwcl.cs(36,14): warning CS0219: The variable 'seenNonClosingBracket2' is assigned but its value is never used\n/tmp/tmpaqg6cwcl.cs(39,14): warning CS0219: The variable 'seenNonOpeningBracket2' is assigned but its value is never used\n/tmp/tmpaqg6cwcl.cs(42,14): warning CS0219: The variable 'seenNonClosingBracket3' is assigned but its value is never used\n/tmp/tmpaqg6cwcl.cs(45,14): warning CS0219: The variable 'seenNonOpeningBracket3' is assigned but its value is never used\n/tmp/tmpaqg6cwcl.cs(48,14): warning CS0219: The variable 'seenNonClosingBracket4' is assigned but its value is never used\n/tmp/tmpaqg6cwcl.cs(51,14): warning CS0219: The variable 'seenNonOpeningBracket4' is assigned but its value is never used\n/tmp/tmpaqg6cwcl.cs(54,14): warning CS0219: The variable 'seenNonClosingBracket5' is assigned but its value is never used\n/tmp/tmpaqg6cwcl.cs(57,14): warning CS0219: The variable 'seenNonOpeningBracket5' is assigned but its value is never used\n/tmp/tmpaqg6cwcl.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool leftFollowedByRight = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool rightFollowedByLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool leftFollowedByRightFollowedByLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool rightFollowedByLeftFollowedByRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool leftFollowedByRightFollowedByRight = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool rightFollowedByLeftFollowedByLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool rightFollowedByRightFollowedByRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool leftFollowedByRightFollowedByRight = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool rightFollowedByLeftFollowedByLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5swwe_sq.cs(49,14): error CS0128: A local variable or function named 'leftFollowedByRightFollowedByRight' is already defined in this scope\n/tmp/tmp5swwe_sq.cs(52,14): error CS0128: A local variable or function named 'rightFollowedByLeftFollowedByLeft' is already defined in this scope\n/tmp/tmp5swwe_sq.cs(23,14): warning CS0219: The variable 'left' is assigned but its value is never used\n/tmp/tmp5swwe_sq.cs(25,14): warning CS0219: The variable 'right' is assigned but its value is never used\n/tmp/tmp5swwe_sq.cs(28,14): warning CS0219: The variable 'leftFollowedByRight' is assigned but its value is never used\n/tmp/tmp5swwe_sq.cs(31,14): warning CS0219: The variable 'rightFollowedByLeft' is assigned but its value is never used\n/tmp/tmp5swwe_sq.cs(34,14): warning CS0219: The variable 'leftFollowedByRightFollowedByLeft' is assigned but its value is never used\n/tmp/tmp5swwe_sq.cs(37,14): warning CS0219: The variable 'rightFollowedByLeftFollowedByRight' is assigned but its value is never used\n/tmp/tmp5swwe_sq.cs(40,14): warning CS0219: The variable 'leftFollowedByRightFollowedByRight' is assigned but its value is never used\n/tmp/tmp5swwe_sq.cs(43,14): warning CS0219: The variable 'rightFollowedByLeftFollowedByLeft' is assigned but its value is never used\n/tmp/tmp5swwe_sq.cs(46,14): warning CS0219: The variable 'rightFollowedByRightFollowedByRight' is assigned but its value is never used\n/tmp/tmp5swwe_sq.cs(49,14): warning CS0219: The variable 'leftFollowedByRightFollowedByRight' is assigned but its value is never used\n/tmp/tmp5swwe_sq.cs(52,14): warning CS0219: The variable 'rightFollowedByLeftFollowedByLeft' is assigned but its value is never used\n/tmp/tmp5swwe_sq.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // If the string is empty, return true.\n        if (brackets.Length == 0)\n            return true;\n\n        // If the string is not empty, but does not contain any brackets, return false.\n        if (brackets.IndexOf(\"<\") == -1 && brackets.IndexOf(\">\") == -1)\n            return false;\n\n        // If the string contains only one bracket, return true.\n        if (brackets.Length == 1)\n            return true;\n\n        // If the string contains two brackets, return true if the first bracket is \"<\" and the second bracket is \">\".\n        if (brackets.IndexOf(\"<\") != -1 && brackets.IndexOf(\">\") != -1)\n            return true;\n\n        // If the string contains two brackets, return false if the first bracket is \">\" and the second bracket is \"<\".\n        if (brackets.IndexOf(\"<\") != -1 && brackets.IndexOf(\">\") != -1)\n            return false;\n\n        // If the string contains two brackets, return false if the first bracket is \"<\" and the second bracket is \">\".\n        if (brackets.IndexOf(\"<\") != -1 && brackets.IndexOf(\">\") != -1)\n            return false;\n\n        // If the string contains two brackets, return false if the first bracket is \">\" and the second bracket is \"<\".\n        if (brackets.IndexOf(\"<\") != -1 && brackets.IndexOf(\">\") != -1)\n            return false;\n\n        // If the string contains three brackets, return true if the first bracket is \"<\" and the second bracket is \">\",\n        // and the third bracket is \">\".\n        if (brackets.IndexOf(\"<\") != -1 && brackets.IndexOf(\">\") != -1 && brackets.IndexOf(\">\") != -1)\n            return true;\n\n        // If the string contains three brackets, return false if the first bracket is \">\" and the second bracket is \"<\",\n        // and the third bracket is \"<\".\n        if (brackets.IndexOf(\"<\") != -1 && brackets.IndexOf(\">\") != -1 && brackets.IndexOf(\"<\") != -1)\n            return false;\n\n        // If the string contains three brackets\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprff1l5mb.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Write your code here\n        int[] bracket_count = new int[brackets.Length];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                bracket_count[i] = 1;\n            }\n            else if (brackets[i] == '>') {\n                bracket_count[i] = -1;\n            }\n        }\n        for (int i = 0; i < brackets.Length; i++) {\n            if (bracket_count[i] == 1) {\n                for (int j = i + 1; j < brackets.Length; j++) {\n                    if (brackets[j] == '>') {\n                        bracket_count[j] = -1;\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < brackets.Length; i++) {\n            if (bracket_count[i] == -1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd75300a421d4dadb7f1cd2da4041e5c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd75300a421d4dadb7f1cd2da4041e5c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd0vavo4q.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(29,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpd0vavo4q.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(31,17): error CS0128: A local variable or function named 'inString' is already defined in this scope\n/tmp/tmpd0vavo4q.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(33,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpd0vavo4q.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(35,17): error CS0128: A local variable or function named 'inString' is already defined in this scope\n/tmp/tmpd0vavo4q.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(37,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpd0vavo4q.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(39,17): error CS0128:",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd0vavo4q.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(29,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpd0vavo4q.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(31,17): error CS0128: A local variable or function named 'inString' is already defined in this scope\n/tmp/tmpd0vavo4q.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(33,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpd0vavo4q.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(35,17): error CS0128: A local variable or function named 'inString' is already defined in this scope\n/tmp/tmpd0vavo4q.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(37,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpd0vavo4q.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(39,17): error CS0128:",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll also keep track of the opening bracket.\n        char openingBracket = ' ';\n        // We'll also keep track of the closing bracket.\n        char closingBracket = ' ';\n        // We'll also keep track of the number of brackets.\n        int numBrackets = 0;\n        // We'll also keep track of the number of opening brackets.\n        int numOpeningBrackets = 0;\n        // We'll also keep track of the number of closing brackets.\n        int numClosingBrackets = 0;\n        // We'll also keep track of the number of brackets that are not\n        // properly nested.\n        int numUnbalancedBrackets = 0;\n        // We'll also keep track of the number of opening brackets that are\n        // not properly nested.\n        int numUnbalancedOpeningBrackets = 0;\n        // We'll also keep track of the number of closing brackets that are\n        // not properly nested.\n        int numUnbalancedClosingBrackets = 0;\n        // We'll also keep track of the number of brackets that are not\n        // properly nested.\n        int numUnbalancedBrackets = 0;\n        // We'll also keep track of the number of opening brackets that are\n        // not properly nested.\n        int numUnbalancedOpeningBrackets = 0;\n        // We'll also keep track of the number of closing brackets that are\n        // not properly nested.\n        int numUnbalancedClosingBrackets = 0;\n        // We'll also keep track of the number of brackets that are not\n        // properly nested.\n        int numUnbalancedBrackets = 0;\n        // We'll also keep track of the number of opening brackets that are\n        // not properly nested.\n        int numUnbalancedOpeningBrackets = 0;\n        // We'll also keep track of the number of closing brackets that are\n        // not properly nested.\n        int numUnbalancedClosingBrackets = 0;\n        // We'll also keep track of the number of brackets that are not\n        // properly nested.\n        int numUnbalancedBrackets = 0;\n        // We'll also keep track of the number of opening brackets that are\n        //\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplq3cj0iu.cs(43,13): error CS0128: A local variable or function named 'numUnbalancedBrackets' is already defined in this scope\n/tmp/tmplq3cj0iu.cs(46,13): error CS0128: A local variable or function named 'numUnbalancedOpeningBrackets' is already defined in this scope\n/tmp/tmplq3cj0iu.cs(49,13): error CS0128: A local variable or function named 'numUnbalancedClosingBrackets' is already defined in this scope\n/tmp/tmplq3cj0iu.cs(52,13): error CS0128: A local variable or function named 'numUnbalancedBrackets' is already defined in this scope\n/tmp/tmplq3cj0iu.cs(55,13): error CS0128: A local variable or function named 'numUnbalancedOpeningBrackets' is already defined in this scope\n/tmp/tmplq3cj0iu.cs(58,13): error CS0128: A local variable or function named 'numUnbalancedClosingBrackets' is already defined in this scope\n/tmp/tmplq3cj0iu.cs(61,13): error CS0128: A local variable or function named 'numUnbalancedBrackets' is already defined in this scope\n/tmp/tmplq3cj0iu.cs(23,14): warning CS0219: The variable 'openingBracket' is assigned but its value is never used\n/tmp/tmplq3cj0iu.cs(25,14): warning CS0219: The variable 'closingBracket' is assigned but its value is never used\n/tmp/tmplq3cj0iu.cs(27,13): warning CS0219: The variable 'numBrackets' is assigned but its value is never used\n/tmp/tmplq3cj0iu.cs(29,13): warning CS0219: The variable 'numOpeningBrackets' is assigned but its value is never used\n/tmp/tmplq3cj0iu.cs(31,13): warning CS0219: The variable 'numClosingBrackets' is assigned but its value is never used\n/tmp/tmplq3cj0iu.cs(34,13): warning CS0219: The variable 'numUnbalancedBrackets' is assigned but its value is never used\n/tmp/tmplq3cj0iu.cs(37,13): warning CS0219: The variable 'numUnbalancedOpeningBrackets' is assigned but its value is never used\n/tmp/tmplq3cj0iu.cs(40,13): warning CS0219: The variable 'numUnbalancedClosingBrackets' is assigned but its value is never used\n/tm",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // if (brackets.Length == 0) return true;\n        // if (brackets.Length == 1) return true;\n        // if (brackets.Length == 2) return true;\n        // if (brackets.Length == 3) return true;\n        // if (brackets.Length == 4) return true;\n        // if (brackets.Length == 5) return true;\n        // if (brackets.Length == 6) return true;\n        // if (brackets.Length == 7) return true;\n        // if (brackets.Length == 8) return true;\n        // if (brackets.Length == 9) return true;\n        // if (brackets.Length == 10) return true;\n        // if (brackets.Length == 11) return true;\n        // if (brackets.Length == 12) return true;\n        // if (brackets.Length == 13) return true;\n        // if (brackets.Length == 14) return true;\n        // if (brackets.Length == 15) return true;\n        // if (brackets.Length == 16) return true;\n        // if (brackets.Length == 17) return true;\n        // if (brackets.Length == 18) return true;\n        // if (brackets.Length == 19) return true;\n        // if (brackets.Length == 20) return true;\n        // if (brackets.Length == 21) return true;\n        // if (brackets.Length == 22) return true;\n        // if (brackets.Length == 23) return true;\n        // if (brackets.Length == 24) return true;\n        // if (brackets.Length == 25) return true;\n        // if (brackets.Length == 26) return true;\n        // if (brackets.Length == 27) return true;\n        // if (brackets.Length == 28) return true;\n        // if (brackets.Length == 29) return true;\n        // if (brackets.Length == 30) return true;\n        // if (brackets.Length == 31) return true;\n        // if (brackets.Length == 32) return true;\n        // if (brackets.Length == 33) return true;\n        //\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2574v41a.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsq8mnblh.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpsq8mnblh.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpsq8mnblh.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpsq8mnblh.cs(29,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpsq8mnblh.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpsq8mnblh.cs(31,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpsq8mnblh.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpsq8mnblh.cs(33,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpsq8mnblh.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpsq8mnblh.cs(35,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpsq8mnblh.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpsq8mnblh.cs(37,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpsq8mnblh.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpsq8mnblh.cs(39,17): error CS012",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen so far.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets we've seen so far.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we've seen a matching pair of brackets.\n        bool matched = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool closing = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        bool opening = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool closing2 = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        bool opening2 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool closing3 = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        bool opening3 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool closing4 = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        bool opening4 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool closing5 = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        bool opening5 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool closing6 = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        bool opening6 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool closing7 = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        bool opening7 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool closing8\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnn26y3rg.cs(55,22): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[2];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') brackets_count[0]++;\n            else if (brackets[i] == '>') brackets_count[1]++;\n        }\n        return brackets_count[0] == brackets_count[1];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5496c6f0b1e749ccb23db77a89c8cacd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5496c6f0b1e749ccb23db77a89c8cacd>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight = false;\n        // We'll use\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpde6j49zr.cs(29,14): error CS0128: A local variable or function named 'seenLeft' is already defined in this scope\n/tmp/tmpde6j49zr.cs(31,14): error CS0128: A local variable or function named 'seenRight' is already defined in this scope\n/tmp/tmpde6j49zr.cs(33,14): error CS0128: A local variable or function named 'seenLeft' is already defined in this scope\n/tmp/tmpde6j49zr.cs(35,14): error CS0128: A local variable or function named 'seenRight' is already defined in this scope\n/tmp/tmpde6j49zr.cs(37,14): error CS0128: A local variable or function named 'seenLeft' is already defined in this scope\n/tmp/tmpde6j49zr.cs(39,14): error CS0128: A local variable or function named 'seenRight' is already defined in this scope\n/tmp/tmpde6j49zr.cs(41,14): error CS0128: A local variable or function named 'seenLeft' is already defined in this scope\n/tmp/tmpde6j49zr.cs(43,14): error CS0128: A local variable or function named 'seenRight' is already defined in this scope\n/tmp/tmpde6j49zr.cs(45,14): error CS0128: A local variable or function named 'seenLeft' is already defined in this scope\n/tmp/tmpde6j49zr.cs(47,14): error CS0128: A local variable or function named 'seenRight' is already defined in this scope\n/tmp/tmpde6j49zr.cs(49,14): error CS0128: A local variable or function named 'seenLeft' is already defined in this scope\n/tmp/tmpde6j49zr.cs(51,14): error CS0128: A local variable or function named 'seenRight' is already defined in this scope\n/tmp/tmpde6j49zr.cs(53,14): error CS0128: A local variable or function named 'seenLeft' is already defined in this scope\n/tmp/tmpde6j49zr.cs(55,14): error CS0128: A local variable or function named 'seenRight' is already defined in this scope\n/tmp/tmpde6j49zr.cs(25,14): warning CS0219: The variable 'seenLeft' is assigned but its value is never used\n/tmp/tmpde6j49zr.cs(27,14): warning CS0219: The variable 'seenRight' is assigned but its value is never used\n/tm",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n        for (var i = 0; i < brackets.Length; i++) {\n            var c = brackets[i];\n            if (c == '<') {\n                stack.Push('>');\n            }\n            else if (c == '>') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                stack.Pop();\n            }\n            else {\n                stack.Push(c);\n            }\n        }\n        return stack.Count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left2 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right2 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left3 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right3 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left4 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right4 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left5 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right5 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left6 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right6 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left7 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right7 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left8 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right8 = false;\n        // We'll use a boolean\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvs1595a4.cs(25,14): warning CS0219: The variable 'left' is assigned but its value is never used\n/tmp/tmpvs1595a4.cs(27,14): warning CS0219: The variable 'right' is assigned but its value is never used\n/tmp/tmpvs1595a4.cs(29,14): warning CS0219: The variable 'left2' is assigned but its value is never used\n/tmp/tmpvs1595a4.cs(31,14): warning CS0219: The variable 'right2' is assigned but its value is never used\n/tmp/tmpvs1595a4.cs(33,14): warning CS0219: The variable 'left3' is assigned but its value is never used\n/tmp/tmpvs1595a4.cs(35,14): warning CS0219: The variable 'right3' is assigned but its value is never used\n/tmp/tmpvs1595a4.cs(37,14): warning CS0219: The variable 'left4' is assigned but its value is never used\n/tmp/tmpvs1595a4.cs(39,14): warning CS0219: The variable 'right4' is assigned but its value is never used\n/tmp/tmpvs1595a4.cs(41,14): warning CS0219: The variable 'left5' is assigned but its value is never used\n/tmp/tmpvs1595a4.cs(43,14): warning CS0219: The variable 'right5' is assigned but its value is never used\n/tmp/tmpvs1595a4.cs(45,14): warning CS0219: The variable 'left6' is assigned but its value is never used\n/tmp/tmpvs1595a4.cs(47,14): warning CS0219: The variable 'right6' is assigned but its value is never used\n/tmp/tmpvs1595a4.cs(49,14): warning CS0219: The variable 'left7' is assigned but its value is never used\n/tmp/tmpvs1595a4.cs(51,14): warning CS0219: The variable 'right7' is assigned but its value is never used\n/tmp/tmpvs1595a4.cs(53,14): warning CS0219: The variable 'left8' is assigned but its value is never used\n/tmp/tmpvs1595a4.cs(55,14): warning CS0219: The variable 'right8' is assigned but its value is never used\n/tmp/tmpvs1595a4.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool leftRight = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool rightLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool leftRightRight = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool rightLeftRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool leftRightRight = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool rightLeftLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool rightRightLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool leftRightLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool rightRightRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool leftRightRight = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool rightLeftRight = false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkzb1u5q8.cs(40,14): error CS0128: A local variable or function named 'leftRightRight' is already defined in this scope\n/tmp/tmpkzb1u5q8.cs(55,14): error CS0128: A local variable or function named 'leftRightRight' is already defined in this scope\n/tmp/tmpkzb1u5q8.cs(58,14): error CS0128: A local variable or function named 'rightLeftRight' is already defined in this scope\n/tmp/tmpkzb1u5q8.cs(23,14): warning CS0219: The variable 'left' is assigned but its value is never used\n/tmp/tmpkzb1u5q8.cs(25,14): warning CS0219: The variable 'right' is assigned but its value is never used\n/tmp/tmpkzb1u5q8.cs(28,14): warning CS0219: The variable 'leftRight' is assigned but its value is never used\n/tmp/tmpkzb1u5q8.cs(31,14): warning CS0219: The variable 'rightLeft' is assigned but its value is never used\n/tmp/tmpkzb1u5q8.cs(34,14): warning CS0219: The variable 'leftRightRight' is assigned but its value is never used\n/tmp/tmpkzb1u5q8.cs(37,14): warning CS0219: The variable 'rightLeftRight' is assigned but its value is never used\n/tmp/tmpkzb1u5q8.cs(40,14): warning CS0219: The variable 'leftRightRight' is assigned but its value is never used\n/tmp/tmpkzb1u5q8.cs(43,14): warning CS0219: The variable 'rightLeftLeft' is assigned but its value is never used\n/tmp/tmpkzb1u5q8.cs(46,14): warning CS0219: The variable 'rightRightLeft' is assigned but its value is never used\n/tmp/tmpkzb1u5q8.cs(49,14): warning CS0219: The variable 'leftRightLeft' is assigned but its value is never used\n/tmp/tmpkzb1u5q8.cs(52,14): warning CS0219: The variable 'rightRightRight' is assigned but its value is never used\n/tmp/tmpkzb1u5q8.cs(55,14): warning CS0219: The variable 'leftRightRight' is assigned but its value is never used\n/tmp/tmpkzb1u5q8.cs(58,14): warning CS0219: The variable 'rightLeftRight' is assigned but its value is never used\n/tmp/tmpkzb1u5q8.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all c",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen.\n        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < brackets.Length; i++) {\n            char c = brackets[i];\n            if (c == '<') {\n                stack.Push('>');\n            }\n            else if (c == '>') {\n                if (stack.IsEmpty()) {\n                    return false;\n                }\n                else {\n                    stack.Pop();\n                }\n            }\n        }\n        return stack.IsEmpty();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpccxv2grn.cs(28,27): error CS1061: 'Stack<char>' does not contain a definition for 'IsEmpty' and no accessible extension method 'IsEmpty' accepting a first argument of type 'Stack<char>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpccxv2grn.cs(36,22): error CS1061: 'Stack<char>' does not contain a definition for 'IsEmpty' and no accessible extension method 'IsEmpty' accepting a first argument of type 'Stack<char>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        int[] bracket_stack = new int[100];\n        int bracket_count = 0;\n        for (int i = 0; i < brackets.Length; i++) {\n            char c = brackets[i];\n            if (c == '<') {\n                bracket_stack[bracket_count++] = i;\n            }\n            else if (c == '>') {\n                if (bracket_count == 0) {\n                    return false;\n                }\n                bracket_count--;\n                int start = bracket_stack[bracket_count];\n                int end = i;\n                if (start > end) {\n                    int temp = start;\n                    start = end;\n                    end = temp;\n                }\n                for (int j = start + 1; j < end; j++) {\n                    if (brackets[j] != '<') {\n                        return false;\n                    }\n                }\n            }\n        }\n        if (bracket_count != 0) {\n            return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <927690e258c946ca8e52522f461289f1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <927690e258c946ca8e52522f461289f1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a boolean to keep track of whether we're in a string or not.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment2 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment3 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment4 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment5 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment6 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment7 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment8 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment9 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment10 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment11 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment12 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment13 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment14 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphvuty6ck.cs(23,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphvuty6ck.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphvuty6ck.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphvuty6ck.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphvuty6ck.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphvuty6ck.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphvuty6ck.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphvuty6ck.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphvuty6ck.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphvuty6ck.cs(41,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphvuty6ck.cs(43,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphvuty6ck.cs(45,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphvuty",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left2 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right2 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left3 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right3 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left4 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right4 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left5 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right5 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left6 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right6 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left7 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right7 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left8 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right8 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left9 = false;\n        // We'll use a\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpi3ij9460.cs(23,14): warning CS0219: The variable 'left' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(25,14): warning CS0219: The variable 'right' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(27,14): warning CS0219: The variable 'left2' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(29,14): warning CS0219: The variable 'right2' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(31,14): warning CS0219: The variable 'left3' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(33,14): warning CS0219: The variable 'right3' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(35,14): warning CS0219: The variable 'left4' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(37,14): warning CS0219: The variable 'right4' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(39,14): warning CS0219: The variable 'left5' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(41,14): warning CS0219: The variable 'right5' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(43,14): warning CS0219: The variable 'left6' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(45,14): warning CS0219: The variable 'right6' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(47,14): warning CS0219: The variable 'left7' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(49,14): warning CS0219: The variable 'right7' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(51,14): warning CS0219: The variable 'left8' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(53,14): warning CS0219: The variable 'right8' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(55,14): warning CS0219: The variable 'left9' is assigned but its value is never used\n/tmp/tmpi3ij9460.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen.\n        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < brackets.Length; i++) {\n            char c = brackets[i];\n            if (c == '<') {\n                stack.Push('>');\n            }\n            else if (c == '>') {\n                if (stack.IsEmpty()) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (top != '<') {\n                    return false;\n                }\n            }\n            else {\n                stack.Push(c);\n            }\n        }\n        return stack.IsEmpty();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbmgts6y2.cs(28,27): error CS1061: 'Stack<char>' does not contain a definition for 'IsEmpty' and no accessible extension method 'IsEmpty' accepting a first argument of type 'Stack<char>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpbmgts6y2.cs(40,22): error CS1061: 'Stack<char>' does not contain a definition for 'IsEmpty' and no accessible extension method 'IsEmpty' accepting a first argument of type 'Stack<char>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a boolean to keep track of whether we're in a string or not.\n        bool inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool in\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpo96xyffc.cs(57,14): error CS1001: Identifier expected\n/tmp/tmpo96xyffc.cs(57,14): error CS1003: Syntax error, ',' expected\n/tmp/tmpo96xyffc.cs(57,16): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n        for (var i = 0; i < brackets.Length; i++) {\n            var c = brackets[i];\n            if (c == '<') {\n                stack.Push('>');\n            }\n            else if (c == '>') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                stack.Pop();\n            }\n        }\n        return stack.Count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var openingBrackets = new ArrayList<char>();\n        var closingBrackets = new ArrayList<char>();\n        for (var i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                openingBrackets.Add(brackets[i]);\n            }\n            else if (brackets[i] == '>') {\n                closingBrackets.Add(brackets[i]);\n            }\n        }\n        if (openingBrackets.Count == 0) {\n            return true;\n        }\n        if (openingBrackets.Count != closingBrackets.Count) {\n            return false;\n        }\n        for (var i = 0; i < openingBrackets.Count; i++) {\n            if (openingBrackets[i] != closingBrackets[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcdllz99l.cs(20,35): error CS0246: The type or namespace name 'ArrayList<>' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpcdllz99l.cs(21,35): error CS0246: The type or namespace name 'ArrayList<>' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpcdllz99l.cs(30,13): error CS0019: Operator '==' cannot be applied to operands of type 'method group' and 'int'\n/tmp/tmpcdllz99l.cs(33,13): error CS0019: Operator '!=' cannot be applied to operands of type 'method group' and 'method group'\n/tmp/tmpcdllz99l.cs(36,25): error CS0019: Operator '<' cannot be applied to operands of type 'int' and 'method group'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool seenLeftRight = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool seenRightLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool seenLeftRightRight = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool seenRightLeftRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool seenLeftRightLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool seenRightLeftLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool seenLeftRightLeftLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool seenRightLeftLeftLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool seenLeftRightLeftRight = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool seenRightLeftLeftRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp737v7kpm.cs(23,14): warning CS0219: The variable 'seenLeft' is assigned but its value is never used\n/tmp/tmp737v7kpm.cs(25,14): warning CS0219: The variable 'seenRight' is assigned but its value is never used\n/tmp/tmp737v7kpm.cs(28,14): warning CS0219: The variable 'seenLeftRight' is assigned but its value is never used\n/tmp/tmp737v7kpm.cs(31,14): warning CS0219: The variable 'seenRightLeft' is assigned but its value is never used\n/tmp/tmp737v7kpm.cs(34,14): warning CS0219: The variable 'seenLeftRightRight' is assigned but its value is never used\n/tmp/tmp737v7kpm.cs(37,14): warning CS0219: The variable 'seenRightLeftRight' is assigned but its value is never used\n/tmp/tmp737v7kpm.cs(40,14): warning CS0219: The variable 'seenLeftRightLeft' is assigned but its value is never used\n/tmp/tmp737v7kpm.cs(43,14): warning CS0219: The variable 'seenRightLeftLeft' is assigned but its value is never used\n/tmp/tmp737v7kpm.cs(46,14): warning CS0219: The variable 'seenLeftRightLeftLeft' is assigned but its value is never used\n/tmp/tmp737v7kpm.cs(49,14): warning CS0219: The variable 'seenRightLeftLeftLeft' is assigned but its value is never used\n/tmp/tmp737v7kpm.cs(52,14): warning CS0219: The variable 'seenLeftRightLeftRight' is assigned but its value is never used\n/tmp/tmp737v7kpm.cs(55,14): warning CS0219: The variable 'seenRightLeftLeftRight' is assigned but its value is never used\n/tmp/tmp737v7kpm.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a boolean to keep track of whether we're in a string or not.\n        bool inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment2 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment3 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment4 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment5 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment6 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment7 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment8 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment9 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment10 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment11 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment12 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment13 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment14 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment15 = false;\n        // We'll use\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpr8uc8hq1.cs(23,14): warning CS0219: The variable 'inString' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(25,14): warning CS0219: The variable 'inComment' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(27,14): warning CS0219: The variable 'inComment2' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(29,14): warning CS0219: The variable 'inComment3' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(31,14): warning CS0219: The variable 'inComment4' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(33,14): warning CS0219: The variable 'inComment5' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(35,14): warning CS0219: The variable 'inComment6' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(37,14): warning CS0219: The variable 'inComment7' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(39,14): warning CS0219: The variable 'inComment8' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(41,14): warning CS0219: The variable 'inComment9' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(43,14): warning CS0219: The variable 'inComment10' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(45,14): warning CS0219: The variable 'inComment11' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(47,14): warning CS0219: The variable 'inComment12' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(49,14): warning CS0219: The variable 'inComment13' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(51,14): warning CS0219: The variable 'inComment14' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(53,14): warning CS0219: The variable 'inComment15' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen so far.\n        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < brackets.Length; i++) {\n            char c = brackets[i];\n            if (c == '<') {\n                stack.Push('>');\n            }\n            else if (c == '>') {\n                if (stack.IsEmpty()) {\n                    return false;\n                }\n                else {\n                    stack.Pop();\n                }\n            }\n            else {\n                stack.Push(c);\n            }\n        }\n        return stack.IsEmpty();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphdsw1mwq.cs(28,27): error CS1061: 'Stack<char>' does not contain a definition for 'IsEmpty' and no accessible extension method 'IsEmpty' accepting a first argument of type 'Stack<char>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphdsw1mwq.cs(39,22): error CS1061: 'Stack<char>' does not contain a definition for 'IsEmpty' and no accessible extension method 'IsEmpty' accepting a first argument of type 'Stack<char>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[256];\n        for (int i = 0; i < brackets.Length; i++) {\n            brackets_count[brackets[i]]++;\n        }\n        for (int i = 0; i < 256; i++) {\n            if (brackets_count[i] > 0 && brackets_count[i] != brackets.Length - 1)\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293425,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3faf7066333a4bf4ad75ca871cabe842>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3faf7066333a4bf4ad75ca871cabe842>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n        for (var i = 0; i < brackets.Length; i++) {\n            var c = brackets[i];\n            if (c == '<') {\n                stack.Push('>');\n            }\n            else if (c == '>') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                stack.Pop();\n            }\n            else {\n                stack.Push(c);\n            }\n        }\n        return stack.Count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen.\n        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < brackets.Length; i++) {\n            char c = brackets[i];\n            if (c == '<') {\n                stack.Push('>');\n            }\n            else if (c == '>') {\n                if (stack.Peek() == '<') {\n                    stack.Pop();\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a341924c0c3b482eb0c81f531c5d6ebd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a341924c0c3b482eb0c81f531c5d6ebd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen.\n        Stack<char> stack = new Stack<char>();\n        // We'll also use a queue to keep track of the brackets we've seen.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight = false\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvhl1fugq.cs(55,31): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[2];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                brackets_count[0]++;\n            }\n            else if (brackets[i] == '>') {\n                brackets_count[1]++;\n            }\n        }\n        return brackets_count[0] == brackets_count[1];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2e419119c08f47d390669616bf144411>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2e419119c08f47d390669616bf144411>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n        for (var i = 0; i < brackets.Length; i++) {\n            var c = brackets[i];\n            if (c == '<') {\n                stack.Push('>');\n            }\n            else if (c == '>') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                stack.Pop();\n            }\n            else {\n                stack.Push(c);\n            }\n        }\n        return stack.Count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n        for (var i = 0; i < brackets.Length; i++) {\n            var c = brackets[i];\n            if (c == '<') {\n                stack.Push('>');\n            }\n            else if (c == '>') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                stack.Pop();\n            }\n        }\n        return stack.Count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0)\n            return true;\n        int[] bracketCount = new int[2];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<')\n                bracketCount[0]++;\n            else if (brackets[i] == '>')\n                bracketCount[1]++;\n        }\n        if (bracketCount[0] != bracketCount[1])\n            return false;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                if (i + 1 < brackets.Length && brackets[i + 1] == '>')\n                    return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b1e6f45bd0ab4dbb934325cfb233e08d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b1e6f45bd0ab4dbb934325cfb233e08d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n        for (var i = 0; i < brackets.Length; i++) {\n            var c = brackets[i];\n            if (c == '<') {\n                stack.Push('>');\n            }\n            else if (c == '>') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                stack.Pop();\n            }\n            else {\n                stack.Push(c);\n            }\n        }\n        return stack.Count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n        for (var i = 0; i < brackets.Length; i++) {\n            var c = brackets[i];\n            if (c == '<') {\n                stack.Push('>');\n            }\n            else if (c == '>') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                stack.Pop();\n            }\n            else {\n                stack.Push(c);\n            }\n        }\n        return stack.Count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        int[] brackets_count = new int[2];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                brackets_count[0]++;\n            }\n            else if (brackets[i] == '>') {\n                brackets_count[1]++;\n            }\n        }\n        return brackets_count[0] == brackets_count[1];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9efe734a5236403ba73d92f56eff3ff1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9efe734a5236403ba73d92f56eff3ff1>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We will use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We will use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We will use a boolean to keep track of whether we are in a string.\n        boolean inString = false;\n        // We will use a boolean to keep track of whether we are in a comment.\n        boolean inComment = false;\n        // We will use a boolean to keep track of whether we are in a comment.\n        boolean inComment = false;\n        // We will use a boolean to keep track of whether we are in a comment.\n        boolean inComment = false;\n        // We will use a boolean to keep track of whether we are in a comment.\n        boolean inComment = false;\n        // We will use a boolean to keep track of whether we are in a comment.\n        boolean inComment = false;\n        // We will use a boolean to keep track of whether we are in a comment.\n        boolean inComment = false;\n        // We will use a boolean to keep track of whether we are in a comment.\n        boolean inComment = false;\n        // We will use a boolean to keep track of whether we are in a comment.\n        boolean inComment = false;\n        // We will use a boolean to keep track of whether we are in a comment.\n        boolean inComment = false;\n        // We will use a boolean to keep track of whether we are in a comment.\n        boolean inComment = false;\n        // We will use a boolean to keep track of whether we are in a comment.\n        boolean inComment = false;\n        // We will use a boolean to keep track of whether we are in a comment.\n        boolean inComment = false;\n        // We will use a boolean to keep track of whether we are in a comment.\n        boolean inComment = false;\n        // We will use a boolean to keep track of whether we are in a comment.\n        boolean inComment = false;\n        // We will use a boolean to keep track of whether we are in a comment.\n        boolean inComment = false;\n        // We will use\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprhhioy16.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmprhhioy16.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmprhhioy16.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmprhhioy16.cs(29,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmprhhioy16.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmprhhioy16.cs(31,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmprhhioy16.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmprhhioy16.cs(33,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmprhhioy16.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmprhhioy16.cs(35,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmprhhioy16.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmprhhioy16.cs(37,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmprhhioy16.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmprhhioy16.cs(39,17): error CS012",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] bracket_count = new int[2];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') bracket_count[0]++;\n            else if (brackets[i] == '>') bracket_count[1]++;\n        }\n        if (bracket_count[0] != bracket_count[1]) return false;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                if (i + 1 < brackets.Length && brackets[i + 1] == '>') continue;\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8e481dc1b1be4e57bc0829f3c3307153>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8e481dc1b1be4e57bc0829f3c3307153>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Complete this function\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnpndtx1e.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen so far.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets we've seen so far.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        bool seenOpen = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClose = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenOrClose = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseOrOpen = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenOrCloseOrClose = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseOrOpenOrClose = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseOrCloseOrOpen = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseOrCloseOrOpenOrClose = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseOrCloseOrOpenOrCloseOrOpen = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseOrCloseOrOpenOrCloseOrOpenOrClose = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseOrCloseOrOpenOrCloseOrOpenOrCloseOrOpen = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseOrCloseOrOpenOrCloseOrOpenOrCloseOrOpenOrClose = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseOrCloseOrOpenOrCloseOrOpenOrCloseOrOpenOrCloseOrOpen =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpe3vxhtaf.cs(49,77): error CS1525: Invalid expression term '}'\n/tmp/tmpe3vxhtaf.cs(49,77): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0)\n            return true;\n        int openBrackets = 0;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<')\n                openBrackets++;\n            else if (brackets[i] == '>')\n                openBrackets--;\n        }\n        return openBrackets == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <04b106ee1d4e4f18b415fa093afdbb61>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <04b106ee1d4e4f18b415fa093afdbb61>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a boolean to keep track of whether we're inside a\n        // bracket pair.\n        bool inBracket = false;\n        // We'll use a boolean to keep track of whether we're inside a\n        // comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're inside a\n        // string.\n        bool inString = false;\n        // We'll use a boolean to keep track of whether we're inside a\n        // string.\n        bool inChar = false;\n        // We'll use a boolean to keep track of whether we're inside a\n        // string.\n        bool inChar2 = false;\n        // We'll use a boolean to keep track of whether we're inside a\n        // string.\n        bool inChar3 = false;\n        // We'll use a boolean to keep track of whether we're inside a\n        // string.\n        bool inChar4 = false;\n        // We'll use a boolean to keep track of whether we're inside a\n        // string.\n        bool inChar5 = false;\n        // We'll use a boolean to keep track of whether we're inside a\n        // string.\n        bool inChar6 = false;\n        // We'll use a boolean to keep track of whether we're inside a\n        // string.\n        bool inChar7 = false;\n        // We'll use a boolean to keep track of whether we're inside a\n        // string.\n        bool inChar8 = false;\n        // We'll use a boolean to keep track of whether we're inside a\n        // string.\n        bool inChar9 = false;\n        // We'll use a boolean to keep track of whether we're inside a\n        // string.\n        bool inChar10 = false;\n        // We'll use a boolean to keep track of whether we're inside a\n        // string.\n        bool inChar11 = false;\n        // We'll use a boolean to keep track of whether we're inside a\n        // string.\n        bool inChar12 = false;\n        // We'll use a boolean to keep track of whether we're inside a\n        // string\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_xcvxtk4.cs(24,14): warning CS0219: The variable 'inBracket' is assigned but its value is never used\n/tmp/tmp_xcvxtk4.cs(27,14): warning CS0219: The variable 'inComment' is assigned but its value is never used\n/tmp/tmp_xcvxtk4.cs(30,14): warning CS0219: The variable 'inString' is assigned but its value is never used\n/tmp/tmp_xcvxtk4.cs(33,14): warning CS0219: The variable 'inChar' is assigned but its value is never used\n/tmp/tmp_xcvxtk4.cs(36,14): warning CS0219: The variable 'inChar2' is assigned but its value is never used\n/tmp/tmp_xcvxtk4.cs(39,14): warning CS0219: The variable 'inChar3' is assigned but its value is never used\n/tmp/tmp_xcvxtk4.cs(42,14): warning CS0219: The variable 'inChar4' is assigned but its value is never used\n/tmp/tmp_xcvxtk4.cs(45,14): warning CS0219: The variable 'inChar5' is assigned but its value is never used\n/tmp/tmp_xcvxtk4.cs(48,14): warning CS0219: The variable 'inChar6' is assigned but its value is never used\n/tmp/tmp_xcvxtk4.cs(51,14): warning CS0219: The variable 'inChar7' is assigned but its value is never used\n/tmp/tmp_xcvxtk4.cs(54,14): warning CS0219: The variable 'inChar8' is assigned but its value is never used\n/tmp/tmp_xcvxtk4.cs(57,14): warning CS0219: The variable 'inChar9' is assigned but its value is never used\n/tmp/tmp_xcvxtk4.cs(60,14): warning CS0219: The variable 'inChar10' is assigned but its value is never used\n/tmp/tmp_xcvxtk4.cs(63,14): warning CS0219: The variable 'inChar11' is assigned but its value is never used\n/tmp/tmp_xcvxtk4.cs(66,14): warning CS0219: The variable 'inChar12' is assigned but its value is never used\n/tmp/tmp_xcvxtk4.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We use a boolean to keep track of whether we have an open bracket.\n        boolean open = false;\n        // We use a boolean to keep track of whether we have a closing bracket.\n        boolean close = false;\n        // We use a boolean to keep track of whether we have a closing bracket.\n        boolean close2 = false;\n        // We use a boolean to keep track of whether we have a closing bracket.\n        boolean close3 = false;\n        // We use a boolean to keep track of whether we have a closing bracket.\n        boolean close4 = false;\n        // We use a boolean to keep track of whether we have a closing bracket.\n        boolean close5 = false;\n        // We use a boolean to keep track of whether we have a closing bracket.\n        boolean close6 = false;\n        // We use a boolean to keep track of whether we have a closing bracket.\n        boolean close7 = false;\n        // We use a boolean to keep track of whether we have a closing bracket.\n        boolean close8 = false;\n        // We use a boolean to keep track of whether we have a closing bracket.\n        boolean close9 = false;\n        // We use a boolean to keep track of whether we have a closing bracket.\n        boolean close10 = false;\n        // We use a boolean to keep track of whether we have a closing bracket.\n        boolean close11 = false;\n        // We use a boolean to keep track of whether we have a closing bracket.\n        boolean close12 = false;\n        // We use a boolean to keep track of whether we have a closing bracket.\n        boolean close13 = false;\n        // We use a boolean to keep track of whether we have a closing bracket.\n        boolean close14 = false;\n        // We use a boolean to keep track of whether we have a closing bracket.\n        boolean close15 = false;\n        // We use a boolean to keep track of whether we have a closing bracket.\n        boolean close16 = false;\n        // We use a boolean to keep track of whether we have a closing bracket.\n        boolean close17 = false;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuk23bmkw.cs(23,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpuk23bmkw.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpuk23bmkw.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpuk23bmkw.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpuk23bmkw.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpuk23bmkw.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpuk23bmkw.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpuk23bmkw.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpuk23bmkw.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpuk23bmkw.cs(41,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpuk23bmkw.cs(43,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpuk23bmkw.cs(45,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpuk23b",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll also use a boolean to keep track of whether we're in a string.\n        // (We'll use this to make sure that we don't close the string prematurely.)\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        // (We'll use this to make sure that we don't close the comment prematurely.)\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        // (We'll use this to make sure that we don't close the comment prematurely.)\n        boolean inComment2 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        // (We'll use this to make sure that we don't close the comment prematurely.)\n        boolean inComment3 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        // (We'll use this to make sure that we don't close the comment prematurely.)\n        boolean inComment4 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        // (We'll use this to make sure that we don't close the comment prematurely.)\n        boolean inComment5 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        // (We'll use this to make sure that we don't close the comment prematurely.)\n        boolean inComment6 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        // (We'll use this to make sure that we don't close the comment prematurely.)\n        boolean inComment7 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        // (We'll use this to make sure that we don't close the comment prematurely.)\n        boolean inComment8 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        // (We'll use this to make sure that we don't close the comment prematurely.)\n        boolean in\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvevt40wz.cs(51,17): error CS1002: ; expected\n/tmp/tmpvevt40wz.cs(51,17): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Write your code here\n        if (brackets.Length == 0)\n            return true;\n        if (brackets.Length == 1)\n            return brackets[0] == '<';\n        if (brackets.Length == 2)\n            return brackets[0] == '<' && brackets[1] == '>';\n        if (brackets.Length == 3)\n            return brackets[0] == '<' && brackets[1] == '>' && brackets[2] == '>';\n        if (brackets.Length == 4)\n            return brackets[0] == '<' && brackets[1] == '>' && brackets[2] == '>' && brackets[3] == '>';\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b3c008ee9e004a56bfacaefbc105c619>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b3c008ee9e004a56bfacaefbc105c619>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Write your code here\n        int[] brackets_count = new int[256];\n        for (int i = 0; i < brackets.Length; i++) {\n            brackets_count[brackets[i]]++;\n        }\n        for (int i = 0; i < 256; i++) {\n            if (brackets_count[i] != 0 && brackets_count[i] != brackets.Length - 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <46de4b759ac94ea0978fca948a409a36>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <46de4b759ac94ea0978fca948a409a36>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int openBrackets = 0;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                openBrackets++;\n            }\n            else if (brackets[i] == '>') {\n                openBrackets--;\n            }\n        }\n        return openBrackets == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c76b9a83273943dbad74728284af9073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c76b9a83273943dbad74728284af9073>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Write your code here\n        if (brackets.Length == 0)\n            return true;\n        if (brackets.Length == 1)\n            return true;\n        if (brackets.Length == 2)\n            return brackets[0] == '<' && brackets[1] == '>';\n        if (brackets[0] == '<') {\n            int count = 0;\n            for (int i = 1; i < brackets.Length; i++) {\n                if (brackets[i] == '<')\n                    count++;\n                else if (brackets[i] == '>')\n                    count--;\n                if (count < 0)\n                    return false;\n            }\n            return count == 0;\n        }\n        if (brackets[brackets.Length - 1] == '>') {\n            int count = 0;\n            for (int i = 0; i < brackets.Length - 1; i++) {\n                if (brackets[i] == '<')\n                    count++;\n                else if (brackets[i] == '>')\n                    count--;\n                if (count < 0)\n                    return false;\n            }\n            return count == 0;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7cddf461a8c1463383daea8bfe270581>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7cddf461a8c1463383daea8bfe270581>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // if (brackets.Length == 0) return true;\n        // if (brackets.Length == 1) return true;\n        // if (brackets.Length == 2) return true;\n        // if (brackets.Length == 3) return true;\n        // if (brackets.Length == 4) return true;\n        // if (brackets.Length == 5) return true;\n        // if (brackets.Length == 6) return true;\n        // if (brackets.Length == 7) return true;\n        // if (brackets.Length == 8) return true;\n        // if (brackets.Length == 9) return true;\n        // if (brackets.Length == 10) return true;\n        // if (brackets.Length == 11) return true;\n        // if (brackets.Length == 12) return true;\n        // if (brackets.Length == 13) return true;\n        // if (brackets.Length == 14) return true;\n        // if (brackets.Length == 15) return true;\n        // if (brackets.Length == 16) return true;\n        // if (brackets.Length == 17) return true;\n        // if (brackets.Length == 18) return true;\n        // if (brackets.Length == 19) return true;\n        // if (brackets.Length == 20) return true;\n        // if (brackets.Length == 21) return true;\n        // if (brackets.Length == 22) return true;\n        // if (brackets.Length == 23) return true;\n        // if (brackets.Length == 24) return true;\n        // if (brackets.Length == 25) return true;\n        // if (brackets.Length == 26) return true;\n        // if (brackets.Length == 27) return true;\n        // if (brackets.Length == 28) return true;\n        // if (brackets.Length == 29) return true;\n        // if (brackets.Length == 30) return true;\n        // if (brackets.Length == 31) return true;\n        // if (brackets.Length == 32) return true;\n        // if (brackets.Length == 33) return true;\n        //\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2574v41a.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var openingBrackets = new ArrayList<char>();\n        var closingBrackets = new ArrayList<char>();\n        for (var i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                openingBrackets.Add(brackets[i]);\n            }\n            else if (brackets[i] == '>') {\n                closingBrackets.Add(brackets[i]);\n            }\n        }\n        if (openingBrackets.Count == 0) {\n            return true;\n        }\n        if (openingBrackets.Count != closingBrackets.Count) {\n            return false;\n        }\n        for (var i = 0; i < openingBrackets.Count; i++) {\n            if (openingBrackets[i] != closingBrackets[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcdllz99l.cs(20,35): error CS0246: The type or namespace name 'ArrayList<>' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpcdllz99l.cs(21,35): error CS0246: The type or namespace name 'ArrayList<>' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpcdllz99l.cs(30,13): error CS0019: Operator '==' cannot be applied to operands of type 'method group' and 'int'\n/tmp/tmpcdllz99l.cs(33,13): error CS0019: Operator '!=' cannot be applied to operands of type 'method group' and 'method group'\n/tmp/tmpcdllz99l.cs(36,25): error CS0019: Operator '<' cannot be applied to operands of type 'int' and 'method group'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int openBrackets = 0;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                openBrackets++;\n            }\n            else if (brackets[i] == '>') {\n                openBrackets--;\n            }\n        }\n        return openBrackets == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c76b9a83273943dbad74728284af9073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c76b9a83273943dbad74728284af9073>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[2];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') brackets_count[0]++;\n            else if (brackets[i] == '>') brackets_count[1]++;\n        }\n        if (brackets_count[0] != brackets_count[1]) return false;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                if (brackets[i + 1] == '>') {\n                    if (brackets_count[0] == 0) return false;\n                    brackets_count[0]--;\n                    i++;\n                }\n                else {\n                    brackets_count[0]--;\n                }\n            }\n            else if (brackets[i] == '>') {\n                if (brackets[i - 1] == '<') {\n                    if (brackets_count[1] == 0) return false;\n                    brackets_count[1]--;\n                    i--;\n                }\n                else {\n                    brackets_count[1]--;\n                }\n            }\n        }\n        return (brackets_count[0] == 0 && brackets_count[1] == 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <09f3a52fb65243949922c4600c84e8dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <09f3a52fb65243949922c4600c84e8dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen.\n        Stack<char> stack = new Stack<char>();\n        // We'll also use a queue to keep track of the brackets we've seen.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        bool seenOpenBracket = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseBracket = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket2 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseBracket2 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket3 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseBracket3 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket4 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseBracket4 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket5 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseBracket5 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket6 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseBracket6 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket7 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenCloseBracket7 = false;\n        // We'll use a boolean to keep track of whether we've\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxy2y90wa.cs(25,14): warning CS0219: The variable 'seenOpenBracket' is assigned but its value is never used\n/tmp/tmpxy2y90wa.cs(27,14): warning CS0219: The variable 'seenCloseBracket' is assigned but its value is never used\n/tmp/tmpxy2y90wa.cs(29,14): warning CS0219: The variable 'seenOpenBracket2' is assigned but its value is never used\n/tmp/tmpxy2y90wa.cs(31,14): warning CS0219: The variable 'seenCloseBracket2' is assigned but its value is never used\n/tmp/tmpxy2y90wa.cs(33,14): warning CS0219: The variable 'seenOpenBracket3' is assigned but its value is never used\n/tmp/tmpxy2y90wa.cs(35,14): warning CS0219: The variable 'seenCloseBracket3' is assigned but its value is never used\n/tmp/tmpxy2y90wa.cs(37,14): warning CS0219: The variable 'seenOpenBracket4' is assigned but its value is never used\n/tmp/tmpxy2y90wa.cs(39,14): warning CS0219: The variable 'seenCloseBracket4' is assigned but its value is never used\n/tmp/tmpxy2y90wa.cs(41,14): warning CS0219: The variable 'seenOpenBracket5' is assigned but its value is never used\n/tmp/tmpxy2y90wa.cs(43,14): warning CS0219: The variable 'seenCloseBracket5' is assigned but its value is never used\n/tmp/tmpxy2y90wa.cs(45,14): warning CS0219: The variable 'seenOpenBracket6' is assigned but its value is never used\n/tmp/tmpxy2y90wa.cs(47,14): warning CS0219: The variable 'seenCloseBracket6' is assigned but its value is never used\n/tmp/tmpxy2y90wa.cs(49,14): warning CS0219: The variable 'seenOpenBracket7' is assigned but its value is never used\n/tmp/tmpxy2y90wa.cs(51,14): warning CS0219: The variable 'seenCloseBracket7' is assigned but its value is never used\n/tmp/tmpxy2y90wa.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // if (brackets.Length == 0) return true;\n        // if (brackets.Length == 1) return true;\n        // if (brackets.Length == 2) return true;\n        // if (brackets.Length == 3) return true;\n        // if (brackets.Length == 4) return true;\n        // if (brackets.Length == 5) return true;\n        // if (brackets.Length == 6) return true;\n        // if (brackets.Length == 7) return true;\n        // if (brackets.Length == 8) return true;\n        // if (brackets.Length == 9) return true;\n        // if (brackets.Length == 10) return true;\n        // if (brackets.Length == 11) return true;\n        // if (brackets.Length == 12) return true;\n        // if (brackets.Length == 13) return true;\n        // if (brackets.Length == 14) return true;\n        // if (brackets.Length == 15) return true;\n        // if (brackets.Length == 16) return true;\n        // if (brackets.Length == 17) return true;\n        // if (brackets.Length == 18) return true;\n        // if (brackets.Length == 19) return true;\n        // if (brackets.Length == 20) return true;\n        // if (brackets.Length == 21) return true;\n        // if (brackets.Length == 22) return true;\n        // if (brackets.Length == 23) return true;\n        // if (brackets.Length == 24) return true;\n        // if (brackets.Length == 25) return true;\n        // if (brackets.Length == 26) return true;\n        // if (brackets.Length == 27) return true;\n        // if (brackets.Length == 28) return true;\n        // if (brackets.Length == 29) return true;\n        // if (brackets.Length == 30) return true;\n        // if (brackets.Length == 31) return true;\n        // if (brackets.Length == 32) return true;\n        // if (brackets.Length == 33) return true;\n        //\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2574v41a.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Write your code here\n        int[] brackets_count = new int[256];\n        for (int i = 0; i < brackets.Length; i++) {\n            brackets_count[brackets[i]]++;\n        }\n        for (int i = 0; i < brackets_count.Length; i++) {\n            if (brackets_count[i] != 0 && brackets_count[i] != brackets.Length - 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <48c4399bd43347968e9723fb6ad03c9f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <48c4399bd43347968e9723fb6ad03c9f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        if (brackets.Length == 1) return false;\n        if (brackets.Length % 2 == 0) return false;\n        int[] openBrackets = new int[brackets.Length];\n        int[] closeBrackets = new int[brackets.Length];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                openBrackets[i] = 1;\n            }\n            else if (brackets[i] == '>') {\n                closeBrackets[i] = 1;\n            }\n            else {\n                return false;\n            }\n        }\n        for (int i = 0; i < brackets.Length; i++) {\n            if (openBrackets[i] == 0) return false;\n            if (closeBrackets[i] == 0) return false;\n        }\n        for (int i = 0; i < brackets.Length; i++) {\n            if (openBrackets[i] == closeBrackets[i]) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a9475d5690c04155a195143a81a35ce4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a9475d5690c04155a195143a81a35ce4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Write your code here\n        if (brackets.Length == 0) return true;\n        int openBrackets = 0;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                openBrackets++;\n            }\n            else if (brackets[i] == '>') {\n                openBrackets--;\n            }\n        }\n        return openBrackets == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <09d3da351ad64d0090ccccad2bc5c6ed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <09d3da351ad64d0090ccccad2bc5c6ed>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[2];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                brackets_count[0]++;\n            }\n            else if (brackets[i] == '>') {\n                brackets_count[1]++;\n            }\n        }\n        return brackets_count[0] == brackets_count[1];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2e419119c08f47d390669616bf144411>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2e419119c08f47d390669616bf144411>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        if (brackets.Length == 1) return false;\n        if (brackets.Length % 2 != 0) return false;\n        if (brackets.IndexOf(\"<\") == -1) return false;\n        if (brackets.IndexOf(\">\") == -1) return false;\n        if (brackets.IndexOf(\"<\") > brackets.IndexOf(\">\")) return false;\n        if (brackets.IndexOf(\"<\") == 0 || brackets.IndexOf(\">\") == brackets.Length - 1) return false;\n        if (brackets.IndexOf(\"<\") == brackets.IndexOf(\">\") + 1) return false;\n        if (brackets.IndexOf(\"<\") == brackets.IndexOf(\">\") - 1) return false;\n        if (brackets.IndexOf(\"<\") > brackets.IndexOf(\">\") + 1) return false;\n        if (brackets.IndexOf(\"<\") == brackets.IndexOf(\">\") - 1) return false;\n        if (brackets.IndexOf(\"<\") == brackets.IndexOf(\">\") + 2) return false;\n        if (brackets.IndexOf(\"<\") == brackets.IndexOf(\">\") - 2) return false;\n        if (brackets.IndexOf(\"<\") > brackets.IndexOf(\">\") + 2) return false;\n        if (brackets.IndexOf(\"<\") == brackets.IndexOf(\">\") - 2) return false;\n        if (brackets.IndexOf(\"<\") == brackets.IndexOf(\">\") + 3) return false;\n        if (brackets.IndexOf(\"<\") == brackets.IndexOf(\">\") - 3) return false;\n        if (brackets.IndexOf(\"<\") > brackets.IndexOf(\">\") + 3) return false;\n        if (brackets.IndexOf(\"<\") == brackets.IndexOf(\">\") - 3) return false;\n        if (brackets.IndexOf(\"<\") == brackets.IndexOf(\">\") + 4) return false;\n        if (brackets.IndexOf(\"<\") == brackets.IndexOf(\">\") - 4) return false;\n        if (brackets.IndexOf(\"<\")\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4_hatojt.cs(41,34): error CS1026: ) expected\n/tmp/tmp4_hatojt.cs(41,34): error CS1525: Invalid expression term '}'\n/tmp/tmp4_hatojt.cs(41,34): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[256];\n        for (int i = 0; i < brackets.Length; i++) {\n            brackets_count[brackets[i]]++;\n        }\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets_count[brackets[i]] == 0) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3828b7ecf6de437eb336e64287951bf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3828b7ecf6de437eb336e64287951bf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n        for (var i = 0; i < brackets.Length; i++) {\n            var c = brackets[i];\n            if (c == '<') {\n                stack.Push('>');\n            }\n            else if (c == '>') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                stack.Pop();\n            }\n        }\n        return stack.Count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We use a boolean to keep track of whether we are in a string of brackets.\n        bool inBrackets = false;\n        // We use a boolean to keep track of whether we are in a string of brackets.\n        bool inString = false;\n        // We use a boolean to keep track of whether we are in a string of brackets.\n        bool inChar = false;\n        // We use a boolean to keep track of whether we are in a string of brackets.\n        bool inChar2 = false;\n        // We use a boolean to keep track of whether we are in a string of brackets.\n        bool inChar3 = false;\n        // We use a boolean to keep track of whether we are in a string of brackets.\n        bool inChar4 = false;\n        // We use a boolean to keep track of whether we are in a string of brackets.\n        bool inChar5 = false;\n        // We use a boolean to keep track of whether we are in a string of brackets.\n        bool inChar6 = false;\n        // We use a boolean to keep track of whether we are in a string of brackets.\n        bool inChar7 = false;\n        // We use a boolean to keep track of whether we are in a string of brackets.\n        bool inChar8 = false;\n        // We use a boolean to keep track of whether we are in a string of brackets.\n        bool inChar9 = false;\n        // We use a boolean to keep track of whether we are in a string of brackets.\n        bool inChar10 = false;\n        // We use a boolean to keep track of whether we are in a string of brackets.\n        bool inChar11 = false;\n        // We use a boolean to keep track of whether we are in a string of brackets.\n        bool inChar12 = false;\n        // We use a boolean to keep track of whether we are in a string of brackets.\n        bool inChar13 = false;\n        // We use a boolean to keep track of whether we are in a string of brackets.\n        bool inChar14 = false;\n        // We use a boolean to keep track of whether we are in a string of brackets.\n        bool\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkrb_cl9h.cs(55,13): error CS1001: Identifier expected\n/tmp/tmpkrb_cl9h.cs(55,13): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString2 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString3 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString4 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString5 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString6 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString7 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString8 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString9 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString10 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString11 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString12 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString13 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString14 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293425,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz558x22l.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(41,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(43,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(45,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(47,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets we've seen.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        boolean seen = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean closed = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenClosing = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenOpening = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenClosingOpening = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenClosingClosing = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenOpeningOpening = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenOpeningClosing = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenOpeningClosingOpening = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenOpeningClosingClosing = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenOpeningOpeningOpening = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenOpeningOpeningClosing = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenOpeningOpeningClosingOpening = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenOpeningOpeningClosingClosing = false;\n        // We'll use a boolean to keep track of whether we\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptq1u7lh5.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmptq1u7lh5.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmptq1u7lh5.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmptq1u7lh5.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmptq1u7lh5.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmptq1u7lh5.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmptq1u7lh5.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmptq1u7lh5.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmptq1u7lh5.cs(41,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmptq1u7lh5.cs(43,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmptq1u7lh5.cs(45,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmptq1u7lh5.cs(47,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmptq1u7",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a boolean to keep track of whether we're in a string or not.\n        bool inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inStringOrComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inCommentOrString = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inCommentOrStringOrBracket = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inCommentOrStringOrBracketOrBracket = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inCommentOrStringOrBracketOrBracketOrBracket = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inCommentOrStringOrBracketOrBracketOrBracketOrBracket = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inCommentOrStringOrBracketOrBracketOrBracketOrBracketOrBracket = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inCommentOrStringOrBracketOrBracketOrBracketOrBracketOrBracketOrBracket = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inCommentOrStringOrBracketOrBracketOrBracketOrBracketOrBracketOrBracketOrBracket = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inCommentOrStringOrBracketOrBracketOrBracketOrBracketOrBracketOrBracketOrBracketOrBracket = false;\n        // We'll use a boolean\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg_x8ofrw.cs(23,14): warning CS0219: The variable 'inString' is assigned but its value is never used\n/tmp/tmpg_x8ofrw.cs(25,14): warning CS0219: The variable 'inComment' is assigned but its value is never used\n/tmp/tmpg_x8ofrw.cs(27,14): warning CS0219: The variable 'inStringOrComment' is assigned but its value is never used\n/tmp/tmpg_x8ofrw.cs(29,14): warning CS0219: The variable 'inCommentOrString' is assigned but its value is never used\n/tmp/tmpg_x8ofrw.cs(31,14): warning CS0219: The variable 'inCommentOrStringOrBracket' is assigned but its value is never used\n/tmp/tmpg_x8ofrw.cs(33,14): warning CS0219: The variable 'inCommentOrStringOrBracketOrBracket' is assigned but its value is never used\n/tmp/tmpg_x8ofrw.cs(35,14): warning CS0219: The variable 'inCommentOrStringOrBracketOrBracketOrBracket' is assigned but its value is never used\n/tmp/tmpg_x8ofrw.cs(37,14): warning CS0219: The variable 'inCommentOrStringOrBracketOrBracketOrBracketOrBracket' is assigned but its value is never used\n/tmp/tmpg_x8ofrw.cs(39,14): warning CS0219: The variable 'inCommentOrStringOrBracketOrBracketOrBracketOrBracketOrBracket' is assigned but its value is never used\n/tmp/tmpg_x8ofrw.cs(41,14): warning CS0219: The variable 'inCommentOrStringOrBracketOrBracketOrBracketOrBracketOrBracketOrBracket' is assigned but its value is never used\n/tmp/tmpg_x8ofrw.cs(43,14): warning CS0219: The variable 'inCommentOrStringOrBracketOrBracketOrBracketOrBracketOrBracketOrBracketOrBracket' is assigned but its value is never used\n/tmp/tmpg_x8ofrw.cs(45,14): warning CS0219: The variable 'inCommentOrStringOrBracketOrBracketOrBracketOrBracketOrBracketOrBracketOrBracketOrBracket' is assigned but its value is never used\n/tmp/tmpg_x8ofrw.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a boolean to keep track of whether we're in a string or not.\n        bool inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment2 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment3 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment4 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment5 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment6 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment7 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment8 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment9 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment10 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment11 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment12 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment13 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment14 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment15 = false;\n        // We'll use\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpr8uc8hq1.cs(23,14): warning CS0219: The variable 'inString' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(25,14): warning CS0219: The variable 'inComment' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(27,14): warning CS0219: The variable 'inComment2' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(29,14): warning CS0219: The variable 'inComment3' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(31,14): warning CS0219: The variable 'inComment4' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(33,14): warning CS0219: The variable 'inComment5' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(35,14): warning CS0219: The variable 'inComment6' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(37,14): warning CS0219: The variable 'inComment7' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(39,14): warning CS0219: The variable 'inComment8' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(41,14): warning CS0219: The variable 'inComment9' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(43,14): warning CS0219: The variable 'inComment10' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(45,14): warning CS0219: The variable 'inComment11' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(47,14): warning CS0219: The variable 'inComment12' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(49,14): warning CS0219: The variable 'inComment13' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(51,14): warning CS0219: The variable 'inComment14' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(53,14): warning CS0219: The variable 'inComment15' is assigned but its value is never used\n/tmp/tmpr8uc8hq1.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a boolean to keep track of whether we're in a string.\n        bool inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprg7vppku.cs(57,25): error CS1525: Invalid expression term '}'\n/tmp/tmprg7vppku.cs(57,25): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Complete this function\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnpndtx1e.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[2];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') brackets_count[0]++;\n            if (brackets[i] == '>') brackets_count[1]++;\n        }\n        if (brackets_count[0] != brackets_count[1]) return false;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                if (i + 1 < brackets.Length && brackets[i + 1] == '>') continue;\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <01d9361a97724a57852798efbe11f558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <01d9361a97724a57852798efbe11f558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        bool seenOpen = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClose = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket that is unmatched.\n        bool seenUnmatchedClose = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket that is unmatched.\n        bool seenUnmatchedOpen = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket that is unmatched.\n        bool seenMismatchedClose = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket that is unmatched.\n        bool seenMismatchedOpen = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket that is unmatched.\n        bool seenMismatchedClose2 = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket that is unmatched.\n        bool seenMismatchedOpen2 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket that is unmatched.\n        bool seenMismatchedClose3 = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket that is unmatched.\n        bool seenMismatchedOpen3 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket that is unmatched.\n        bool seenMismatchedClose4 = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket that is unmatched.\n        bool seenMismatchedOpen4 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket that is unmatched.\n        bool seenMismatchedClose5 = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket that is unmatched.\n        bool seenMismatchedOpen5 = false;\n        // We'll use a boolean to keep track of whether we\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbvm7ege5.cs(23,14): warning CS0219: The variable 'seenOpen' is assigned but its value is never used\n/tmp/tmpbvm7ege5.cs(25,14): warning CS0219: The variable 'seenClose' is assigned but its value is never used\n/tmp/tmpbvm7ege5.cs(27,14): warning CS0219: The variable 'seenUnmatchedClose' is assigned but its value is never used\n/tmp/tmpbvm7ege5.cs(29,14): warning CS0219: The variable 'seenUnmatchedOpen' is assigned but its value is never used\n/tmp/tmpbvm7ege5.cs(31,14): warning CS0219: The variable 'seenMismatchedClose' is assigned but its value is never used\n/tmp/tmpbvm7ege5.cs(33,14): warning CS0219: The variable 'seenMismatchedOpen' is assigned but its value is never used\n/tmp/tmpbvm7ege5.cs(35,14): warning CS0219: The variable 'seenMismatchedClose2' is assigned but its value is never used\n/tmp/tmpbvm7ege5.cs(37,14): warning CS0219: The variable 'seenMismatchedOpen2' is assigned but its value is never used\n/tmp/tmpbvm7ege5.cs(39,14): warning CS0219: The variable 'seenMismatchedClose3' is assigned but its value is never used\n/tmp/tmpbvm7ege5.cs(41,14): warning CS0219: The variable 'seenMismatchedOpen3' is assigned but its value is never used\n/tmp/tmpbvm7ege5.cs(43,14): warning CS0219: The variable 'seenMismatchedClose4' is assigned but its value is never used\n/tmp/tmpbvm7ege5.cs(45,14): warning CS0219: The variable 'seenMismatchedOpen4' is assigned but its value is never used\n/tmp/tmpbvm7ege5.cs(47,14): warning CS0219: The variable 'seenMismatchedClose5' is assigned but its value is never used\n/tmp/tmpbvm7ege5.cs(49,14): warning CS0219: The variable 'seenMismatchedOpen5' is assigned but its value is never used\n/tmp/tmpbvm7ege5.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[2];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') brackets_count[0]++;\n            else if (brackets[i] == '>') brackets_count[1]++;\n        }\n        return brackets_count[0] == brackets_count[1];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5496c6f0b1e749ccb23db77a89c8cacd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5496c6f0b1e749ccb23db77a89c8cacd>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we're in a string.\n        bool inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment2 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment3 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment4 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment5 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment6 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment7 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment8 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment9 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment10 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment11 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment12 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment13 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment14 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment15 = false;\n        // We'll use a boolean\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4iushria.cs(25,14): warning CS0219: The variable 'inString' is assigned but its value is never used\n/tmp/tmp4iushria.cs(27,14): warning CS0219: The variable 'inComment' is assigned but its value is never used\n/tmp/tmp4iushria.cs(29,14): warning CS0219: The variable 'inComment2' is assigned but its value is never used\n/tmp/tmp4iushria.cs(31,14): warning CS0219: The variable 'inComment3' is assigned but its value is never used\n/tmp/tmp4iushria.cs(33,14): warning CS0219: The variable 'inComment4' is assigned but its value is never used\n/tmp/tmp4iushria.cs(35,14): warning CS0219: The variable 'inComment5' is assigned but its value is never used\n/tmp/tmp4iushria.cs(37,14): warning CS0219: The variable 'inComment6' is assigned but its value is never used\n/tmp/tmp4iushria.cs(39,14): warning CS0219: The variable 'inComment7' is assigned but its value is never used\n/tmp/tmp4iushria.cs(41,14): warning CS0219: The variable 'inComment8' is assigned but its value is never used\n/tmp/tmp4iushria.cs(43,14): warning CS0219: The variable 'inComment9' is assigned but its value is never used\n/tmp/tmp4iushria.cs(45,14): warning CS0219: The variable 'inComment10' is assigned but its value is never used\n/tmp/tmp4iushria.cs(47,14): warning CS0219: The variable 'inComment11' is assigned but its value is never used\n/tmp/tmp4iushria.cs(49,14): warning CS0219: The variable 'inComment12' is assigned but its value is never used\n/tmp/tmp4iushria.cs(51,14): warning CS0219: The variable 'inComment13' is assigned but its value is never used\n/tmp/tmp4iushria.cs(53,14): warning CS0219: The variable 'inComment14' is assigned but its value is never used\n/tmp/tmp4iushria.cs(55,14): warning CS0219: The variable 'inComment15' is assigned but its value is never used\n/tmp/tmp4iushria.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Write your code here\n        if (brackets.Length == 0)\n            return true;\n        int openBracketCount = 0;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<')\n                openBracketCount++;\n            else if (brackets[i] == '>')\n                openBracketCount--;\n            if (openBracketCount < 0)\n                return false;\n        }\n        return openBracketCount == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[256];\n        for (int i = 0; i < brackets.Length; i++) {\n            brackets_count[brackets[i]]++;\n        }\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets_count[brackets[i]] == 0) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3828b7ecf6de437eb336e64287951bf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3828b7ecf6de437eb336e64287951bf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // write your code here\n        int[] brackets_count = new int[256];\n        for (int i = 0; i < brackets.Length; i++) {\n            brackets_count[brackets[i]]++;\n        }\n        for (int i = 0; i < brackets_count.Length; i++) {\n            if (brackets_count[i] != 0 && brackets_count[i] != brackets.Length - 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <161775611d18475e9d10b9302857e8f7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <161775611d18475e9d10b9302857e8f7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        bool inString = false;\n        // We'll use a boolean to keep track of whether we're in a character.\n        bool inChar = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        bool inNumber = false;\n        // We'll use a boolean to keep track of whether we're in a symbol.\n        bool inSymbol = false;\n        // We'll use a boolean to keep track of whether we're in a symbol.\n        bool inSymbol = false;\n        // We'll use a boolean to keep track of whether we're in a symbol.\n        bool inSymbol = false;\n        // We'll use a boolean to keep track of whether we're in a symbol.\n        bool inSymbol = false;\n        // We'll use a boolean to keep track of whether we're in a symbol.\n        bool inSymbol = false;\n        // We'll use a boolean to keep track of whether we're in a symbol.\n        bool inSymbol = false;\n        // We'll use a boolean to keep track of whether we're in a symbol.\n        bool inSymbol = false;\n        // We'll use a boolean to keep track of whether we're in a symbol.\n        bool inSymbol = false;\n        // We'll use a boolean to keep track of whether we're in a symbol.\n        bool inSymbol = false;\n        // We'll use a boolean to keep track of whether we're in a symbol.\n        bool inSymbol = false;\n        // We'll use a boolean to keep track of whether we're in a symbol.\n        bool inSymbol = false;\n        // We'll use a boolean to keep track of whether we're in a symbol.\n        bool inSymbol = false;\n        // We'll use a boolean to keep track of whether we're in a symbol.\n        bool inSymbol = false;\n        // We'll use a boolean to keep track of\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hr0q1mn.cs(33,14): error CS0128: A local variable or function named 'inSymbol' is already defined in this scope\n/tmp/tmp6hr0q1mn.cs(35,14): error CS0128: A local variable or function named 'inSymbol' is already defined in this scope\n/tmp/tmp6hr0q1mn.cs(37,14): error CS0128: A local variable or function named 'inSymbol' is already defined in this scope\n/tmp/tmp6hr0q1mn.cs(39,14): error CS0128: A local variable or function named 'inSymbol' is already defined in this scope\n/tmp/tmp6hr0q1mn.cs(41,14): error CS0128: A local variable or function named 'inSymbol' is already defined in this scope\n/tmp/tmp6hr0q1mn.cs(43,14): error CS0128: A local variable or function named 'inSymbol' is already defined in this scope\n/tmp/tmp6hr0q1mn.cs(45,14): error CS0128: A local variable or function named 'inSymbol' is already defined in this scope\n/tmp/tmp6hr0q1mn.cs(47,14): error CS0128: A local variable or function named 'inSymbol' is already defined in this scope\n/tmp/tmp6hr0q1mn.cs(49,14): error CS0128: A local variable or function named 'inSymbol' is already defined in this scope\n/tmp/tmp6hr0q1mn.cs(51,14): error CS0128: A local variable or function named 'inSymbol' is already defined in this scope\n/tmp/tmp6hr0q1mn.cs(53,14): error CS0128: A local variable or function named 'inSymbol' is already defined in this scope\n/tmp/tmp6hr0q1mn.cs(55,14): error CS0128: A local variable or function named 'inSymbol' is already defined in this scope\n/tmp/tmp6hr0q1mn.cs(23,14): warning CS0219: The variable 'inComment' is assigned but its value is never used\n/tmp/tmp6hr0q1mn.cs(25,14): warning CS0219: The variable 'inString' is assigned but its value is never used\n/tmp/tmp6hr0q1mn.cs(27,14): warning CS0219: The variable 'inChar' is assigned but its value is never used\n/tmp/tmp6hr0q1mn.cs(29,14): warning CS0219: The variable 'inNumber' is assigned but its value is never used\n/tmp/tmp6hr0q1mn.cs(31,14): warning CS",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n        for (var i = 0; i < brackets.Length; i++) {\n            var c = brackets[i];\n            if (c == '<') {\n                stack.Push('>');\n            }\n            else if (c == '>') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                stack.Pop();\n            }\n            else {\n                stack.Push(c);\n            }\n        }\n        return stack.Count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen.\n        Stack<char> stack = new Stack<char>();\n        // We'll also keep track of the number of brackets we've seen.\n        int count = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int open = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int close = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int invalid = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int invalid_close = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int invalid_open = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int invalid_close_open = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int invalid_open_close = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int invalid_open_open = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int invalid_close_close = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int invalid_open_close_open = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int invalid_open_open_close = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int invalid_close_open_close = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int invalid_open_open_open = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int invalid_close_open_open = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int invalid_open_open_open = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int invalid_close_open_open = 0;\n        // We'll also keep track of the number\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoga3xs3h.cs(53,13): error CS0128: A local variable or function named 'invalid_open_open_open' is already defined in this scope\n/tmp/tmpoga3xs3h.cs(55,13): error CS0128: A local variable or function named 'invalid_close_open_open' is already defined in this scope\n/tmp/tmpoga3xs3h.cs(23,13): warning CS0219: The variable 'count' is assigned but its value is never used\n/tmp/tmpoga3xs3h.cs(25,13): warning CS0219: The variable 'open' is assigned but its value is never used\n/tmp/tmpoga3xs3h.cs(27,13): warning CS0219: The variable 'close' is assigned but its value is never used\n/tmp/tmpoga3xs3h.cs(29,13): warning CS0219: The variable 'invalid' is assigned but its value is never used\n/tmp/tmpoga3xs3h.cs(31,13): warning CS0219: The variable 'invalid_close' is assigned but its value is never used\n/tmp/tmpoga3xs3h.cs(33,13): warning CS0219: The variable 'invalid_open' is assigned but its value is never used\n/tmp/tmpoga3xs3h.cs(35,13): warning CS0219: The variable 'invalid_close_open' is assigned but its value is never used\n/tmp/tmpoga3xs3h.cs(37,13): warning CS0219: The variable 'invalid_open_close' is assigned but its value is never used\n/tmp/tmpoga3xs3h.cs(39,13): warning CS0219: The variable 'invalid_open_open' is assigned but its value is never used\n/tmp/tmpoga3xs3h.cs(41,13): warning CS0219: The variable 'invalid_close_close' is assigned but its value is never used\n/tmp/tmpoga3xs3h.cs(43,13): warning CS0219: The variable 'invalid_open_close_open' is assigned but its value is never used\n/tmp/tmpoga3xs3h.cs(45,13): warning CS0219: The variable 'invalid_open_open_close' is assigned but its value is never used\n/tmp/tmpoga3xs3h.cs(47,13): warning CS0219: The variable 'invalid_close_open_close' is assigned but its value is never used\n/tmp/tmpoga3xs3h.cs(49,13): warning CS0219: The variable 'invalid_open_open_open' is assigned but its value is never used\n/tmp/tmpoga3xs3h.cs(51,13): warning CS02",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets we've seen.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left2 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right2 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left3 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right3 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left4 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right4 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left5 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right5 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left6 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right6 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left7 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right7 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left8 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right8 = false;\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphrb90lto.cs(25,14): warning CS0219: The variable 'left' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(27,14): warning CS0219: The variable 'right' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(29,14): warning CS0219: The variable 'left2' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(31,14): warning CS0219: The variable 'right2' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(33,14): warning CS0219: The variable 'left3' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(35,14): warning CS0219: The variable 'right3' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(37,14): warning CS0219: The variable 'left4' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(39,14): warning CS0219: The variable 'right4' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(41,14): warning CS0219: The variable 'left5' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(43,14): warning CS0219: The variable 'right5' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(45,14): warning CS0219: The variable 'left6' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(47,14): warning CS0219: The variable 'right6' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(49,14): warning CS0219: The variable 'left7' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(51,14): warning CS0219: The variable 'right7' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(53,14): warning CS0219: The variable 'left8' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(55,14): warning CS0219: The variable 'right8' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll also keep track of the number of brackets we've seen.\n        int bracketCount = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int openBracketCount = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int closeBracketCount = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int openBracketIndex = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int closeBracketIndex = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int openBracketIndex2 = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int closeBracketIndex2 = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int openBracketIndex3 = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int closeBracketIndex3 = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int openBracketIndex4 = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int closeBracketIndex4 = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int openBracketIndex5 = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int closeBracketIndex5 = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int openBracketIndex6 = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int closeBracketIndex6 = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int openBracketIndex7 = 0;\n        // We'll also keep track of the number of brackets we've seen.\n        int closeBracketIndex7 = 0;\n        // We'll also keep track of the number of brackets we've\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6lounk4j.cs(23,13): warning CS0219: The variable 'bracketCount' is assigned but its value is never used\n/tmp/tmp6lounk4j.cs(25,13): warning CS0219: The variable 'openBracketCount' is assigned but its value is never used\n/tmp/tmp6lounk4j.cs(27,13): warning CS0219: The variable 'closeBracketCount' is assigned but its value is never used\n/tmp/tmp6lounk4j.cs(29,13): warning CS0219: The variable 'openBracketIndex' is assigned but its value is never used\n/tmp/tmp6lounk4j.cs(31,13): warning CS0219: The variable 'closeBracketIndex' is assigned but its value is never used\n/tmp/tmp6lounk4j.cs(33,13): warning CS0219: The variable 'openBracketIndex2' is assigned but its value is never used\n/tmp/tmp6lounk4j.cs(35,13): warning CS0219: The variable 'closeBracketIndex2' is assigned but its value is never used\n/tmp/tmp6lounk4j.cs(37,13): warning CS0219: The variable 'openBracketIndex3' is assigned but its value is never used\n/tmp/tmp6lounk4j.cs(39,13): warning CS0219: The variable 'closeBracketIndex3' is assigned but its value is never used\n/tmp/tmp6lounk4j.cs(41,13): warning CS0219: The variable 'openBracketIndex4' is assigned but its value is never used\n/tmp/tmp6lounk4j.cs(43,13): warning CS0219: The variable 'closeBracketIndex4' is assigned but its value is never used\n/tmp/tmp6lounk4j.cs(45,13): warning CS0219: The variable 'openBracketIndex5' is assigned but its value is never used\n/tmp/tmp6lounk4j.cs(47,13): warning CS0219: The variable 'closeBracketIndex5' is assigned but its value is never used\n/tmp/tmp6lounk4j.cs(49,13): warning CS0219: The variable 'openBracketIndex6' is assigned but its value is never used\n/tmp/tmp6lounk4j.cs(51,13): warning CS0219: The variable 'closeBracketIndex6' is assigned but its value is never used\n/tmp/tmp6lounk4j.cs(53,13): warning CS0219: The variable 'openBracketIndex7' is assigned but its value is never used\n/tmp/tmp6lounk4j.cs(55,13): warning CS0219: The var",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        int[] brackets_count = new int[2];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<')\n                brackets_count[0]++;\n            else if (brackets[i] == '>')\n                brackets_count[1]++;\n        }\n        return brackets_count[0] == brackets_count[1];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d6529453589847ddb485488a5f5e26d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d6529453589847ddb485488a5f5e26d8>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString2 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString3 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString4 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString5 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString6 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString7 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString8 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString9 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString10 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString11 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString12 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString13 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString14 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293425,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz558x22l.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(41,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(43,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(45,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(47,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        int[] bracketsCount = new int[2];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                bracketsCount[0]++;\n            }\n            else if (brackets[i] == '>') {\n                bracketsCount[1]++;\n            }\n        }\n        return bracketsCount[0] == bracketsCount[1];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <eb2fbb71ec9a4691bdfa359e64a3f69e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <eb2fbb71ec9a4691bdfa359e64a3f69e>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets == null || brackets.Length == 0) return true;\n        int[] brackets_count = new int[256];\n        for (int i = 0; i < brackets.Length; i++) {\n            brackets_count[brackets[i]]++;\n        }\n        for (int i = 0; i < 256; i++) {\n            if (brackets_count[i] != 0 && brackets_count[i] != brackets.Length - 1) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e1a68f032cab4b91b545cc84531573da>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e1a68f032cab4b91b545cc84531573da>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // if the string is empty, return true\n        if (brackets.Length == 0) return true;\n        // if the string is not empty, but does not contain any opening brackets, return false\n        if (brackets.IndexOf(\"<\") == -1) return false;\n        // if the string is not empty, and does contain at least one opening bracket,\n        // then we need to check whether the opening bracket is matched by a closing bracket\n        // we will do this by iterating through the string and checking whether the brackets are matched\n        // if the brackets are not matched, then we will return false\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                if (brackets[i + 1] != '>') return false;\n            }\n        }\n        // if we got this far, then the brackets are matched\n        // return true\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <08843f4ae16b4eb3aa8938214793667c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <08843f4ae16b4eb3aa8938214793667c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[2];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') brackets_count[0]++;\n            else if (brackets[i] == '>') brackets_count[1]++;\n        }\n        return brackets_count[0] == brackets_count[1];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5496c6f0b1e749ccb23db77a89c8cacd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5496c6f0b1e749ccb23db77a89c8cacd>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[2];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                brackets_count[0]++;\n            }\n            else if (brackets[i] == '>') {\n                brackets_count[1]++;\n            }\n        }\n        if (brackets_count[0] != brackets_count[1]) return false;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                if (i + 1 < brackets.Length && brackets[i + 1] == '>') {\n                    i++;\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <93971f8fe6da4cbfa5092550c56be679>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <93971f8fe6da4cbfa5092550c56be679>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd0vavo4q.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(29,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpd0vavo4q.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(31,17): error CS0128: A local variable or function named 'inString' is already defined in this scope\n/tmp/tmpd0vavo4q.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(33,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpd0vavo4q.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(35,17): error CS0128: A local variable or function named 'inString' is already defined in this scope\n/tmp/tmpd0vavo4q.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(37,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpd0vavo4q.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(39,17): error CS0128:",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we're in a string or not.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment2 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment3 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment4 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment5 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment6 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment7 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment8 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment9 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment10 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment11 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment12 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment13 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzohunz0e.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(41,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(43,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(45,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(47,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohun",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Write your code here\n        if (brackets.Length == 0)\n            return true;\n        int[] brackets_count = new int[256];\n        for (int i = 0; i < brackets.Length; i++) {\n            brackets_count[brackets[i]]++;\n        }\n        for (int i = 0; i < 256; i++) {\n            if (brackets_count[i] != 0 && brackets_count[i] != brackets.Length - 1)\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <be65a576cbc54a2da4f0cb0dab660925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <be65a576cbc54a2da4f0cb0dab660925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var openingBrackets = new ArrayList<char>();\n        var closingBrackets = new ArrayList<char>();\n        for (var i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                openingBrackets.Add(brackets[i]);\n            }\n            else if (brackets[i] == '>') {\n                closingBrackets.Add(brackets[i]);\n            }\n        }\n        if (openingBrackets.Count != closingBrackets.Count) {\n            return false;\n        }\n        for (var i = 0; i < openingBrackets.Count; i++) {\n            if (openingBrackets[i] != closingBrackets[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbv_3rn72.cs(20,35): error CS0246: The type or namespace name 'ArrayList<>' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpbv_3rn72.cs(21,35): error CS0246: The type or namespace name 'ArrayList<>' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpbv_3rn72.cs(30,13): error CS0019: Operator '!=' cannot be applied to operands of type 'method group' and 'method group'\n/tmp/tmpbv_3rn72.cs(33,25): error CS0019: Operator '<' cannot be applied to operands of type 'int' and 'method group'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a character.\n        boolean inChar = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean inNumber = false;\n        // We'll use a boolean to keep track of whether we're in a word.\n        boolean inWord = false;\n        // We'll use a boolean to keep track of whether we're in a symbol.\n        boolean inSymbol = false;\n        // We'll use a boolean to keep track of whether we're in a symbol.\n        boolean inSymbol2 = false;\n        // We'll use a boolean to keep track of whether we're in a symbol.\n        boolean inSymbol3 = false;\n        // We'll use a boolean to keep track of whether we're in a symbol.\n        boolean inSymbol4 = false;\n        // We'll use a boolean to keep track of whether we're in a symbol.\n        boolean inSymbol5 = false;\n        // We'll use a boolean to keep track of whether we're in a symbol.\n        boolean inSymbol6 = false;\n        // We'll use a boolean to keep track of whether we're in a symbol.\n        boolean inSymbol7 = false;\n        // We'll use a boolean to keep track of whether we're in a symbol.\n        boolean inSymbol8 = false;\n        // We'll use a boolean to keep track of whether we're in a symbol.\n        boolean inSymbol9 = false;\n        // We'll use a boolean to keep track of whether we're in a symbol.\n        boolean inSymbol10 = false;\n        // We'll use a boolean to keep track of whether we're\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphv3rt8k7.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphv3rt8k7.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphv3rt8k7.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphv3rt8k7.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphv3rt8k7.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphv3rt8k7.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphv3rt8k7.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphv3rt8k7.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphv3rt8k7.cs(41,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphv3rt8k7.cs(43,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphv3rt8k7.cs(45,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphv3rt8k7.cs(47,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphv3rt",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[256];\n        for (int i = 0; i < brackets.Length; i++) {\n            brackets_count[brackets[i]]++;\n        }\n        for (int i = 0; i < brackets_count.Length; i++) {\n            if (brackets_count[i] != 0) {\n                if (brackets_count[i] != 1) return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fe23f53e91b049268ac9cadf01baa0b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fe23f53e91b049268ac9cadf01baa0b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a character.\n        boolean inChar = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean inNumber = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean inNumber2 = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean inNumber3 = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean inNumber4 = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean inNumber5 = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean inNumber6 = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean inNumber7 = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean inNumber8 = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean inNumber9 = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean inNumber10 = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean inNumber11 = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean inNumber12 = false;\n        // We'll use a boolean to keep track of whether we're in a number.\n        boolean\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0tbunk53.cs(55,16): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a boolean to keep track of whether we're inside an opening bracket.\n        bool inOpeningBracket = false;\n        // We'll use a boolean to keep track of whether we're inside an closing bracket.\n        bool inClosingBracket = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        bool seenOpeningBracket = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpeningBracket2 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket2 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpeningBracket3 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket3 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpeningBracket4 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket4 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpeningBracket5 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket5 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpeningBracket6 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket6 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpeningBracket7 = false;\n        // We'll use a boolean to keep track of whether we've seen\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpukuij0uz.cs(23,14): warning CS0219: The variable 'inOpeningBracket' is assigned but its value is never used\n/tmp/tmpukuij0uz.cs(25,14): warning CS0219: The variable 'inClosingBracket' is assigned but its value is never used\n/tmp/tmpukuij0uz.cs(27,14): warning CS0219: The variable 'seenOpeningBracket' is assigned but its value is never used\n/tmp/tmpukuij0uz.cs(29,14): warning CS0219: The variable 'seenClosingBracket' is assigned but its value is never used\n/tmp/tmpukuij0uz.cs(31,14): warning CS0219: The variable 'seenOpeningBracket2' is assigned but its value is never used\n/tmp/tmpukuij0uz.cs(33,14): warning CS0219: The variable 'seenClosingBracket2' is assigned but its value is never used\n/tmp/tmpukuij0uz.cs(35,14): warning CS0219: The variable 'seenOpeningBracket3' is assigned but its value is never used\n/tmp/tmpukuij0uz.cs(37,14): warning CS0219: The variable 'seenClosingBracket3' is assigned but its value is never used\n/tmp/tmpukuij0uz.cs(39,14): warning CS0219: The variable 'seenOpeningBracket4' is assigned but its value is never used\n/tmp/tmpukuij0uz.cs(41,14): warning CS0219: The variable 'seenClosingBracket4' is assigned but its value is never used\n/tmp/tmpukuij0uz.cs(43,14): warning CS0219: The variable 'seenOpeningBracket5' is assigned but its value is never used\n/tmp/tmpukuij0uz.cs(45,14): warning CS0219: The variable 'seenClosingBracket5' is assigned but its value is never used\n/tmp/tmpukuij0uz.cs(47,14): warning CS0219: The variable 'seenOpeningBracket6' is assigned but its value is never used\n/tmp/tmpukuij0uz.cs(49,14): warning CS0219: The variable 'seenClosingBracket6' is assigned but its value is never used\n/tmp/tmpukuij0uz.cs(51,14): warning CS0219: The variable 'seenOpeningBracket7' is assigned but its value is never used\n/tmp/tmpukuij0uz.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n        for (var i = 0; i < brackets.Length; i++) {\n            var c = brackets[i];\n            if (c == '<') {\n                stack.Push('>');\n            }\n            else if (c == '>') {\n                if (stack.IsEmpty()) {\n                    return false;\n                }\n                else {\n                    stack.Pop();\n                }\n            }\n        }\n        return stack.IsEmpty();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcax2veev.cs(27,27): error CS1061: 'Stack<char>' does not contain a definition for 'IsEmpty' and no accessible extension method 'IsEmpty' accepting a first argument of type 'Stack<char>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpcax2veev.cs(35,22): error CS1061: 'Stack<char>' does not contain a definition for 'IsEmpty' and no accessible extension method 'IsEmpty' accepting a first argument of type 'Stack<char>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll also use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft2 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight2 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft3 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight3 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft4 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight4 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft5 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight5 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft6 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight6 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft7 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight7 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft8 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvww4crho.cs(25,14): warning CS0219: The variable 'seenLeft' is assigned but its value is never used\n/tmp/tmpvww4crho.cs(27,14): warning CS0219: The variable 'seenRight' is assigned but its value is never used\n/tmp/tmpvww4crho.cs(29,14): warning CS0219: The variable 'seenLeft2' is assigned but its value is never used\n/tmp/tmpvww4crho.cs(31,14): warning CS0219: The variable 'seenRight2' is assigned but its value is never used\n/tmp/tmpvww4crho.cs(33,14): warning CS0219: The variable 'seenLeft3' is assigned but its value is never used\n/tmp/tmpvww4crho.cs(35,14): warning CS0219: The variable 'seenRight3' is assigned but its value is never used\n/tmp/tmpvww4crho.cs(37,14): warning CS0219: The variable 'seenLeft4' is assigned but its value is never used\n/tmp/tmpvww4crho.cs(39,14): warning CS0219: The variable 'seenRight4' is assigned but its value is never used\n/tmp/tmpvww4crho.cs(41,14): warning CS0219: The variable 'seenLeft5' is assigned but its value is never used\n/tmp/tmpvww4crho.cs(43,14): warning CS0219: The variable 'seenRight5' is assigned but its value is never used\n/tmp/tmpvww4crho.cs(45,14): warning CS0219: The variable 'seenLeft6' is assigned but its value is never used\n/tmp/tmpvww4crho.cs(47,14): warning CS0219: The variable 'seenRight6' is assigned but its value is never used\n/tmp/tmpvww4crho.cs(49,14): warning CS0219: The variable 'seenLeft7' is assigned but its value is never used\n/tmp/tmpvww4crho.cs(51,14): warning CS0219: The variable 'seenRight7' is assigned but its value is never used\n/tmp/tmpvww4crho.cs(53,14): warning CS0219: The variable 'seenLeft8' is assigned but its value is never used\n/tmp/tmpvww4crho.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we're inside a bracket.\n        boolean inBracket = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenClosingBracket = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        boolean seenOpeningBracket = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenClosingBracket2 = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        boolean seenOpeningBracket2 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenClosingBracket3 = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        boolean seenOpeningBracket3 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenClosingBracket4 = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        boolean seenOpeningBracket4 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenClosingBracket5 = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        boolean seenOpeningBracket5 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenClosingBracket6 = false;\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        boolean seenOpeningBracket6 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        boolean seenClosingBracket7 = false;\n        // We\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy6ntdh_2.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpy6ntdh_2.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpy6ntdh_2.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpy6ntdh_2.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpy6ntdh_2.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpy6ntdh_2.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpy6ntdh_2.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpy6ntdh_2.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpy6ntdh_2.cs(41,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpy6ntdh_2.cs(43,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpy6ntdh_2.cs(45,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpy6ntdh_2.cs(47,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpy6ntd",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a boolean to keep track of whether we're in a string or not.\n        bool inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inStringOrComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inCommentOrString = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inCommentOrStringOrBracket = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inCommentOrStringOrBracketOrBracket = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inCommentOrStringOrBracketOrBracketOrBracket = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inCommentOrStringOrBracketOrBracketOrBracketOrBracket = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inCommentOrStringOrBracketOrBracketOrBracketOrBracketOrBracket = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inCommentOrStringOrBracketOrBracketOrBracketOrBracketOrBracketOrBracket = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inCommentOrStringOrBracketOrBracketOrBracketOrBracketOrBracketOrBracketOrBracket = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        bool inCommentOrStringOrBracketOrBracketOrBracketOrBracketOrBracketOrBracketOrBracketOrBracket = false;\n        // We'll use a boolean\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg_x8ofrw.cs(23,14): warning CS0219: The variable 'inString' is assigned but its value is never used\n/tmp/tmpg_x8ofrw.cs(25,14): warning CS0219: The variable 'inComment' is assigned but its value is never used\n/tmp/tmpg_x8ofrw.cs(27,14): warning CS0219: The variable 'inStringOrComment' is assigned but its value is never used\n/tmp/tmpg_x8ofrw.cs(29,14): warning CS0219: The variable 'inCommentOrString' is assigned but its value is never used\n/tmp/tmpg_x8ofrw.cs(31,14): warning CS0219: The variable 'inCommentOrStringOrBracket' is assigned but its value is never used\n/tmp/tmpg_x8ofrw.cs(33,14): warning CS0219: The variable 'inCommentOrStringOrBracketOrBracket' is assigned but its value is never used\n/tmp/tmpg_x8ofrw.cs(35,14): warning CS0219: The variable 'inCommentOrStringOrBracketOrBracketOrBracket' is assigned but its value is never used\n/tmp/tmpg_x8ofrw.cs(37,14): warning CS0219: The variable 'inCommentOrStringOrBracketOrBracketOrBracketOrBracket' is assigned but its value is never used\n/tmp/tmpg_x8ofrw.cs(39,14): warning CS0219: The variable 'inCommentOrStringOrBracketOrBracketOrBracketOrBracketOrBracket' is assigned but its value is never used\n/tmp/tmpg_x8ofrw.cs(41,14): warning CS0219: The variable 'inCommentOrStringOrBracketOrBracketOrBracketOrBracketOrBracketOrBracket' is assigned but its value is never used\n/tmp/tmpg_x8ofrw.cs(43,14): warning CS0219: The variable 'inCommentOrStringOrBracketOrBracketOrBracketOrBracketOrBracketOrBracketOrBracket' is assigned but its value is never used\n/tmp/tmpg_x8ofrw.cs(45,14): warning CS0219: The variable 'inCommentOrStringOrBracketOrBracketOrBracketOrBracketOrBracketOrBracketOrBracketOrBracket' is assigned but its value is never used\n/tmp/tmpg_x8ofrw.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[2];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                brackets_count[0]++;\n            }\n            else if (brackets[i] == '>') {\n                brackets_count[1]++;\n            }\n        }\n        return brackets_count[0] == brackets_count[1];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2e419119c08f47d390669616bf144411>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2e419119c08f47d390669616bf144411>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We will use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We will use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We will use a boolean to keep track of whether we are in a string or not.\n        bool inString = false;\n        // We will use a boolean to keep track of whether we are in a comment or not.\n        bool inComment = false;\n        // We will use a boolean to keep track of whether we are in a comment or not.\n        bool inComment2 = false;\n        // We will use a boolean to keep track of whether we are in a comment or not.\n        bool inComment3 = false;\n        // We will use a boolean to keep track of whether we are in a comment or not.\n        bool inComment4 = false;\n        // We will use a boolean to keep track of whether we are in a comment or not.\n        bool inComment5 = false;\n        // We will use a boolean to keep track of whether we are in a comment or not.\n        bool inComment6 = false;\n        // We will use a boolean to keep track of whether we are in a comment or not.\n        bool inComment7 = false;\n        // We will use a boolean to keep track of whether we are in a comment or not.\n        bool inComment8 = false;\n        // We will use a boolean to keep track of whether we are in a comment or not.\n        bool inComment9 = false;\n        // We will use a boolean to keep track of whether we are in a comment or not.\n        bool inComment10 = false;\n        // We will use a boolean to keep track of whether we are in a comment or not.\n        bool inComment11 = false;\n        // We will use a boolean to keep track of whether we are in a comment or not.\n        bool inComment12 = false;\n        // We will use a boolean to keep track of whether we are in a comment or not.\n        bool inComment13 = false;\n        // We will use a boolean to keep track of whether we are in a comment or not.\n        bool inComment14 = false;\n        // We will use\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_pdepq5r.cs(25,14): warning CS0219: The variable 'inString' is assigned but its value is never used\n/tmp/tmp_pdepq5r.cs(27,14): warning CS0219: The variable 'inComment' is assigned but its value is never used\n/tmp/tmp_pdepq5r.cs(29,14): warning CS0219: The variable 'inComment2' is assigned but its value is never used\n/tmp/tmp_pdepq5r.cs(31,14): warning CS0219: The variable 'inComment3' is assigned but its value is never used\n/tmp/tmp_pdepq5r.cs(33,14): warning CS0219: The variable 'inComment4' is assigned but its value is never used\n/tmp/tmp_pdepq5r.cs(35,14): warning CS0219: The variable 'inComment5' is assigned but its value is never used\n/tmp/tmp_pdepq5r.cs(37,14): warning CS0219: The variable 'inComment6' is assigned but its value is never used\n/tmp/tmp_pdepq5r.cs(39,14): warning CS0219: The variable 'inComment7' is assigned but its value is never used\n/tmp/tmp_pdepq5r.cs(41,14): warning CS0219: The variable 'inComment8' is assigned but its value is never used\n/tmp/tmp_pdepq5r.cs(43,14): warning CS0219: The variable 'inComment9' is assigned but its value is never used\n/tmp/tmp_pdepq5r.cs(45,14): warning CS0219: The variable 'inComment10' is assigned but its value is never used\n/tmp/tmp_pdepq5r.cs(47,14): warning CS0219: The variable 'inComment11' is assigned but its value is never used\n/tmp/tmp_pdepq5r.cs(49,14): warning CS0219: The variable 'inComment12' is assigned but its value is never used\n/tmp/tmp_pdepq5r.cs(51,14): warning CS0219: The variable 'inComment13' is assigned but its value is never used\n/tmp/tmp_pdepq5r.cs(53,14): warning CS0219: The variable 'inComment14' is assigned but its value is never used\n/tmp/tmp_pdepq5r.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var openingBrackets = new List<char>();\n        var closingBrackets = new List<char>();\n        for (var i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                openingBrackets.Add(brackets[i]);\n            }\n            else if (brackets[i] == '>') {\n                closingBrackets.Add(brackets[i]);\n            }\n        }\n        if (openingBrackets.Count == 0) {\n            return true;\n        }\n        if (openingBrackets.Count != closingBrackets.Count) {\n            return false;\n        }\n        for (var i = 0; i < openingBrackets.Count; i++) {\n            if (openingBrackets[i] != closingBrackets[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3583518a5fab4c5db8665fa9a26039a7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3583518a5fab4c5db8665fa9a26039a7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[2];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                brackets_count[0]++;\n            }\n            else if (brackets[i] == '>') {\n                brackets_count[1]++;\n            }\n        }\n        return brackets_count[0] == brackets_count[1];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2e419119c08f47d390669616bf144411>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2e419119c08f47d390669616bf144411>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsq8mnblh.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpsq8mnblh.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpsq8mnblh.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpsq8mnblh.cs(29,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpsq8mnblh.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpsq8mnblh.cs(31,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpsq8mnblh.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpsq8mnblh.cs(33,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpsq8mnblh.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpsq8mnblh.cs(35,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpsq8mnblh.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpsq8mnblh.cs(37,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpsq8mnblh.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpsq8mnblh.cs(39,17): error CS012",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n        for (var i = 0; i < brackets.Length; i++) {\n            var c = brackets[i];\n            if (c == '<') {\n                stack.Push('>');\n            }\n            else if (c == '>') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                stack.Pop();\n            }\n            else {\n                stack.Push(c);\n            }\n        }\n        return stack.Count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Write your code here\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[2];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                brackets_count[0]++;\n            }\n            else if (brackets[i] == '>') {\n                brackets_count[1]++;\n            }\n        }\n        return brackets_count[0] == brackets_count[1];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9b1e26dd6211484fb55c83f0a17fdcfd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9b1e26dd6211484fb55c83f0a17fdcfd>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool seenLeftRight = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool seenRightLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool seenLeftRightRight = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool seenRightLeftRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool seenLeftRightLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool seenRightLeftLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool seenLeftRightLeftLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool seenRightLeftLeftLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool seenLeftRightLeftLeftLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool seenRightLeftLeftLeftLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5lfj8eb0.cs(23,14): warning CS0219: The variable 'seenLeft' is assigned but its value is never used\n/tmp/tmp5lfj8eb0.cs(25,14): warning CS0219: The variable 'seenRight' is assigned but its value is never used\n/tmp/tmp5lfj8eb0.cs(28,14): warning CS0219: The variable 'seenLeftRight' is assigned but its value is never used\n/tmp/tmp5lfj8eb0.cs(31,14): warning CS0219: The variable 'seenRightLeft' is assigned but its value is never used\n/tmp/tmp5lfj8eb0.cs(34,14): warning CS0219: The variable 'seenLeftRightRight' is assigned but its value is never used\n/tmp/tmp5lfj8eb0.cs(37,14): warning CS0219: The variable 'seenRightLeftRight' is assigned but its value is never used\n/tmp/tmp5lfj8eb0.cs(40,14): warning CS0219: The variable 'seenLeftRightLeft' is assigned but its value is never used\n/tmp/tmp5lfj8eb0.cs(43,14): warning CS0219: The variable 'seenRightLeftLeft' is assigned but its value is never used\n/tmp/tmp5lfj8eb0.cs(46,14): warning CS0219: The variable 'seenLeftRightLeftLeft' is assigned but its value is never used\n/tmp/tmp5lfj8eb0.cs(49,14): warning CS0219: The variable 'seenRightLeftLeftLeft' is assigned but its value is never used\n/tmp/tmp5lfj8eb0.cs(52,14): warning CS0219: The variable 'seenLeftRightLeftLeftLeft' is assigned but its value is never used\n/tmp/tmp5lfj8eb0.cs(55,14): warning CS0219: The variable 'seenRightLeftLeftLeftLeft' is assigned but its value is never used\n/tmp/tmp5lfj8eb0.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Create a stack to store the brackets.\n        Stack<char> stack = new Stack<char>();\n        // Loop through the brackets.\n        for (int i = 0; i < brackets.Length; i++) {\n            // If the bracket is an opening bracket, push it onto the stack.\n            if (brackets[i] == '<') {\n                stack.Push(brackets[i]);\n            }\n            // If the bracket is a closing bracket, pop it off the stack.\n            else if (brackets[i] == '>') {\n                // If the top of the stack is not an opening bracket, return false.\n                if (stack.Peek() != '<') {\n                    return false;\n                }\n                // Pop the opening bracket off the stack.\n                stack.Pop();\n            }\n        }\n        // If the stack is empty, return true.\n        return stack.Count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.InvalidOperationException: Stack empty.\n  at System.Collections.Generic.Stack`1[T].Peek () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CorrectBracketing (System.String brackets) [0x0003d] in <87a5974d82d74430b3fb6652ed97536b>:0 \n  at Problem.Main (System.String[] args) [0x00041] in <87a5974d82d74430b3fb6652ed97536b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Stack empty.\n  at System.Collections.Generic.Stack`1[T].Peek () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CorrectBracketing (System.String brackets) [0x0003d] in <87a5974d82d74430b3fb6652ed97536b>:0 \n  at Problem.Main (System.String[] args) [0x00041] in <87a5974d82d74430b3fb6652ed97536b>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int openBrackets = 0;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                openBrackets++;\n            }\n            else if (brackets[i] == '>') {\n                openBrackets--;\n            }\n        }\n        return openBrackets == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c76b9a83273943dbad74728284af9073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c76b9a83273943dbad74728284af9073>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool seenLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool seenRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool seenLeftRight = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool seenRightLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool seenLeftRightRight = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool seenRightLeftRight = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool seenRightRightRight = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool seenLeftRightLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool seenRightRightLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket\n        // that is followed by a right bracket.\n        bool seenRightLeftLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool seenLeftRightLeftLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left bracket.\n        bool seenRightLeftLeftLeft = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket\n        // that is followed by a left\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_jd1uk5f.cs(23,14): warning CS0219: The variable 'seenLeft' is assigned but its value is never used\n/tmp/tmp_jd1uk5f.cs(25,14): warning CS0219: The variable 'seenRight' is assigned but its value is never used\n/tmp/tmp_jd1uk5f.cs(28,14): warning CS0219: The variable 'seenLeftRight' is assigned but its value is never used\n/tmp/tmp_jd1uk5f.cs(31,14): warning CS0219: The variable 'seenRightLeft' is assigned but its value is never used\n/tmp/tmp_jd1uk5f.cs(34,14): warning CS0219: The variable 'seenLeftRightRight' is assigned but its value is never used\n/tmp/tmp_jd1uk5f.cs(37,14): warning CS0219: The variable 'seenRightLeftRight' is assigned but its value is never used\n/tmp/tmp_jd1uk5f.cs(40,14): warning CS0219: The variable 'seenRightRightRight' is assigned but its value is never used\n/tmp/tmp_jd1uk5f.cs(43,14): warning CS0219: The variable 'seenLeftRightLeft' is assigned but its value is never used\n/tmp/tmp_jd1uk5f.cs(46,14): warning CS0219: The variable 'seenRightRightLeft' is assigned but its value is never used\n/tmp/tmp_jd1uk5f.cs(49,14): warning CS0219: The variable 'seenRightLeftLeft' is assigned but its value is never used\n/tmp/tmp_jd1uk5f.cs(52,14): warning CS0219: The variable 'seenLeftRightLeftLeft' is assigned but its value is never used\n/tmp/tmp_jd1uk5f.cs(55,14): warning CS0219: The variable 'seenRightLeftLeftLeft' is assigned but its value is never used\n/tmp/tmp_jd1uk5f.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll also keep track of the number of brackets.\n        int count = 0;\n        // We'll use a boolean to keep track of whether we're in a string.\n        bool inString = false;\n        // We'll also keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket = false;\n        // We'll also keep track of whether we've seen an opening bracket.\n        bool seenOpeningBracket = false;\n        // We'll also keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket2 = false;\n        // We'll also keep track of whether we've seen an opening bracket.\n        bool seenOpeningBracket2 = false;\n        // We'll also keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket3 = false;\n        // We'll also keep track of whether we've seen an opening bracket.\n        bool seenOpeningBracket3 = false;\n        // We'll also keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket4 = false;\n        // We'll also keep track of whether we've seen an opening bracket.\n        bool seenOpeningBracket4 = false;\n        // We'll also keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket5 = false;\n        // We'll also keep track of whether we've seen an opening bracket.\n        bool seenOpeningBracket5 = false;\n        // We'll also keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket6 = false;\n        // We'll also keep track of whether we've seen an opening bracket.\n        bool seenOpeningBracket6 = false;\n        // We'll also keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket7 = false;\n        // We'll also keep track of whether we've seen an opening bracket.\n        bool seenOpeningBracket7 = false;\n        // We'll also keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket8 = false;\n        // We'll also keep track of whether\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpb7yref9l.cs(23,13): warning CS0219: The variable 'count' is assigned but its value is never used\n/tmp/tmpb7yref9l.cs(25,14): warning CS0219: The variable 'inString' is assigned but its value is never used\n/tmp/tmpb7yref9l.cs(27,14): warning CS0219: The variable 'seenClosingBracket' is assigned but its value is never used\n/tmp/tmpb7yref9l.cs(29,14): warning CS0219: The variable 'seenOpeningBracket' is assigned but its value is never used\n/tmp/tmpb7yref9l.cs(31,14): warning CS0219: The variable 'seenClosingBracket2' is assigned but its value is never used\n/tmp/tmpb7yref9l.cs(33,14): warning CS0219: The variable 'seenOpeningBracket2' is assigned but its value is never used\n/tmp/tmpb7yref9l.cs(35,14): warning CS0219: The variable 'seenClosingBracket3' is assigned but its value is never used\n/tmp/tmpb7yref9l.cs(37,14): warning CS0219: The variable 'seenOpeningBracket3' is assigned but its value is never used\n/tmp/tmpb7yref9l.cs(39,14): warning CS0219: The variable 'seenClosingBracket4' is assigned but its value is never used\n/tmp/tmpb7yref9l.cs(41,14): warning CS0219: The variable 'seenOpeningBracket4' is assigned but its value is never used\n/tmp/tmpb7yref9l.cs(43,14): warning CS0219: The variable 'seenClosingBracket5' is assigned but its value is never used\n/tmp/tmpb7yref9l.cs(45,14): warning CS0219: The variable 'seenOpeningBracket5' is assigned but its value is never used\n/tmp/tmpb7yref9l.cs(47,14): warning CS0219: The variable 'seenClosingBracket6' is assigned but its value is never used\n/tmp/tmpb7yref9l.cs(49,14): warning CS0219: The variable 'seenOpeningBracket6' is assigned but its value is never used\n/tmp/tmpb7yref9l.cs(51,14): warning CS0219: The variable 'seenClosingBracket7' is assigned but its value is never used\n/tmp/tmpb7yref9l.cs(53,14): warning CS0219: The variable 'seenOpeningBracket7' is assigned but its value is never used\n/tmp/tmpb7yref9l.cs(55,14): warning CS0219: ",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[256];\n        for (int i = 0; i < brackets.Length; i++) {\n            brackets_count[brackets[i]]++;\n        }\n        for (int i = 0; i < brackets_count.Length; i++) {\n            if (brackets_count[i] != 0) {\n                if (brackets_count[i] != 1) return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fe23f53e91b049268ac9cadf01baa0b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fe23f53e91b049268ac9cadf01baa0b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we're in a string or not.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment2 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment3 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment4 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment5 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment6 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment7 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment8 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment9 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment10 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment11 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment12 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment13 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzohunz0e.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(41,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(43,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(45,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(47,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohun",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen.\n        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < brackets.Length; i++) {\n            char c = brackets[i];\n            if (c == '<') {\n                // If we've seen an opening bracket, add it to the stack.\n                stack.Push(c);\n            }\n            else if (c == '>') {\n                // If the top of the stack is an opening bracket, pop it off.\n                if (stack.Peek() == '<') {\n                    stack.Pop();\n                }\n                // If the top of the stack is a closing bracket, pop it off.\n                else if (stack.Peek() == '>') {\n                    stack.Pop();\n                }\n                // If the top of the stack is an opening bracket, pop it off.\n                else {\n                    return false;\n                }\n            }\n        }\n        // If the stack is empty, we've seen all the brackets.\n        return stack.Count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.InvalidOperationException: Stack empty.\n  at System.Collections.Generic.Stack`1[T].Peek () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CorrectBracketing (System.String brackets) [0x00035] in <f2ba78f8368f480592fe5b19765983c1>:0 \n  at Problem.Main (System.String[] args) [0x00041] in <f2ba78f8368f480592fe5b19765983c1>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Stack empty.\n  at System.Collections.Generic.Stack`1[T].Peek () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CorrectBracketing (System.String brackets) [0x00035] in <f2ba78f8368f480592fe5b19765983c1>:0 \n  at Problem.Main (System.String[] args) [0x00041] in <f2ba78f8368f480592fe5b19765983c1>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd0vavo4q.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(29,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpd0vavo4q.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(31,17): error CS0128: A local variable or function named 'inString' is already defined in this scope\n/tmp/tmpd0vavo4q.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(33,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpd0vavo4q.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(35,17): error CS0128: A local variable or function named 'inString' is already defined in this scope\n/tmp/tmpd0vavo4q.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(37,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpd0vavo4q.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd0vavo4q.cs(39,17): error CS0128:",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n        for (var c : chars(brackets)) {\n            if (c == '<') {\n                stack.Push('>');\n            }\n            else if (c == '>') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                else {\n                    stack.Pop();\n                }\n            }\n        }\n        return stack.Count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphblftutb.cs(21,20): error CS1002: ; expected\n/tmp/tmphblftutb.cs(21,20): error CS1525: Invalid expression term ':'\n/tmp/tmphblftutb.cs(21,20): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we're in a string.\n        bool inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment2 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment3 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment4 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment5 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment6 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment7 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment8 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment9 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment10 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment11 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment12 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment13 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment14 = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        bool inComment15 = false;\n        // We'll use a boolean\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4iushria.cs(25,14): warning CS0219: The variable 'inString' is assigned but its value is never used\n/tmp/tmp4iushria.cs(27,14): warning CS0219: The variable 'inComment' is assigned but its value is never used\n/tmp/tmp4iushria.cs(29,14): warning CS0219: The variable 'inComment2' is assigned but its value is never used\n/tmp/tmp4iushria.cs(31,14): warning CS0219: The variable 'inComment3' is assigned but its value is never used\n/tmp/tmp4iushria.cs(33,14): warning CS0219: The variable 'inComment4' is assigned but its value is never used\n/tmp/tmp4iushria.cs(35,14): warning CS0219: The variable 'inComment5' is assigned but its value is never used\n/tmp/tmp4iushria.cs(37,14): warning CS0219: The variable 'inComment6' is assigned but its value is never used\n/tmp/tmp4iushria.cs(39,14): warning CS0219: The variable 'inComment7' is assigned but its value is never used\n/tmp/tmp4iushria.cs(41,14): warning CS0219: The variable 'inComment8' is assigned but its value is never used\n/tmp/tmp4iushria.cs(43,14): warning CS0219: The variable 'inComment9' is assigned but its value is never used\n/tmp/tmp4iushria.cs(45,14): warning CS0219: The variable 'inComment10' is assigned but its value is never used\n/tmp/tmp4iushria.cs(47,14): warning CS0219: The variable 'inComment11' is assigned but its value is never used\n/tmp/tmp4iushria.cs(49,14): warning CS0219: The variable 'inComment12' is assigned but its value is never used\n/tmp/tmp4iushria.cs(51,14): warning CS0219: The variable 'inComment13' is assigned but its value is never used\n/tmp/tmp4iushria.cs(53,14): warning CS0219: The variable 'inComment14' is assigned but its value is never used\n/tmp/tmp4iushria.cs(55,14): warning CS0219: The variable 'inComment15' is assigned but its value is never used\n/tmp/tmp4iushria.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[2];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                brackets_count[0]++;\n            }\n            else if (brackets[i] == '>') {\n                brackets_count[1]++;\n            }\n        }\n        return brackets_count[0] == brackets_count[1];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2e419119c08f47d390669616bf144411>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2e419119c08f47d390669616bf144411>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Write your code here\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[256];\n        for (int i = 0; i < brackets.Length; i++) {\n            brackets_count[brackets[i]]++;\n        }\n        for (int i = 0; i < 256; i++) {\n            if (brackets_count[i] != 0) {\n                if (brackets_count[i] != brackets.Length - 1) return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293429,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <471fc03db4214a15b6c9321764ba8a37>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <471fc03db4214a15b6c9321764ba8a37>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Write your code here\n        if (brackets.Length == 0)\n            return true;\n        if (brackets.Length == 1)\n            return false;\n        int[] brackets_count = new int[brackets.Length];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<')\n                brackets_count[i] = 1;\n            else if (brackets[i] == '>')\n                brackets_count[i] = 0;\n            else\n                throw new Exception(\"Invalid bracket\");\n        }\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets_count[i] == 0)\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293429,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8b48e67d2088483fba7afb336559d54b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8b48e67d2088483fba7afb336559d54b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString2 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString3 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString4 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString5 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString6 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString7 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString8 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString9 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString10 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString11 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString12 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString13 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString14 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293425,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz558x22l.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(41,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(43,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(45,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(47,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We use a boolean to keep track of whether we have seen a left bracket.\n        bool left = false;\n        // We use a boolean to keep track of whether we have seen a right bracket.\n        bool right = false;\n        // We use a boolean to keep track of whether we have seen a left bracket.\n        bool left2 = false;\n        // We use a boolean to keep track of whether we have seen a right bracket.\n        bool right2 = false;\n        // We use a boolean to keep track of whether we have seen a left bracket.\n        bool left3 = false;\n        // We use a boolean to keep track of whether we have seen a right bracket.\n        bool right3 = false;\n        // We use a boolean to keep track of whether we have seen a left bracket.\n        bool left4 = false;\n        // We use a boolean to keep track of whether we have seen a right bracket.\n        bool right4 = false;\n        // We use a boolean to keep track of whether we have seen a left bracket.\n        bool left5 = false;\n        // We use a boolean to keep track of whether we have seen a right bracket.\n        bool right5 = false;\n        // We use a boolean to keep track of whether we have seen a left bracket.\n        bool left6 = false;\n        // We use a boolean to keep track of whether we have seen a right bracket.\n        bool right6 = false;\n        // We use a boolean to keep track of whether we have seen a left bracket.\n        bool left7 = false;\n        // We use a boolean to keep track of whether we have seen a right bracket.\n        bool right7 = false;\n        // We use a boolean to keep track of whether we have seen a left bracket.\n        bool left8 = false;\n        // We use a boolean to keep track of whether we have seen a right bracket.\n        bool right8 = false;\n        // We use a boolean to keep track of whether we have seen a left bracket.\n        bool left9 = false;\n        // We use a boolean to keep track of whether we have seen a right bracket.\n        bool right9 = false;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpms5zf6ug.cs(23,14): warning CS0219: The variable 'left' is assigned but its value is never used\n/tmp/tmpms5zf6ug.cs(25,14): warning CS0219: The variable 'right' is assigned but its value is never used\n/tmp/tmpms5zf6ug.cs(27,14): warning CS0219: The variable 'left2' is assigned but its value is never used\n/tmp/tmpms5zf6ug.cs(29,14): warning CS0219: The variable 'right2' is assigned but its value is never used\n/tmp/tmpms5zf6ug.cs(31,14): warning CS0219: The variable 'left3' is assigned but its value is never used\n/tmp/tmpms5zf6ug.cs(33,14): warning CS0219: The variable 'right3' is assigned but its value is never used\n/tmp/tmpms5zf6ug.cs(35,14): warning CS0219: The variable 'left4' is assigned but its value is never used\n/tmp/tmpms5zf6ug.cs(37,14): warning CS0219: The variable 'right4' is assigned but its value is never used\n/tmp/tmpms5zf6ug.cs(39,14): warning CS0219: The variable 'left5' is assigned but its value is never used\n/tmp/tmpms5zf6ug.cs(41,14): warning CS0219: The variable 'right5' is assigned but its value is never used\n/tmp/tmpms5zf6ug.cs(43,14): warning CS0219: The variable 'left6' is assigned but its value is never used\n/tmp/tmpms5zf6ug.cs(45,14): warning CS0219: The variable 'right6' is assigned but its value is never used\n/tmp/tmpms5zf6ug.cs(47,14): warning CS0219: The variable 'left7' is assigned but its value is never used\n/tmp/tmpms5zf6ug.cs(49,14): warning CS0219: The variable 'right7' is assigned but its value is never used\n/tmp/tmpms5zf6ug.cs(51,14): warning CS0219: The variable 'left8' is assigned but its value is never used\n/tmp/tmpms5zf6ug.cs(53,14): warning CS0219: The variable 'right8' is assigned but its value is never used\n/tmp/tmpms5zf6ug.cs(55,14): warning CS0219: The variable 'left9' is assigned but its value is never used\n/tmp/tmpms5zf6ug.cs(57,14): warning CS0219: The variable 'right9' is assigned but its value is never used\n/tmp/tmpms5zf6ug.cs(19,2",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] bracket_count = new int[2];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') bracket_count[0]++;\n            else if (brackets[i] == '>') bracket_count[1]++;\n        }\n        return bracket_count[0] == bracket_count[1];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293429,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b3e43ff6562e481b8ec68ecd0f08be3a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b3e43ff6562e481b8ec68ecd0f08be3a>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int openBrackets = 0;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                openBrackets++;\n            }\n            else if (brackets[i] == '>') {\n                openBrackets--;\n            }\n        }\n        return openBrackets == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c76b9a83273943dbad74728284af9073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c76b9a83273943dbad74728284af9073>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we're in a string or not.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment2 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment3 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment4 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment5 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment6 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment7 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment8 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment9 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment10 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment11 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment12 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n        boolean inComment13 = false;\n        // We'll use a boolean to keep track of whether we're in a comment or not.\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzohunz0e.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(41,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(43,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(45,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohunz0e.cs(47,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpzohun",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // if (brackets.Length == 0) return true;\n        // if (brackets.Length == 1) return true;\n        // if (brackets.Length == 2) return true;\n        // if (brackets.Length == 3) return true;\n        // if (brackets.Length == 4) return true;\n        // if (brackets.Length == 5) return true;\n        // if (brackets.Length == 6) return true;\n        // if (brackets.Length == 7) return true;\n        // if (brackets.Length == 8) return true;\n        // if (brackets.Length == 9) return true;\n        // if (brackets.Length == 10) return true;\n        // if (brackets.Length == 11) return true;\n        // if (brackets.Length == 12) return true;\n        // if (brackets.Length == 13) return true;\n        // if (brackets.Length == 14) return true;\n        // if (brackets.Length == 15) return true;\n        // if (brackets.Length == 16) return true;\n        // if (brackets.Length == 17) return true;\n        // if (brackets.Length == 18) return true;\n        // if (brackets.Length == 19) return true;\n        // if (brackets.Length == 20) return true;\n        // if (brackets.Length == 21) return true;\n        // if (brackets.Length == 22) return true;\n        // if (brackets.Length == 23) return true;\n        // if (brackets.Length == 24) return true;\n        // if (brackets.Length == 25) return true;\n        // if (brackets.Length == 26) return true;\n        // if (brackets.Length == 27) return true;\n        // if (brackets.Length == 28) return true;\n        // if (brackets.Length == 29) return true;\n        // if (brackets.Length == 30) return true;\n        // if (brackets.Length == 31) return true;\n        // if (brackets.Length == 32) return true;\n        // if (brackets.Length == 33) return true;\n        //\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2574v41a.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We will use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We will use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We will use a boolean to keep track of whether we have seen an opening bracket.\n        bool seenOpenBracket = false;\n        // We will use a boolean to keep track of whether we have seen a closing bracket.\n        bool seenCloseBracket = false;\n        // We will use a boolean to keep track of whether we have seen an opening bracket.\n        bool seenOpenBracket2 = false;\n        // We will use a boolean to keep track of whether we have seen a closing bracket.\n        bool seenCloseBracket2 = false;\n        // We will use a boolean to keep track of whether we have seen an opening bracket.\n        bool seenOpenBracket3 = false;\n        // We will use a boolean to keep track of whether we have seen a closing bracket.\n        bool seenCloseBracket3 = false;\n        // We will use a boolean to keep track of whether we have seen an opening bracket.\n        bool seenOpenBracket4 = false;\n        // We will use a boolean to keep track of whether we have seen a closing bracket.\n        bool seenCloseBracket4 = false;\n        // We will use a boolean to keep track of whether we have seen an opening bracket.\n        bool seenOpenBracket5 = false;\n        // We will use a boolean to keep track of whether we have seen a closing bracket.\n        bool seenCloseBracket5 = false;\n        // We will use a boolean to keep track of whether we have seen an opening bracket.\n        bool seenOpenBracket6 = false;\n        // We will use a boolean to keep track of whether we have seen a closing bracket.\n        bool seenCloseBracket6 = false;\n        // We will use a boolean to keep track of whether we have seen an opening bracket.\n        bool seenOpenBracket7 = false;\n        // We will use a boolean to keep track of whether we have seen a closing bracket.\n        bool seenCloseBracket7 = false;\n        // We will use a boolean to keep track of whether we have seen an opening bracket.\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293429,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpir90hd6a.cs(25,14): warning CS0219: The variable 'seenOpenBracket' is assigned but its value is never used\n/tmp/tmpir90hd6a.cs(27,14): warning CS0219: The variable 'seenCloseBracket' is assigned but its value is never used\n/tmp/tmpir90hd6a.cs(29,14): warning CS0219: The variable 'seenOpenBracket2' is assigned but its value is never used\n/tmp/tmpir90hd6a.cs(31,14): warning CS0219: The variable 'seenCloseBracket2' is assigned but its value is never used\n/tmp/tmpir90hd6a.cs(33,14): warning CS0219: The variable 'seenOpenBracket3' is assigned but its value is never used\n/tmp/tmpir90hd6a.cs(35,14): warning CS0219: The variable 'seenCloseBracket3' is assigned but its value is never used\n/tmp/tmpir90hd6a.cs(37,14): warning CS0219: The variable 'seenOpenBracket4' is assigned but its value is never used\n/tmp/tmpir90hd6a.cs(39,14): warning CS0219: The variable 'seenCloseBracket4' is assigned but its value is never used\n/tmp/tmpir90hd6a.cs(41,14): warning CS0219: The variable 'seenOpenBracket5' is assigned but its value is never used\n/tmp/tmpir90hd6a.cs(43,14): warning CS0219: The variable 'seenCloseBracket5' is assigned but its value is never used\n/tmp/tmpir90hd6a.cs(45,14): warning CS0219: The variable 'seenOpenBracket6' is assigned but its value is never used\n/tmp/tmpir90hd6a.cs(47,14): warning CS0219: The variable 'seenCloseBracket6' is assigned but its value is never used\n/tmp/tmpir90hd6a.cs(49,14): warning CS0219: The variable 'seenOpenBracket7' is assigned but its value is never used\n/tmp/tmpir90hd6a.cs(51,14): warning CS0219: The variable 'seenCloseBracket7' is assigned but its value is never used\n/tmp/tmpir90hd6a.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString2 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString3 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString4 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString5 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString6 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString7 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString8 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString9 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString10 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString11 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString12 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString13 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString14 = false;\n        // We'll use a boolean to keep track of whether we're in a string.\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293425,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz558x22l.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(41,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(43,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(45,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x22l.cs(47,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpz558x",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We use a boolean to keep track of whether we are in a string or not.\n        boolean inString = false;\n        // We use a boolean to keep track of whether we are in a comment or not.\n        boolean inComment = false;\n        // We use a boolean to keep track of whether we are in a comment or not.\n        boolean inComment2 = false;\n        // We use a boolean to keep track of whether we are in a comment or not.\n        boolean inComment3 = false;\n        // We use a boolean to keep track of whether we are in a comment or not.\n        boolean inComment4 = false;\n        // We use a boolean to keep track of whether we are in a comment or not.\n        boolean inComment5 = false;\n        // We use a boolean to keep track of whether we are in a comment or not.\n        boolean inComment6 = false;\n        // We use a boolean to keep track of whether we are in a comment or not.\n        boolean inComment7 = false;\n        // We use a boolean to keep track of whether we are in a comment or not.\n        boolean inComment8 = false;\n        // We use a boolean to keep track of whether we are in a comment or not.\n        boolean inComment9 = false;\n        // We use a boolean to keep track of whether we are in a comment or not.\n        boolean inComment10 = false;\n        // We use a boolean to keep track of whether we are in a comment or not.\n        boolean inComment11 = false;\n        // We use a boolean to keep track of whether we are in a comment or not.\n        boolean inComment12 = false;\n        // We use a boolean to keep track of whether we are in a comment or not.\n        boolean inComment13 = false;\n        // We use a boolean to keep track of whether we are in a comment or not.\n        boolean inComment14 = false;\n        // We use a boolean to keep track of whether we are in a comment or not.\n        boolean inComment15 = false;\n        // We use a boolean\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc4t5r48h.cs(23,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpc4t5r48h.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpc4t5r48h.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpc4t5r48h.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpc4t5r48h.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpc4t5r48h.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpc4t5r48h.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpc4t5r48h.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpc4t5r48h.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpc4t5r48h.cs(41,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpc4t5r48h.cs(43,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpc4t5r48h.cs(45,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpc4t5r",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n        for (var i = 0; i < brackets.Length; i++) {\n            var c = brackets[i];\n            if (c == '<') {\n                stack.Push('>');\n            }\n            else if (c == '>') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                stack.Pop();\n            }\n        }\n        return stack.Count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Create a stack to store the brackets.\n        Stack<char> stack = new Stack<char>();\n        // Create a string to store the brackets.\n        string brackets_str = new string(brackets);\n        // For each character in the brackets string.\n        for (int i = 0; i < brackets_str.Length; i++) {\n            // If the character is an opening bracket.\n            if (brackets_str[i] == '<') {\n                // Push the character to the stack.\n                stack.Push(brackets_str[i]);\n            }\n            // If the character is a closing bracket.\n            else if (brackets_str[i] == '>') {\n                // If the character is an opening bracket.\n                if (stack.Peek() == '<') {\n                    // Pop the character from the stack.\n                    stack.Pop();\n                }\n                // If the character is a closing bracket.\n                else {\n                    // Return false.\n                    return false;\n                }\n            }\n        }\n        // If the stack is empty.\n        if (stack.Count == 0) {\n            // Return true.\n            return true;\n        }\n        // Return false.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293429,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.InvalidOperationException: Stack empty.\n  at System.Collections.Generic.Stack`1[T].Peek () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CorrectBracketing (System.String brackets) [0x0004b] in <3a5a27bd5811492f9b351200c3717064>:0 \n  at Problem.Main (System.String[] args) [0x00041] in <3a5a27bd5811492f9b351200c3717064>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Stack empty.\n  at System.Collections.Generic.Stack`1[T].Peek () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CorrectBracketing (System.String brackets) [0x0004b] in <3a5a27bd5811492f9b351200c3717064>:0 \n  at Problem.Main (System.String[] args) [0x00041] in <3a5a27bd5811492f9b351200c3717064>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Write your code here\n        if (brackets.Length == 0)\n            return true;\n        int openBrackets = 0;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<')\n                openBrackets++;\n            else if (brackets[i] == '>')\n                openBrackets--;\n        }\n        return openBrackets == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <863e5660838343f2b6f26642cc288a78>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <863e5660838343f2b6f26642cc288a78>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n        for (var i = 0; i < brackets.Length; i++) {\n            var c = brackets[i];\n            if (c == '<') {\n                stack.Push('>');\n            }\n            else if (c == '>') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                stack.Pop();\n            }\n            else {\n                stack.Push(c);\n            }\n        }\n        return stack.Count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets we've seen.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left2 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right2 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left3 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right3 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left4 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right4 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left5 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right5 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left6 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right6 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left7 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right7 = false;\n        // We'll use a boolean to keep track of whether we've seen a left bracket.\n        bool left8 = false;\n        // We'll use a boolean to keep track of whether we've seen a right bracket.\n        bool right8 = false;\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphrb90lto.cs(25,14): warning CS0219: The variable 'left' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(27,14): warning CS0219: The variable 'right' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(29,14): warning CS0219: The variable 'left2' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(31,14): warning CS0219: The variable 'right2' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(33,14): warning CS0219: The variable 'left3' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(35,14): warning CS0219: The variable 'right3' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(37,14): warning CS0219: The variable 'left4' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(39,14): warning CS0219: The variable 'right4' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(41,14): warning CS0219: The variable 'left5' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(43,14): warning CS0219: The variable 'right5' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(45,14): warning CS0219: The variable 'left6' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(47,14): warning CS0219: The variable 'right6' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(49,14): warning CS0219: The variable 'left7' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(51,14): warning CS0219: The variable 'right7' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(53,14): warning CS0219: The variable 'left8' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(55,14): warning CS0219: The variable 'right8' is assigned but its value is never used\n/tmp/tmphrb90lto.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var openBrackets = new List<char>();\n        var closeBrackets = new List<char>();\n        for (var c : chars(brackets)) {\n            if (c == '<') {\n                openBrackets.Add(c);\n            }\n            else if (c == '>') {\n                closeBrackets.Add(c);\n            }\n        }\n        if (openBrackets.Count == 0) {\n            return true;\n        }\n        if (openBrackets.Count != closeBrackets.Count) {\n            return false;\n        }\n        for (var i = 0; i < openBrackets.Count; i++) {\n            if (openBrackets[i] != closeBrackets[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0l0cut_0.cs(22,20): error CS1002: ; expected\n/tmp/tmp0l0cut_0.cs(22,20): error CS1525: Invalid expression term ':'\n/tmp/tmp0l0cut_0.cs(22,20): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n        for (var i = 0; i < brackets.Length; i++) {\n            var c = brackets[i];\n            if (c == '<') {\n                stack.Push('>');\n            }\n            else if (c == '>') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                stack.Pop();\n            }\n        }\n        return stack.Count == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // Create a stack to store the brackets.\n        Stack<char> stack = new Stack<char>();\n        // Loop through the brackets.\n        for (int i = 0; i < brackets.Length; i++) {\n            // If the bracket is an opening bracket, push it onto the stack.\n            if (brackets[i] == '<') {\n                stack.Push('<');\n            }\n            // If the bracket is a closing bracket, pop it off the stack.\n            else if (brackets[i] == '>') {\n                if (stack.IsEmpty()) {\n                    return false;\n                }\n                else {\n                    stack.Pop();\n                }\n            }\n        }\n        // If the stack is empty, the brackets are correct.\n        return stack.IsEmpty();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293429,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqrr72l79.cs(30,27): error CS1061: 'Stack<char>' does not contain a definition for 'IsEmpty' and no accessible extension method 'IsEmpty' accepting a first argument of type 'Stack<char>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpqrr72l79.cs(39,22): error CS1061: 'Stack<char>' does not contain a definition for 'IsEmpty' and no accessible extension method 'IsEmpty' accepting a first argument of type 'Stack<char>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0)\n            return true;\n        int[] brackets_count = new int[2];\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<')\n                brackets_count[0]++;\n            else if (brackets[i] == '>')\n                brackets_count[1]++;\n        }\n        if (brackets_count[0] != brackets_count[1])\n            return false;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n                if (i + 1 < brackets.Length && brackets[i + 1] == '>')\n                    return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293429,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c81fd13a94764202a945eb1888dcd057>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c81fd13a94764202a945eb1888dcd057>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets we've seen so far.\n        Stack<char> stack = new Stack<char>();\n        // We'll use a queue to keep track of the brackets we've seen so far.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we've seen an opening bracket.\n        bool seenOpenBracket = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket2 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket2 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket3 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket3 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket4 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket4 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket5 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket5 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket6 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket6 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenOpenBracket7 = false;\n        // We'll use a boolean to keep track of whether we've seen a closing bracket.\n        bool seenClosingBracket7 = false;\n        // We'll\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293429,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvxbpw_7f.cs(25,14): warning CS0219: The variable 'seenOpenBracket' is assigned but its value is never used\n/tmp/tmpvxbpw_7f.cs(27,14): warning CS0219: The variable 'seenClosingBracket' is assigned but its value is never used\n/tmp/tmpvxbpw_7f.cs(29,14): warning CS0219: The variable 'seenOpenBracket2' is assigned but its value is never used\n/tmp/tmpvxbpw_7f.cs(31,14): warning CS0219: The variable 'seenClosingBracket2' is assigned but its value is never used\n/tmp/tmpvxbpw_7f.cs(33,14): warning CS0219: The variable 'seenOpenBracket3' is assigned but its value is never used\n/tmp/tmpvxbpw_7f.cs(35,14): warning CS0219: The variable 'seenClosingBracket3' is assigned but its value is never used\n/tmp/tmpvxbpw_7f.cs(37,14): warning CS0219: The variable 'seenOpenBracket4' is assigned but its value is never used\n/tmp/tmpvxbpw_7f.cs(39,14): warning CS0219: The variable 'seenClosingBracket4' is assigned but its value is never used\n/tmp/tmpvxbpw_7f.cs(41,14): warning CS0219: The variable 'seenOpenBracket5' is assigned but its value is never used\n/tmp/tmpvxbpw_7f.cs(43,14): warning CS0219: The variable 'seenClosingBracket5' is assigned but its value is never used\n/tmp/tmpvxbpw_7f.cs(45,14): warning CS0219: The variable 'seenOpenBracket6' is assigned but its value is never used\n/tmp/tmpvxbpw_7f.cs(47,14): warning CS0219: The variable 'seenClosingBracket6' is assigned but its value is never used\n/tmp/tmpvxbpw_7f.cs(49,14): warning CS0219: The variable 'seenOpenBracket7' is assigned but its value is never used\n/tmp/tmpvxbpw_7f.cs(51,14): warning CS0219: The variable 'seenClosingBracket7' is assigned but its value is never used\n/tmp/tmpvxbpw_7f.cs(19,24): error CS0161: 'Problem.CorrectBracketing(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return true;\n        int[] brackets_count = new int[256];\n        for (int i = 0; i < brackets.Length; i++) {\n            brackets_count[brackets[i]]++;\n        }\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets_count[brackets[i]] == 0) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3828b7ecf6de437eb336e64287951bf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3828b7ecf6de437eb336e64287951bf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We'll use a stack to keep track of the brackets.\n        Stack<char> stack = new Stack<char>();\n        // We'll also use a queue to keep track of the brackets.\n        Queue<char> queue = new Queue<char>();\n        // We'll use a boolean to keep track of whether we're in a string.\n        boolean inString = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll use a boolean to keep track of whether we're in a comment.\n        boolean inComment = false;\n        // We'll\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293429,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjukiz1pv.cs(25,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpjukiz1pv.cs(27,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpjukiz1pv.cs(29,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpjukiz1pv.cs(29,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpjukiz1pv.cs(31,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpjukiz1pv.cs(31,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpjukiz1pv.cs(33,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpjukiz1pv.cs(33,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpjukiz1pv.cs(35,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpjukiz1pv.cs(35,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpjukiz1pv.cs(37,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpjukiz1pv.cs(37,17): error CS0128: A local variable or function named 'inComment' is already defined in this scope\n/tmp/tmpjukiz1pv.cs(39,9): error CS0246: The type or namespace name 'boolean' could not be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpjukiz1pv.cs(39,17): error CS012",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        // We use a stack to keep track of the brackets we have seen so far.\n        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < brackets.Length; i++) {\n            char c = brackets[i];\n            if (c == '<') {\n                stack.Push('>');\n            }\n            else if (c == '>') {\n                if (stack.IsEmpty()) {\n                    return false;\n                }\n                char top = stack.Peek();\n                if (top == '<') {\n                    stack.Pop();\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n        return stack.IsEmpty();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293429,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp46sn8ur7.cs(28,27): error CS1061: 'Stack<char>' does not contain a definition for 'IsEmpty' and no accessible extension method 'IsEmpty' accepting a first argument of type 'Stack<char>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp46sn8ur7.cs(40,22): error CS1061: 'Stack<char>' does not contain a definition for 'IsEmpty' and no accessible extension method 'IsEmpty' accepting a first argument of type 'Stack<char>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}