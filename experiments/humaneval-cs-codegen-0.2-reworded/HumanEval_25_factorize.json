{
  "name": "HumanEval_25_factorize",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>> Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L, (long)7L}))\n    public static List<long> Factorize(long n) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L, (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n",
  "completions": [
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            if (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            else {\n                prime = prime + 1;\n            }\n        }\n        return factors;",
    "        if (n == 1) return new List<long>(new long[] { 1 });\n        List<long> factors = new List<long>();\n        long p = 2;\n        while (n > 1) {\n            while (n % p == 0) {\n                factors.Add(p);\n                n /= p;\n            }\n            p++;\n        }\n        return factors;",
    "        // If number is prime, return it\n        if (n < 2) return new List<long>(new long[] { n });\n        // If number is even, return it\n        if (n % 2 == 0) return new List<long>(new long[] { n });\n        // If number is odd, factorize it\n        List<long> factors = new List<long>();\n        long root = (long)Math.sqrt(n);\n        for (long i = 3; i <= root; i += 2) {\n            while (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) factors.Add(n);\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 1) return factors;\n        if (n == 0) return factors;\n        if (n == 2) return factors;\n        if (n == 3) return factors;\n        if (n == 4) return factors;\n        if (n == 5) return factors;\n        if (n == 6) return factors;\n        if (n == 7) return factors;\n        if (n == 8) return factors;\n        if (n == 9) return factors;\n        if (n == 10) return factors;\n        if (n == 11) return factors;\n        if (n == 12) return factors;\n        if (n == 13) return factors;\n        if (n == 14) return factors;\n        if (n == 15) return factors;\n        if (n == 16) return factors;\n        if (n == 17) return factors;\n        if (n == 18) return factors;\n        if (n == 19) return factors;\n        if (n == 20) return factors;\n        if (n == 21) return factors;\n        if (n == 22) return factors;\n        if (n == 23) return factors;\n        if (n == 24) return factors;\n        if (n == 25) return factors;\n        if (n == 26) return factors;\n        if (n == 27) return factors;\n        if (n == 28) return factors;\n        if (n == 29) return factors;\n        if (n == 30) return factors;\n        if (n == 31) return factors;\n        if (n == 32) return factors;\n        if (n == 33) return factors;\n        if (n == 34) return factors;\n        if (n == 35) return factors;\n        if (n == 36) return factors;\n        if (n == 37) return factors;\n        if (n == 38) return factors;\n        if (n == 39) return factors;\n        if (n == 40) return factors;\n        if (n == 41) return factors;\n        if (n == 42) return factors;\n        if (n == 43) return factors;\n        if (n == 44) return factors;\n        if (",
    "        List<long> factors = new List<long>();\n        if (n == 1) return factors;\n        if (n == 2) return factors;\n        if (n == 3) return factors;\n        if (n == 4) return factors;\n        if (n == 5) return factors;\n        if (n == 6) return factors;\n        if (n == 7) return factors;\n        if (n == 8) return factors;\n        if (n == 9) return factors;\n        if (n == 10) return factors;\n        if (n == 11) return factors;\n        if (n == 12) return factors;\n        if (n == 13) return factors;\n        if (n == 14) return factors;\n        if (n == 15) return factors;\n        if (n == 16) return factors;\n        if (n == 17) return factors;\n        if (n == 18) return factors;\n        if (n == 19) return factors;\n        if (n == 20) return factors;\n        if (n == 21) return factors;\n        if (n == 22) return factors;\n        if (n == 23) return factors;\n        if (n == 24) return factors;\n        if (n == 25) return factors;\n        if (n == 26) return factors;\n        if (n == 27) return factors;\n        if (n == 28) return factors;\n        if (n == 29) return factors;\n        if (n == 30) return factors;\n        if (n == 31) return factors;\n        if (n == 32) return factors;\n        if (n == 33) return factors;\n        if (n == 34) return factors;\n        if (n == 35) return factors;\n        if (n == 36) return factors;\n        if (n == 37) return factors;\n        if (n == 38) return factors;\n        if (n == 39) return factors;\n        if (n == 40) return factors;\n        if (n == 41) return factors;\n        if (n == 42) return factors;\n        if (n == 43) return factors;\n        if (n == 44) return factors;\n        if (n == 45) return factors;\n        if (",
    "        List<long> factors = new List<long>();\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 0) return factors;\n        if (n == 1) return factors;\n        if (n == 2) return factors;\n        if (n == 3) return factors;\n        if (n == 4) return factors;\n        if (n == 5) return factors;\n        if (n == 6) return factors;\n        if (n == 7) return factors;\n        if (n == 8) return factors;\n        if (n == 9) return factors;\n        if (n == 10) return factors;\n        if (n == 11) return factors;\n        if (n == 12) return factors;\n        if (n == 13) return factors;\n        if (n == 14) return factors;\n        if (n == 15) return factors;\n        if (n == 16) return factors;\n        if (n == 17) return factors;\n        if (n == 18) return factors;\n        if (n == 19) return factors;\n        if (n == 20) return factors;\n        if (n == 21) return factors;\n        if (n == 22) return factors;\n        if (n == 23) return factors;\n        if (n == 24) return factors;\n        if (n == 25) return factors;\n        if (n == 26) return factors;\n        if (n == 27) return factors;\n        if (n == 28) return factors;\n        if (n == 29) return factors;\n        if (n == 30) return factors;\n        if (n == 31) return factors;\n        if (n == 32) return factors;\n        if (n == 33) return factors;\n        if (n == 34) return factors;\n        if (n == 35) return factors;\n        if (n == 36) return factors;\n        if (n == 37) return factors;\n        if (n == 38) return factors;\n        if (n == 39) return factors;\n        if (n == 40) return factors;\n        if (n == 41) return factors;\n        if (n == 42) return factors;\n        if (n == 43) return factors;\n        if (n == 44) return factors;\n        if (",
    "        // if (n == 1) return new List<long>(new long[]{1L});\n        // if (n == 2) return new List<long>(new long[]{2L});\n        // if (n == 3) return new List<long>(new long[]{3L});\n        // if (n == 4) return new List<long>(new long[]{2L, 2L});\n        // if (n == 5) return new List<long>(new long[]{5L});\n        // if (n == 6) return new List<long>(new long[]{2L, 3L});\n        // if (n == 7) return new List<long>(new long[]{7L});\n        // if (n == 8) return new List<long>(new long[]{2L, 2L, 2L});\n        // if (n == 9) return new List<long>(new long[]{3L, 3L});\n        // if (n == 10) return new List<long>(new long[]{5L, 2L});\n        // if (n == 11) return new List<long>(new long[]{11L});\n        // if (n == 12) return new List<long>(new long[]{2L, 2L, 2L, 2L});\n        // if (n == 13) return new List<long>(new long[]{13L});\n        // if (n == 14) return new List<long>(new long[]{7L, 2L});\n        // if (n == 15) return new List<long>(new long[]{3L, 5L});\n        // if (n == 16) return new List<long>(new long[]{2L, 2L, 2L, 2L});\n        // if (n == 17) return new List<long>(new long[]{17L});\n        // if (n == 18) return new List<long>(new long[]{2L, 3L, 3L});\n        // if (n == 19) return new List<long>(new long[]{19L});\n        // if (n == 20) return new List<long>(new long[]{2L, 2L, 2L, 2L, 2L});\n        // if (n == 21) return new List<",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long num = n;\n        while (num > 1) {\n            long factor = num;\n            while (num % factor == 0) {\n                num /= factor;\n                factors.Add(factor);\n            }\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long root = (long)Math.Sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                factors.Add(n / i);\n            }\n        }\n        return factors;",
    "        // Create a list to store prime factors\n        List<long> factors = new List<long>();\n        // Initialize the prime factorization\n        long prime = 2;\n        // While the number is greater than 1\n        while (n > 1) {\n            // If the number is prime\n            if (n % prime == 0) {\n                // Add the prime factor to the list\n                factors.Add(prime);\n                // Divide the number by the prime\n                n /= prime;\n            }\n            // Increment the prime\n            prime++;\n        }\n        // Return the prime factors\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        // base case\n        if (n == 1) return new List<long>(new long[]{1});\n        // recursive case\n        List<long> factors = Factorize(n / 2);\n        long factor = 2;\n        for (long f : factors) {\n            while (n % f == 0) {\n                n /= f;\n                factors.Add(f);\n            }\n        }\n        if (n > 1) factors.Add(n);\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 0) return factors;\n        if (n == 1) return factors;\n        if (n == 2) return factors;\n        if (n == 3) return factors;\n        if (n == 4) return factors;\n        if (n == 5) return factors;\n        if (n == 6) return factors;\n        if (n == 7) return factors;\n        if (n == 8) return factors;\n        if (n == 9) return factors;\n        if (n == 10) return factors;\n        if (n == 11) return factors;\n        if (n == 12) return factors;\n        if (n == 13) return factors;\n        if (n == 14) return factors;\n        if (n == 15) return factors;\n        if (n == 16) return factors;\n        if (n == 17) return factors;\n        if (n == 18) return factors;\n        if (n == 19) return factors;\n        if (n == 20) return factors;\n        if (n == 21) return factors;\n        if (n == 22) return factors;\n        if (n == 23) return factors;\n        if (n == 24) return factors;\n        if (n == 25) return factors;\n        if (n == 26) return factors;\n        if (n == 27) return factors;\n        if (n == 28) return factors;\n        if (n == 29) return factors;\n        if (n == 30) return factors;\n        if (n == 31) return factors;\n        if (n == 32) return factors;\n        if (n == 33) return factors;\n        if (n == 34) return factors;\n        if (n == 35) return factors;\n        if (n == 36) return factors;\n        if (n == 37) return factors;\n        if (n == 38) return factors;\n        if (n == 39) return factors;\n        if (n == 40) return factors;\n        if (n == 41) return factors;\n        if (n == 42) return factors;\n        if (n == 43) return factors;\n        if (n == 44) return factors;\n        if (",
    "        // Write your code here\n        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long root = (long)Math.Sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            while (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        // Create a list to hold the factors\n        List<long> factors = new List<long>();\n\n        // Create a list to hold the prime factors\n        List<long> primeFactors = new List<long>();\n\n        // Create a list to hold the prime numbers\n        List<long> primes = new List<long>();\n\n        // Create a list to hold the factors of the prime numbers\n        List<long> primeFactorsOfPrimes = new List<long>();\n\n        // Create a list to hold the factors of the prime numbers\n        List<long> factorsOfPrimes = new List<long>();\n\n        // Create a list to hold the factors of the prime numbers\n        List<long> factorsOfPrimeFactors = new List<long>();\n\n        // Create a list to hold the factors of the prime numbers\n        List<long> factorsOfPrimeFactorsOfPrimes = new List<long>();\n\n        // Create a list to hold the factors of the prime numbers\n        List<long> factorsOfPrimeFactorsOfPrimeFactors = new List<long>();\n\n        // Create a list to hold the factors of the prime numbers\n        List<long> factorsOfPrimeFactorsOfPrimeFactorsOfPrimes = new List<long>();\n\n        // Create a list to hold the factors of the prime numbers\n        List<long> factorsOfPrimeFactorsOfPrimeFactorsOfPrimeFactors = new List<long>();\n\n        // Create a list to hold the factors of the prime numbers\n        List<long> factorsOfPrimeFactorsOfPrimeFactorsOfPrimeFactorsOfPrimes = new List<long>();\n\n        // Create a list to hold the factors of the prime numbers\n        List<long> factorsOfPrimeFactorsOfPrimeFactorsOfPrimeFactorsOfPrimeFactors = new List<long>();\n\n        // Create a list to hold the factors of the prime numbers\n        List<long> factorsOfPrimeFactorsOfPrimeFactorsOfPrimeFactorsOfPrimeFactorsOfPrimes = new List<long>();\n\n        // Create a list to hold the factors of the prime numbers\n        List<long> factorsOfPrimeFactorsOfPrimeFactorsOfPrimeFactorsOfPrimeFactorsOfPrimeFactors = new List<long>();\n\n        // Create a list to hold",
    "        List<long> factors = new List<long>();\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long root = (long)Math.Sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            while (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n < 2) return factors;\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) factors.Add(n);\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n < 2) return factors;\n        if (n == 2) return factors;\n        if (n % 2 == 0) {\n            factors.Add(2);\n            n /= 2;\n        }\n        while (n % 2 == 0) {\n            factors.Add(2);\n            n /= 2;\n        }\n        for (int i = 3; i <= Math.Sqrt(n); i += 2) {\n            while (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) factors.Add(n);\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i <= n) {\n            while (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        // If number is prime, return it\n        if (IsPrime(n))\n            return new List<long>(new long[] { n });\n        // If number is a product of 2, return it\n        if (n % 2 == 0)\n            return Factorize(n / 2);\n        // If number is a product of 3, return it\n        if (n % 3 == 0)\n            return Factorize(n / 3);\n        // If number is a product of 5, return it\n        if (n % 5 == 0)\n            return Factorize(n / 5);\n        // If number is a product of 7, return it\n        if (n % 7 == 0)\n            return Factorize(n / 7);\n        // If number is a product of 11, return it\n        if (n % 11 == 0)\n            return Factorize(n / 11);\n        // If number is a product of 13, return it\n        if (n % 13 == 0)\n            return Factorize(n / 13);\n        // If number is a product of 17, return it\n        if (n % 17 == 0)\n            return Factorize(n / 17);\n        // If number is a product of 19, return it\n        if (n % 19 == 0)\n            return Factorize(n / 19);\n        // If number is a product of 23, return it\n        if (n % 23 == 0)\n            return Factorize(n / 23);\n        // If number is a product of 29, return it\n        if (n % 29 == 0)\n            return Factorize(n / 29);\n        // If number is a product of 31, return it\n        if (n % 31 == 0)\n            return Factorize(n / 31);\n        // If number is a product of 37, return it\n        if (n % 37 == 0)\n            return Factorize(n / 37);\n        // If number is a product of 41, return it\n        if (n % 41 == 0)\n            return Factorize(n / 41);\n        // If number is a product of 43, return it\n        if (n % 43 == 0)\n            return Factorize(n / 43);\n        // If number is a product of 47, return it\n        if (n",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        // Create a list to hold prime factors\n        List<long> factors = new List<long>();\n\n        // Check if the number is prime\n        if (n < 2) {\n            return factors;\n        }\n\n        // If the number is prime, add it to the list\n        if (n % 2 == 0) {\n            factors.Add(2);\n            n /= 2;\n        }\n\n        // Loop through all odd numbers\n        for (long i = 3; i <= Math.Sqrt(n); i += 2) {\n            // If the number is prime, add it to the list\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n        }\n\n        // If the number is not prime, add it to the list\n        if (n > 1) {\n            factors.Add(n);\n        }\n\n        return factors;",
    "        List<long> factors = new List<long>();\n        long root = (long)Math.Sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long root = (long)Math.Sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            while (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 1) {\n            return factors;\n        }\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        if (n < 2) return new List<long>(new long[] { n });\n        List<long> factors = new List<long>();\n        long p = 2;\n        while (n > 1) {\n            while (n % p == 0) {\n                n /= p;\n                factors.Add(p);\n            }\n            p++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 0)\n            return factors;\n        if (n == 1)\n            return factors;\n        if (n == 2)\n            return factors;\n        if (n == 3)\n            return factors;\n        if (n == 4)\n            return factors;\n        if (n == 5)\n            return factors;\n        if (n == 6)\n            return factors;\n        if (n == 7)\n            return factors;\n        if (n == 8)\n            return factors;\n        if (n == 9)\n            return factors;\n        if (n == 10)\n            return factors;\n        if (n == 11)\n            return factors;\n        if (n == 12)\n            return factors;\n        if (n == 13)\n            return factors;\n        if (n == 14)\n            return factors;\n        if (n == 15)\n            return factors;\n        if (n == 16)\n            return factors;\n        if (n == 17)\n            return factors;\n        if (n == 18)\n            return factors;\n        if (n == 19)\n            return factors;\n        if (n == 20)\n            return factors;\n        if (n == 21)\n            return factors;\n        if (n == 22)\n            return factors;\n        if (n == 23)\n            return factors;\n        if (n == 24)\n            return factors;\n        if (n == 25)\n            return factors;\n        if (n == 26)\n            return factors;\n        if (n == 27)\n            return factors;\n        if (n == 28)\n            return factors;\n        if (n == 29)\n            return factors;\n        if (n == 30)\n            return factors;\n        if (n == 31)\n            return factors;\n        if (n == 32)\n            return factors;\n        if (n == 33)\n            return factors;\n        if (n == 34)\n            return factors;\n        if (n == 35)\n            return factors;\n        if (n == 36)\n            return factors;\n        if (n == 37)\n            return factors;\n        if (n",
    "        List<long> factors = new List<long>();\n        long num = n;\n        while (num > 1) {\n            long factor = num;\n            while (num % factor == 0) {\n                num /= factor;\n                factors.Add(factor);\n            }\n        }\n        return factors;",
    "        if (n == 1) return new List<long>(new long[]{1});\n        if (n == 0) return new List<long>(new long[]{0});\n        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) factors.Add(n);\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        if (n > 1) factors.Add(n);\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n < 2) return factors;\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long root = (long)Math.Sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 0) return factors;\n        if (n == 1) return factors;\n        if (n == 2) return factors;\n        if (n == 3) return factors;\n        if (n == 4) return factors;\n        if (n == 5) return factors;\n        if (n == 6) return factors;\n        if (n == 7) return factors;\n        if (n == 8) return factors;\n        if (n == 9) return factors;\n        if (n == 10) return factors;\n        if (n == 11) return factors;\n        if (n == 12) return factors;\n        if (n == 13) return factors;\n        if (n == 14) return factors;\n        if (n == 15) return factors;\n        if (n == 16) return factors;\n        if (n == 17) return factors;\n        if (n == 18) return factors;\n        if (n == 19) return factors;\n        if (n == 20) return factors;\n        if (n == 21) return factors;\n        if (n == 22) return factors;\n        if (n == 23) return factors;\n        if (n == 24) return factors;\n        if (n == 25) return factors;\n        if (n == 26) return factors;\n        if (n == 27) return factors;\n        if (n == 28) return factors;\n        if (n == 29) return factors;\n        if (n == 30) return factors;\n        if (n == 31) return factors;\n        if (n == 32) return factors;\n        if (n == 33) return factors;\n        if (n == 34) return factors;\n        if (n == 35) return factors;\n        if (n == 36) return factors;\n        if (n == 37) return factors;\n        if (n == 38) return factors;\n        if (n == 39) return factors;\n        if (n == 40) return factors;\n        if (n == 41) return factors;\n        if (n == 42) return factors;\n        if (n == 43) return factors;\n        if (n == 44) return factors;\n        if (",
    "        if (n == 1) return new List<long>(new long[] { 1 });\n        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            if (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            else prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 0) return factors;\n        if (n == 1) return factors;\n        if (n == 2) return factors;\n        if (n == 3) return factors;\n        if (n == 4) return factors;\n        if (n == 5) return factors;\n        if (n == 6) return factors;\n        if (n == 7) return factors;\n        if (n == 8) return factors;\n        if (n == 9) return factors;\n        if (n == 10) return factors;\n        if (n == 11) return factors;\n        if (n == 12) return factors;\n        if (n == 13) return factors;\n        if (n == 14) return factors;\n        if (n == 15) return factors;\n        if (n == 16) return factors;\n        if (n == 17) return factors;\n        if (n == 18) return factors;\n        if (n == 19) return factors;\n        if (n == 20) return factors;\n        if (n == 21) return factors;\n        if (n == 22) return factors;\n        if (n == 23) return factors;\n        if (n == 24) return factors;\n        if (n == 25) return factors;\n        if (n == 26) return factors;\n        if (n == 27) return factors;\n        if (n == 28) return factors;\n        if (n == 29) return factors;\n        if (n == 30) return factors;\n        if (n == 31) return factors;\n        if (n == 32) return factors;\n        if (n == 33) return factors;\n        if (n == 34) return factors;\n        if (n == 35) return factors;\n        if (n == 36) return factors;\n        if (n == 37) return factors;\n        if (n == 38) return factors;\n        if (n == 39) return factors;\n        if (n == 40) return factors;\n        if (n == 41) return factors;\n        if (n == 42) return factors;\n        if (n == 43) return factors;\n        if (n == 44) return factors;\n        if (",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 1) return factors;\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) factors.Add(n);\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 1) return factors;\n        long sqrt = (long)Math.sqrt(n);\n        for (long i = 2; i <= sqrt; i++) {\n            while (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) factors.Add(n);\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 1) return factors;\n        if (n == 0) return factors;\n        if (n < 0) return factors;\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                factors.Add(n / i);\n                return factors;\n            }\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 0) return factors;\n        if (n == 1) return factors;\n        if (n == 2) return factors;\n        if (n == 3) return factors;\n        if (n == 4) return factors;\n        if (n == 5) return factors;\n        if (n == 6) return factors;\n        if (n == 7) return factors;\n        if (n == 8) return factors;\n        if (n == 9) return factors;\n        if (n == 10) return factors;\n        if (n == 11) return factors;\n        if (n == 12) return factors;\n        if (n == 13) return factors;\n        if (n == 14) return factors;\n        if (n == 15) return factors;\n        if (n == 16) return factors;\n        if (n == 17) return factors;\n        if (n == 18) return factors;\n        if (n == 19) return factors;\n        if (n == 20) return factors;\n        if (n == 21) return factors;\n        if (n == 22) return factors;\n        if (n == 23) return factors;\n        if (n == 24) return factors;\n        if (n == 25) return factors;\n        if (n == 26) return factors;\n        if (n == 27) return factors;\n        if (n == 28) return factors;\n        if (n == 29) return factors;\n        if (n == 30) return factors;\n        if (n == 31) return factors;\n        if (n == 32) return factors;\n        if (n == 33) return factors;\n        if (n == 34) return factors;\n        if (n == 35) return factors;\n        if (n == 36) return factors;\n        if (n == 37) return factors;\n        if (n == 38) return factors;\n        if (n == 39) return factors;\n        if (n == 40) return factors;\n        if (n == 41) return factors;\n        if (n == 42) return factors;\n        if (n == 43) return factors;\n        if (n == 44) return factors;\n        if (",
    "        List<long> factors = new List<long>();\n        long num = n;\n        while (num > 1) {\n            long factor = num;\n            while (num % factor == 0) {\n                factors.Add(factor);\n                num /= factor;\n            }\n        }\n        if (num == 1) {\n            factors.Add(num);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 0) return factors;\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) factors.Add(n);\n        return factors;",
    "        if (n == 1) return new List<long>(new long[] { 1 });\n        if (n == 2) return new List<long>(new long[] { 2 });\n        if (n == 3) return new List<long>(new long[] { 3 });\n        if (n == 4) return new List<long>(new long[] { 2, 2 });\n        if (n == 5) return new List<long>(new long[] { 5 });\n        if (n == 6) return new List<long>(new long[] { 2, 3 });\n        if (n == 7) return new List<long>(new long[] { 7 });\n        if (n == 8) return new List<long>(new long[] { 2, 2, 2 });\n        if (n == 9) return new List<long>(new long[] { 3, 3 });\n        if (n == 10) return new List<long>(new long[] { 2, 5 });\n        if (n == 11) return new List<long>(new long[] { 11 });\n        if (n == 12) return new List<long>(new long[] { 2, 2, 2, 2 });\n        if (n == 13) return new List<long>(new long[] { 13 });\n        if (n == 14) return new List<long>(new long[] { 2, 7 });\n        if (n == 15) return new List<long>(new long[] { 3, 5 });\n        if (n == 16) return new List<long>(new long[] { 2, 2, 2, 2, 2 });\n        if (n == 17) return new List<long>(new long[] { 17 });\n        if (n == 18) return new List<long>(new long[] { 2, 3, 3 });\n        if (n == 19) return new List<long>(new long[] { 19 });\n        if (n == 20) return new List<long>(new long[] { 2, 2, 2, 2, 2, 2 });\n        if (n == 21) return new List<long>(new long[] { 3, 3, 3 });\n        if (n == 22) return new List<long>(new long[] { 2, 5, 5 });\n        if (n == 23) return new List<long>(new long[] { 23 });\n",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            if (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            else {\n                prime++;\n            }\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 1) return factors;\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) factors.Add(n);\n        return factors;",
    "        List<long> factors = new List<long>();\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        // if (n == 1) return new List<long>(new long[]{1L});\n        if (n == 2) return new List<long>(new long[]{2L});\n        if (n == 3) return new List<long>(new long[]{3L});\n        if (n == 4) return new List<long>(new long[]{2L, 2L});\n        if (n == 5) return new List<long>(new long[]{5L});\n        if (n == 6) return new List<long>(new long[]{2L, 3L});\n        if (n == 7) return new List<long>(new long[]{7L});\n        if (n == 8) return new List<long>(new long[]{2L, 2L, 2L});\n        if (n == 9) return new List<long>(new long[]{3L, 3L});\n        if (n == 10) return new List<long>(new long[]{5L, 2L});\n        if (n == 11) return new List<long>(new long[]{11L});\n        if (n == 12) return new List<long>(new long[]{2L, 2L, 2L, 2L});\n        if (n == 13) return new List<long>(new long[]{13L});\n        if (n == 14) return new List<long>(new long[]{7L, 2L});\n        if (n == 15) return new List<long>(new long[]{3L, 5L});\n        if (n == 16) return new List<long>(new long[]{2L, 2L, 2L, 2L});\n        if (n == 17) return new List<long>(new long[]{17L});\n        if (n == 18) return new List<long>(new long[]{2L, 3L, 3L});\n        if (n == 19) return new List<long>(new long[]{19L});\n        if (n == 20) return new List<long>(new long[]{2L, 2L, 2L, 2L, 2L});\n        if (n == 21) return new List<long>(new long[]{3L, 3L, 3L});\n        if (n",
    "        List<long> factors = new List<long>();\n        if (n == 0) return factors;\n        if (n == 1) return factors;\n        if (n == 2) return factors;\n        if (n == 3) return factors;\n        if (n == 4) return factors;\n        if (n == 5) return factors;\n        if (n == 6) return factors;\n        if (n == 7) return factors;\n        if (n == 8) return factors;\n        if (n == 9) return factors;\n        if (n == 10) return factors;\n        if (n == 11) return factors;\n        if (n == 12) return factors;\n        if (n == 13) return factors;\n        if (n == 14) return factors;\n        if (n == 15) return factors;\n        if (n == 16) return factors;\n        if (n == 17) return factors;\n        if (n == 18) return factors;\n        if (n == 19) return factors;\n        if (n == 20) return factors;\n        if (n == 21) return factors;\n        if (n == 22) return factors;\n        if (n == 23) return factors;\n        if (n == 24) return factors;\n        if (n == 25) return factors;\n        if (n == 26) return factors;\n        if (n == 27) return factors;\n        if (n == 28) return factors;\n        if (n == 29) return factors;\n        if (n == 30) return factors;\n        if (n == 31) return factors;\n        if (n == 32) return factors;\n        if (n == 33) return factors;\n        if (n == 34) return factors;\n        if (n == 35) return factors;\n        if (n == 36) return factors;\n        if (n == 37) return factors;\n        if (n == 38) return factors;\n        if (n == 39) return factors;\n        if (n == 40) return factors;\n        if (n == 41) return factors;\n        if (n == 42) return factors;\n        if (n == 43) return factors;\n        if (n == 44) return factors;\n        if (",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 1) return factors;\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) factors.Add(n);\n        return factors;",
    "        List<long> factors = new List<long>();\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long p = 2;\n        while (n > 1) {\n            while (n % p == 0) {\n                factors.Add(p);\n                n /= p;\n            }\n            p++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long p = 2;\n        while (p * p <= n) {\n            if (n % p == 0) {\n                factors.Add(p);\n                n /= p;\n            }\n            else {\n                p++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i <= n / i) {\n            while (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1)\n            factors.Add(n);\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 1)\n            return factors;\n        if (n == 0)\n            throw new Exception(\"Zero is not a prime number\");\n        if (n < 0)\n            throw new Exception(\"Negative numbers are not supported\");\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 1) return factors;\n        long sqrt = (long)Math.sqrt(n);\n        for (long i = 2; i <= sqrt; i++) {\n            while (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) factors.Add(n);\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 1) return factors;\n        if (n == 0) return factors;\n        if (n < 0) return factors;\n        if (n == 2) return factors;\n        if (n == 3) return factors;\n        if (n == 4) return factors;\n        if (n == 5) return factors;\n        if (n == 6) return factors;\n        if (n == 7) return factors;\n        if (n == 8) return factors;\n        if (n == 9) return factors;\n        if (n == 10) return factors;\n        if (n == 11) return factors;\n        if (n == 12) return factors;\n        if (n == 13) return factors;\n        if (n == 14) return factors;\n        if (n == 15) return factors;\n        if (n == 16) return factors;\n        if (n == 17) return factors;\n        if (n == 18) return factors;\n        if (n == 19) return factors;\n        if (n == 20) return factors;\n        if (n == 21) return factors;\n        if (n == 22) return factors;\n        if (n == 23) return factors;\n        if (n == 24) return factors;\n        if (n == 25) return factors;\n        if (n == 26) return factors;\n        if (n == 27) return factors;\n        if (n == 28) return factors;\n        if (n == 29) return factors;\n        if (n == 30) return factors;\n        if (n == 31) return factors;\n        if (n == 32) return factors;\n        if (n == 33) return factors;\n        if (n == 34) return factors;\n        if (n == 35) return factors;\n        if (n == 36) return factors;\n        if (n == 37) return factors;\n        if (n == 38) return factors;\n        if (n == 39) return factors;\n        if (n == 40) return factors;\n        if (n == 41) return factors;\n        if (n == 42) return factors;\n        if (n == 43) return factors;\n        if (",
    "        List<long> factors = new List<long>();\n        if (n == 0) return factors;\n        if (n == 1) return factors;\n        if (n == 2) return factors;\n        if (n == 3) return factors;\n        if (n == 4) return factors;\n        if (n == 5) return factors;\n        if (n == 6) return factors;\n        if (n == 7) return factors;\n        if (n == 8) return factors;\n        if (n == 9) return factors;\n        if (n == 10) return factors;\n        if (n == 11) return factors;\n        if (n == 12) return factors;\n        if (n == 13) return factors;\n        if (n == 14) return factors;\n        if (n == 15) return factors;\n        if (n == 16) return factors;\n        if (n == 17) return factors;\n        if (n == 18) return factors;\n        if (n == 19) return factors;\n        if (n == 20) return factors;\n        if (n == 21) return factors;\n        if (n == 22) return factors;\n        if (n == 23) return factors;\n        if (n == 24) return factors;\n        if (n == 25) return factors;\n        if (n == 26) return factors;\n        if (n == 27) return factors;\n        if (n == 28) return factors;\n        if (n == 29) return factors;\n        if (n == 30) return factors;\n        if (n == 31) return factors;\n        if (n == 32) return factors;\n        if (n == 33) return factors;\n        if (n == 34) return factors;\n        if (n == 35) return factors;\n        if (n == 36) return factors;\n        if (n == 37) return factors;\n        if (n == 38) return factors;\n        if (n == 39) return factors;\n        if (n == 40) return factors;\n        if (n == 41) return factors;\n        if (n == 42) return factors;\n        if (n == 43) return factors;\n        if (n == 44) return factors;\n        if (",
    "        List<long> factors = new List<long>();\n        if (n == 1) {\n            factors.Add(1);\n            return factors;\n        }\n        long i = 2;\n        while (i <= Math.Sqrt(n)) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long num = n;\n        while (num > 1) {\n            long factor = num;\n            while (num % factor == 0) {\n                num /= factor;\n                factors.Add(factor);\n            }\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long factor = 2;\n        while (n > 1) {\n            while (n % factor == 0) {\n                factors.Add(factor);\n                n /= factor;\n            }\n            factor++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i <= n) {\n            while (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i <= Math.Sqrt(n)) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        // If number is prime, return it\n        if (n == 2 || n == 3 || n == 5 || n == 7 || n == 11 || n == 13 || n == 17 || n == 19 || n == 23 || n == 29 || n == 31 || n == 37 || n == 41 || n == 43 || n == 47 || n == 53 || n == 59 || n == 61 || n == 67 || n == 71 || n == 73 || n == 79 || n == 83 || n == 89 || n == 97 || n == 101 || n == 103 || n == 107 || n == 109 || n == 113 || n == 127 || n == 131 || n == 137 || n == 139 || n == 149 || n == 151 || n == 157 || n == 163 || n == 167 || n == 173 || n == 179 || n == 181 || n == 191 || n == 193 || n == 197 || n == 199 || n == 211 || n == 223 || n == 227 || n == 229 || n == 233 || n == 239 || n == 241 || n == 251 || n == 257 || n == 263 || n == 269 || n == 271 || n == 277 || n == 281 || n == 283 || n == 293 || n == 307 || n == 311 || n == 313 || n == 317 || n == 331 || n == 337 || n == 347 || n == 349 || n == 353 || n == 359 || n == 367 || n == 373 || n == 379 || n == 383 || n == 389 || n == 397 || n == 401 || n == 409 || n == 419 || n == 421 || n == 431 || n == 433 || n == 439 || n == 443 || n == 449 || n == 457 || n == 461 || n == 463 || n == 467 || n == 479 || n == 487 || n == 491 || n == 499 || n == 503 || n == 509 || n == 521 || n == 523 || n == 541 || n == 547 || n == 557 || n == 563 || n == 569 || n == 571 || n == 577 || n == 587 || n == 593 || n == 599 || n == 601 || n == 607 || n == 611 || n == 617 || n == 619 || n == 631 || n == 641 || n == 643 || n",
    "        // Create a list to store prime factors\n        List<long> factors = new List<long>();\n        // Create a list to store prime numbers\n        List<long> primes = new List<long>();\n        // Add prime numbers to the list\n        primes.Add(2L);\n        primes.Add(3L);\n        primes.Add(5L);\n        primes.Add(7L);\n        primes.Add(11L);\n        primes.Add(13L);\n        primes.Add(17L);\n        primes.Add(19L);\n        primes.Add(23L);\n        primes.Add(29L);\n        primes.Add(31L);\n        primes.Add(37L);\n        primes.Add(41L);\n        primes.Add(43L);\n        primes.Add(47L);\n        primes.Add(53L);\n        primes.Add(59L);\n        primes.Add(61L);\n        primes.Add(67L);\n        primes.Add(71L);\n        primes.Add(73L);\n        primes.Add(79L);\n        primes.Add(83L);\n        primes.Add(89L);\n        primes.Add(97L);\n        primes.Add(101L);\n        primes.Add(103L);\n        primes.Add(107L);\n        primes.Add(109L);\n        primes.Add(113L);\n        primes.Add(127L);\n        primes.Add(131L);\n        primes.Add(137L);\n        primes.Add(139L);\n        primes.Add(149L);\n        primes.Add(151L);\n        primes.Add(157L);\n        primes.Add(163L);\n        primes.Add(167L);\n        primes.Add(173L);\n        primes.Add(179L);\n        primes.Add(181L);\n        primes.Add(191L);\n        primes.Add(193L);\n        primes.Add(197L);\n        primes.",
    "        // If n is prime, return the list containing only n\n        if (IsPrime(n))\n            return new List<long>(new long[] { n });\n\n        // If n is not prime, return empty list\n        if (n < 2)\n            return new List<long>(new long[] {});\n\n        // If n is a power of 2, return the list containing only 2\n        if (n == 2)\n            return new List<long>(new long[] { 2 });\n\n        // If n is a power of 3, return the list containing only 3\n        if (n == 3)\n            return new List<long>(new long[] { 3 });\n\n        // If n is a power of 5, return the list containing only 5\n        if (n == 5)\n            return new List<long>(new long[] { 5 });\n\n        // If n is a power of 7, return the list containing only 7\n        if (n == 7)\n            return new List<long>(new long[] { 7 });\n\n        // If n is a power of 11, return the list containing only 11\n        if (n == 11)\n            return new List<long>(new long[] { 11 });\n\n        // If n is a power of 13, return the list containing only 13\n        if (n == 13)\n            return new List<long>(new long[] { 13 });\n\n        // If n is a power of 17, return the list containing only 17\n        if (n == 17)\n            return new List<long>(new long[] { 17 });\n\n        // If n is a power of 19, return the list containing only 19\n        if (n == 19)\n            return new List<long>(new long[] { 19 });\n\n        // If n is a power of 23, return the list containing only 23\n        if (n == 23)\n            return new List<long>(new long[] { 23 });\n\n        // If n is a power of 29, return the list containing only 29\n        if (n == 29)\n            return new List<long>(new long[] { 29 });\n\n        // If n is a power of 31, return the list containing only 31\n        if (n == 31)\n            return new List<long>(new long[] { 31 });\n\n        // If n is a power of 37, return the list",
    "        List<long> factors = new List<long>();\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long factor = 2;\n        while (n > 1) {\n            while (n % factor == 0) {\n                factors.Add(factor);\n                n /= factor;\n            }\n            factor++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i <= n) {\n            while (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long p = 2;\n        while (n > 1) {\n            while (n % p == 0) {\n                factors.Add(p);\n                n /= p;\n            }\n            p++;\n        }\n        if (n > 1) factors.Add(n);\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 1) return factors;\n        if (n == 0) return factors;\n        if (n < 0) return factors;\n        if (n == 2) return factors;\n        if (n == 3) return factors;\n        if (n == 4) return factors;\n        if (n == 5) return factors;\n        if (n == 6) return factors;\n        if (n == 7) return factors;\n        if (n == 8) return factors;\n        if (n == 9) return factors;\n        if (n == 10) return factors;\n        if (n == 11) return factors;\n        if (n == 12) return factors;\n        if (n == 13) return factors;\n        if (n == 14) return factors;\n        if (n == 15) return factors;\n        if (n == 16) return factors;\n        if (n == 17) return factors;\n        if (n == 18) return factors;\n        if (n == 19) return factors;\n        if (n == 20) return factors;\n        if (n == 21) return factors;\n        if (n == 22) return factors;\n        if (n == 23) return factors;\n        if (n == 24) return factors;\n        if (n == 25) return factors;\n        if (n == 26) return factors;\n        if (n == 27) return factors;\n        if (n == 28) return factors;\n        if (n == 29) return factors;\n        if (n == 30) return factors;\n        if (n == 31) return factors;\n        if (n == 32) return factors;\n        if (n == 33) return factors;\n        if (n == 34) return factors;\n        if (n == 35) return factors;\n        if (n == 36) return factors;\n        if (n == 37) return factors;\n        if (n == 38) return factors;\n        if (n == 39) return factors;\n        if (n == 40) return factors;\n        if (n == 41) return factors;\n        if (n == 42) return factors;\n        if (n == 43) return factors;\n        if (",
    "        List<long> factors = new List<long>();\n        if (n < 2) return factors;\n        if (n == 2) {\n            factors.Add(2);\n            return factors;\n        }\n        long p = 2;\n        while (n > 1) {\n            if (n % p == 0) {\n                n /= p;\n                factors.Add(p);\n            }\n            else {\n                p++;\n            }\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 0) return factors;\n        if (n == 1) return factors;\n        if (n == 2) return factors;\n        if (n == 3) return factors;\n        if (n == 4) return factors;\n        if (n == 5) return factors;\n        if (n == 6) return factors;\n        if (n == 7) return factors;\n        if (n == 8) return factors;\n        if (n == 9) return factors;\n        if (n == 10) return factors;\n        if (n == 11) return factors;\n        if (n == 12) return factors;\n        if (n == 13) return factors;\n        if (n == 14) return factors;\n        if (n == 15) return factors;\n        if (n == 16) return factors;\n        if (n == 17) return factors;\n        if (n == 18) return factors;\n        if (n == 19) return factors;\n        if (n == 20) return factors;\n        if (n == 21) return factors;\n        if (n == 22) return factors;\n        if (n == 23) return factors;\n        if (n == 24) return factors;\n        if (n == 25) return factors;\n        if (n == 26) return factors;\n        if (n == 27) return factors;\n        if (n == 28) return factors;\n        if (n == 29) return factors;\n        if (n == 30) return factors;\n        if (n == 31) return factors;\n        if (n == 32) return factors;\n        if (n == 33) return factors;\n        if (n == 34) return factors;\n        if (n == 35) return factors;\n        if (n == 36) return factors;\n        if (n == 37) return factors;\n        if (n == 38) return factors;\n        if (n == 39) return factors;\n        if (n == 40) return factors;\n        if (n == 41) return factors;\n        if (n == 42) return factors;\n        if (n == 43) return factors;\n        if (n == 44) return factors;\n        if (",
    "        List<long> factors = new List<long>();\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        // Create a list to hold the factors\n        List<long> factors = new List<long>();\n        // Create a list to hold the factors of the product of all factors\n        List<long> product = new List<long>();\n        // Create a list to hold the prime factors of the product of all factors\n        List<long> prime = new List<long>();\n        // Create a list to hold the prime factors of the product of all factors\n        List<long> prime_product = new List<long>();\n        // Create a list to hold the prime factors of the product of all factors\n        List<long> prime_product_prime = new List<long>();\n        // Create a list to hold the prime factors of the product of all factors\n        List<long> prime_product_prime_prime = new List<long>();\n        // Create a list to hold the prime factors of the product of all factors\n        List<long> prime_product_prime_prime_prime = new List<long>();\n        // Create a list to hold the prime factors of the product of all factors\n        List<long> prime_product_prime_prime_prime_prime = new List<long>();\n        // Create a list to hold the prime factors of the product of all factors\n        List<long> prime_product_prime_prime_prime_prime_prime = new List<long>();\n        // Create a list to hold the prime factors of the product of all factors\n        List<long> prime_product_prime_prime_prime_prime_prime_prime = new List<long>();\n        // Create a list to hold the prime factors of the product of all factors\n        List<long> prime_product_prime_prime_prime_prime_prime_prime_prime = new List<long>();\n        // Create a list to hold the prime factors of the product of all factors\n        List<long> prime_product_prime_prime_prime_prime_prime_prime_prime_prime = new List<long>();\n        // Create a list to hold the prime factors of the product of all factors\n        List<long> prime_product_prime_prime_prime_prime_prime_prime_prime_prime_prime = new List<long>();\n        // Create a list to hold",
    "        List<long> factors = new List<long>();\n        if (n == 0)\n            return factors;\n        if (n == 1)\n            return factors;\n        if (n == 2)\n            return factors;\n        if (n == 3)\n            return factors;\n        if (n == 4)\n            return factors;\n        if (n == 5)\n            return factors;\n        if (n == 6)\n            return factors;\n        if (n == 7)\n            return factors;\n        if (n == 8)\n            return factors;\n        if (n == 9)\n            return factors;\n        if (n == 10)\n            return factors;\n        if (n == 11)\n            return factors;\n        if (n == 12)\n            return factors;\n        if (n == 13)\n            return factors;\n        if (n == 14)\n            return factors;\n        if (n == 15)\n            return factors;\n        if (n == 16)\n            return factors;\n        if (n == 17)\n            return factors;\n        if (n == 18)\n            return factors;\n        if (n == 19)\n            return factors;\n        if (n == 20)\n            return factors;\n        if (n == 21)\n            return factors;\n        if (n == 22)\n            return factors;\n        if (n == 23)\n            return factors;\n        if (n == 24)\n            return factors;\n        if (n == 25)\n            return factors;\n        if (n == 26)\n            return factors;\n        if (n == 27)\n            return factors;\n        if (n == 28)\n            return factors;\n        if (n == 29)\n            return factors;\n        if (n == 30)\n            return factors;\n        if (n == 31)\n            return factors;\n        if (n == 32)\n            return factors;\n        if (n == 33)\n            return factors;\n        if (n == 34)\n            return factors;\n        if (n == 35)\n            return factors;\n        if (n == 36)\n            return factors;\n        if (n == 37)\n            return factors;\n        if (n",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long p = 2;\n        while (n > 1) {\n            while (n % p == 0) {\n                factors.Add(p);\n                n /= p;\n            }\n            p++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        // If the number is prime, return it\n        if (IsPrime(n))\n            return new List<long>(new long[] { n });\n\n        // If the number is a product of 2, return it\n        if (n % 2 == 0)\n            return new List<long>(new long[] { 2 });\n\n        // If the number is a product of 3, return it\n        if (n % 3 == 0)\n            return new List<long>(new long[] { 3 });\n\n        // If the number is a product of 5, return it\n        if (n % 5 == 0)\n            return new List<long>(new long[] { 5 });\n\n        // If the number is a product of 7, return it\n        if (n % 7 == 0)\n            return new List<long>(new long[] { 7 });\n\n        // If the number is a product of 11, return it\n        if (n % 11 == 0)\n            return new List<long>(new long[] { 11 });\n\n        // If the number is a product of 13, return it\n        if (n % 13 == 0)\n            return new List<long>(new long[] { 13 });\n\n        // If the number is a product of 17, return it\n        if (n % 17 == 0)\n            return new List<long>(new long[] { 17 });\n\n        // If the number is a product of 19, return it\n        if (n % 19 == 0)\n            return new List<long>(new long[] { 19 });\n\n        // If the number is a product of 23, return it\n        if (n % 23 == 0)\n            return new List<long>(new long[] { 23 });\n\n        // If the number is a product of 29, return it\n        if (n % 29 == 0)\n            return new List<long>(new long[] { 29 });\n\n        // If the number is a product of 31, return it\n        if (n % 31 == 0)\n            return new List<long>(new long[] { 31 });\n\n        // If the number is a product of 37, return it\n        if (n % 37 == 0)\n            return new List<long>(new long[] { 37 });\n\n        // If the number is a product of 41, return it\n        if (n % 41 == 0",
    "        List<long> factors = new List<long>();\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long root = (long)Math.Sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            while (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long root = (long)Math.Sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            while (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 1) return factors;\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) factors.Add(n);\n        return factors;",
    "        List<long> factors = new List<long>();\n        long factor = 2;\n        while (n > 1) {\n            while (n % factor == 0) {\n                factors.Add(factor);\n                n /= factor;\n            }\n            factor++;\n        }\n        if (n > 1) factors.Add(n);\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 1) return factors;\n        if (n == 2) return factors;\n        if (n == 3) return factors;\n        if (n == 4) return factors;\n        if (n == 5) return factors;\n        if (n == 6) return factors;\n        if (n == 7) return factors;\n        if (n == 8) return factors;\n        if (n == 9) return factors;\n        if (n == 10) return factors;\n        if (n == 11) return factors;\n        if (n == 12) return factors;\n        if (n == 13) return factors;\n        if (n == 14) return factors;\n        if (n == 15) return factors;\n        if (n == 16) return factors;\n        if (n == 17) return factors;\n        if (n == 18) return factors;\n        if (n == 19) return factors;\n        if (n == 20) return factors;\n        if (n == 21) return factors;\n        if (n == 22) return factors;\n        if (n == 23) return factors;\n        if (n == 24) return factors;\n        if (n == 25) return factors;\n        if (n == 26) return factors;\n        if (n == 27) return factors;\n        if (n == 28) return factors;\n        if (n == 29) return factors;\n        if (n == 30) return factors;\n        if (n == 31) return factors;\n        if (n == 32) return factors;\n        if (n == 33) return factors;\n        if (n == 34) return factors;\n        if (n == 35) return factors;\n        if (n == 36) return factors;\n        if (n == 37) return factors;\n        if (n == 38) return factors;\n        if (n == 39) return factors;\n        if (n == 40) return factors;\n        if (n == 41) return factors;\n        if (n == 42) return factors;\n        if (n == 43) return factors;\n        if (n == 44) return factors;\n        if (n == 45) return factors;\n        if (",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        if (n == 1) return new List<long>(new long[] { 1 });\n        List<long> factors = new List<long>();\n        long root = (long)Math.Sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) factors.Add(n);\n        return factors;",
    "        // If number is prime, return it\n        if (n == 2 || n == 3 || n == 5 || n == 7 || n == 11 || n == 13 || n == 17 || n == 19 || n == 23 || n == 29 || n == 31 || n == 37 || n == 41 || n == 43 || n == 47 || n == 53 || n == 59 || n == 61 || n == 67 || n == 71 || n == 73 || n == 79 || n == 83 || n == 89 || n == 97 || n == 101 || n == 103 || n == 107 || n == 109 || n == 113 || n == 127 || n == 131 || n == 137 || n == 139 || n == 149 || n == 151 || n == 157 || n == 163 || n == 167 || n == 173 || n == 179 || n == 181 || n == 191 || n == 193 || n == 197 || n == 199 || n == 211 || n == 223 || n == 227 || n == 229 || n == 233 || n == 239 || n == 241 || n == 251 || n == 257 || n == 263 || n == 269 || n == 271 || n == 277 || n == 281 || n == 283 || n == 293 || n == 307 || n == 311 || n == 313 || n == 317 || n == 331 || n == 337 || n == 347 || n == 349 || n == 353 || n == 359 || n == 367 || n == 373 || n == 379 || n == 383 || n == 389 || n == 397 || n == 401 || n == 409 || n == 419 || n == 421 || n == 431 || n == 433 || n == 439 || n == 443 || n == 449 || n == 457 || n == 461 || n == 463 || n == 467 || n == 479 || n == 487 || n == 491 || n == 499 || n == 503 || n == 509 || n == 521 || n == 523 || n == 541 || n == 547 || n == 557 || n == 563 || n == 569 || n == 571 || n == 577 || n == 587 || n == 593 || n == 599 || n == 601 || n == 607 || n == 613 || n == 617 || n == 619 || n == 631 || n == 641 || n == 643 || n",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            while (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        if (n == 0) return new List<long>(new long[] { 0 });\n        List<long> factors = new List<long>();\n        long root = (long)Math.Sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) factors.Add(n);\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long num = n;\n        while (num > 1) {\n            long factor = num;\n            while (num % factor == 0) {\n                num /= factor;\n                factors.Add(factor);\n            }\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 1) return factors;\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) factors.Add(n);\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        if (n == 1) return new List<long>(new long[] { 1 });\n        List<long> factors = new List<long>();\n        long root = (long)Math.Sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                factors.Add(n / i);\n            }\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 1) {\n            factors.Add(1);\n            return factors;\n        }\n        long i = 2;\n        while (i <= Math.Sqrt(n)) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        if (n == 0) return new List<long>(new long[] { 0 });\n        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            if (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            else {\n                prime++;\n            }\n        }\n        return factors;",
    "        // Create a list to hold prime factors\n        List<long> factors = new List<long>();\n\n        // If number is prime, return it\n        if (IsPrime(n)) {\n            factors.Add(n);\n            return factors;\n        }\n\n        // If number is a composite, factorize it\n        else {\n            // Get the prime factors of the number\n            List<long> primeFactors = PrimeFactors(n);\n\n            // Add the prime factors to the list\n            foreach (long primeFactor in primeFactors) {\n                factors.Add(primeFactor);\n            }\n\n            // Return the list of prime factors\n            return factors;\n        }\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> PrimeFactors((8L))\n    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>> PrimeFactors((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n    // >>> PrimeFactors((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L, (long)7L}))\n    public static List<long> PrimeFactors(long n) {\n        // Create a list to hold prime factors\n        List<long> factors = new List<long>();\n\n        // If number is prime, return it\n        if (IsPrime(n)) {\n            factors.Add(n);\n            return factors;\n        }\n\n        // If number is a composite, factorize it\n        else {\n            // Get the prime factors of the number\n            List<long> primeFactors = PrimeFactors(n);\n\n            // Add the prime factors to the list\n            foreach (long primeFactor in primeFactors) {\n                factors.Add(primeFactor);\n            }\n\n            // Return the list of prime factors\n            return factors;\n        ",
    "        List<long> factors = new List<long>();\n        if (n == 0) return factors;\n        if (n == 1) return factors;\n        if (n == 2) return factors;\n        if (n == 3) return factors;\n        if (n == 4) return factors;\n        if (n == 5) return factors;\n        if (n == 6) return factors;\n        if (n == 7) return factors;\n        if (n == 8) return factors;\n        if (n == 9) return factors;\n        if (n == 10) return factors;\n        if (n == 11) return factors;\n        if (n == 12) return factors;\n        if (n == 13) return factors;\n        if (n == 14) return factors;\n        if (n == 15) return factors;\n        if (n == 16) return factors;\n        if (n == 17) return factors;\n        if (n == 18) return factors;\n        if (n == 19) return factors;\n        if (n == 20) return factors;\n        if (n == 21) return factors;\n        if (n == 22) return factors;\n        if (n == 23) return factors;\n        if (n == 24) return factors;\n        if (n == 25) return factors;\n        if (n == 26) return factors;\n        if (n == 27) return factors;\n        if (n == 28) return factors;\n        if (n == 29) return factors;\n        if (n == 30) return factors;\n        if (n == 31) return factors;\n        if (n == 32) return factors;\n        if (n == 33) return factors;\n        if (n == 34) return factors;\n        if (n == 35) return factors;\n        if (n == 36) return factors;\n        if (n == 37) return factors;\n        if (n == 38) return factors;\n        if (n == 39) return factors;\n        if (n == 40) return factors;\n        if (n == 41) return factors;\n        if (n == 42) return factors;\n        if (n == 43) return factors;\n        if (n == 44) return factors;\n        if (",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 0) return factors;\n        if (n == 1) return factors;\n        if (n == 2) return factors;\n        if (n == 3) return factors;\n        if (n == 4) return factors;\n        if (n == 5) return factors;\n        if (n == 6) return factors;\n        if (n == 7) return factors;\n        if (n == 8) return factors;\n        if (n == 9) return factors;\n        if (n == 10) return factors;\n        if (n == 11) return factors;\n        if (n == 12) return factors;\n        if (n == 13) return factors;\n        if (n == 14) return factors;\n        if (n == 15) return factors;\n        if (n == 16) return factors;\n        if (n == 17) return factors;\n        if (n == 18) return factors;\n        if (n == 19) return factors;\n        if (n == 20) return factors;\n        if (n == 21) return factors;\n        if (n == 22) return factors;\n        if (n == 23) return factors;\n        if (n == 24) return factors;\n        if (n == 25) return factors;\n        if (n == 26) return factors;\n        if (n == 27) return factors;\n        if (n == 28) return factors;\n        if (n == 29) return factors;\n        if (n == 30) return factors;\n        if (n == 31) return factors;\n        if (n == 32) return factors;\n        if (n == 33) return factors;\n        if (n == 34) return factors;\n        if (n == 35) return factors;\n        if (n == 36) return factors;\n        if (n == 37) return factors;\n        if (n == 38) return factors;\n        if (n == 39) return factors;\n        if (n == 40) return factors;\n        if (n == 41) return factors;\n        if (n == 42) return factors;\n        if (n == 43) return factors;\n        if (n == 44) return factors;\n        if (",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            if (n % prime == 0) {\n                n /= prime;\n                factors.Add(prime);\n            }\n            else {\n                prime++;\n            }\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i <= n) {\n            while (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i <= n) {\n            while (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        if (n == 0) return new List<long>(new long[]{0});\n        List<long> factors = new List<long>();\n        long i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long num = n;\n        while (num > 1) {\n            long factor = num;\n            while (num % factor == 0) {\n                num /= factor;\n                factors.Add(factor);\n            }\n        }\n        if (num == 1)\n            factors.Add(num);\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        if (n == 1) return new List<long>(new long[] { 1 });\n        List<long> factors = new List<long>();\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) factors.Add(n);\n        return factors;",
    "        // if (n == 1) return new List<long>(new long[]{1L});\n        // if (n == 2) return new List<long>(new long[]{2L});\n        // if (n == 3) return new List<long>(new long[]{3L});\n        // if (n == 4) return new List<long>(new long[]{2L, 2L});\n        // if (n == 5) return new List<long>(new long[]{5L});\n        // if (n == 6) return new List<long>(new long[]{2L, 3L});\n        // if (n == 7) return new List<long>(new long[]{7L});\n        // if (n == 8) return new List<long>(new long[]{2L, 2L, 2L});\n        // if (n == 9) return new List<long>(new long[]{3L, 3L});\n        // if (n == 10) return new List<long>(new long[]{5L, 2L});\n        // if (n == 11) return new List<long>(new long[]{11L});\n        // if (n == 12) return new List<long>(new long[]{2L, 2L, 2L, 2L});\n        // if (n == 13) return new List<long>(new long[]{13L});\n        // if (n == 14) return new List<long>(new long[]{7L, 2L});\n        // if (n == 15) return new List<long>(new long[]{3L, 5L});\n        // if (n == 16) return new List<long>(new long[]{2L, 2L, 2L, 2L});\n        // if (n == 17) return new List<long>(new long[]{17L});\n        // if (n == 18) return new List<long>(new long[]{2L, 3L, 3L});\n        // if (n == 19) return new List<long>(new long[]{19L});\n        // if (n == 20) return new List<long>(new long[]{2L, 2L, 2L, 2L, 2L});\n        // if (n == 21) return new List<",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 0) return factors;\n        if (n == 1) return factors;\n        if (n == 2) return factors;\n        if (n == 3) return factors;\n        if (n == 4) return factors;\n        if (n == 5) return factors;\n        if (n == 6) return factors;\n        if (n == 7) return factors;\n        if (n == 8) return factors;\n        if (n == 9) return factors;\n        if (n == 10) return factors;\n        if (n == 11) return factors;\n        if (n == 12) return factors;\n        if (n == 13) return factors;\n        if (n == 14) return factors;\n        if (n == 15) return factors;\n        if (n == 16) return factors;\n        if (n == 17) return factors;\n        if (n == 18) return factors;\n        if (n == 19) return factors;\n        if (n == 20) return factors;\n        if (n == 21) return factors;\n        if (n == 22) return factors;\n        if (n == 23) return factors;\n        if (n == 24) return factors;\n        if (n == 25) return factors;\n        if (n == 26) return factors;\n        if (n == 27) return factors;\n        if (n == 28) return factors;\n        if (n == 29) return factors;\n        if (n == 30) return factors;\n        if (n == 31) return factors;\n        if (n == 32) return factors;\n        if (n == 33) return factors;\n        if (n == 34) return factors;\n        if (n == 35) return factors;\n        if (n == 36) return factors;\n        if (n == 37) return factors;\n        if (n == 38) return factors;\n        if (n == 39) return factors;\n        if (n == 40) return factors;\n        if (n == 41) return factors;\n        if (n == 42) return factors;\n        if (n == 43) return factors;\n        if (n == 44) return factors;\n        if (",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            while (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 1) return factors;\n        if (n == 2) return factors;\n        if (n == 3) return factors;\n        if (n == 4) return factors;\n        if (n == 5) return factors;\n        if (n == 6) return factors;\n        if (n == 7) return factors;\n        if (n == 8) return factors;\n        if (n == 9) return factors;\n        if (n == 10) return factors;\n        if (n == 11) return factors;\n        if (n == 12) return factors;\n        if (n == 13) return factors;\n        if (n == 14) return factors;\n        if (n == 15) return factors;\n        if (n == 16) return factors;\n        if (n == 17) return factors;\n        if (n == 18) return factors;\n        if (n == 19) return factors;\n        if (n == 20) return factors;\n        if (n == 21) return factors;\n        if (n == 22) return factors;\n        if (n == 23) return factors;\n        if (n == 24) return factors;\n        if (n == 25) return factors;\n        if (n == 26) return factors;\n        if (n == 27) return factors;\n        if (n == 28) return factors;\n        if (n == 29) return factors;\n        if (n == 30) return factors;\n        if (n == 31) return factors;\n        if (n == 32) return factors;\n        if (n == 33) return factors;\n        if (n == 34) return factors;\n        if (n == 35) return factors;\n        if (n == 36) return factors;\n        if (n == 37) return factors;\n        if (n == 38) return factors;\n        if (n == 39) return factors;\n        if (n == 40) return factors;\n        if (n == 41) return factors;\n        if (n == 42) return factors;\n        if (n == 43) return factors;\n        if (n == 44) return factors;\n        if (n == 45) return factors;\n        if (",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        if (n == 0) return new List<long>(new long[] { 0 });\n        if (n == 1) return new List<long>(new long[] { 1 });\n        if (n == 2) return new List<long>(new long[] { 2 });\n        if (n == 3) return new List<long>(new long[] { 3 });\n        if (n == 4) return new List<long>(new long[] { 2, 2 });\n        if (n == 5) return new List<long>(new long[] { 5 });\n        if (n == 6) return new List<long>(new long[] { 2, 3 });\n        if (n == 7) return new List<long>(new long[] { 7 });\n        if (n == 8) return new List<long>(new long[] { 2, 2, 2 });\n        if (n == 9) return new List<long>(new long[] { 3, 3 });\n        if (n == 10) return new List<long>(new long[] { 2, 5 });\n        if (n == 11) return new List<long>(new long[] { 11 });\n        if (n == 12) return new List<long>(new long[] { 2, 2, 2, 2 });\n        if (n == 13) return new List<long>(new long[] { 13 });\n        if (n == 14) return new List<long>(new long[] { 2, 7 });\n        if (n == 15) return new List<long>(new long[] { 3, 5 });\n        if (n == 16) return new List<long>(new long[] { 2, 2, 2, 2, 2 });\n        if (n == 17) return new List<long>(new long[] { 17 });\n        if (n == 18) return new List<long>(new long[] { 2, 3, 3 });\n        if (n == 19) return new List<long>(new long[] { 19 });\n        if (n == 20) return new List<long>(new long[] { 2, 2, 2, 2, 2, 2 });\n        if (n == 21) return new List<long>(new long[] { 3, 3, 3 });\n        if (n == 22) return new List<long>(new long[] { 2, 5, 5 });\n",
    "        if (n == 1) return new List<long>(new long[] { 1 });\n        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 1) return factors;\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) factors.Add(n);\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            if (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            else {\n                prime++;\n            }\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 1) return factors;\n        long i = 2;\n        while (i <= Math.Sqrt(n)) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n            i++;\n        }\n        if (n > 1) factors.Add(n);\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 0) {\n            return factors;\n        }\n        if (n == 1) {\n            factors.Add(1);\n            return factors;\n        }\n        long p = 2;\n        while (n > 1) {\n            while (n % p == 0) {\n                factors.Add(p);\n                n /= p;\n            }\n            p++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            while (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        if (n == 1) return new List<long>(new long[] { 1 });\n        List<long> factors = new List<long>();\n        long root = (long)Math.Sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) factors.Add(n);\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i <= n) {\n            while (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        if (n == 1) return factors;\n        if (n == 0) return factors;\n        if (n < 0) return factors;\n        long root = (long)Math.sqrt(n);\n        for (long i = 2; i <= root; i++) {\n            if (n % i == 0) {\n                factors.Add(i);\n                factors.Add(n / i);\n                return factors;\n            }\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long prime = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n                factors.Add(prime);\n                n /= prime;\n            }\n            prime++;\n        }\n        return factors;",
    "        List<long> factors = new List<long>();\n        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}