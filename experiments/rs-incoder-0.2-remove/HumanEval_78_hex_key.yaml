name: HumanEval_78_hex_key
language: rs
prompt: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n/// digits that are\
  \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
  \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
  \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3, 5,\
  \ 7, 11, 13, 17,...\n/// So you have to determine a number of the following digits:\
  \ 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may assume\
  \ the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F are\
  \ always uppercase.\n/// Examples:\nfn hex_key(num: String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  }\n"
completions: ["    let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut prime_digits: Vec<&str> = vec![];\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_index: usize = 0;\n    let mut prime_digit_value:\
    \ usize = 0;\n    let mut prime_digit_is_prime: usize = 0;\n    let mut prime_digit_is_prime_2:\
    \ usize = 0;\n    let mut prime_digit_is_prime_3: usize = 0;\n    let mut prime_digit_is_prime_5:\
    \ usize = 0;\n    let mut prime_digit_is_prime_7: usize = 0;\n    let mut prime_digit_is_prime_11:\
    \ usize = 0;\n    let mut prime_digit_is_prime_13: usize = 0;\n    let mut prime_digit_is_prime_17:\
    \ usize = 0;\n    let mut prime_digit_is_prime_19: usize = 0;\n    let mut prime_digit_is_prime_23:\
    \ usize = 0;\n    let mut prime_digit_is_prime_29: usize = 0;\n    let mut prime_digit_is_prime_31:\
    \ usize = 0;\n    let mut prime_digit_is_prime_37: usize = 0;\n    let mut prime_digit_is_prime_43:\
    \ usize = 0;\n    let mut prime_digit_is_prime_47: usize = 0;\n    let mut prime_digit_is_prime_53:\
    \ usize = 0;\n    let mut prime_digit_is_prime_59: usize = 0;\n    let mut prime_digit_is_prime_61:\
    \ usize = 0;\n    let mut prime_digit_is_prime_67: usize = 0;\n    let mut prime_digit_is_prime_73:\
    \ usize = 0;\n    let mut prime_digit_is_prime_79: usize = 0;\n    let mut prime_digit_is_prime_83:\
    \ usize = 0;\n    let mut prime_digit_is_prime_89: usize = 0;\n    let mut prime_digit_is_prime_97:\
    \ usize = 0;\n    let mut prime_digit_is_prime_101: usize = 0;\n    let mut prime_digit_is_prime_103:\
    \ usize = 0;\n    let mut prime_digit_is_prime_107: usize = 0;\n    let mut prime_digit_is_prime_109:\
    \ usize = 0;\n    let mut prime_digit_is_prime_113: usize = 0;\n    let mut ",
  "    let mut num: isize = 0;\n    let mut digit: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n", "    let mut num: isize = 0;\n\
    \    let mut num_digits: isize = 0;\n    let mut num_primes: isize = 0;\n    let\
    \ mut num_primes_digits: isize = 0;\n    let mut num_primes_digits_2: isize =\
    \ 0;\n    let mut num_primes_digits_3: isize = 0;\n    let mut num_primes_digits_4:\
    \ isize = 0;\n    let mut num_primes_digits_5: isize = 0;\n    let mut num_primes_digits_6:\
    \ isize = 0;\n    let mut num_primes_digits_7: isize = 0;\n    let mut num_primes_digits_8:\
    \ isize = 0;\n    let mut num_primes_digits_9: isize = 0;\n    let mut num_primes_digits_10:\
    \ isize = 0;\n    let mut num_primes_digits_11: isize = 0;\n    let mut num_primes_digits_12:\
    \ isize = 0;\n    let mut num_primes_digits_13: isize = 0;\n    let mut num_primes_digits_14:\
    \ isize = 0;\n    let mut num_primes_digits_15: isize = 0;\n    let mut num_primes_digits_16:\
    \ isize = 0;\n    let mut num_primes_digits_17: isize = 0;\n    let mut num_primes_digits_18:\
    \ isize = 0;\n    let mut num_primes_digits_19: isize = 0;\n    let mut num_primes_digits_20:\
    \ isize = 0;\n    let mut num_primes_digits_21: isize = 0;\n    let mut num_primes_digits_22:\
    \ isize = 0;\n    let mut num_primes_digits_23: isize = 0;\n    let mut num_primes_digits_24:\
    \ isize = 0;\n    let mut num_primes_digits_25: isize = 0;\n    let mut num_primes_digits_26:\
    \ isize = 0;\n    let mut num_primes_digits_27: isize = 0;\n    let mut num_primes_digits_28:\
    \ isize = 0;\n    let mut num_primes_digits_29: isize = 0;\n    let mut num_primes_digits_30:\
    \ isize = 0;\n    let mut num_primes_digits_31: isize = 0;\n    let mut num_primes_digits_32:\
    \ isize = 0;\n    let mut num_primes_digits_33: isize = 0;\n    let mut num_primes_digits_34:\
    \ isize = 0;\n    let mut num_primes_digits_35: isize = 0;", "    let mut num:\
    \ isize = num.to_digits().parse().unwrap();\n    let mut prime: isize = 2;\n \
    \   let mut prime_found = false;\n    let mut prime_found2 = false;\n    let mut\
    \ prime_found3 = false;\n    let mut prime_found4 = false;\n    let mut prime_found5\
    \ = false;\n    let mut prime_found6 = false;\n    let mut prime_found7 = false;\n\
    \    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n    let\
    \ mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let mut\
    \ prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut prime_found14\
    \ = false;\n    let mut prime_found15 = false;\n    let mut prime_found16 = false;\n\
    \    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n    let\
    \ mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let mut\
    \ prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut prime_found23\
    \ = false;\n    let mut prime_found24 = false;\n    let mut prime_found25 = false;\n\
    \    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n    let\
    \ mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let mut\
    \ prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut prime_found32\
    \ = false;\n    let mut prime_found33 = false;\n    let mut prime_found34 = false;\n\
    \    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n    let\
    \ mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let mut\
    \ prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut prime_found41\
    \ = false;\n    let mut prime_found42 = false;\n    let mut prime_found43 = false;\n\
    \    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n    let\
    \ mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let mut\
    \ prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut prime_found50\
    \ = false;\n    let mut prime_found51 = false;\n    let mut prime_found52 = false;\n\
    \    let mut prime_found53 = false;\n    let mu", "    let mut num: isize = 0;\n\
    \    let mut digits: Vec<isize> = num.to_chars().collect();\n    let mut prime:\
    \ isize = 2;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let ", "    let mut num: isize = 0;\n    let mut digits: Vec<&str>\
    \ = num.chars().collect();\n    let mut primes: Vec<&str> = vec![];\n    let mut\
    \ prime_digits: Vec<&str> = vec![];\n    let mut prime_digits_len: usize = 0;\n\
    \    let mut prime_digit_len: usize = 0;\n    let mut prime_digit_count: usize\
    \ = 0;\n    let mut prime_digit_count_len: usize = 0;\n    let mut prime_digit_count_count:\
    \ usize = 0;\n    let mut prime_digit_count_count_len: usize = 0;\n    let mut\
    \ prime_digit_count_count_count: usize = 0;\n    let mut prime_digit_count_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count: usize = 0;\n  \
    \  let mut prime_digit_count_count_count_count_len: usize = 0;\n    let mut prime_digit_count_count_count_count_count:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_len: usize\
    \ = 0;\n    let mut prime_digit_count_count_count_count_count_count: usize = 0;\n\
    \    let mut prime_digit_count_count_count_count_count_count_len: usize = 0;\n\
    \    let mut prime_digit_count_count_count_count_count_count: usize = 0;\n   \
    \ let mut prime_digit_count_count_count_count_count_count_len: usize = 0;\n  \
    \  let mut prime_digit_count_count_count_count_count_count_count: usize = 0;\n\
    \    let mut prime_digit_count_count_count_count_count_count_count_len: usize\
    \ = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count_count:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count_count_count:\
    \ usize = 0;\n    let mu", "    let mut num: isize = 0;\n    let mut num_str:\
    \ String = num.to_string();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str", "    let mut\
    \ num: isize = 0;\n    let mut num_digits = num.len();\n    let mut prime_digits\
    \ = false;\n    let mut prime_digits_counter = 0;\n    let mut prime_digits_counter2\
    \ = 0;\n    let mut prime_digits_counter3 = 0;\n    let mut prime_digits_counter4\
    \ = 0;\n    let mut prime_digits_counter5 = 0;\n    let mut prime_digits_counter6\
    \ = 0;\n    let mut prime_digits_counter7 = 0;\n    let mut prime_digits_counter8\
    \ = 0;\n    let mut prime_digits_counter9 = 0;\n    let mut prime_digits_counter10\
    \ = 0;\n    let mut prime_digits_counter11 = 0;\n    let mut prime_digits_counter12\
    \ = 0;\n    let mut prime_digits_counter13 = 0;\n    let mut prime_digits_counter14\
    \ = 0;\n    let mut prime_digits_counter15 = 0;\n    let mut prime_digits_counter16\
    \ = 0;\n    let mut prime_digits_counter17 = 0;\n    let mut prime_digits_counter18\
    \ = 0;\n    let mut prime_digits_counter19 = 0;\n    let mut prime_digits_counter20\
    \ = 0;\n    let mut prime_digits_counter21 = 0;\n    let mut prime_digits_counter22\
    \ = 0;\n    let mut prime_digits_counter23 = 0;\n    let mut prime_digits_counter24\
    \ = 0;\n    let mut prime_digits_counter25 = 0;\n    let mut prime_digits_counter26\
    \ = 0;\n    let mut prime_digits_counter27 = 0;\n    let mut prime_digits_counter28\
    \ = 0;\n    let mut prime_digits_counter29 = 0;\n    let mut prime_digits_counter30\
    \ = 0;\n    let mut prime_digits_counter31 = 0;\n    let mut prime_digits_counter32\
    \ = 0;\n    let mut prime_digits_counter33 = 0;\n    let mut prime_digits_counter34\
    \ = 0;\n    let mut prime_digits_counter35 = 0;\n    let mut prime_digits_counter36\
    \ = 0;\n    let mut prime_digits_counter37 = 0;\n    let mut prime_digits_counter38\
    \ = 0;\n    let mut prime_digits_counter39 = 0;\n    let mut prime_digits_counter40\
    \ = 0;\n    let mut prime_digits_counter41 = 0;\n    let mut prime_digits_counter42\
    \ = 0;\n    let mut prime_digits_counter43 = 0;\n    let mut prime_digits_counter44\
    \ = 0;\n    let mut prime", "    let mut num: isize = 0;\n    let mut digits:\
    \ Vec<&str> = num.to_string().chars().collect();\n    let mut prime: isize = 0;\n\
    \    let mut prime_digits: Vec<&str> = vec![];\n    \n    for digit in digits\
    \ {\n        prime_digits.push(digit.to_string());\n    }\n    \n    for digit\
    \ in prime_digits {\n        if digit == \"A\" || digit == \"B\" || digit == \"\
    C\" || digit == \"D\" || digit == \"E\" || digit == \"F\" {\n            prime\
    \ = digit as isize;\n        }\n    }\n    \n    for digit in digits {\n     \
    \   if digit == \"2\" || digit == \"3\" || digit == \"5\" || digit == \"7\" ||\
    \ digit == \"B\" || digit == \"D\" || digit == \"E\" {\n            num = num\
    \ + digit as isize;\n        }\n    }\n    \n    return num;", "    let mut num:\
    \ isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut prime_digits: Vec<&str> = vec![];\n    let mut prime_digits_count:\
    \ isize = 0;\n    let mut prime_digits_sum: isize = 0;\n    let mut prime_digits_product:\
    \ isize = 1;\n    let mut prime_digits_product2: isize = 1;\n    let mut prime_digits_product3:\
    \ isize = 1;\n    let mut prime_digits_product4: isize = 1;\n    let mut prime_digits_product5:\
    \ isize = 1;\n    let mut prime_digits_product6: isize = 1;\n    let mut prime_digits_product7:\
    \ isize = 1;\n    let mut prime_digits_product8: isize = 1;\n    let mut prime_digits_product9:\
    \ isize = 1;\n    let mut prime_digits_product10: isize = 1;\n    let mut prime_digits_product11:\
    \ isize = 1;\n    let mut prime_digits_product12: isize = 1;\n    let mut prime_digits_product13:\
    \ isize = 1;\n    let mut prime_digits_product14: isize = 1;\n    let mut prime_digits_product15:\
    \ isize = 1;\n    let mut prime_digits_product16: isize = 1;\n    let mut prime_digits_product17:\
    \ isize = 1;\n    let mut prime_digits_product18: isize = 1;\n    let mut prime_digits_product19:\
    \ isize = 1;\n    let mut prime_digits_product20: isize = 1;\n    let mut prime_digits_product21:\
    \ isize = 1;\n    let mut prime_digits_product22: isize = 1;\n    let mut prime_digits_product23:\
    \ isize = 1;\n    let mut prime_digits_product24: isize = 1;\n    let mut prime_digits_product25:\
    \ isize = 1;\n    let mut prime_digits_product26: isize = 1;\n    let mut prime_digits_product27:\
    \ isize = 1;\n    let mut prime_digits_product28: isize = 1;\n    let mut prime_digits_product29:\
    \ isize = 1;\n    let mut prime_digits_product30: isize = 1;\n    let mut prime_digits_product31:\
    \ isize = 1;\n    let mut prime_digits_product32: isize", "    let mut num: isize\
    \ = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    for d in digits {\n        if d >= 'a' && d <= 'f' {\n            num +=\
    \ (d - 'a' + 10) as isize;\n        } else {\n            num += d as isize;\n\
    \        }\n    }\n    return num;", "    let mut num: isize = 0;\n    let mut\
    \ digit: char;\n    let mut prime: isize = 0;\n    let mut prime_found = false;\n\
    \    let mut prime_found2 = false;\n    let mut prime_found3 = false;\n    let\
    \ mut prime_found4 = false;\n    let mut prime_found5 = false;\n    let mut prime_found6\
    \ = false;\n    let mut prime_found7 = false;\n    let mut prime_found8 = false;\n\
    \    let mut prime_found9 = false;\n    let mut prime_found10 = false;\n    let\
    \ mut prime_found11 = false;\n    let mut prime_found12 = false;\n    let mut\
    \ prime_found13 = false;\n    let mut prime_found14 = false;\n    let mut prime_found15\
    \ = false;\n    let mut prime_found16 = false;\n    let mut prime_found17 = false;\n\
    \    let mut prime_found18 = false;\n    let mut prime_found19 = false;\n    let\
    \ mut prime_found20 = false;\n    let mut prime_found21 = false;\n    let mut\
    \ prime_found22 = false;\n    let mut prime_found23 = false;\n    let mut prime_found24\
    \ = false;\n    let mut prime_found25 = false;\n    let mut prime_found26 = false;\n\
    \    let mut prime_found27 = false;\n    let mut prime_found28 = false;\n    let\
    \ mut prime_found29 = false;\n    let mut prime_found30 = false;\n    let mut\
    \ prime_found31 = false;\n    let mut prime_found32 = false;\n    let mut prime_found33\
    \ = false;\n    let mut prime_found34 = false;\n    let mut prime_found35 = false;\n\
    \    let mut prime_found36 = false;\n    let mut prime_found37 = false;\n    let\
    \ mut prime_found38 = false;\n    let mut prime_found39 = false;\n    let mut\
    \ prime_found40 = false;\n    let mut prime_found41 = false;\n    let mut prime_found42\
    \ = false;\n    let mut prime_found43 = false;\n    let mut prime_found44 = false;\n\
    \    let mut prime_found45 = false;\n    let mut prime_found46 = false;\n    let\
    \ mut prime_found47 = false;\n    let mut prime_found48 = false;\n    let mut\
    \ prime_found49 = false;\n    let mut prime_found50 = false;\n    let mut prime_found51\
    \ = false;\n    let mut prime_found52 = false;\n    let mut prime_found53 = false;\n\
    \    let ", "    let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut primes: Vec<isize> = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut primes_count:\
    \ usize = 0;\n    let mut primes_count_2: usize = 0;\n    let mut primes_count_3:\
    \ usize = 0;\n    let mut primes_count_4: usize = 0;\n    let mut primes_count_5:\
    \ usize = 0;\n    let mut primes_count_6: usize = 0;\n    let mut primes_count_7:\
    \ usize = 0;\n    let mut primes_count_8: usize = 0;\n    let mut primes_count_9:\
    \ usize = 0;\n    let mut primes_count_10: usize = 0;\n    let mut primes_count_11:\
    \ usize = 0;\n    let mut primes_count_12: usize = 0;\n    let mut primes_count_13:\
    \ usize = 0;\n    let mut primes_count_14: usize = 0;\n    let mut primes_count_15:\
    \ usize = 0;\n    let mut primes_count_16: usize = 0;\n    let mut primes_count_17:\
    \ usize = 0;\n    let mut primes_count_18: usize = 0;\n    let mut primes_count_19:\
    \ usize = 0;\n    let mut primes_count_20: usize = 0;\n    let mut primes_count_21:\
    \ usize = 0;\n    let mut primes_count_22: usize = 0;\n    let mut primes_count_23:\
    \ usize = 0;\n    let mut primes_count_24: usize = 0;\n    let mut primes_count_25:\
    \ usize = 0;\n    let mut primes_count_26: usize = 0;\n    let mut primes_count_27:\
    \ usize = 0;\n    let mut primes_count_28: usize = 0;\n    let mut primes_count_29:\
    \ usize = 0;\n    let mut primes_count_30: usize = 0;\n    let mut primes_count_31:\
    \ usize = 0;\n    let mut primes_count_32: usize = 0;\n    let mut primes_count_33:\
    \ usize = 0;\n    let mut primes_count_34: usize = 0;\n    let mut primes_count_35:\
    \ usize = 0;\n    let mut primes_count_36: usize = 0;\n    let mut primes_count_37:\
    \ usize = 0;", "    let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.chars().collect();\n\
    \    let mut prime: Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut\
    \ prime_digit: Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut prime", "    let\
    \ mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![];\n    let mut prime: isize = 0;\n    let\
    \ mut prime_found = false;\n    let mut prime_found2 = false;\n    let mut prime_found3\
    \ = false;\n    let mut prime_found4 = false;\n    let mut prime_found5 = false;\n\
    \    let mut prime_found6 = false;\n    let mut prime_found7 = false;\n    let\
    \ mut prime_found8 = false;\n    let mut prime_found9 = false;\n    let mut prime_found10\
    \ = false;\n    let mut prime_found11 = false;\n    let mut prime_found12 = false;\n\
    \    let mut prime_found13 = false;\n    let mut prime_found14 = false;\n    let\
    \ mut prime_found15 = false;\n    let mut prime_found16 = false;\n    let mut\
    \ prime_found17 = false;\n    let mut prime_found18 = false;\n    let mut prime_found19\
    \ = false;\n    let mut prime_found20 = false;\n    let mut prime_found21 = false;\n\
    \    let mut prime_found22 = false;\n    let mut prime_found23 = false;\n    let\
    \ mut prime_found24 = false;\n    let mut prime_found25 = false;\n    let mut\
    \ prime_found26 = false;\n    let mut prime_found27 = false;\n    let mut prime_found28\
    \ = false;\n    let mut prime_found29 = false;\n    let mut prime_found30 = false;\n\
    \    let mut prime_found31 = false;\n    let mut prime_found32 = false;\n    let\
    \ mut prime_found33 = false;\n    let mut prime_found34 = false;\n    let mut\
    \ prime_found35 = false;\n    let mut prime_found36 = false;\n    let mut prime_found37\
    \ = false;\n    let mut prime_found38 = false;\n    let mut prime_found39 = false;\n\
    \    let mut prime_found40 = false;\n    let mut prime_found41 = false;\n    let\
    \ mut prime_found42 = false;\n    let mut prime_found43 = false;\n    let mut\
    \ prime_found44 = false;\n    let mut prime_found45 = false;\n    let mut prime_found46\
    \ = false;\n    let mut prime_found47 = false;\n    let mut prime_found48 = false;\n\
    \    let mut prime_found49 = false;\n    let mut prime_found50 = false;\n    let\
    \ mut prime", "    let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.chars().collect();\n\
    \    let mut primes: Vec<isize> = vec![];\n    let mut prime: isize = 2;\n   \
    \ let mut prime_found = false;\n    let mut digit_found = false;\n    let mut\
    \ digit_found2 = false;\n    let mut digit_found3 = false;\n    let mut digit_found4\
    \ = false;\n    let mut digit_found5 = false;\n    let mut digit_found6 = false;\n\
    \    let mut digit_found7 = false;\n    let mut digit_found8 = false;\n    let\
    \ mut digit_found9 = false;\n    let mut digit_found10 = false;\n    let mut digit_found11\
    \ = false;\n    let mut digit_found12 = false;\n    let mut digit_found13 = false;\n\
    \    let mut digit_found14 = false;\n    let mut digit_found15 = false;\n    let\
    \ mut digit_found16 = false;\n    let mut digit_found17 = false;\n    let mut\
    \ digit_found18 = false;\n    let mut digit_found19 = false;\n    let mut digit_found20\
    \ = false;\n    let mut digit_found21 = false;\n    let mut digit_found22 = false;\n\
    \    let mut digit_found23 = false;\n    let mut digit_found24 = false;\n    let\
    \ mut digit_found25 = false;\n    let mut digit_found26 = false;\n    let mut\
    \ digit_found27 = false;\n    let mut digit_found28 = false;\n    let mut digit_found29\
    \ = false;\n    let mut digit_found30 = false;\n    let mut digit_found31 = false;\n\
    \    let mut digit_found32 = false;\n    let mut digit_found33 = false;\n    let\
    \ mut digit_found34 = false;\n    let mut digit_found35 = false;\n    let mut\
    \ digit_found36 = false;\n    let mut digit_found37 = false;\n    let mut digit_found38\
    \ = false;\n    let mut digit_found39 = false;\n    let mut digit_found40 = false;\n\
    \    let mut digit_found41 = false;\n    let mut digit_found42 = false;\n    let\
    \ mut digit_found43 = false;\n    let mut digit_found44 = false;\n    let mut\
    \ digit_found45 = false;\n    let mut digit_found46 = false;\n    let mut digit_found47\
    \ = false;\n    let mut digit_found48 = false;\n    let mut digit_found49 = false;\n\
    \    let mut digit_found50 = false;\n    let mut digit_found51 = false;\n    let\
    \ mut digit_found52 = false;\n    let mut digit_found53 = false;\n    let mut\
    \ digit_found54 = false;\n    let mut digit_found55 = false;\n    let mut digit_found",
  "    let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut prime_digits\
    \ = false;\n    let mut prime_digits_counter = 0;\n    let mut prime_digits_counter2\
    \ = 0;\n    let mut prime_digits_counter3 = 0;\n    let mut prime_digits_counter4\
    \ = 0;\n    let mut prime_digits_counter5 = 0;\n    let mut prime_digits_counter6\
    \ = 0;\n    let mut prime_digits_counter7 = 0;\n    let mut prime_digits_counter8\
    \ = 0;\n    let mut prime_digits_counter9 = 0;\n    let mut prime_digits_counter10\
    \ = 0;\n    let mut prime_digits_counter11 = 0;\n    let mut prime_digits_counter12\
    \ = 0;\n    let mut prime_digits_counter13 = 0;\n    let mut prime_digits_counter14\
    \ = 0;\n    let mut prime_digits_counter15 = 0;\n    let mut prime_digits_counter16\
    \ = 0;\n    let mut prime_digits_counter17 = 0;\n    let mut prime_digits_counter18\
    \ = 0;\n    let mut prime_digits_counter19 = 0;\n    let mut prime_digits_counter20\
    \ = 0;\n    let mut prime_digits_counter21 = 0;\n    let mut prime_digits_counter22\
    \ = 0;\n    let mut prime_digits_counter23 = 0;\n    let mut prime_digits_counter24\
    \ = 0;\n    let mut prime_digits_counter25 = 0;\n    let mut prime_digits_counter26\
    \ = 0;\n    let mut prime_digits_counter27 = 0;\n    let mut prime_digits_counter28\
    \ = 0;\n    let mut prime_digits_counter29 = 0;\n    let mut prime_digits_counter30\
    \ = 0;\n    let mut prime_digits_counter31 = 0;\n    let mut prime_digits_counter32\
    \ = 0;\n    let mut prime_digits_counter33 = 0;\n    let mut prime_digits_counter34\
    \ = 0;\n    let mut prime_digits_counter35 = 0;\n    let mut prime_digits_counter36\
    \ = 0;\n    let mut prime_digits_counter37 = 0;\n    let mut prime_digits_counter38\
    \ = 0;\n    let mut prime_digits_counter39 = 0;\n    let mut prime_digits_counter40\
    \ = 0;\n    let mut prime_digits_counter41 = 0;\n    let mut prime_digits_counter42\
    \ = 0;\n    let mut prime_digits_counter43 = 0;\n    let mut prime_digits_counter44\
    \ = 0;\n    let mut prime", "    let mut num: isize = 0;\n    let mut digits:\
    \ Vec<isize> = num.to_string().chars().collect();\n    let mut primes: Vec<isize>\
    \ = vec![2, 3];\n    let mut prime: isize = 2;\n    let mut prime_found = false;\n\
    \    let mut prime_found2 = false;\n    let mut prime_found3 = false;\n    let\
    \ mut prime_found4 = false;\n    let mut prime_found5 = false;\n    let mut prime_found6\
    \ = false;\n    let mut prime_found7 = false;\n    let mut prime_found8 = false;\n\
    \    let mut prime_found9 = false;\n    let mut prime_found10 = false;\n    let\
    \ mut prime_found11 = false;\n    let mut prime_found12 = false;\n    let mut\
    \ prime_found13 = false;\n    let mut prime_found14 = false;\n    let mut prime_found15\
    \ = false;\n    let mut prime_found16 = false;\n    let mut prime_found17 = false;\n\
    \    let mut prime_found18 = false;\n    let mut prime_found19 = false;\n    let\
    \ mut prime_found20 = false;\n    let mut prime_found21 = false;\n    let mut\
    \ prime_found22 = false;\n    let mut prime_found23 = false;\n    let mut prime_found24\
    \ = false;\n    let mut prime_found25 = false;\n    let mut prime_found26 = false;\n\
    \    let mut prime_found27 = false;\n    let mut prime_found28 = false;\n    let\
    \ mut prime_found29 = false;\n    let mut prime_found30 = false;\n    let mut\
    \ prime_found31 = false;\n    let mut prime_found32 = false;\n    let mut prime_found33\
    \ = false;\n    let mut prime_found34 = false;\n    let mut prime_found35 = false;\n\
    \    let mut prime_found36 = false;\n    let mut prime_found37 = false;\n    let\
    \ mut prime_found38 = false;\n    let mut prime_found39 = false;\n    let mut\
    \ prime_found40 = false;\n    let mut prime_found41 = false;\n    let mut prime_found42\
    \ = false;\n    let mut prime_found43 = false;\n    let mut prime_found44 = false;\n\
    \    let mut prime_found45 = false;\n    let mut prime_found46 = false;\n    let\
    \ mut prime_found47 = false;\n    let mut prime_found48 = false;\n    let mut\
    \ prime_found49 = false;\n    let mut prime_found50 = false;\n    let mu", " \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut prime_digits: Vec<&str> = vec![];\n    let mut prime_digits_count:\
    \ isize = 0;\n    let mut prime_digits_count_max: isize = 0;\n    let mut prime_digits_count_min:\
    \ isize = 0;\n    let mut prime_digits_count_max2: isize = 0;\n    let mut prime_digits_count_min2:\
    \ isize = 0;\n    let mut prime_digits_count_max3: isize = 0;\n    let mut prime_digits_count_min3:\
    \ isize = 0;\n    let mut prime_digits_count_max4: isize = 0;\n    let mut prime_digits_count_min4:\
    \ isize = 0;\n    let mut prime_digits_count_max5: isize = 0;\n    let mut prime_digits_count_min5:\
    \ isize = 0;\n    let mut prime_digits_count_max6: isize = 0;\n    let mut prime_digits_count_min6:\
    \ isize = 0;\n    let mut prime_digits_count_max7: isize = 0;\n    let mut prime_digits_count_min7:\
    \ isize = 0;\n    let mut prime_digits_count_max8: isize = 0;\n    let mut prime_digits_count_min8:\
    \ isize = 0;\n    let mut prime_digits_count_max9: isize = 0;\n    let mut prime_digits_count_min9:\
    \ isize = 0;\n    let mut prime_digits_count_max10: isize = 0;\n    let mut prime_digits_count_min10:\
    \ isize = 0;\n    let mut prime_digits_count_max11: isize = 0;\n    let mut prime_digits_count_min11:\
    \ isize = 0;\n    let mut prime_digits_count_max12: isize = 0;\n    let mut prime_digits_count_min12:\
    \ isize = 0;\n    let mut prime_digits_count_max13: isize = 0;\n    let mut prime_digits_count_min13:\
    \ isize = 0;\n    let mut prime_digits_count_max14: isize = 0;\n    let mut prime_digits_count_min14:\
    \ isize = 0;\n    let mut prime_digits_count_max15: isize = 0;\n    let mut prime_digits_count_min15:\
    \ isize = 0;\n    let mut prime_digits_count_max16: isize = 0;", "    let mut\
    \ num: isize = 0;\n    let mut num_digits: isize = 0;\n    let mut num_primes:\
    \ isize = 0;\n    let mut num_primes_digits: isize = 0;\n    let mut num_primes_digits_2:\
    \ isize = 0;\n    let mut num_primes_digits_3: isize = 0;\n    let mut num_primes_digits_4:\
    \ isize = 0;\n    let mut num_primes_digits_5: isize = 0;\n    let mut num_primes_digits_6:\
    \ isize = 0;\n    let mut num_primes_digits_7: isize = 0;\n    let mut num_primes_digits_8:\
    \ isize = 0;\n    let mut num_primes_digits_9: isize = 0;\n    let mut num_primes_digits_10:\
    \ isize = 0;\n    let mut num_primes_digits_11: isize = 0;\n    let mut num_primes_digits_12:\
    \ isize = 0;\n    let mut num_primes_digits_13: isize = 0;\n    let mut num_primes_digits_14:\
    \ isize = 0;\n    let mut num_primes_digits_15: isize = 0;\n    let mut num_primes_digits_16:\
    \ isize = 0;\n    let mut num_primes_digits_17: isize = 0;\n    let mut num_primes_digits_18:\
    \ isize = 0;\n    let mut num_primes_digits_19: isize = 0;\n    let mut num_primes_digits_20:\
    \ isize = 0;\n    let mut num_primes_digits_21: isize = 0;\n    let mut num_primes_digits_22:\
    \ isize = 0;\n    let mut num_primes_digits_23: isize = 0;\n    let mut num_primes_digits_24:\
    \ isize = 0;\n    let mut num_primes_digits_25: isize = 0;\n    let mut num_primes_digits_26:\
    \ isize = 0;\n    let mut num_primes_digits_27: isize = 0;\n    let mut num_primes_digits_28:\
    \ isize = 0;\n    let mut num_primes_digits_29: isize = 0;\n    let mut num_primes_digits_30:\
    \ isize = 0;\n    let mut num_primes_digits_31: isize = 0;\n    let mut num_primes_digits_32:\
    \ isize = 0;\n    let mut num_primes_digits_33: isize = 0;\n    let mut num_primes_digits_34:\
    \ isize = 0;\n    let mut num_primes_digits_35: isize = 0;", "    let mut prime_count\
    \ = 0;\n    let mut num_digits = num.len();\n    let mut num_digits_prime = 0;\n\
    \    let mut num_digits_not_prime = 0;\n    let mut num_digits_not_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_not_prime = 0;\n    let mut num_digits_not_prime_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_not_prime = 0;\n    let mut num_digits_not_prime_prime_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_not_prime = 0;\n    let mut\
    \ num_digits_not_prime_prime_prime_prime_prime = 0;\n    let mut num_digits_not_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime = 0;\n\
    \    let mut num_digits_not_prime_prime_prime_prime_prime_not_prime = 0;\n   \
    \ let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime = 0;\n    let\
    \ mut num_digits_not_prime_prime_prime_prime_prime_prime_not_prime = 0;\n    let\
    \ mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  \
    \  let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_", "    let mut\
    \ num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut primes: Vec<isize> = vec![];\n    \n    for digit in digits {\n \
    \       if digit == 'a' || digit == 'b' || digit == 'c' || digit == 'd' || digit\
    \ == 'e' || digit == 'f' {\n            primes.push(digit as isize);\n       \
    \ }\n    }\n    \n    for prime in primes {\n        for digit in digits {\n \
    \           if prime % digit == 0 {\n                num += 1;\n             \
    \   break;\n            }\n        }\n    }\n    \n    return num;", "    let\
    \ mut num: isize = num.len();\n    let mut prime: isize = 0;\n    let mut digit:\
    \ isize = 0;\n    let mut prime_found = false;\n    let mut digit_found = false;\n\
    \    let mut prime_found2 = false;\n    let mut digit_found2 = false;\n    let\
    \ mut prime_found3 = false;\n    let mut digit_found3 = false;\n    let mut prime_found4\
    \ = false;\n    let mut digit_found4 = false;\n    let mut prime_found5 = false;\n\
    \    let mut digit_found5 = false;\n    let mut prime_found6 = false;\n    let\
    \ mut digit_found6 = false;\n    let mut prime_found7 = false;\n    let mut digit_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut digit_found8 = false;\n\
    \    let mut prime_found9 = false;\n    let mut digit_found9 = false;\n    let\
    \ mut prime_found10 = false;\n    let mut digit_found10 = false;\n    let mut\
    \ prime_found11 = false;\n    let mut digit_found11 = false;\n    let mut prime_found12\
    \ = false;\n    let mut digit_found12 = false;\n    let mut prime_found13 = false;\n\
    \    let mut digit_found13 = false;\n    let mut prime_found14 = false;\n    let\
    \ mut digit_found14 = false;\n    let mut prime_found15 = false;\n    let mut\
    \ digit_found15 = false;\n    let mut prime_found16 = false;\n    let mut digit_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut digit_found17 = false;\n\
    \    let mut prime_found18 = false;\n    let mut digit_found18 = false;\n    let\
    \ mut prime_found19 = false;\n    let mut digit_found19 = false;\n    let mut\
    \ prime_found20 = false;\n    let mut digit_found20 = false;\n    let mut prime_found21\
    \ = false;\n    let mut digit_found21 = false;\n    let mut prime_found22 = false;\n\
    \    let mut digit_found22 = false;\n    let mut prime_found23 = false;\n    let\
    \ mut digit_found23 = false;\n    let mut prime_found24 = false;\n    let mut\
    \ digit_found24 = false;\n    let mut prime_found25 = false;\n    let mut digit_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut digit_found26 = false;\n\
    \    let mut prime_found27 = false;\n    let mut digit_found27 = false;\n    let\
    \ mut prime_found28 = false;\n    let mut digit_found28 = false;\n    let mut\
    \ prime_found", "    let mut num: isize = 0;\n    let mut num_digits = num.len();\n\
    \    let mut num_primes = 0;\n    let mut num_primes_digits = 0;\n    let mut\
    \ num_primes_digits_primes = 0;\n    let mut num_primes_digits_primes_primes =\
    \ 0;\n    let mut num_primes_digits_primes_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes = 0;\n\
    \    let mut num_primes_digits_primes_primes_primes_primes_primes_primes = 0;\n\
    \    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime",
  "    let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut primes: Vec<isize> = vec![];\n    let mut prime: isize = 0;\n   \
    \ let mut prime_found = false;\n    let mut prime_found2 = false;\n    let mut\
    \ prime_found3 = false;\n    let mut prime_found4 = false;\n    let mut prime_found5\
    \ = false;\n    let mut prime_found6 = false;\n    let mut prime_found7 = false;\n\
    \    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n    let\
    \ mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let mut\
    \ prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut prime_found14\
    \ = false;\n    let mut prime_found15 = false;\n    let mut prime_found16 = false;\n\
    \    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n    let\
    \ mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let mut\
    \ prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut prime_found23\
    \ = false;\n    let mut prime_found24 = false;\n    let mut prime_found25 = false;\n\
    \    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n    let\
    \ mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let mut\
    \ prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut prime_found32\
    \ = false;\n    let mut prime_found33 = false;\n    let mut prime_found34 = false;\n\
    \    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n    let\
    \ mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let mut\
    \ prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut prime_found41\
    \ = false;\n    let mut prime_found42 = false;\n    let mut prime_found43 = false;\n\
    \    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n    let\
    \ mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let mut\
    \ prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut prime_found50\
    \ = false;\n    let mut prime", "    let mut num: isize = 0;\n    let mut digits:\
    \ Vec<isize> = num.to_string().chars().collect();\n    let mut primes: Vec<isize>\
    \ = vec![2, 3, 5, 7];\n    let mut primes_count: isize = 0;\n    let mut primes_sum:\
    \ isize = 0;\n    let mut primes_sum2: isize = 0;\n    let mut primes_sum3: isize\
    \ = 0;\n    let mut primes_sum4: isize = 0;\n    let mut primes_sum5: isize =\
    \ 0;\n    let mut primes_sum6: isize = 0;\n    let mut primes_sum7: isize = 0;\n\
    \    let mut primes_sum8: isize = 0;\n    let mut primes_sum9: isize = 0;\n  \
    \  let mut primes_sum10: isize = 0;\n    let mut primes_sum11: isize = 0;\n  \
    \  let mut primes_sum12: isize = 0;\n    let mut primes_sum13: isize = 0;\n  \
    \  let mut primes_sum14: isize = 0;\n    let mut primes_sum15: isize = 0;\n  \
    \  let mut primes_sum16: isize = 0;\n    let mut primes_sum17: isize = 0;\n  \
    \  let mut primes_sum18: isize = 0;\n    let mut primes_sum19: isize = 0;\n  \
    \  let mut primes_sum20: isize = 0;\n    let mut primes_sum21: isize = 0;\n  \
    \  let mut primes_sum22: isize = 0;\n    let mut primes_sum23: isize = 0;\n  \
    \  let mut primes_sum24: isize = 0;\n    let mut primes_sum25: isize = 0;\n  \
    \  let mut primes_sum26: isize = 0;\n    let mut primes_sum27: isize = 0;\n  \
    \  let mut primes_sum28: isize = 0;\n    let mut primes_sum29: isize = 0;\n  \
    \  let mut primes_sum30: isize = 0;\n    let mut primes_sum31: isize = 0;\n  \
    \  let mut primes_sum32: isize = 0;\n    let mut primes_sum33: isize = 0;\n  \
    \  let mut primes_sum34: isize = 0;\n    let mut primes_sum35: isize = 0;\n  \
    \  let mut primes_sum36: isize = 0;\n    let mut primes_sum37: isize = 0;\n  \
    \  let mut primes_sum38: isize = 0;\n    let mut prime", "    let mut num: isize\
    \ = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"\
    ];\n    let mut primes_found: Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n\
    \    let mut primes_found2: Vec<&str> = vec![\"B\", \"D\"];\n    let mut primes_found3:\
    \ Vec<&str> = vec![\"B\", \"D\"];\n    let mut primes_found4: Vec<&str> = vec![\"\
    B\", \"D\"];\n    let mut primes_found5: Vec<&str> = vec![\"B\", \"D\"];\n   \
    \ let mut primes_found6: Vec<&str> = vec![\"B\", \"D\"];\n    let mut primes_found7:\
    \ Vec<&str> = vec![\"B\", \"D\"];\n    let mut primes_found8: Vec<&str> = vec![\"\
    B\", \"D\"];\n    let mut primes_found9: Vec<&str> = vec![\"B\", \"D\"];\n   \
    \ let mut primes_found10: Vec<&str> = vec![\"B\", \"D\"];\n    let mut primes_found11:\
    \ Vec<&str> = vec![\"B\", \"D\"];\n    let mut primes_found12: Vec<&str> = vec![\"\
    B\", \"D\"];\n    let mut primes_found13: Vec<&str> = vec![\"B\", \"D\"];\n  \
    \  let mut primes_found14: Vec<&str> = vec![\"B\", \"D\"];\n    let mut primes_found15:\
    \ Vec<&str> = vec![\"B\", \"D\"];\n    let mut primes_found16: Vec<&str> = vec![\"\
    B\", \"D\"];\n    let mut primes_found17: Vec<&str> = vec![\"B\", \"D\"];\n  \
    \  let mut primes_found18: Vec<&str> = vec![\"B\", \"D\"];\n    let mut primes_found19:\
    \ Vec<&str> = vec![\"B\", \"D\"];\n    let mut primes_found20: Vec<&str> = vec![\"\
    B\", \"D\"];\n    let mut primes_found21: Vec<&str> = vec![\"B\", \"D\"];", " \
    \   let mut prime_count = 0;\n    let mut prime_digits = vec![];\n    let mut\
    \ num_digits = num.len();\n    let mut digits = vec![];\n    let mut prime_digit\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let mut prime_digit_count = vec![];\n    let mut prime_digit_count\
    \ = vec![];\n    let ", "    let mut num: isize = 0;\n    let mut digits: Vec<&str>\
    \ = num.to_string().chars().collect();\n    let mut primes: Vec<&str> = vec![\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found: Vec<&str>\
    \ = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found2:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found3:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found4:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found5:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found6:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found7:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found8:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found9:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found10:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found11:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found12:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found13:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found14:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found15:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found16:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_found17:\
    \ Vec<&str> = vec", "    let mut num: isize = 0;\n    let mut digits: Vec<isize>\
    \ = num.to_string().chars().collect();\n    let mut primes: Vec<isize> = vec![2,\
    \ 3, 5, 7];\n    let mut prime: isize = 2;\n    let mut i: isize = 0;\n    while\
    \ i < digits.len() {\n        if primes.contains(&prime) {\n            primes.push(prime);\n\
    \        }\n        prime = prime + 1;\n        i += 1;\n    }\n    for digit\
    \ in digits {\n        if primes.contains(&digit) {\n            num += 1;\n \
    \       }\n    }\n    return num;", "    let mut num: isize = 0;\n    let mut\
    \ digits: Vec<&str> = num.to_string().chars().collect();\n    let mut primes:\
    \ Vec<&str> = vec![];\n    \n    for digit in digits {\n        if digit == 'A'\
    \ || digit == 'B' || digit == 'C' || digit == 'D' || digit == 'E' || digit ==\
    \ 'F' {\n            primes.push(digit);\n        }\n    }\n    \n    for prime\
    \ in primes {\n        num = num * prime + primes.iter().skip(primes.iter().position(|&x|\
    \ x == prime)).next().unwrap();\n    }\n    \n    return num;", "    let mut num:\
    \ isize = 0;\n    let mut num_str: String = num.to_string();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str", "    let mut num: isize = 0;\n    let mut digit: char;\n\
    \    let mut prime: isize = 0;\n    let mut prime_found = false;\n    let mut\
    \ prime_found2 = false;\n    let mut prime_found3 = false;\n    let mut prime_found4\
    \ = false;\n    let mut prime_found5 = false;\n    let mut prime_found6 = false;\n\
    \    let mut prime_found7 = false;\n    let mut prime_found8 = false;\n    let\
    \ mut prime_found9 = false;\n    let mut prime_found10 = false;\n    let mut prime_found11\
    \ = false;\n    let mut prime_found12 = false;\n    let mut prime_found13 = false;\n\
    \    let mut prime_found14 = false;\n    let mut prime_found15 = false;\n    let\
    \ mut prime_found16 = false;\n    let mut prime_found17 = false;\n    let mut\
    \ prime_found18 = false;\n    let mut prime_found19 = false;\n    let mut prime_found20\
    \ = false;\n    let mut prime_found21 = false;\n    let mut prime_found22 = false;\n\
    \    let mut prime_found23 = false;\n    let mut prime_found24 = false;\n    let\
    \ mut prime_found25 = false;\n    let mut prime_found26 = false;\n    let mut\
    \ prime_found27 = false;\n    let mut prime_found28 = false;\n    let mut prime_found29\
    \ = false;\n    let mut prime_found30 = false;\n    let mut prime_found31 = false;\n\
    \    let mut prime_found32 = false;\n    let mut prime_found33 = false;\n    let\
    \ mut prime_found34 = false;\n    let mut prime_found35 = false;\n    let mut\
    \ prime_found36 = false;\n    let mut prime_found37 = false;\n    let mut prime_found38\
    \ = false;\n    let mut prime_found39 = false;\n    let mut prime_found40 = false;\n\
    \    let mut prime_found41 = false;\n    let mut prime_found42 = false;\n    let\
    \ mut prime_found43 = false;\n    let mut prime_found44 = false;\n    let mut\
    \ prime_found45 = false;\n    let mut prime_found46 = false;\n    let mut prime_found47\
    \ = false;\n    let mut prime_found48 = false;\n    let mut prime_found49 = false;\n\
    \    let mut prime_found50 = false;\n    let mut prime_found51 = false;\n    let\
    \ mut prime_found52 = false;\n    let mut prime_found53 = false;\n    let ", " \
    \   let mut prime_digits = vec![];\n    let mut num_digits = num.len();\n    let\
    \ mut prime_digits_counter = 0;\n    let mut prime_digits_counter2 = 0;\n    let\
    \ mut prime_digits_counter3 = 0;\n    let mut prime_digits_counter4 = 0;\n   \
    \ let mut prime_digits_counter5 = 0;\n    let mut prime_digits_counter6 = 0;\n\
    \    let mut prime_digits_counter7 = 0;\n    let mut prime_digits_counter8 = 0;\n\
    \    let mut prime_digits_counter9 = 0;\n    let mut prime_digits_counter10 =\
    \ 0;\n    let mut prime_digits_counter11 = 0;\n    let mut prime_digits_counter12\
    \ = 0;\n    let mut prime_digits_counter13 = 0;\n    let mut prime_digits_counter14\
    \ = 0;\n    let mut prime_digits_counter15 = 0;\n    let mut prime_digits_counter16\
    \ = 0;\n    let mut prime_digits_counter17 = 0;\n    let mut prime_digits_counter18\
    \ = 0;\n    let mut prime_digits_counter19 = 0;\n    let mut prime_digits_counter20\
    \ = 0;\n    let mut prime_digits_counter21 = 0;\n    let mut prime_digits_counter22\
    \ = 0;\n    let mut prime_digits_counter23 = 0;\n    let mut prime_digits_counter24\
    \ = 0;\n    let mut prime_digits_counter25 = 0;\n    let mut prime_digits_counter26\
    \ = 0;\n    let mut prime_digits_counter27 = 0;\n    let mut prime_digits_counter28\
    \ = 0;\n    let mut prime_digits_counter29 = 0;\n    let mut prime_digits_counter30\
    \ = 0;\n    let mut prime_digits_counter31 = 0;\n    let mut prime_digits_counter32\
    \ = 0;\n    let mut prime_digits_counter33 = 0;\n    let mut prime_digits_counter34\
    \ = 0;\n    let mut prime_digits_counter35 = 0;\n    let mut prime_digits_counter36\
    \ = 0;\n    let mut prime_digits_counter37 = 0;\n    let mut prime_digits_counter38\
    \ = 0;\n    let mut prime_digits_counter39 = 0;\n    let mut prime_digits_counter40\
    \ = 0;\n    let mut prime_digits_counter41 = 0;\n    let mut prime_digits_counter42\
    \ = 0;\n    let mut prime_digits_counter43 = 0;\n    let mut prime_digits_counter44\
    \ = 0;\n    let mut prime_digits_counter45 = 0;\n", "    let mut num: isize =\
    \ 0;\n    let mut num_digits = num.len();\n    let mut num_primes = 0;\n    let\
    \ mut num_primes_digits = 0;\n    let mut num_primes_digits_primes = 0;\n    let\
    \ mut num_primes_digits_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes = 0;\n    let\
    \ mut num_primes_digits_primes_primes_primes_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime",
  "    let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut prime: Vec<&str> = vec![];\n    let mut prime_found = false;\n  \
    \  let mut prime_found2 = false;\n    let mut prime_found3 = false;\n    let mut\
    \ prime_found4 = false;\n    let mut prime_found5 = false;\n    let mut prime_found6\
    \ = false;\n    let mut prime_found7 = false;\n    let mut prime_found8 = false;\n\
    \    let mut prime_found9 = false;\n    let mut prime_found10 = false;\n    let\
    \ mut prime_found11 = false;\n    let mut prime_found12 = false;\n    let mut\
    \ prime_found13 = false;\n    let mut prime_found14 = false;\n    let mut prime_found15\
    \ = false;\n    let mut prime_found16 = false;\n    let mut prime_found17 = false;\n\
    \    let mut prime_found18 = false;\n    let mut prime_found19 = false;\n    let\
    \ mut prime_found20 = false;\n    let mut prime_found21 = false;\n    let mut\
    \ prime_found22 = false;\n    let mut prime_found23 = false;\n    let mut prime_found24\
    \ = false;\n    let mut prime_found25 = false;\n    let mut prime_found26 = false;\n\
    \    let mut prime_found27 = false;\n    let mut prime_found28 = false;\n    let\
    \ mut prime_found29 = false;\n    let mut prime_found30 = false;\n    let mut\
    \ prime_found31 = false;\n    let mut prime_found32 = false;\n    let mut prime_found33\
    \ = false;\n    let mut prime_found34 = false;\n    let mut prime_found35 = false;\n\
    \    let mut prime_found36 = false;\n    let mut prime_found37 = false;\n    let\
    \ mut prime_found38 = false;\n    let mut prime_found39 = false;\n    let mut\
    \ prime_found40 = false;\n    let mut prime_found41 = false;\n    let mut prime_found42\
    \ = false;\n    let mut prime_found43 = false;\n    let mut prime_found44 = false;\n\
    \    let mut prime_found45 = false;\n    let mut prime_found46 = false;\n    let\
    \ mut prime_found47 = false;\n    let mut prime_found48 = false;\n    let mut\
    \ prime_found49 = false;\n    let mut prime_found50 = false;\n    let mut prime_found51\
    \ = false;\n    let mut ", "    let mut prime_count = 0;\n    let mut prime_digits\
    \ = vec![2, 3, 5, 7, 11, 13, 17, 19];\n    let mut prime_digits_count = prime_digits.len();\n\
    \    let mut prime_digits_count_2 = prime_digits_count / 2;\n    let mut prime_digits_count_3\
    \ = prime_digits_count / 3;\n    let mut prime_digits_count_4 = prime_digits_count\
    \ / 4;\n    let mut prime_digits_count_5 = prime_digits_count / 5;\n    let mut\
    \ prime_digits_count_6 = prime_digits_count / 6;\n    let mut prime_digits_count_7\
    \ = prime_digits_count / 7;\n    let mut prime_digits_count_8 = prime_digits_count\
    \ / 8;\n    let mut prime_digits_count_9 = prime_digits_count / 9;\n    let mut\
    \ prime_digits_count_10 = prime_digits_count / 10;\n    let mut prime_digits_count_11\
    \ = prime_digits_count / 11;\n    let mut prime_digits_count_12 = prime_digits_count\
    \ / 12;\n    let mut prime_digits_count_13 = prime_digits_count / 13;\n    let\
    \ mut prime_digits_count_14 = prime_digits_count / 14;\n    let mut prime_digits_count_15\
    \ = prime_digits_count / 15;\n    let mut prime_digits_count_16 = prime_digits_count\
    \ / 16;\n    let mut prime_digits_count_17 = prime_digits_count / 17;\n    let\
    \ mut prime_digits_count_18 = prime_digits_count / 18;\n    let mut prime_digits_count_19\
    \ = prime_digits_count / 19;\n    let mut prime_digits_count_20 = prime_digits_count\
    \ / 20;\n    let mut prime_digits_count_21 = prime_digits_count / 21;\n    let\
    \ mut prime_digits_count_22 = prime_digits_count / 22;\n    let mut prime_digits_count_23\
    \ = prime_digits_count / 23;\n    let mut prime_digits_count_24 = prime_digits_count\
    \ / 24;\n    let mut prime_digits_count_25 = prime_digits_count / 25;\n    let\
    \ mut prime_digits_count_26 = prime_digits_count / 26;\n    let mut prime_digits_count_27\
    \ = prime_digits_count / 27;\n    let mut prime_digit", "    let mut num_digits\
    \ = num.len();\n    let mut num_primes = 0;\n    let mut num_primes_found = 0;\n\
    \    let mut num_primes_found2 = 0;\n    let mut num_primes_found3 = 0;\n    let\
    \ mut num_primes_found4 = 0;\n    let mut num_primes_found5 = 0;\n    let mut\
    \ num_primes_found6 = 0;\n    let mut num_primes_found7 = 0;\n    let mut num_primes_found8\
    \ = 0;\n    let mut num_primes_found9 = 0;\n    let mut num_primes_found10 = 0;\n\
    \    let mut num_primes_found11 = 0;\n    let mut num_primes_found12 = 0;\n  \
    \  let mut num_primes_found13 = 0;\n    let mut num_primes_found14 = 0;\n    let\
    \ mut num_primes_found15 = 0;\n    let mut num_primes_found16 = 0;\n    let mut\
    \ num_primes_found17 = 0;\n    let mut num_primes_found18 = 0;\n    let mut num_primes_found19\
    \ = 0;\n    let mut num_primes_found20 = 0;\n    let mut num_primes_found21 =\
    \ 0;\n    let mut num_primes_found22 = 0;\n    let mut num_primes_found23 = 0;\n\
    \    let mut num_primes_found24 = 0;\n    let mut num_primes_found25 = 0;\n  \
    \  let mut num_primes_found26 = 0;\n    let mut num_primes_found27 = 0;\n    let\
    \ mut num_primes_found28 = 0;\n    let mut num_primes_found29 = 0;\n    let mut\
    \ num_primes_found30 = 0;\n    let mut num_primes_found31 = 0;\n    let mut num_primes_found32\
    \ = 0;\n    let mut num_primes_found33 = 0;\n    let mut num_primes_found34 =\
    \ 0;\n    let mut num_primes_found35 = 0;\n    let mut num_primes_found36 = 0;\n\
    \    let mut num_primes_found37 = 0;\n    let mut num_primes_found38 = 0;\n  \
    \  let mut num_primes_found39 = 0;\n    let mut num_primes_found40 = 0;\n    let\
    \ mut num_primes_found41 = 0;\n    let mut num_primes_found42 = 0;\n    let mut\
    \ num_primes_found43 = 0;\n    let mut num_primes_found44 = 0;\n    let mut num_primes_found45\
    \ = 0;\n    let mut num_primes_found46 = 0;\n    let mut num_primes_found47 =\
    \ 0;\n    let mut num_primes_found48 = 0;\n    let mut num_primes_found49 = 0;\n\
    \    let mut num_primes_found50 = 0;", "    let mut num: Vec<u8> = num.to_lowercase().chars().collect();\n\
    \    let mut prime_count: isize = 0;\n    let mut prime: isize = 2;\n    let mut\
    \ digit: u8 = 0;\n    while num.len() > 0 {\n        digit = num.chars().nth(1).unwrap();\n\
    \        if digit == 'a' || digit == 'b' || digit == 'c' || digit == 'd' || digit\
    \ == 'e' || digit == 'f' {\n            prime_count += 1;\n        }\n       \
    \ prime = prime * digit as isize;\n        num = num.chars().skip(1).collect();\n\
    \    }\n    prime_count", "    let mut num: isize = 0;\n    let mut digits: Vec<&str>\
    \ = num.to_string().chars().collect();\n    let mut prime_digits: Vec<&str> =\
    \ vec![];\n    let mut prime_digits_count: usize = 0;\n    let mut prime_digits_sum:\
    \ usize = 0;\n    let mut prime_digits_sum2: usize = 0;\n    let mut prime_digits_sum3:\
    \ usize = 0;\n    let mut prime_digits_sum4: usize = 0;\n    let mut prime_digits_sum5:\
    \ usize = 0;\n    let mut prime_digits_sum6: usize = 0;\n    let mut prime_digits_sum7:\
    \ usize = 0;\n    let mut prime_digits_sum8: usize = 0;\n    let mut prime_digits_sum9:\
    \ usize = 0;\n    let mut prime_digits_sum10: usize = 0;\n    let mut prime_digits_sum11:\
    \ usize = 0;\n    let mut prime_digits_sum12: usize = 0;\n    let mut prime_digits_sum13:\
    \ usize = 0;\n    let mut prime_digits_sum14: usize = 0;\n    let mut prime_digits_sum15:\
    \ usize = 0;\n    let mut prime_digits_sum16: usize = 0;\n    let mut prime_digits_sum17:\
    \ usize = 0;\n    let mut prime_digits_sum18: usize = 0;\n    let mut prime_digits_sum19:\
    \ usize = 0;\n    let mut prime_digits_sum20: usize = 0;\n    let mut prime_digits_sum21:\
    \ usize = 0;\n    let mut prime_digits_sum22: usize = 0;\n    let mut prime_digits_sum23:\
    \ usize = 0;\n    let mut prime_digits_sum24: usize = 0;\n    let mut prime_digits_sum25:\
    \ usize = 0;\n    let mut prime_digits_sum26: usize = 0;\n    let mut prime_digits_sum27:\
    \ usize = 0;\n    let mut prime_digits_sum28: usize = 0;\n    let mut prime_digits_sum29:\
    \ usize = 0;\n    let mut prime_digits_sum30: usize = 0;\n    let mut prime_digits_sum31:\
    \ usize = 0;\n    let mut prime_digits_sum32: usize = 0;\n    let mut prime_digits_sum33:\
    \ u", "    let mut num: isize = 0;\n    let mut digits: Vec<isize> = num.to_string().chars().collect();\n\
    \    let mut primes: Vec<isize> = vec![2, 3, 5, 7, 11, 13, 17, 19];\n    let mut\
    \ primes_found: Vec<isize> = vec![];\n    \n    for digit in digits {\n      \
    \  if primes.contains(&digit) {\n            primes_found.push(digit);\n     \
    \   }\n    }\n    \n    for prime in primes_found {\n        if num % prime ==\
    \ 0 {\n            num = num / prime;\n        }\n    }\n    \n    return num;",
  "    let mut num: isize = 0;\n    let mut digit: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n", "    let mut num: isize = 0;\n\
    \    let mut digits: Vec<isize> = num.to_string().chars().collect();\n    let\
    \ mut primes: Vec<isize> = vec![2, 3, 5, 7, 11, 13, 17, 19];\n    let mut primes_count:\
    \ isize = 0;\n    let mut primes_sum: isize = 0;\n    let mut primes_index: isize\
    \ = 0;\n    let mut primes_sum_index: isize = 0;\n    let mut primes_sum_index2:\
    \ isize = 0;\n    let mut primes_sum_index3: isize = 0;\n    let mut primes_sum_index4:\
    \ isize = 0;\n    let mut primes_sum_index5: isize = 0;\n    let mut primes_sum_index6:\
    \ isize = 0;\n    let mut primes_sum_index7: isize = 0;\n    let mut primes_sum_index8:\
    \ isize = 0;\n    let mut primes_sum_index9: isize = 0;\n    let mut primes_sum_index10:\
    \ isize = 0;\n    let mut primes_sum_index11: isize = 0;\n    let mut primes_sum_index12:\
    \ isize = 0;\n    let mut primes_sum_index13: isize = 0;\n    let mut primes_sum_index14:\
    \ isize = 0;\n    let mut primes_sum_index15: isize = 0;\n    let mut primes_sum_index16:\
    \ isize = 0;\n    let mut primes_sum_index17: isize = 0;\n    let mut primes_sum_index18:\
    \ isize = 0;\n    let mut primes_sum_index19: isize = 0;\n    let mut primes_sum_index20:\
    \ isize = 0;\n    let mut primes_sum_index21: isize = 0;\n    let mut primes_sum_index22:\
    \ isize = 0;\n    let mut primes_sum_index23: isize = 0;\n    let mut primes_sum_index24:\
    \ isize = 0;\n    let mut primes_sum_index25: isize = 0;\n    let mut primes_sum_index26:\
    \ isize = 0;\n    let mut primes_sum_index27: isize = 0;\n    let mut primes_sum_index28:\
    \ isize = 0;\n    let mut primes_sum_index29: isize = 0;\n    let mut primes_sum_index30:\
    \ isize = 0;\n    let mut primes_sum_index31: isize = 0;\n    let mut primes_sum_index32:\
    \ isize = 0;\n    let mut primes_sum_index33: isize = 0;\n    let mut primes_sum",
  "    let mut prime_count = 0;\n    let mut digits = num.chars().collect::<Vec<_>>();\n\
    \    let mut prime_digits = vec![];\n    let mut prime_digit = vec![];\n    let\
    \ mut prime_digit_count = 0;\n    let mut prime_digit_index = 0;\n    let mut\
    \ prime_digit_value = 1;\n    let mut prime_digit_index2 = 0;\n    let mut prime_digit_value2\
    \ = 1;\n    let mut prime_digit_index3 = 0;\n    let mut prime_digit_value3 =\
    \ 1;\n    let mut prime_digit_index4 = 0;\n    let mut prime_digit_value4 = 1;\n\
    \    let mut prime_digit_index5 = 0;\n    let mut prime_digit_value5 = 1;\n  \
    \  let mut prime_digit_index6 = 0;\n    let mut prime_digit_value6 = 1;\n    let\
    \ mut prime_digit_index7 = 0;\n    let mut prime_digit_value7 = 1;\n    let mut\
    \ prime_digit_index8 = 0;\n    let mut prime_digit_value8 = 1;\n    let mut prime_digit_index9\
    \ = 0;\n    let mut prime_digit_value9 = 1;\n    let mut prime_digit_index10 =\
    \ 0;\n    let mut prime_digit_value10 = 1;\n    let mut prime_digit_index11 =\
    \ 0;\n    let mut prime_digit_value11 = 1;\n    let mut prime_digit_index12 =\
    \ 0;\n    let mut prime_digit_value12 = 1;\n    let mut prime_digit_index13 =\
    \ 0;\n    let mut prime_digit_value13 = 1;\n    let mut prime_digit_index14 =\
    \ 0;\n    let mut prime_digit_value14 = 1;\n    let mut prime_digit_index15 =\
    \ 0;\n    let mut prime_digit_value15 = 1;\n    let mut prime_digit_index16 =\
    \ 0;\n    let mut prime_digit_value16 = 1;\n    let mut prime_digit_index17 =\
    \ 0;\n    let mut prime_digit_value17 = 1;\n    let mut prime_digit_index18 =\
    \ 0;\n    let mut prime_digit_value18 = 1;\n    let mut prime_digit_index19 =\
    \ 0;\n    let mut prime_digit_value19 = 1;\n    let mut prime_digit_index20 =\
    \ 0;\n    let mut prime_digit_value20 = 1;\n    let mut prime_digit_index21 =\
    \ 0;\n    let mut prime_digit_value21 = 1;\n    let mut prime_digit_index22 =\
    \ 0;\n    let mut prime_digit_value22 = 1;\n    let mut prime_digit_index23 =\
    \ 0;\n    let mut prime_digit_value23 = 1;\n    let mut prime_", "    let mut\
    \ num_digits = num.len();\n    let mut prime_count = 0;\n    let mut prime_digits\
    \ = vec![0; 8];\n    let mut prime_digits_index = 0;\n    let mut prime_digits_index2\
    \ = 0;\n    let mut prime_digits_index3 = 0;\n    let mut prime_digits_index4\
    \ = 0;\n    let mut prime_digits_index5 = 0;\n    let mut prime_digits_index6\
    \ = 0;\n    let mut prime_digits_index7 = 0;\n    let mut prime_digits_index8\
    \ = 0;\n    let mut prime_digits_index9 = 0;\n    let mut prime_digits_index10\
    \ = 0;\n    let mut prime_digits_index11 = 0;\n    let mut prime_digits_index12\
    \ = 0;\n    let mut prime_digits_index13 = 0;\n    let mut prime_digits_index14\
    \ = 0;\n    let mut prime_digits_index15 = 0;\n    let mut prime_digits_index16\
    \ = 0;\n    let mut prime_digits_index17 = 0;\n    let mut prime_digits_index18\
    \ = 0;\n    let mut prime_digits_index19 = 0;\n    let mut prime_digits_index20\
    \ = 0;\n    let mut prime_digits_index21 = 0;\n    let mut prime_digits_index22\
    \ = 0;\n    let mut prime_digits_index23 = 0;\n    let mut prime_digits_index24\
    \ = 0;\n    let mut prime_digits_index25 = 0;\n    let mut prime_digits_index26\
    \ = 0;\n    let mut prime_digits_index27 = 0;\n    let mut prime_digits_index28\
    \ = 0;\n    let mut prime_digits_index29 = 0;\n    let mut prime_digits_index30\
    \ = 0;\n    let mut prime_digits_index31 = 0;\n    let mut prime_digits_index32\
    \ = 0;\n    let mut prime_digits_index33 = 0;\n    let mut prime_digits_index34\
    \ = 0;\n    let mut prime_digits_index35 = 0;\n    let mut prime_digits_index36\
    \ = 0;\n    let mut prime_digits_index37 = 0;\n    let mut prime_digits_index38\
    \ = 0;\n    let mut prime_digits_index39 = 0;\n    let mut prime_digits_index40\
    \ = 0;\n    let mut prime_digits_index41 = 0;\n    let mut prime_digits_index42\
    \ = 0;\n    let mut prime_digits_index43 = 0;\n    let mut prime_digits_index44\
    \ = 0;\n    let mu", "    let mut num: isize = 0;\n    let mut digits: Vec<&str>\
    \ = num.to_string().chars().collect();\n    let mut prime: Vec<&str> = vec![\"\
    2\", \"3\", \"5\", \"7\"];\n    let mut prime_digits: Vec<&str> = vec![\"2\",\
    \ \"3\", \"5\", \"7\"];\n    let mut prime_digit_count: usize = 0;\n    let mut\
    \ prime_digit_count: usize = 0;\n    let mut prime_digit_count: usize = 0;\n \
    \   let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count: usize\
    \ = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;", "    let mut num: isize\
    \ = 0;\n    let mut digit: isize = 0;\n    let mut prime: isize = 0;\n    let\
    \ mut prime_found = false;\n    let mut prime_found2 = false;\n    let mut prime_found3\
    \ = false;\n    let mut prime_found4 = false;\n    let mut prime_found5 = false;\n\
    \    let mut prime_found6 = false;\n    let mut prime_found7 = false;\n    let\
    \ mut prime_found8 = false;\n    let mut prime_found9 = false;\n    let mut prime_found10\
    \ = false;\n    let mut prime_found11 = false;\n    let mut prime_found12 = false;\n\
    \    let mut prime_found13 = false;\n    let mut prime_found14 = false;\n    let\
    \ mut prime_found15 = false;\n    let mut prime_found16 = false;\n    let mut\
    \ prime_found17 = false;\n    let mut prime_found18 = false;\n    let mut prime_found19\
    \ = false;\n    let mut prime_found20 = false;\n    let mut prime_found21 = false;\n\
    \    let mut prime_found22 = false;\n    let mut prime_found23 = false;\n    let\
    \ mut prime_found24 = false;\n    let mut prime_found25 = false;\n    let mut\
    \ prime_found26 = false;\n    let mut prime_found27 = false;\n    let mut prime_found28\
    \ = false;\n    let mut prime_found29 = false;\n    let mut prime_found30 = false;\n\
    \    let mut prime_found31 = false;\n    let mut prime_found32 = false;\n    let\
    \ mut prime_found33 = false;\n    let mut prime_found34 = false;\n    let mut\
    \ prime_found35 = false;\n    let mut prime_found36 = false;\n    let mut prime_found37\
    \ = false;\n    let mut prime_found38 = false;\n    let mut prime_found39 = false;\n\
    \    let mut prime_found40 = false;\n    let mut prime_found41 = false;\n    let\
    \ mut prime_found42 = false;\n    let mut prime_found43 = false;\n    let mut\
    \ prime_found44 = false;\n    let mut prime_found45 = false;\n    let mut prime_found46\
    \ = false;\n    let mut prime_found47 = false;\n    let mut prime_found48 = false;\n\
    \    let mut prime_found49 = false;\n    let mut prime_found50 = false;\n    let\
    \ mut prime_found51 = false;\n    let mut prime_found52 = false;\n    let mut\
    \ prime_found53 = false;\n", "    let mut num: isize = 0;\n    let mut digits:\
    \ Vec<&str> = num.to_lowercase().chars().collect();\n    let mut prime: Vec<&str>\
    \ = vec![];\n    let mut prime_digit: Vec<&str> = vec![];\n    let mut prime_digit_count:\
    \ Vec<&str> = vec![];\n    let mut prime_digit_count_2: Vec<&str> = vec![];\n\
    \    let mut prime_digit_count_3: Vec<&str> = vec![];\n    let mut prime_digit_count_4:\
    \ Vec<&str> = vec![];\n    let mut prime_digit_count_5: Vec<&str> = vec![];\n\
    \    let mut prime_digit_count_6: Vec<&str> = vec![];\n    let mut prime_digit_count_7:\
    \ Vec<&str> = vec![];\n    let mut prime_digit_count_8: Vec<&str> = vec![];\n\
    \    let mut prime_digit_count_9: Vec<&str> = vec![];\n    let mut prime_digit_count_10:\
    \ Vec<&str> = vec![];\n    let mut prime_digit_count_11: Vec<&str> = vec![];\n\
    \    let mut prime_digit_count_12: Vec<&str> = vec![];\n    let mut prime_digit_count_13:\
    \ Vec<&str> = vec![];\n    let mut prime_digit_count_14: Vec<&str> = vec![];\n\
    \    let mut prime_digit_count_15: Vec<&str> = vec![];\n    let mut prime_digit_count_16:\
    \ Vec<&str> = vec![];\n    let mut prime_digit_count_17: Vec<&str> = vec![];\n\
    \    let mut prime_digit_count_18: Vec<&str> = vec![];\n    let mut prime_digit_count_19:\
    \ Vec<&str> = vec![];\n    let mut prime_digit_count_20: Vec<&str> = vec![];\n\
    \    let mut prime_digit_count_21: Vec<&str> = vec![];\n    let mut prime_digit_count_22:\
    \ Vec<&str> = vec![];\n    let mut prime_digit_count_23: Vec<&str> = vec![];\n\
    \    let mut prime_digit_count_24: Vec<&str> = vec![];\n    let ", "    let mut\
    \ num: isize = 0;\n    let mut num_digits = num.len();\n    let mut num_primes\
    \ = 0;\n    let mut num_primes_digits = 0;\n    let mut num_primes_digits_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime = 0;\n    let mut num_primes_digits_not_prime_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime_not_prime = 0;\n    let mut num_primes_digits_not_prime_not_prime_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime_not_prime_not_prime = 0;\n   \
    \ let mut num_primes_digits_not_prime_not_prime_not_prime_prime = 0;\n    let\
    \ mut num_primes_digits_not_prime_not_prime_not_prime_not_prime = 0;\n    let\
    \ mut num_primes_digits_not_prime_not_prime_not_prime_not_prime_prime = 0;\n \
    \   let mut num_primes_digits_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime_not_prime_not_prime_not_prime_not_prime_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0;\n    let mut num_primes_digits_not_prime_not_prime_not_prime_not_", " \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut prime: Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"\
    ];\n    let mut prime_digits: Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"\
    B\", \"D\"];\n    let mut prime_digits_count: usize = 0;\n    let mut prime_digits_count_max:\
    \ usize = 2;\n    let mut prime_digits_count_min: usize = 2;\n    let mut prime_digits_count_step:\
    \ usize = 2;\n    let mut prime_digits_count_max2: usize = 2;\n    let mut prime_digits_count_min2:\
    \ usize = 2;\n    let mut prime_digits_count_step2: usize = 2;\n    let mut prime_digits_count_max3:\
    \ usize = 2;\n    let mut prime_digits_count_min3: usize = 2;\n    let mut prime_digits_count_step3:\
    \ usize = 2;\n    let mut prime_digits_count_max4: usize = 2;\n    let mut prime_digits_count_min4:\
    \ usize = 2;\n    let mut prime_digits_count_step4: usize = 2;\n    let mut prime_digits_count_max5:\
    \ usize = 2;\n    let mut prime_digits_count_min5: usize = 2;\n    let mut prime_digits_count_step5:\
    \ usize = 2;\n    let mut prime_digits_count_max6: usize = 2;\n    let mut prime_digits_count_min6:\
    \ usize = 2;\n    let mut prime_digits_count_step6: usize = 2;\n    let mut prime_digits_count_max7:\
    \ usize = 2;\n    let mut prime_digits_count_min7: usize = 2;\n    let mut prime_digits_count_step7:\
    \ usize = 2;\n    let mut prime_digits_count_max8: usize = 2;\n    let mut prime_digits_count_min8:\
    \ usize = 2;\n    let mut prime_digits_count_step8: usize = 2;\n    let mut prime_digits_count_max9:\
    \ usize = 2;\n    let mut prime_digits_count_min9: usize = 2;\n    let mut prime_digits_count_step9:\
    \ usize = 2;\n    let mut prime_digits_count_max10: usize = 2;\n    let mut prime_digits_count_min10:\
    \ usize = 2;", "    let mut prime_count = 0;\n    let mut prime_digits = vec![2,\
    \ 3];\n    let mut prime_digit_counts = vec![2, 3];\n    let mut digits = num.chars().collect::<Vec<_>>();\n\
    \    let mut digit_counts = vec![2, 3];\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_counts_iter = digit_counts.iter();\n    let mut digit_counts_iter\
    \ = digit_counts.iter();\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_counts_iter = digit_counts.iter();\n    let mut digit_counts_iter\
    \ = digit_counts.iter();\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_counts_iter = digit_counts.iter();\n    let mut digit_counts_iter\
    \ = digit_counts.iter();\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_counts_iter = digit_counts.iter();\n    let mut digit_counts_iter\
    \ = digit_counts.iter();\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_counts_iter = digit_counts.iter();\n    let mut digit_counts_iter\
    \ = digit_counts.iter();\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_counts_iter = digit_counts.iter();\n    let mut digit_counts_iter\
    \ = digit_counts.iter();\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_counts_iter = digit_counts.iter();\n    let mut digit_counts_iter\
    \ = digit_counts.iter();\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_counts_iter = digit_counts.iter();\n    let mut digit_counts_iter\
    \ = digit_counts.iter();\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_counts_iter = digit_counts.iter();\n    let mut digit_counts_iter\
    \ = digit_counts.iter();\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_counts_iter = digit_counts.iter();\n    let mut digit_counts_iter\
    \ = digit_counts.iter();\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_counts_iter = digit_counts.iter();\n    let mut digit_counts_iter\
    \ = digit_counts.iter();\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_counts_iter = digit_counts.iter();\n    let mut digit_counts_iter\
    \ = digit_counts.iter();\n    let mut digit_counts_iter = digit_counts.iter();\n\
    \    let mut digit_count", "    let mut num: isize = 0;\n    let mut digits: Vec<&str>\
    \ = num.to_string().chars().collect();\n    let mut prime: Vec<&str> = vec![];\n\
    \    let mut prime_digits: Vec<&str> = vec![];\n    let mut prime_digits_len:\
    \ usize = 0;\n    let mut prime_digits_len2: usize = 0;\n    let mut prime_digits_len3:\
    \ usize = 0;\n    let mut prime_digits_len4: usize = 0;\n    let mut prime_digits_len5:\
    \ usize = 0;\n    let mut prime_digits_len6: usize = 0;\n    let mut prime_digits_len7:\
    \ usize = 0;\n    let mut prime_digits_len8: usize = 0;\n    let mut prime_digits_len9:\
    \ usize = 0;\n    let mut prime_digits_len10: usize = 0;\n    let mut prime_digits_len11:\
    \ usize = 0;\n    let mut prime_digits_len12: usize = 0;\n    let mut prime_digits_len13:\
    \ usize = 0;\n    let mut prime_digits_len14: usize = 0;\n    let mut prime_digits_len15:\
    \ usize = 0;\n    let mut prime_digits_len16: usize = 0;\n    let mut prime_digits_len17:\
    \ usize = 0;\n    let mut prime_digits_len18: usize = 0;\n    let mut prime_digits_len19:\
    \ usize = 0;\n    let mut prime_digits_len20: usize = 0;\n    let mut prime_digits_len21:\
    \ usize = 0;\n    let mut prime_digits_len22: usize = 0;\n    let mut prime_digits_len23:\
    \ usize = 0;\n    let mut prime_digits_len24: usize = 0;\n    let mut prime_digits_len25:\
    \ usize = 0;\n    let mut prime_digits_len26: usize = 0;\n    let mut prime_digits_len27:\
    \ usize = 0;\n    let mut prime_digits_len28: usize = 0;\n    let mut prime_digits_len29:\
    \ usize = 0;\n    let mut prime_digits_len30: usize = 0;\n    let mut prime_digits_len31:\
    \ usize = 0;\n    let mut prime_digits_len32: usize = 0;\n    let mut prime_digits_len",
  "    let mut num_digits = num.len();\n    let mut prime_count = 0;\n    let mut\
    \ prime_digits = vec![];\n    let mut prime_digits_len = prime_digits.len();\n\
    \    let mut prime_digits_len = prime_digits_len as usize;\n    let mut prime_digits_len\
    \ = prime_digits_len as usize;\n    let mut prime_digits_len = prime_digits_len\
    \ as usize;\n    let mut prime_digits_len = prime_digits_len as usize;\n    let\
    \ mut prime_digits_len = prime_digits_len as usize;\n    let mut prime_digits_len\
    \ = prime_digits_len as usize;\n    let mut prime_digits_len = prime_digits_len\
    \ as usize;\n    let mut prime_digits_len = prime_digits_len as usize;\n    let\
    \ mut prime_digits_len = prime_digits_len as usize;\n    let mut prime_digits_len\
    \ = prime_digits_len as usize;\n    let mut prime_digits_len = prime_digits_len\
    \ as usize;\n    let mut prime_digits_len = prime_digits_len as usize;\n    let\
    \ mut prime_digits_len = prime_digits_len as usize;\n    let mut prime_digits_len\
    \ = prime_digits_len as usize;\n    let mut prime_digits_len = prime_digits_len\
    \ as usize;\n    let mut prime_digits_len = prime_digits_len as usize;\n    let\
    \ mut prime_digits_len = prime_digits_len as usize;\n    let mut prime_digits_len\
    \ = prime_digits_len as usize;\n    let mut prime_digits_len = prime_digits_len\
    \ as usize;\n    let mut prime_digits_len = prime_digits_len as usize;\n    let\
    \ mut prime_digits_len = prime_digits_len as usize;\n    let mut prime_digits_len\
    \ = prime_digits_len as usize;\n    let mut prime_digits_len = prime_digits_len\
    \ as usize;\n    let mut prime_digits_len = prime_digits_len as usize;\n    let\
    \ mut prime_digits_len = prime_digits_len as usize;\n    let mut prime_digits_len\
    \ = prime_digits_len as usize;\n    let mut prime_digits_len = prime_digits_len\
    \ as usize;\n    let mut prime_digits_len = prime_", "    let mut num: isize =\
    \ 0;\n    let mut num_digits = num.len();\n    let mut num_primes = 0;\n    let\
    \ mut num_primes_digits = 0;\n    let mut num_primes_digits_primes = 0;\n    let\
    \ mut num_primes_digits_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes = 0;\n    let\
    \ mut num_primes_digits_primes_primes_primes_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime",
  "    let mut num: isize = 0;\n    let mut num_str: String = num.to_string();\n \
    \   let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str", "    let mut num_digits =\
    \ num.len();\n    let mut prime_digits = vec![];\n    let mut prime_digits_counter\
    \ = 0;\n    let mut prime_digits_counter2 = 0;\n    let mut prime_digits_counter3\
    \ = 0;\n    let mut prime_digits_counter4 = 0;\n    let mut prime_digits_counter5\
    \ = 0;\n    let mut prime_digits_counter6 = 0;\n    let mut prime_digits_counter7\
    \ = 0;\n    let mut prime_digits_counter8 = 0;\n    let mut prime_digits_counter9\
    \ = 0;\n    let mut prime_digits_counter10 = 0;\n    let mut prime_digits_counter11\
    \ = 0;\n    let mut prime_digits_counter12 = 0;\n    let mut prime_digits_counter13\
    \ = 0;\n    let mut prime_digits_counter14 = 0;\n    let mut prime_digits_counter15\
    \ = 0;\n    let mut prime_digits_counter16 = 0;\n    let mut prime_digits_counter17\
    \ = 0;\n    let mut prime_digits_counter18 = 0;\n    let mut prime_digits_counter19\
    \ = 0;\n    let mut prime_digits_counter20 = 0;\n    let mut prime_digits_counter21\
    \ = 0;\n    let mut prime_digits_counter22 = 0;\n    let mut prime_digits_counter23\
    \ = 0;\n    let mut prime_digits_counter24 = 0;\n    let mut prime_digits_counter25\
    \ = 0;\n    let mut prime_digits_counter26 = 0;\n    let mut prime_digits_counter27\
    \ = 0;\n    let mut prime_digits_counter28 = 0;\n    let mut prime_digits_counter29\
    \ = 0;\n    let mut prime_digits_counter30 = 0;\n    let mut prime_digits_counter31\
    \ = 0;\n    let mut prime_digits_counter32 = 0;\n    let mut prime_digits_counter33\
    \ = 0;\n    let mut prime_digits_counter34 = 0;\n    let mut prime_digits_counter35\
    \ = 0;\n    let mut prime_digits_counter36 = 0;\n    let mut prime_digits_counter37\
    \ = 0;\n    let mut prime_digits_counter38 = 0;\n    let mut prime_digits_counter39\
    \ = 0;\n    let mut prime_digits_counter40 = 0;\n    let mut prime_digits_counter41\
    \ = 0;\n    let mut prime_digits_counter42 = 0;\n    let mut prime_digits_counter43\
    \ = 0;\n    let mut prime_digits_counter44 = 0;\n    let mut prime_digits_counter45\
    \ = 0;\n", "    let mut num: isize = num.to_digits().unwrap();\n    let mut prime_count:\
    \ isize = 0;\n    let mut prime_digit: isize = 2;\n    let mut prime_flag: isize\
    \ = 0;\n    let mut prime_flag2: isize = 0;\n    let mut prime_flag3: isize =\
    \ 0;\n    let mut prime_flag4: isize = 0;\n    let mut prime_flag5: isize = 0;\n\
    \    let mut prime_flag6: isize = 0;\n    let mut prime_flag7: isize = 0;\n  \
    \  let mut prime_flag8: isize = 0;\n    let mut prime_flag9: isize = 0;\n    let\
    \ mut prime_flag10: isize = 0;\n    let mut prime_flag11: isize = 0;\n    let\
    \ mut prime_flag12: isize = 0;\n    let mut prime_flag13: isize = 0;\n    let\
    \ mut prime_flag14: isize = 0;\n    let mut prime_flag15: isize = 0;\n    let\
    \ mut prime_flag16: isize = 0;\n    let mut prime_flag17: isize = 0;\n    let\
    \ mut prime_flag18: isize = 0;\n    let mut prime_flag19: isize = 0;\n    let\
    \ mut prime_flag20: isize = 0;\n    let mut prime_flag21: isize = 0;\n    let\
    \ mut prime_flag22: isize = 0;\n    let mut prime_flag23: isize = 0;\n    let\
    \ mut prime_flag24: isize = 0;\n    let mut prime_flag25: isize = 0;\n    let\
    \ mut prime_flag26: isize = 0;\n    let mut prime_flag27: isize = 0;\n    let\
    \ mut prime_flag28: isize = 0;\n    let mut prime_flag29: isize = 0;\n    let\
    \ mut prime_flag30: isize = 0;\n    let mut prime_flag31: isize = 0;\n    let\
    \ mut prime_flag32: isize = 0;\n    let mut prime_flag33: isize = 0;\n    let\
    \ mut prime_flag34: isize = 0;\n    let mut prime_flag35: isize = 0;\n    let\
    \ mut prime_flag36: isize = 0;\n    let mut prime_flag37: isize = 0;\n    let\
    \ mut prime_flag38: isize = 0;\n    let mut prime_flag39: isize = 0;\n    let\
    \ mut prime_flag40: isize = 0;\n    let mu", "    let mut num: isize = 0;\n  \
    \  let mut num_digits = num.len();\n    let mut num_primes = 0;\n    let mut num_primes_digits\
    \ = 0;\n    let mut num_primes_digits_primes = 0;\n    let mut num_primes_digits_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes = 0;\n\
    \    let mut num_primes_digits_primes_primes_primes_primes_primes_primes = 0;\n\
    \    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime",
  "    let mut num: isize = 0;\n    let mut num_str: String = num.to_string();\n \
    \   let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str", "    let mut num: isize =\
    \ 0;\n    let mut num_str: String = num.to_string();\n    let mut num_str: Vec<&str>\
    \ = num_str.chars().collect();\n    let mut num_str: Vec<&str> = num_str.to_vec();\n\
    \    let mut num_str: Vec<&str> = num_str.to_owned();\n    let mut num_str: Vec<&str>\
    \ = num_str.to_owned();\n    let mut num_str: Vec<&str> = num_str.to_owned();\n\
    \    let mut num_str: Vec<&str> = num_str.to_owned();\n    let mut num_str: Vec<&str>\
    \ = num_str.to_owned();\n    let mut num_str: Vec<&str> = num_str.to_owned();\n\
    \    let mut num_str: Vec<&str> = num_str.to_owned();\n    let mut num_str: Vec<&str>\
    \ = num_str.to_owned();\n    let mut num_str: Vec<&str> = num_str.to_owned();\n\
    \    let mut num_str: Vec<&str> = num_str.to_owned();\n    let mut num_str: Vec<&str>\
    \ = num_str.to_owned();\n    let mut num_str: Vec<&str> = num_str.to_owned();\n\
    \    let mut num_str: Vec<&str> = num_str.to_owned();\n    let mut num_str: Vec<&str>\
    \ = num_str.to_owned();\n    let mut num_str: Vec<&str> = num_str.to_owned();\n\
    \    let mut num_str: Vec<&str> = num_str.to_owned();\n    let mut num_str: Vec<&str>\
    \ = num_str.to_owned();\n    let mut num_str: Vec<&str> = num_str.to_owned();\n\
    \    let mut num_str: Vec<&str> = num_str.to_owned();\n    let mut num_str: Vec<&str>\
    \ = num_str.to_owned();\n    let mut num_str: Vec<&str> = num_str.to_owned();\n\
    \    let mut num_str: Vec<&str> = num_str.to_owned();\n    let mut num_str: Vec<&str>\
    \ = num_str.to_owned();\n    let mut num_str: Vec<&str> = num_str.to_owned", " \
    \   let mut num: isize = 0;\n    let mut digit: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n", "    let mut prime_count =\
    \ 0;\n    let mut digits = num.chars().collect::<Vec<_>>();\n    let mut primes\
    \ = vec![false; 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set\
    \ = vec![false; 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set\
    \ = vec![false; 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set\
    \ = vec![false; 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set\
    \ = vec![false; 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set\
    \ = vec![false; 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set\
    \ = vec![false; 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set\
    \ = vec![false; 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set\
    \ = vec![false; 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set\
    \ = vec![false; 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set\
    \ = vec![false; 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set\
    \ = vec![false; 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set\
    \ = vec![false; 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set\
    \ = vec![false; 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set\
    \ = vec![false; 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set\
    \ = vec![false; 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set\
    \ = vec![false; 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set\
    \ = vec![false; 26];\n    let mut primes_set = vec![false; 26];\n    let mut primes_set\
    \ = vec![false; 26];\n    let mut primes_set = vec![", "    let mut num: isize\
    \ = 0;\n    let mut digits: Vec<isize> = num.to_lowercase().chars().collect();\n\
    \    let mut primes: Vec<isize> = vec![];\n    let mut prime: isize = 2;\n   \
    \ let mut prime_found = false;\n    let mut prime_found2 = false;\n    let mut\
    \ prime_found3 = false;\n    let mut prime_found4 = false;\n    let mut prime_found5\
    \ = false;\n    let mut prime_found6 = false;\n    let mut prime_found7 = false;\n\
    \    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n    let\
    \ mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let mut\
    \ prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut prime_found14\
    \ = false;\n    let mut prime_found15 = false;\n    let mut prime_found16 = false;\n\
    \    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n    let\
    \ mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let mut\
    \ prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut prime_found23\
    \ = false;\n    let mut prime_found24 = false;\n    let mut prime_found25 = false;\n\
    \    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n    let\
    \ mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let mut\
    \ prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut prime_found32\
    \ = false;\n    let mut prime_found33 = false;\n    let mut prime_found34 = false;\n\
    \    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n    let\
    \ mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let mut\
    \ prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut prime_found41\
    \ = false;\n    let mut prime_found42 = false;\n    let mut prime_found43 = false;\n\
    \    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n    let\
    \ mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let mut\
    \ prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut prime_found50\
    \ = false;\n    let mut prime", "    let mut num: isize = 0;\n    let mut digits:\
    \ Vec<&str> = num.to_lowercase().chars().collect();\n    let mut prime_digits:\
    \ Vec<&str> = vec![];\n    let mut prime_digits_count: usize = 0;\n    let mut\
    \ prime_digits_sum: usize = 0;\n    let mut prime_digits_sum2: usize = 0;\n  \
    \  let mut prime_digits_sum3: usize = 0;\n    let mut prime_digits_sum4: usize\
    \ = 0;\n    let mut prime_digits_sum5: usize = 0;\n    let mut prime_digits_sum6:\
    \ usize = 0;\n    let mut prime_digits_sum7: usize = 0;\n    let mut prime_digits_sum8:\
    \ usize = 0;\n    let mut prime_digits_sum9: usize = 0;\n    let mut prime_digits_sum10:\
    \ usize = 0;\n    let mut prime_digits_sum11: usize = 0;\n    let mut prime_digits_sum12:\
    \ usize = 0;\n    let mut prime_digits_sum13: usize = 0;\n    let mut prime_digits_sum14:\
    \ usize = 0;\n    let mut prime_digits_sum15: usize = 0;\n    let mut prime_digits_sum16:\
    \ usize = 0;\n    let mut prime_digits_sum17: usize = 0;\n    let mut prime_digits_sum18:\
    \ usize = 0;\n    let mut prime_digits_sum19: usize = 0;\n    let mut prime_digits_sum20:\
    \ usize = 0;\n    let mut prime_digits_sum21: usize = 0;\n    let mut prime_digits_sum22:\
    \ usize = 0;\n    let mut prime_digits_sum23: usize = 0;\n    let mut prime_digits_sum24:\
    \ usize = 0;\n    let mut prime_digits_sum25: usize = 0;\n    let mut prime_digits_sum26:\
    \ usize = 0;\n    let mut prime_digits_sum27: usize = 0;\n    let mut prime_digits_sum28:\
    \ usize = 0;\n    let mut prime_digits_sum29: usize = 0;\n    let mut prime_digits_sum30:\
    \ usize = 0;\n    let mut prime_digits_sum31: usize = 0;\n    let mut prime_digits_sum32:\
    \ usize = 0;\n    let mut prime_digits_sum33: u", "    let mut num: isize = 0;\n\
    \    let mut num_digits = num.len();\n    let mut num_primes = 0;\n    let mut\
    \ num_primes_digits = 0;\n    let mut num_primes_digits_primes = 0;\n    let mut\
    \ num_primes_digits_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes = 0;\n    let\
    \ mut num_primes_digits_primes_primes_primes_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime",
  "    let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut num_primes\
    \ = 0;\n    let mut num_primes_digits = 0;\n    let mut num_primes_digits_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes = 0;\n    let\
    \ mut num_primes_digits_primes_primes_primes_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime",
  "    let mut num: isize = 0;\n    let mut digit: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n", "    let mut num: isize = 0;\n\
    \    let mut num_str: String = num.to_string();\n    let mut num_str: Vec<String>\
    \ = num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str",
  "    let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut prime: Vec<&str> = vec![\"\".to_string()];\n    let mut prime_digits:\
    \ Vec<&str> = vec![\"\".to_string()];\n    let mut prime_digits_len: isize = 0;\n\
    \    let mut prime_digits_len2: isize = 0;\n    let mut prime_digits_len3: isize\
    \ = 0;\n    let mut prime_digits_len4: isize = 0;\n    let mut prime_digits_len5:\
    \ isize = 0;\n    let mut prime_digits_len6: isize = 0;\n    let mut prime_digits_len7:\
    \ isize = 0;\n    let mut prime_digits_len8: isize = 0;\n    let mut prime_digits_len9:\
    \ isize = 0;\n    let mut prime_digits_len10: isize = 0;\n    let mut prime_digits_len11:\
    \ isize = 0;\n    let mut prime_digits_len12: isize = 0;\n    let mut prime_digits_len13:\
    \ isize = 0;\n    let mut prime_digits_len14: isize = 0;\n    let mut prime_digits_len15:\
    \ isize = 0;\n    let mut prime_digits_len16: isize = 0;\n    let mut prime_digits_len17:\
    \ isize = 0;\n    let mut prime_digits_len18: isize = 0;\n    let mut prime_digits_len19:\
    \ isize = 0;\n    let mut prime_digits_len20: isize = 0;\n    let mut prime_digits_len21:\
    \ isize = 0;\n    let mut prime_digits_len22: isize = 0;\n    let mut prime_digits_len23:\
    \ isize = 0;\n    let mut prime_digits_len24: isize = 0;\n    let mut prime_digits_len25:\
    \ isize = 0;\n    let mut prime_digits_len26: isize = 0;\n    let mut prime_digits_len27:\
    \ isize = 0;\n    let mut prime_digits_len28: isize = 0;\n    let mut prime_digits_len29:\
    \ isize = 0;\n    let mut prime_digits_len30: isize = 0;\n    let mut prime_digits_len31:\
    \ isize = 0;\n    let mut prime_digits_len32: isize = 0;\n    let mu", "    let\
    \ mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![];\n    let mut prime: isize = 2;\n    let\
    \ mut prime_found = false;\n    let mut prime_found2 = false;\n    let mut prime_found3\
    \ = false;\n    let mut prime_found4 = false;\n    let mut prime_found5 = false;\n\
    \    let mut prime_found6 = false;\n    let mut prime_found7 = false;\n    let\
    \ mut prime_found8 = false;\n    let mut prime_found9 = false;\n    let mut prime_found10\
    \ = false;\n    let mut prime_found11 = false;\n    let mut prime_found12 = false;\n\
    \    let mut prime_found13 = false;\n    let mut prime_found14 = false;\n    let\
    \ mut prime_found15 = false;\n    let mut prime_found16 = false;\n    let mut\
    \ prime_found17 = false;\n    let mut prime_found18 = false;\n    let mut prime_found19\
    \ = false;\n    let mut prime_found20 = false;\n    let mut prime_found21 = false;\n\
    \    let mut prime_found22 = false;\n    let mut prime_found23 = false;\n    let\
    \ mut prime_found24 = false;\n    let mut prime_found25 = false;\n    let mut\
    \ prime_found26 = false;\n    let mut prime_found27 = false;\n    let mut prime_found28\
    \ = false;\n    let mut prime_found29 = false;\n    let mut prime_found30 = false;\n\
    \    let mut prime_found31 = false;\n    let mut prime_found32 = false;\n    let\
    \ mut prime_found33 = false;\n    let mut prime_found34 = false;\n    let mut\
    \ prime_found35 = false;\n    let mut prime_found36 = false;\n    let mut prime_found37\
    \ = false;\n    let mut prime_found38 = false;\n    let mut prime_found39 = false;\n\
    \    let mut prime_found40 = false;\n    let mut prime_found41 = false;\n    let\
    \ mut prime_found42 = false;\n    let mut prime_found43 = false;\n    let mut\
    \ prime_found44 = false;\n    let mut prime_found45 = false;\n    let mut prime_found46\
    \ = false;\n    let mut prime_found47 = false;\n    let mut prime_found48 = false;\n\
    \    let mut prime_found49 = false;\n    let mut prime_found50 = false;\n    let\
    \ mut prime", "    let mut num: isize = 0;\n    let mut num_str: String = num.to_string();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str", "    let mut num: isize =\
    \ 0;\n    let mut digits: Vec<isize> = num.to_string().chars().collect();\n  \
    \  let mut primes: Vec<isize> = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut primes_set:\
    \ HashSet<isize> = HashSet::new();\n    let mut primes_set2: HashSet<isize> =\
    \ HashSet::new();\n    let mut primes_set3: HashSet<isize> = HashSet::new();\n\
    \    let mut primes_set4: HashSet<isize> = HashSet::new();\n    let mut primes_set5:\
    \ HashSet<isize> = HashSet::new();\n    let mut primes_set6: HashSet<isize> =\
    \ HashSet::new();\n    let mut primes_set7: HashSet<isize> = HashSet::new();\n\
    \    let mut primes_set8: HashSet<isize> = HashSet::new();\n    let mut primes_set9:\
    \ HashSet<isize> = HashSet::new();\n    let mut primes_set10: HashSet<isize> =\
    \ HashSet::new();\n    let mut primes_set11: HashSet<isize> = HashSet::new();\n\
    \    let mut primes_set12: HashSet<isize> = HashSet::new();\n    let mut primes_set13:\
    \ HashSet<isize> = HashSet::new();\n    let mut primes_set14: HashSet<isize> =\
    \ HashSet::new();\n    let mut primes_set15: HashSet<isize> = HashSet::new();\n\
    \    let mut primes_set16: HashSet<isize> = HashSet::new();\n    let mut primes_set17:\
    \ HashSet<isize> = HashSet::new();\n    let mut primes_set18: HashSet<isize> =\
    \ HashSet::new();\n    let mut primes_set19: HashSet<isize> = HashSet::new();\n\
    \    let mut primes_set20: HashSet<isize> = HashSet::new();\n    let mut primes_set21:\
    \ HashSet<isize> = HashSet::new();\n    let ", "    let mut num: isize = 0;\n\
    \    let mut digits: Vec<&str> = num.chars().collect();\n    let mut prime_digits:\
    \ Vec<&str> = vec![];\n    let mut prime_digits_len: usize = 0;\n    let mut prime_digits_len2:\
    \ usize = 0;\n    let mut prime_digits_len3: usize = 0;\n    let mut prime_digits_len4:\
    \ usize = 0;\n    let mut prime_digits_len5: usize = 0;\n    let mut prime_digits_len6:\
    \ usize = 0;\n    let mut prime_digits_len7: usize = 0;\n    let mut prime_digits_len8:\
    \ usize = 0;\n    let mut prime_digits_len9: usize = 0;\n    let mut prime_digits_len10:\
    \ usize = 0;\n    let mut prime_digits_len11: usize = 0;\n    let mut prime_digits_len12:\
    \ usize = 0;\n    let mut prime_digits_len13: usize = 0;\n    let mut prime_digits_len14:\
    \ usize = 0;\n    let mut prime_digits_len15: usize = 0;\n    let mut prime_digits_len16:\
    \ usize = 0;\n    let mut prime_digits_len17: usize = 0;\n    let mut prime_digits_len18:\
    \ usize = 0;\n    let mut prime_digits_len19: usize = 0;\n    let mut prime_digits_len20:\
    \ usize = 0;\n    let mut prime_digits_len21: usize = 0;\n    let mut prime_digits_len22:\
    \ usize = 0;\n    let mut prime_digits_len23: usize = 0;\n    let mut prime_digits_len24:\
    \ usize = 0;\n    let mut prime_digits_len25: usize = 0;\n    let mut prime_digits_len26:\
    \ usize = 0;\n    let mut prime_digits_len27: usize = 0;\n    let mut prime_digits_len28:\
    \ usize = 0;\n    let mut prime_digits_len29: usize = 0;\n    let mut prime_digits_len30:\
    \ usize = 0;\n    let mut prime_digits_len31: usize = 0;\n    let mut prime_digits_len32:\
    \ usize = 0;\n    let mut prime_digits_len33: usize = 0;\n    let mut prime_digits_len34:\
    \ u", "    let mut num: isize = 0;\n    let mut digit: char;\n    let mut prime:\
    \ isize = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n    let ", "    let mut num: isize\
    \ = 0;\n    let mut digit: isize = 0;\n    let mut prime: isize = 0;\n    let\
    \ mut prime_found = false;\n    let mut prime_found2 = false;\n    let mut prime_found3\
    \ = false;\n    let mut prime_found4 = false;\n    let mut prime_found5 = false;\n\
    \    let mut prime_found6 = false;\n    let mut prime_found7 = false;\n    let\
    \ mut prime_found8 = false;\n    let mut prime_found9 = false;\n    let mut prime_found10\
    \ = false;\n    let mut prime_found11 = false;\n    let mut prime_found12 = false;\n\
    \    let mut prime_found13 = false;\n    let mut prime_found14 = false;\n    let\
    \ mut prime_found15 = false;\n    let mut prime_found16 = false;\n    let mut\
    \ prime_found17 = false;\n    let mut prime_found18 = false;\n    let mut prime_found19\
    \ = false;\n    let mut prime_found20 = false;\n    let mut prime_found21 = false;\n\
    \    let mut prime_found22 = false;\n    let mut prime_found23 = false;\n    let\
    \ mut prime_found24 = false;\n    let mut prime_found25 = false;\n    let mut\
    \ prime_found26 = false;\n    let mut prime_found27 = false;\n    let mut prime_found28\
    \ = false;\n    let mut prime_found29 = false;\n    let mut prime_found30 = false;\n\
    \    let mut prime_found31 = false;\n    let mut prime_found32 = false;\n    let\
    \ mut prime_found33 = false;\n    let mut prime_found34 = false;\n    let mut\
    \ prime_found35 = false;\n    let mut prime_found36 = false;\n    let mut prime_found37\
    \ = false;\n    let mut prime_found38 = false;\n    let mut prime_found39 = false;\n\
    \    let mut prime_found40 = false;\n    let mut prime_found41 = false;\n    let\
    \ mut prime_found42 = false;\n    let mut prime_found43 = false;\n    let mut\
    \ prime_found44 = false;\n    let mut prime_found45 = false;\n    let mut prime_found46\
    \ = false;\n    let mut prime_found47 = false;\n    let mut prime_found48 = false;\n\
    \    let mut prime_found49 = false;\n    let mut prime_found50 = false;\n    let\
    \ mut prime_found51 = false;\n    let mut prime_found52 = false;\n    let mut\
    \ prime_found53 = false;\n", "    let mut num: isize = 0;\n    let mut digits:\
    \ Vec<isize> = num.to_lowercase().chars().collect();\n    for d in digits {\n\
    \        if d >= 'a' && d <= 'f' {\n            num = num * 16 + d - 'a' as isize;\n\
    \        } else {\n            num = num * 16 + d as isize;\n        }\n    }\n\
    \    return num;", "    let mut num: isize = 0;\n    let mut digits: Vec<&str>\
    \ = num.chars().collect();\n    let mut primes: Vec<&str> = vec![];\n    let mut\
    \ prime: isize = 0;\n    let mut prime_found = false;\n    let mut prime_found2\
    \ = false;\n    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n\
    \    let mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let\
    \ mut prime_found7 = false;\n    let mut prime_found8 = false;\n    let mut prime_found9\
    \ = false;\n    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n\
    \    let mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let\
    \ mut prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut\
    \ prime_found16 = false;\n    let mut prime_found17 = false;\n    let mut prime_found18\
    \ = false;\n    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n\
    \    let mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let\
    \ mut prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut\
    \ prime_found25 = false;\n    let mut prime_found26 = false;\n    let mut prime_found27\
    \ = false;\n    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n\
    \    let mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let\
    \ mut prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut\
    \ prime_found34 = false;\n    let mut prime_found35 = false;\n    let mut prime_found36\
    \ = false;\n    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n\
    \    let mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let\
    \ mut prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut\
    \ prime_found43 = false;\n    let mut prime_found44 = false;\n    let mut prime_found45\
    \ = false;\n    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n\
    \    let mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let\
    \ mut prime_found50 = false;\n    let mut prime_found", "    let mut num: isize\
    \ = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n \
    \   for digit in digits {\n        if digit == 'A' || digit == 'B' || digit ==\
    \ 'C' || digit == 'D' || digit == 'E' || digit == 'F' {\n            num = num\
    \ * 16 + digit as isize;\n        }\n    }\n    return num;", "    let mut num:\
    \ isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![];\n    let mut prime_digits: Vec<&str>\
    \ = vec![];\n    let mut prime_digits_len: usize = 0;\n    let mut prime_digit_len:\
    \ usize = 0;\n    let mut prime_digit_count: usize = 0;\n    let mut prime_digit_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count: usize = 0;\n    let mut prime_digit_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count: usize = 0;\n    let mut\
    \ prime_digit_count_count_count_len: usize = 0;\n    let mut prime_digit_count_count_count_count:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_len: usize = 0;\n\
    \    let mut prime_digit_count_count_count_count_count: usize = 0;\n    let mut\
    \ prime_digit_count_count_count_count_count_len: usize = 0;\n    let mut prime_digit_count_count_count_count_count_count:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count: usize\
    \ = 0;\n    let mut prime_digit_count_count_count_count_count_count_len: usize\
    \ = 0;\n    let mut prime_digit_count_count_count_count_count_count_count: usize\
    \ = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count_count:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count_count:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count_count_len:\
    \ usize = 0;\n    let mut prime_digit_count_count_count_count_count_count_count_count_count_count_count:\
    \ usize", "    let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![];\n    \n    for digit in digits {\n  \
    \      if digit == 'A' || digit == 'B' || digit == 'C' || digit == 'D' || digit\
    \ == 'E' || digit == 'F' {\n            primes.push(digit);\n        }\n    }\n\
    \    \n    for prime in primes {\n        num = num * prime + primes.iter().position(|&x|\
    \ x == prime).unwrap();\n    }\n    \n    return num;", "    let mut num: isize\
    \ = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![\"\".to_string()];\n    let mut primes_count:\
    \ usize = 0;\n    let mut primes_count_2: usize = 0;\n    let mut primes_count_3:\
    \ usize = 0;\n    let mut primes_count_4: usize = 0;\n    let mut primes_count_5:\
    \ usize = 0;\n    let mut primes_count_6: usize = 0;\n    let mut primes_count_7:\
    \ usize = 0;\n    let mut primes_count_8: usize = 0;\n    let mut primes_count_9:\
    \ usize = 0;\n    let mut primes_count_10: usize = 0;\n    let mut primes_count_11:\
    \ usize = 0;\n    let mut primes_count_12: usize = 0;\n    let mut primes_count_13:\
    \ usize = 0;\n    let mut primes_count_14: usize = 0;\n    let mut primes_count_15:\
    \ usize = 0;\n    let mut primes_count_16: usize = 0;\n    let mut primes_count_17:\
    \ usize = 0;\n    let mut primes_count_18: usize = 0;\n    let mut primes_count_19:\
    \ usize = 0;\n    let mut primes_count_20: usize = 0;\n    let mut primes_count_21:\
    \ usize = 0;\n    let mut primes_count_22: usize = 0;\n    let mut primes_count_23:\
    \ usize = 0;\n    let mut primes_count_24: usize = 0;\n    let mut primes_count_25:\
    \ usize = 0;\n    let mut primes_count_26: usize = 0;\n    let mut primes_count_27:\
    \ usize = 0;\n    let mut primes_count_28: usize = 0;\n    let mut primes_count_29:\
    \ usize = 0;\n    let mut primes_count_30: usize = 0;\n    let mut primes_count_31:\
    \ usize = 0;\n    let mut primes_count_32: usize = 0;\n    let mut primes_count_33:\
    \ usize = 0;\n    let mut primes_count_34: usize = 0;\n    let mut primes_count_35:\
    \ usize = 0;\n    let mut primes_count_36: usize = 0;\n    let mut primes_count_37:\
    \ usize = 0;\n    let mut primes_count_38: usize = 0;\n    let mut primes_count_39:\
    \ usize = 0;\n    let mut ", "    let mut num: isize = 0;\n    let mut digits:\
    \ Vec<&str> = num.to_lowercase().chars().collect();\n    let mut prime: Vec<&str>\
    \ = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut prime_found =\
    \ false;\n    \n    for digit in digits {\n        if prime_found {\n        \
    \    break;\n        }\n        if digit == \"a\" || digit == \"b\" || digit ==\
    \ \"c\" || digit == \"d\" || digit == \"e\" || digit == \"f\" {\n            continue;\n\
    \        }\n        if digit == \"2\" || digit == \"3\" || digit == \"5\" || digit\
    \ == \"7\" || digit == \"B\" || digit == \"D\" {\n            prime_found = true;\n\
    \        }\n        \n        prime[prime - 1] += digit;\n    }\n    \n    for\
    \ prime in prime {\n        if prime < 10 {\n            num += prime as isize;\n\
    \        }\n    }\n    \n    return num;", "    let mut num: Vec<u8> = num.to_lowercase().chars().collect();\n\
    \    let mut num_prime: Vec<u8> = vec![2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let mut num_prime_2: Vec<u8> = vec![2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let mut num_prime_3: Vec<u8> = vec![2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let mut num_prime_4: Vec<u8> = vec![2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let mut num_prime_5: Vec<u8> = vec![2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let mut num_prime_6: Vec<u8> = vec![2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let mut num_prime_7: Vec<u8> = vec![2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let mut num_prime_8: Vec<u8> = vec![2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let mut num_prime_9: Vec<u8> = vec![2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let mut num_prime_10: Vec<u8> = ", "    let mut num: isize = 0;\n    let\
    \ mut digit: isize = 0;\n    let mut prime: isize = 0;\n    let mut prime_digit:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count_2:\
    \ isize = 0;\n    let mut prime_digit_count_3: isize = 0;\n    let mut prime_digit_count_4:\
    \ isize = 0;\n    let mut prime_digit_count_5: isize = 0;\n    let mut prime_digit_count_6:\
    \ isize = 0;\n    let mut prime_digit_count_7: isize = 0;\n    let mut prime_digit_count_8:\
    \ isize = 0;\n    let mut prime_digit_count_9: isize = 0;\n    let mut prime_digit_count_10:\
    \ isize = 0;\n    let mut prime_digit_count_11: isize = 0;\n    let mut prime_digit_count_12:\
    \ isize = 0;\n    let mut prime_digit_count_13: isize = 0;\n    let mut prime_digit_count_14:\
    \ isize = 0;\n    let mut prime_digit_count_15: isize = 0;\n    let mut prime_digit_count_16:\
    \ isize = 0;\n    let mut prime_digit_count_17: isize = 0;\n    let mut prime_digit_count_18:\
    \ isize = 0;\n    let mut prime_digit_count_19: isize = 0;\n    let mut prime_digit_count_20:\
    \ isize = 0;\n    let mut prime_digit_count_21: isize = 0;\n    let mut prime_digit_count_22:\
    \ isize = 0;\n    let mut prime_digit_count_23: isize = 0;\n    let mut prime_digit_count_24:\
    \ isize = 0;\n    let mut prime_digit_count_25: isize = 0;\n    let mut prime_digit_count_26:\
    \ isize = 0;\n    let mut prime_digit_count_27: isize = 0;\n    let mut prime_digit_count_28:\
    \ isize = 0;\n    let mut prime_digit_count_29: isize = 0;\n    let mut prime_digit_count_30:\
    \ isize = 0;\n    let mut prime_digit_count_31: isize = 0;\n    let mut prime_digit_count_32:\
    \ isize = 0;\n    let mut prime_digit_count_33: isize = 0;\n    let mut prime_digit_count_34:\
    \ isize = 0;\n    let mut prime_digit_count_35: isize = 0;\n    let mut prime_digit_count_36:\
    \ isize = 0;\n    let mut prime_digit_count_37: isize = 0;", "    let mut num:\
    \ isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut prime_digits: Vec<&str> = vec![];\n    let mut prime_counter: isize\
    \ = 0;\n    let mut prime_counter2: isize = 0;\n    let mut prime_counter3: isize\
    \ = 0;\n    let mut prime_counter4: isize = 0;\n    let mut prime_counter5: isize\
    \ = 0;\n    let mut prime_counter6: isize = 0;\n    let mut prime_counter7: isize\
    \ = 0;\n    let mut prime_counter8: isize = 0;\n    let mut prime_counter9: isize\
    \ = 0;\n    let mut prime_counter10: isize = 0;\n    let mut prime_counter11:\
    \ isize = 0;\n    let mut prime_counter12: isize = 0;\n    let mut prime_counter13:\
    \ isize = 0;\n    let mut prime_counter14: isize = 0;\n    let mut prime_counter15:\
    \ isize = 0;\n    let mut prime_counter16: isize = 0;\n    let mut prime_counter17:\
    \ isize = 0;\n    let mut prime_counter18: isize = 0;\n    let mut prime_counter19:\
    \ isize = 0;\n    let mut prime_counter20: isize = 0;\n    let mut prime_counter21:\
    \ isize = 0;\n    let mut prime_counter22: isize = 0;\n    let mut prime_counter23:\
    \ isize = 0;\n    let mut prime_counter24: isize = 0;\n    let mut prime_counter25:\
    \ isize = 0;\n    let mut prime_counter26: isize = 0;\n    let mut prime_counter27:\
    \ isize = 0;\n    let mut prime_counter28: isize = 0;\n    let mut prime_counter29:\
    \ isize = 0;\n    let mut prime_counter30: isize = 0;\n    let mut prime_counter31:\
    \ isize = 0;\n    let mut prime_counter32: isize = 0;\n    let mut prime_counter33:\
    \ isize = 0;\n    let mut prime_counter34: isize = 0;\n    let mut prime_counter35:\
    \ isize = 0;\n    let mut prime_counter36: isize = 0;\n    let mut prime_counter37:\
    \ isize = 0;\n    let mut prime_counter38: isize = 0;\n    let mut prime_counter39:\
    \ isize = 0;\n    let mut ", "    let mut num_digits = num.len();\n    let mut\
    \ prime_count = 0;\n    let mut prime_digits = vec![2,3,5,7,11,13,17,19];\n  \
    \  let mut prime_digits_len = prime_digits.len();\n    let mut prime_digits_len\
    \ = prime_digits_len + prime_digits_len/2;\n    let mut prime_digits_len = prime_digits_len\
    \ + prime_digits_len/2;\n    let mut prime_digits_len = prime_digits_len + prime_digits_len/2;\n\
    \    let mut prime_digits_len = prime_digits_len + prime_digits_len/2;\n    let\
    \ mut prime_digits_len = prime_digits_len + prime_digits_len/2;\n    let mut prime_digits_len\
    \ = prime_digits_len + prime_digits_len/2;\n    let mut prime_digits_len = prime_digits_len\
    \ + prime_digits_len/2;\n    let mut prime_digits_len = prime_digits_len + prime_digits_len/2;\n\
    \    let mut prime_digits_len = prime_digits_len + prime_digits_len/2;\n    let\
    \ mut prime_digits_len = prime_digits_len + prime_digits_len/2;\n    let mut prime_digits_len\
    \ = prime_digits_len + prime_digits_len/2;\n    let mut prime_digits_len = prime_digits_len\
    \ + prime_digits_len/2;\n    let mut prime_digits_len = prime_digits_len + prime_digits_len/2;\n\
    \    let mut prime_digits_len = prime_digits_len + prime_digits_len/2;\n    let\
    \ mut prime_digits_len = prime_digits_len + prime_digits_len/2;\n    let mut prime_digits_len\
    \ = prime_digits_len + prime_digits_len/2;\n    let mut prime_digits_len = prime_digits_len\
    \ + prime_digits_len/2;\n    let mut prime_digits_len = prime_digits_len + prime_digits_len/2;\n\
    \    let mut prime_digits_len = prime_digits_len + prime_digits_len/2;\n    let\
    \ mut prime_digits_len = prime_digits_len + prime_digits_len/2;\n    let mut prime_digits_len\
    \ = prime_digits_len + prime_digits_len/2;", "    let mut num_digits = num.len();\n\
    \    let mut prime_count = 0;\n    let mut prime_digits = vec![];\n    let mut\
    \ prime_digits_count = vec![];\n    let mut prime_digits_count_max = vec![];\n\
    \    let mut prime_digits_count_min = vec![];\n    let mut prime_digits_count_max_prime\
    \ = vec![];\n    let mut prime_digits_count_min_prime = vec![];\n    let mut prime_digits_count_max_prime_prime\
    \ = vec![];\n    let mut prime_digits_count_min_prime_prime = vec![];\n    let\
    \ mut prime_digits_count_max_prime_prime_prime = vec![];\n    let mut prime_digits_count_min_prime_prime_prime\
    \ = vec![];\n    let mut prime_digits_count_max_prime_prime_prime_prime = vec![];\n\
    \    let mut prime_digits_count_min_prime_prime_prime_prime = vec![];\n    let\
    \ mut prime_digits_count_max_prime_prime_prime_prime_prime = vec![];\n    let\
    \ mut prime_digits_count_min_prime_prime_prime_prime_prime = vec![];\n    let\
    \ mut prime_digits_count_max_prime_prime_prime_prime_prime_prime = vec![];\n \
    \   let mut prime_digits_count_min_prime_prime_prime_prime_prime_prime = vec![];\n\
    \    let mut prime_digits_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = vec![];\n    let mut prime_digits_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = vec![];\n    let mut prime_digits_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = vec![];\n    let mut prime_digits_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = vec![];\n    let mut prime_digits_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = vec![];\n    let mut prime_digits_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = vec![];\n    let mut prime_digits_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = vec![];\n    let mut prime_digits_count_min_prime", "    let mut num: Vec<u8>\
    \ = num.to_lowercase().chars().collect();\n    let mut prime_count: isize = 0;\n\
    \    let mut prime_digit: u8 = 0;\n    let mut prime_digit_count: isize = 0;\n\
    \    let mut prime_digit_sum: isize = 0;\n    let mut prime_digit_product: isize\
    \ = 1;\n    let mut prime_digit_sum2: isize = 1;\n    let mut prime_digit_product2:\
    \ isize = 1;\n    let mut prime_digit_sum3: isize = 1;\n    let mut prime_digit_product3:\
    \ isize = 1;\n    let mut prime_digit_sum4: isize = 1;\n    let mut prime_digit_product4:\
    \ isize = 1;\n    let mut prime_digit_sum5: isize = 1;\n    let mut prime_digit_product5:\
    \ isize = 1;\n    let mut prime_digit_sum6: isize = 1;\n    let mut prime_digit_product6:\
    \ isize = 1;\n    let mut prime_digit_sum7: isize = 1;\n    let mut prime_digit_product7:\
    \ isize = 1;\n    let mut prime_digit_sum8: isize = 1;\n    let mut prime_digit_product8:\
    \ isize = 1;\n    let mut prime_digit_sum9: isize = 1;\n    let mut prime_digit_product9:\
    \ isize = 1;\n    let mut prime_digit_sum10: isize = 1;\n    let mut prime_digit_product10:\
    \ isize = 1;\n    let mut prime_digit_sum11: isize = 1;\n    let mut prime_digit_product11:\
    \ isize = 1;\n    let mut prime_digit_sum12: isize = 1;\n    let mut prime_digit_product12:\
    \ isize = 1;\n    let mut prime_digit_sum13: isize = 1;\n    let mut prime_digit_product13:\
    \ isize = 1;\n    let mut prime_digit_sum14: isize = 1;\n    let mut prime_digit_product14:\
    \ isize = 1;\n    let mut prime_digit_sum15: isize = 1;\n    let mut prime_digit_product15:\
    \ isize = 1;\n    let mut prime_digit_sum16: isize = 1;\n    let mut prime_digit_product16:\
    \ isize = 1;\n    let mut prime_digit_sum17: isize = 1;\n    let mut prime_digit_product17:\
    \ isize = 1;\n    let mut prime_digit_sum18: isize = 1;\n    let mut prime_digit_product18:\
    \ isize = 1;\n    let mut prime", "    let mut prime_count = 0;\n    let mut prime_digits\
    \ = vec![];\n    let mut prime_digit_counts = vec![];\n    let mut prime_digit_counts_len\
    \ = vec![];\n    let mut prime_digit_counts_len_len = vec![];\n    let mut prime_digit_counts_len_len_len\
    \ = vec![];\n    let mut prime_digit_counts_len_len_len_len = vec![];\n    let\
    \ mut prime_digit_counts_len_len_len_len_len = vec![];\n    let mut prime_digit_counts_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_digit_counts_len_len_len_len_len_len_len = vec![];\n\
    \    let mut prime_digit_counts_len_len_len_len_len_len_len_len = vec![];\n  \
    \  let mut prime_digit_counts_len_len_len_len_len_len_len_len_len = vec![];\n\
    \    let mut prime_digit_counts_len_len_len_len_len_len_len_len_len_len_len =\
    \ vec![];\n    let mut prime_digit_counts_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_digit_counts_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_digit_counts_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_digit_counts_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_digit_counts_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_digit_counts_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_digit_counts_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_digit_counts_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_digit_counts_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_digit_counts_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_digit_counts_len_len_", "    let mut num: isize\
    \ = 0;\n    let mut num_digits = num.len();\n    let mut num_primes = 0;\n   \
    \ let mut num_primes_digits = 0;\n    let mut num_primes_digits_primes = 0;\n\
    \    let mut num_primes_digits_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes = 0;\n    let\
    \ mut num_primes_digits_primes_primes_primes_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime",
  "    let mut prime_count = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ digits = num.chars().collect::<Vec<_>>();\n    let mut primes = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false;\
    \ 11];\n    let mut primes_set = vec![false; 11];\n    let mut primes_set = vec![false; ",
  "    let mut prime_count = 0;\n    let mut prime_digits = vec![];\n    let mut digits\
    \ = num.chars().collect::<Vec<_>>();\n    let mut hex = String::new();\n    let\
    \ mut hexdigits = String::new();\n    let mut hexdigits_prime = String::new();\n\
    \    let mut hexdigits_prime_prime = String::new();\n    let mut hexdigits_prime_prime_prime\
    \ = String::new();\n    let mut hexdigits_prime_prime_prime_prime = String::new();\n\
    \    let mut hexdigits_prime_prime_prime_prime_prime = String::new();\n    let\
    \ mut hexdigits_prime_prime_prime_prime_prime_prime_prime = String::new();\n \
    \   let mut hexdigits_prime_prime_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut hexdigits_prime_prime_prime_prime_prime_prime_prime_prime_prime =\
    \ String::new();\n    let mut hexdigits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut hexdigits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut hexdigits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut hexdigits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut hexdigits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut hexdigits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut hexdigits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut hexdigits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut hex", "    let mut num: Vec<u8> = num.to_lowercase().chars().collect();\n\
    \    let mut prime_digits = vec![];\n    let mut prime_digit_count: usize = 0;\n\
    \    let mut prime_digit_index: usize = 0;\n    let mut prime_digit_value: u8\
    \ = 0;\n    let mut prime_digit_found = false;\n    let mut prime_digit_prime\
    \ = false;\n    let mut prime_digit_prime_found = false;\n    let mut prime_digit_prime_prime\
    \ = false;\n    let mut prime_digit_prime_prime_found = false;\n    let mut prime_digit_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_found = false;\n    let\
    \ mut prime_digit_prime_prime_prime_prime_found = false;\n    let mut prime_digit_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_digit_prime_prime_prime_", "    let mut num: isize\
    \ = num.len();\n    let mut prime: isize = 0;\n    let mut digit: isize = 0;\n\
    \    let mut prime_found = false;\n    let mut digit_found = false;\n    let mut\
    \ prime_found2 = false;\n    let mut digit_found2 = false;\n    let mut prime_found3\
    \ = false;\n    let mut digit_found3 = false;\n    let mut prime_found4 = false;\n\
    \    let mut digit_found4 = false;\n    let mut prime_found5 = false;\n    let\
    \ mut digit_found5 = false;\n    let mut prime_found6 = false;\n    let mut digit_found6\
    \ = false;\n    let mut prime_found7 = false;\n    let mut digit_found7 = false;\n\
    \    let mut prime_found8 = false;\n    let mut digit_found8 = false;\n    let\
    \ mut prime_found9 = false;\n    let mut digit_found9 = false;\n    let mut prime_found10\
    \ = false;\n    let mut digit_found10 = false;\n    let mut prime_found11 = false;\n\
    \    let mut digit_found11 = false;\n    let mut prime_found12 = false;\n    let\
    \ mut digit_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ digit_found13 = false;\n    let mut prime_found14 = false;\n    let mut digit_found14\
    \ = false;\n    let mut prime_found15 = false;\n    let mut digit_found15 = false;\n\
    \    let mut prime_found16 = false;\n    let mut digit_found16 = false;\n    let\
    \ mut prime_found17 = false;\n    let mut digit_found17 = false;\n    let mut\
    \ prime_found18 = false;\n    let mut digit_found18 = false;\n    let mut prime_found19\
    \ = false;\n    let mut digit_found19 = false;\n    let mut prime_found20 = false;\n\
    \    let mut digit_found20 = false;\n    let mut prime_found21 = false;\n    let\
    \ mut digit_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ digit_found22 = false;\n    let mut prime_found23 = false;\n    let mut digit_found23\
    \ = false;\n    let mut prime_found24 = false;\n    let mut digit_found24 = false;\n\
    \    let mut prime_found25 = false;\n    let mut digit_found25 = false;\n    let\
    \ mut prime_found26 = false;\n    let mut digit_found26 = false;\n    let mut\
    \ prime_found27 = false;\n    let mut digit_found27 = false;\n    let mut prime_found28\
    \ = false;\n    let mut digit_found28 = false;\n    let mut prime_found", "  \
    \  let mut num: isize = 0;\n    let mut digits: Vec<isize> = num.to_chars().collect();\n\
    \    for digit in digits {\n        if digit == 'A' || digit == 'B' || digit ==\
    \ 'C' || digit == 'D' || digit == 'E' || digit == 'F' {\n            num = num\
    \ * 16 + digit as isize;\n        } else {\n            num = num * 10 + digit\
    \ as isize;\n        }\n    }\n    return num;", "    let mut num: isize = 0;\n\
    \    let mut digits: Vec<&str> = num.chars().collect();\n    let mut prime: Vec<&str>\
    \ = Vec::new();\n    let mut prime_found = false;\n    let mut prime_found2 =\
    \ false;\n    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n\
    \    let mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let\
    \ mut prime_found7 = false;\n    let mut prime_found8 = false;\n    let mut prime_found9\
    \ = false;\n    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n\
    \    let mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let\
    \ mut prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut\
    \ prime_found16 = false;\n    let mut prime_found17 = false;\n    let mut prime_found18\
    \ = false;\n    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n\
    \    let mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let\
    \ mut prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut\
    \ prime_found25 = false;\n    let mut prime_found26 = false;\n    let mut prime_found27\
    \ = false;\n    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n\
    \    let mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let\
    \ mut prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut\
    \ prime_found34 = false;\n    let mut prime_found35 = false;\n    let mut prime_found36\
    \ = false;\n    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n\
    \    let mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let\
    \ mut prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut\
    \ prime_found43 = false;\n    let mut prime_found44 = false;\n    let mut prime_found45\
    \ = false;\n    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n\
    \    let mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let\
    \ mut prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut\
    \ prime", "    let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    for digit in digits {\n        if digit == 'a' || digit == 'b' || digit ==\
    \ 'c' || digit == 'd' || digit == 'e' || digit == 'f' {\n            num = num\
    \ * 16 + digit as isize;\n        } else {\n            num = num * 10 + digit\
    \ as isize;\n        }\n    }\n    return num;", "    let mut num: isize = 0;\n\
    \    let mut digits: Vec<isize> = num.chars().collect();\n    let mut prime: isize\
    \ = 2;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let ", "    let mut prime_count = 0;\n    let mut prime_digits\
    \ = vec![0; 16];\n    let mut prime_digits_count = vec![0; 16];\n    let mut prime_digits_count_in_hex\
    \ = vec![0; 16];\n    let mut prime_digits_count_in_decimal = vec![0; 16];\n \
    \   let mut prime_digits_count_in_octal = vec![0; 16];\n    let mut prime_digits_count_in_binary\
    \ = vec![0; 16];\n    let mut prime_digits_count_in_hex_binary = vec![0; 16];\n\
    \    let mut prime_digits_count_in_decimal_binary = vec![0; 16];\n    let mut\
    \ prime_digits_count_in_octal_binary = vec![0; 16];\n    let mut prime_digits_count_in_binary_hex\
    \ = vec![0; 16];\n    let mut prime_digits_count_in_hex_decimal = vec![0; 16];\n\
    \    let mut prime_digits_count_in_decimal_octal = vec![0; 16];\n    let mut prime_digits_count_in_octal_hex\
    \ = vec![0; 16];\n    let mut prime_digits_count_in_hex_decimal_binary = vec![0;\
    \ 16];\n    let mut prime_digits_count_in_decimal_octal_binary = vec![0; 16];\n\
    \    let mut prime_digits_count_in_octal_hex_binary = vec![0; 16];\n    let mut\
    \ prime_digits_count_in_hex_decimal_decimal = vec![0; 16];\n    let mut prime_digits_count_in_decimal_octal_hex\
    \ = vec![0; 16];\n    let mut prime_digits_count_in_hex_decimal_decimal_binary\
    \ = vec![0; 16];\n    let mut prime_digits_count_in_decimal_octal_hex_binary =\
    \ vec![0; 16];\n    let mut prime_digits_count_in_hex_decimal_decimal_octal =\
    \ vec![0; 16];\n    let mut prime_digits_count_in_hex_decimal_decimal_octal_binary\
    \ = vec![0; 16];\n    let mut prime_digits_count_in_hex_decimal_decimal_octal_hex_binary\
    \ = vec![0; 16];\n    let mut prime_digits_count_in_hex_decimal_decimal_octal_hex\
    \ = vec![0; 16];\n    let mut prime_digits_count_in_hex_decimal_decimal_octal_hex_binary\
    \ = vec![0; 16];\n    let mut prime_digits_count_", "    let mut num: isize =\
    \ num.len();\n    let mut prime: isize = 0;\n    let mut prime_found = false;\n\
    \    let mut prime_found2 = false;\n    let mut prime_found3 = false;\n    let\
    \ mut prime_found4 = false;\n    let mut prime_found5 = false;\n    let mut prime_found6\
    \ = false;\n    let mut prime_found7 = false;\n    let mut prime_found8 = false;\n\
    \    let mut prime_found9 = false;\n    let mut prime_found10 = false;\n    let\
    \ mut prime_found11 = false;\n    let mut prime_found12 = false;\n    let mut\
    \ prime_found13 = false;\n    let mut prime_found14 = false;\n    let mut prime_found15\
    \ = false;\n    let mut prime_found16 = false;\n    let mut prime_found17 = false;\n\
    \    let mut prime_found18 = false;\n    let mut prime_found19 = false;\n    let\
    \ mut prime_found20 = false;\n    let mut prime_found21 = false;\n    let mut\
    \ prime_found22 = false;\n    let mut prime_found23 = false;\n    let mut prime_found24\
    \ = false;\n    let mut prime_found25 = false;\n    let mut prime_found26 = false;\n\
    \    let mut prime_found27 = false;\n    let mut prime_found28 = false;\n    let\
    \ mut prime_found29 = false;\n    let mut prime_found30 = false;\n    let mut\
    \ prime_found31 = false;\n    let mut prime_found32 = false;\n    let mut prime_found33\
    \ = false;\n    let mut prime_found34 = false;\n    let mut prime_found35 = false;\n\
    \    let mut prime_found36 = false;\n    let mut prime_found37 = false;\n    let\
    \ mut prime_found38 = false;\n    let mut prime_found39 = false;\n    let mut\
    \ prime_found40 = false;\n    let mut prime_found41 = false;\n    let mut prime_found42\
    \ = false;\n    let mut prime_found43 = false;\n    let mut prime_found44 = false;\n\
    \    let mut prime_found45 = false;\n    let mut prime_found46 = false;\n    let\
    \ mut prime_found47 = false;\n    let mut prime_found48 = false;\n    let mut\
    \ prime_found49 = false;\n    let mut prime_found50 = false;\n    let mut prime_found51\
    \ = false;\n    let mut prime_found52 = false;\n    let mut prime_found53 = false;\n\
    \    let mut prime_found", "    let mut num: isize = 0;\n    let mut num_digits\
    \ = num.len();\n    let mut num_primes = 0;\n    let mut num_primes_digits = 0;\n\
    \    let mut num_primes_digits_prime = 0;\n    let mut num_primes_digits_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime = 0;\n    let mut num_primes_digits_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime = 0;\n   \
    \ let mut num_primes_digits_prime_prime_prime_prime_prime_prime = 0;\n    let\
    \ mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime = 0;\n    let\
    \ mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n\
    \    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime",
  "    let mut num: isize = 0;\n    let mut num_str: String = num.to_string();\n \
    \   let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str", "    let mut num: isize =\
    \ 0;\n    let mut num_digits = num.len();\n    let mut num_primes = 0;\n    let\
    \ mut num_primes_digits = 0;\n    let mut num_primes_digits_primes = 0;\n    let\
    \ mut num_primes_digits_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes = 0;\n    let\
    \ mut num_primes_digits_primes_primes_primes_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime",
  "    let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![];\n    \n    for digit in digits {\n  \
    \      primes.push(digit as &str);\n    }\n    \n    for prime in primes {\n \
    \       if primes.iter().any(|&x| x == prime) {\n            continue;\n     \
    \   }\n        let mut prime_digits: Vec<&str> = prime.chars().collect();\n  \
    \      \n        for digit in prime_digits {\n            prime_digits.remove(digit);\n\
    \        }\n        \n        let mut prime_digits_iter = prime_digits.iter();\n\
    \        \n        while prime_digits_iter.any(|&x| x == prime_digits[0]) {\n\
    \            prime_digits_iter.next();\n        }\n        \n        let mut prime_digits_iter\
    \ = prime_digits.iter();\n        \n        while prime_digits_iter.any(|&x| x\
    \ == prime_digits[1]) {\n            prime_digits_iter.next();\n        }\n  \
    \      \n        let mut prime_digits_iter = prime_digits.iter();\n        \n\
    \        while prime_digits_iter.any(|&x| x == prime_digits[2]) {\n          \
    \  prime_digits_iter.next();\n        }\n        \n        let mut prime_digits_iter\
    \ = prime_digits.iter();\n        \n        while prime_digits_iter.any(|&x| x\
    \ == prime_digits[3]) {\n            prime_digits_iter.next();\n        }\n  \
    \      \n        let mut prime_digits_iter = prime_digits.iter();\n        \n\
    \        while prime_digits_iter.any(|&x| x == prime_digits[4]) {\n          \
    \  prime_digits_iter.next();\n        }\n        \n        let mut prime_digits_iter\
    \ = prime_digits.iter();\n        \n        while prime_digits_iter.any(|&x| x\
    \ == prime_digits[5]) {\n            prime_digits_iter.next();\n        }\n  \
    \      \n        let mut prime_digits_iter = prime_digits.iter();\n        \n\
    \        while prime_digits_iter.any(|&x| x == prime_digits[6]) {\n          \
    \  prime_digits_iter.next();\n        }\n        \n        let mut prime_digits_iter\
    \ = prime_digits.iter();\n        \n        while prime_digits_iter.any(|&x| x\
    \ == prime_digits[7]) {\n            prime_digits_iter.next();\n        }\n  \
    \      \n        let mut prime_digits_iter = ", "    let mut prime_count = 0;\n\
    \    let mut digit_count = 1;\n    let mut digits = num.to_string();\n    while\
    \ digit_count < hex_num::CHARACTERS {\n        if digits[digit_count] == 'A' {\n\
    \            digit_count++;\n            continue;\n        }\n        if digits[digit_count]\
    \ == 'B' {\n            digit_count++;\n            continue;\n        }\n   \
    \     if digits[digit_count] == 'C' {\n            digit_count++;\n          \
    \  continue;\n        }\n        if digits[digit_count] == 'D' {\n           \
    \ digit_count++;\n            continue;\n        }\n        if digits[digit_count]\
    \ == 'E' {\n            digit_count++;\n            continue;\n        }\n   \
    \     if digits[digit_count] == 'F' {\n            digit_count++;\n          \
    \  continue;\n        }\n        if digits[digit_count] == '0' {\n           \
    \ digit_count++;\n            continue;\n        }\n        if digits[digit_count]\
    \ == '1' {\n            digit_count++;\n            continue;\n        }\n   \
    \     if digits[digit_count] == '2' {\n            digit_count++;\n          \
    \  continue;\n        }\n        if digits[digit_count] == '3' {\n           \
    \ digit_count++;\n            continue;\n        }\n        if digits[digit_count]\
    \ == '4' {\n            digit_count++;\n            continue;\n        }\n   \
    \     if digits[digit_count] == '5' {\n            digit_count++;\n          \
    \  continue;\n        }\n        if digits[digit_count] == '6' {\n           \
    \ digit_count++;\n            continue;\n        }\n        if digits[digit_count]\
    \ == '7' {\n            digit_count++;\n            continue;\n        }\n   \
    \     if digits[digit_count] == '8' {\n            digit_count++;\n          \
    \  continue;\n        }\n        if digits[digit_count] == '9' {\n           \
    \ digit_count++;\n            continue;\n        }\n        if digits[digit_count]\
    \ == 'A' {\n            digit_count++;\n            continue;\n        }\n   \
    \     if digits[digit_count] == 'B' {\n            digit_count++;\n          \
    \  continue;\n        }\n        if digits[digit_count] == 'C' {\n           \
    \ digit_count++;\n            continue;\n        }\n        if digits[digit_count]\
    \ == 'D' {\n            digit_count++;\n            continue;\n        }\n   \
    \     if digits[digit_count] == 'E' {\n            digit_count++;\n          \
    \  continue;\n        }\n        if digits[digit_count] == 'F' {\n           \
    \ digit_count++;\n            continue;\n        }\n        if digits[digit_count]\
    \ == '0' {\n            digit_count++;\n            continue;\n        }\n   \
    \     if digits[digit_count] == '1' {\n            digit_count++;\n          \
    \  continue;\n        }\n", "    let mut num: isize = 0;\n    let mut num_digits\
    \ = num.len();\n    let mut prime_digits = false;\n    let mut prime_digit_count\
    \ = 0;\n    let mut prime_digit_count_max = 10;\n    let mut prime_digit_count_min\
    \ = 2;\n    let mut prime_digit_count_step = 2;\n    let mut prime_digit_count_max2\
    \ = 10;\n    let mut prime_digit_count_min2 = 2;\n    let mut prime_digit_count_step2\
    \ = 2;\n    let mut prime_digit_count_max3 = 10;\n    let mut prime_digit_count_min3\
    \ = 2;\n    let mut prime_digit_count_step3 = 2;\n    let mut prime_digit_count_max4\
    \ = 10;\n    let mut prime_digit_count_min4 = 2;\n    let mut prime_digit_count_step4\
    \ = 2;\n    let mut prime_digit_count_max5 = 10;\n    let mut prime_digit_count_min5\
    \ = 2;\n    let mut prime_digit_count_step5 = 2;\n    let mut prime_digit_count_max6\
    \ = 10;\n    let mut prime_digit_count_min6 = 3;\n    let mut prime_digit_count_step6\
    \ = 3;\n    let mut prime_digit_count_max7 = 10;\n    let mut prime_digit_count_min7\
    \ = 2;\n    let mut prime_digit_count_step7 = 2;\n    let mut prime_digit_count_max8\
    \ = 10;\n    let mut prime_digit_count_min8 = 2;\n    let mut prime_digit_count_step8\
    \ = 2;\n    let mut prime_digit_count_max9 = 10;\n    let mut prime_digit_count_min9\
    \ = 2;\n    let mut prime_digit_count_step9 = 2;\n    let mut prime_digit_count_max10\
    \ = 10;\n    let mut prime_digit_count_min10 = 2;\n    let mut prime_digit_count_step10\
    \ = 2;\n    let mut prime_digit_count_max11 = 10;\n    let mut prime_digit_count_min11\
    \ = 2;\n    let mut prime_digit_count_step11 = 2;\n    let mut prime_digit_count_max12\
    \ = 10;\n    let mut prime_digit_count_min12 = 2;\n    let mut prime_digit_count_step12\
    \ = 2;\n    let mut prime_digit_count_max13 = 10;\n    let mut prime_digit_count_min13\
    \ = 2;\n    let mut prime_digit_count_step13 = 2;\n    let mut prime_digit_count_max14\
    \ = 10;\n    let mut prime_digit_count_min14 = 2;\n    let mut prime_digit_count_step14\
    \ = 2;\n    let mut prime_digit_count_max15 = 10;\n    let mut prime_digit_count_min15",
  "    let mut num: isize = num.len();\n    let mut prime: isize = 0;\n    let mut\
    \ prime_found = false;\n    let mut prime_found2 = false;\n    let mut prime_found3\
    \ = false;\n    let mut prime_found4 = false;\n    let mut prime_found5 = false;\n\
    \    let mut prime_found6 = false;\n    let mut prime_found7 = false;\n    let\
    \ mut prime_found8 = false;\n    let mut prime_found9 = false;\n    let mut prime_found10\
    \ = false;\n    let mut prime_found11 = false;\n    let mut prime_found12 = false;\n\
    \    let mut prime_found13 = false;\n    let mut prime_found14 = false;\n    let\
    \ mut prime_found15 = false;\n    let mut prime_found16 = false;\n    let mut\
    \ prime_found17 = false;\n    let mut prime_found18 = false;\n    let mut prime_found19\
    \ = false;\n    let mut prime_found20 = false;\n    let mut prime_found21 = false;\n\
    \    let mut prime_found22 = false;\n    let mut prime_found23 = false;\n    let\
    \ mut prime_found24 = false;\n    let mut prime_found25 = false;\n    let mut\
    \ prime_found26 = false;\n    let mut prime_found27 = false;\n    let mut prime_found28\
    \ = false;\n    let mut prime_found29 = false;\n    let mut prime_found30 = false;\n\
    \    let mut prime_found31 = false;\n    let mut prime_found32 = false;\n    let\
    \ mut prime_found33 = false;\n    let mut prime_found34 = false;\n    let mut\
    \ prime_found35 = false;\n    let mut prime_found36 = false;\n    let mut prime_found37\
    \ = false;\n    let mut prime_found38 = false;\n    let mut prime_found39 = false;\n\
    \    let mut prime_found40 = false;\n    let mut prime_found41 = false;\n    let\
    \ mut prime_found42 = false;\n    let mut prime_found43 = false;\n    let mut\
    \ prime_found44 = false;\n    let mut prime_found45 = false;\n    let mut prime_found46\
    \ = false;\n    let mut prime_found47 = false;\n    let mut prime_found48 = false;\n\
    \    let mut prime_found49 = false;\n    let mut prime_found50 = false;\n    let\
    \ mut prime_found51 = false;\n    let mut prime_found52 = false;\n    let mut\
    \ prime_found53 = false;\n    let mut prime_found", "    let mut num: isize =\
    \ 0;\n    let mut digits: Vec<&str> = num.chars().collect();\n    let mut primes:\
    \ Vec<&str> = vec![];\n    let mut prime_digits: Vec<&str> = vec![];\n    let\
    \ mut prime_digit_count: isize = 0;\n    let mut prime_digit_count_2: isize =\
    \ 0;\n    let mut prime_digit_count_3: isize = 0;\n    let mut prime_digit_count_4:\
    \ isize = 0;\n    let mut prime_digit_count_5: isize = 0;\n    let mut prime_digit_count_6:\
    \ isize = 0;\n    let mut prime_digit_count_7: isize = 0;\n    let mut prime_digit_count_8:\
    \ isize = 0;\n    let mut prime_digit_count_9: isize = 0;\n    let mut prime_digit_count_10:\
    \ isize = 0;\n    let mut prime_digit_count_11: isize = 0;\n    let mut prime_digit_count_12:\
    \ isize = 0;\n    let mut prime_digit_count_13: isize = 0;\n    let mut prime_digit_count_14:\
    \ isize = 0;\n    let mut prime_digit_count_15: isize = 0;\n    let mut prime_digit_count_16:\
    \ isize = 0;\n    let mut prime_digit_count_17: isize = 0;\n    let mut prime_digit_count_18:\
    \ isize = 0;\n    let mut prime_digit_count_19: isize = 0;\n    let mut prime_digit_count_20:\
    \ isize = 0;\n    let mut prime_digit_count_21: isize = 0;\n    let mut prime_digit_count_22:\
    \ isize = 0;\n    let mut prime_digit_count_23: isize = 0;\n    let mut prime_digit_count_24:\
    \ isize = 0;\n    let mut prime_digit_count_25: isize = 0;\n    let mut prime_digit_count_26:\
    \ isize = 0;\n    let mut prime_digit_count_27: isize = 0;\n    let mut prime_digit_count_28:\
    \ isize = 0;\n    let mut prime_digit_count_29: isize = 0;\n    let mut prime_digit_count_30:\
    \ isize = 0;\n    let mut prime_digit_count_31: isize = 0;\n    let mut prime_digit_count_32:\
    \ isize = 0;\n    let mut prime_digit_count_33: isize = 0;\n    let mut prime_digit_count_34:\
    \ isize = 0;\n    let mut prime_digit_count_35: isize = 0;\n    let mut prime",
  "    let mut num: isize = 0;\n    let mut digit: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n", "    let mut prime_count =\
    \ 0;\n    let mut digits = num.chars().collect::<Vec<_>>();\n    let mut digits_len\
    \ = digits.length;\n    let mut prime_digits = vec![false; digits_len];\n    let\
    \ mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_count\
    \ = prime_digits_len;\n    let mut prime_digits_count_index = 0;\n    let mut\
    \ prime_digits_count_index2 = 0;\n    let mut prime_digits_count_index3 = 0;\n\
    \    let mut prime_digits_count_index4 = 0;\n    let mut prime_digits_count_index5\
    \ = 0;\n    let mut prime_digits_count_index6 = 0;\n    let mut prime_digits_count_index7\
    \ = 0;\n    let mut prime_digits_count_index8 = 0;\n    let mut prime_digits_count_index9\
    \ = 0;\n    let mut prime_digits_count_index10 = 0;\n    let mut prime_digits_count_index11\
    \ = 0;\n    let mut prime_digits_count_index12 = 0;\n    let mut prime_digits_count_index13\
    \ = 0;\n    let mut prime_digits_count_index14 = 0;\n    let mut prime_digits_count_index15\
    \ = 0;\n    let mut prime_digits_count_index16 = 0;\n    let mut prime_digits_count_index17\
    \ = 0;\n    let mut prime_digits_count_index18 = 0;\n    let mut prime_digits_count_index19\
    \ = 0;\n    let mut prime_digits_count_index20 = 0;\n    let mut prime_digits_count_index21\
    \ = 0;\n    let mut prime_digits_count_index22 = 0;\n    let mut prime_digits_count_index23\
    \ = 0;\n    let mut prime_digits_count_index24 = 0;\n    let mut prime_digits_count_index25\
    \ = 0;\n    let mut prime_digits_count_index26 = 0;\n    let mut prime_digits_count_index27\
    \ = 0;\n    let mut prime_digits_count_index28 = 0;\n    let mut prime_digits_count_index29\
    \ = 0;\n    let mut prime_digits_count_index30 = 0;\n    let mut prime_digits_count_index31\
    \ = 0;\n    let mut prime_digits_count_index32 = 0;\n    let mut prime_digits_count_index33\
    \ = 0;\n    let mut prime_digits_count_index34 = 0;\n    let mut prime_digits_count_index35\
    \ = 0;\n    let mut prime_digits_count_index36 = 0;\n    let mut prime_digits_count_index",
  "    let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut prime_digits: Vec<&str> = vec![];\n    let mut prime_digits_count:\
    \ isize = 0;\n    let mut prime_digits_sum: isize = 0;\n    let mut prime_digits_product:\
    \ isize = 1;\n    let mut prime_digits_product2: isize = 1;\n    let mut prime_digits_product3:\
    \ isize = 1;\n    let mut prime_digits_product4: isize = 1;\n    let mut prime_digits_product5:\
    \ isize = 1;\n    let mut prime_digits_product6: isize = 1;\n    let mut prime_digits_product7:\
    \ isize = 1;\n    let mut prime_digits_product8: isize = 1;\n    let mut prime_digits_product9:\
    \ isize = 1;\n    let mut prime_digits_product10: isize = 1;\n    let mut prime_digits_product11:\
    \ isize = 1;\n    let mut prime_digits_product12: isize = 1;\n    let mut prime_digits_product13:\
    \ isize = 1;\n    let mut prime_digits_product14: isize = 1;\n    let mut prime_digits_product15:\
    \ isize = 1;\n    let mut prime_digits_product16: isize = 1;\n    let mut prime_digits_product17:\
    \ isize = 1;\n    let mut prime_digits_product18: isize = 1;\n    let mut prime_digits_product19:\
    \ isize = 1;\n    let mut prime_digits_product20: isize = 1;\n    let mut prime_digits_product21:\
    \ isize = 1;\n    let mut prime_digits_product22: isize = 1;\n    let mut prime_digits_product23:\
    \ isize = 1;\n    let mut prime_digits_product24: isize = 1;\n    let mut prime_digits_product25:\
    \ isize = 1;\n    let mut prime_digits_product26: isize = 1;\n    let mut prime_digits_product27:\
    \ isize = 1;\n    let mut prime_digits_product28: isize = 1;\n    let mut prime_digits_product29:\
    \ isize = 1;\n    let mut prime_digits_product30: isize = 1;\n    let mut prime_digits_product31:\
    \ isize = 1;\n    let mut prime_digits_product32: isize", "    let mut num: isize\
    \ = 0;\n    let mut num_digits = num.len();\n    let mut prime_digits = false;\n\
    \    let mut prime_digits_counter = 0;\n    let mut prime_digits_counter2 = 0;\n\
    \    let mut prime_digits_counter3 = 0;\n    let mut prime_digits_counter4 = 0;\n\
    \    let mut prime_digits_counter5 = 0;\n    let mut prime_digits_counter6 = 0;\n\
    \    let mut prime_digits_counter7 = 0;\n    let mut prime_digits_counter8 = 0;\n\
    \    let mut prime_digits_counter9 = 0;\n    let mut prime_digits_counter10 =\
    \ 0;\n    let mut prime_digits_counter11 = 0;\n    let mut prime_digits_counter12\
    \ = 0;\n    let mut prime_digits_counter13 = 0;\n    let mut prime_digits_counter14\
    \ = 0;\n    let mut prime_digits_counter15 = 0;\n    let mut prime_digits_counter16\
    \ = 0;\n    let mut prime_digits_counter17 = 0;\n    let mut prime_digits_counter18\
    \ = 0;\n    let mut prime_digits_counter19 = 0;\n    let mut prime_digits_counter20\
    \ = 0;\n    let mut prime_digits_counter21 = 0;\n    let mut prime_digits_counter22\
    \ = 0;\n    let mut prime_digits_counter23 = 0;\n    let mut prime_digits_counter24\
    \ = 0;\n    let mut prime_digits_counter25 = 0;\n    let mut prime_digits_counter26\
    \ = 0;\n    let mut prime_digits_counter27 = 0;\n    let mut prime_digits_counter28\
    \ = 0;\n    let mut prime_digits_counter29 = 0;\n    let mut prime_digits_counter30\
    \ = 0;\n    let mut prime_digits_counter31 = 0;\n    let mut prime_digits_counter32\
    \ = 0;\n    let mut prime_digits_counter33 = 0;\n    let mut prime_digits_counter34\
    \ = 0;\n    let mut prime_digits_counter35 = 0;\n    let mut prime_digits_counter36\
    \ = 0;\n    let mut prime_digits_counter37 = 0;\n    let mut prime_digits_counter38\
    \ = 0;\n    let mut prime_digits_counter39 = 0;\n    let mut prime_digits_counter40\
    \ = 0;\n    let mut prime_digits_counter41 = 0;\n    let mut prime_digits_counter42\
    \ = 0;\n    let mut prime_digits_counter43 = 0;\n    let mut prime_digits_counter44\
    \ = 0;\n    let mut prime", "    let mut num: isize = 0;\n    let mut num_digits\
    \ = num.len();\n    let mut num_primes = 0;\n    let mut num_primes_digits = 0;\n\
    \    let mut num_primes_digits_primes = 0;\n    let mut num_primes_digits_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes = 0;\n\
    \    let mut num_primes_digits_primes_primes_primes_primes_primes_primes = 0;\n\
    \    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime",
  "    let mut num: isize = num.to_string().parse().unwrap();\n    let mut counter:\
    \ isize = 0;\n    let mut prime: isize = 2;\n    while prime <= num {\n      \
    \  if num % prime == 0 {\n            counter += 1;\n        }\n        prime\
    \ += 2;\n    }\n    counter", "    let mut num: isize = 0;\n    let mut digits:\
    \ Vec<isize> = num.to_chars().collect();\n    let mut prime: Vec<isize> = vec![2,\
    \ 3];\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n \
    \   let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut ", " \
    \   let mut num: isize = 0;\n    let mut digits: Vec<isize> = num.to_chars().collect();\n\
    \    for digit in digits {\n        if digit == 'A' || digit == 'B' || digit ==\
    \ 'C' || digit == 'D' || digit == 'E' || digit == 'F' {\n            num = num\
    \ * 16 + digit as isize;\n        }\n    }\n    return num;", "    let mut num:\
    \ isize = 0;\n    let mut digit: isize = 0;\n    let mut prime: isize = 0;\n \
    \   let mut prime_found: isize = 0;\n    let mut prime_found2: isize = 0;\n  \
    \  let mut prime_found3: isize = 0;\n    let mut prime_found4: isize = 0;\n  \
    \  let mut prime_found5: isize = 0;\n    let mut prime_found6: isize = 0;\n  \
    \  let mut prime_found7: isize = 0;\n    let mut prime_found8: isize = 0;\n  \
    \  let mut prime_found9: isize = 0;\n    let mut prime_found10: isize = 0;\n \
    \   let mut prime_found11: isize = 0;\n    let mut prime_found12: isize = 0;\n\
    \    let mut prime_found13: isize = 0;\n    let mut prime_found14: isize = 0;\n\
    \    let mut prime_found15: isize = 0;\n    let mut prime_found16: isize = 0;\n\
    \    let mut prime_found17: isize = 0;\n    let mut prime_found18: isize = 0;\n\
    \    let mut prime_found19: isize = 0;\n    let mut prime_found20: isize = 0;\n\
    \    let mut prime_found21: isize = 0;\n    let mut prime_found22: isize = 0;\n\
    \    let mut prime_found23: isize = 0;\n    let mut prime_found24: isize = 0;\n\
    \    let mut prime_found25: isize = 0;\n    let mut prime_found26: isize = 0;\n\
    \    let mut prime_found27: isize = 0;\n    let mut prime_found28: isize = 0;\n\
    \    let mut prime_found29: isize = 0;\n    let mut prime_found30: isize = 0;\n\
    \    let mut prime_found31: isize = 0;\n    let mut prime_found32: isize = 0;\n\
    \    let mut prime_found33: isize = 0;\n    let mut prime_found34: isize = 0;\n\
    \    let mut prime_found35: isize = 0;\n    let mut prime_found36: isize = 0;\n\
    \    let mut prime_found37: isize = 0;\n    let mut prime_found38: isize = 0;\n\
    \    let mut prime_found39: isize = 0;\n    let mut prime_found40: isize = 0;\n\
    \    let mut prime_found41: isize", "    let mut num: isize = 0;\n    let mut\
    \ digit: isize = 0;\n    let mut prime: isize = 0;\n    let mut prime_found =\
    \ false;\n    let mut prime_found2 = false;\n    let mut prime_found3 = false;\n\
    \    let mut prime_found4 = false;\n    let mut prime_found5 = false;\n    let\
    \ mut prime_found6 = false;\n    let mut prime_found7 = false;\n    let mut prime_found8\
    \ = false;\n    let mut prime_found9 = false;\n    let mut prime_found10 = false;\n\
    \    let mut prime_found11 = false;\n    let mut prime_found12 = false;\n    let\
    \ mut prime_found13 = false;\n    let mut prime_found14 = false;\n    let mut\
    \ prime_found15 = false;\n    let mut prime_found16 = false;\n    let mut prime_found17\
    \ = false;\n    let mut prime_found18 = false;\n    let mut prime_found19 = false;\n\
    \    let mut prime_found20 = false;\n    let mut prime_found21 = false;\n    let\
    \ mut prime_found22 = false;\n    let mut prime_found23 = false;\n    let mut\
    \ prime_found24 = false;\n    let mut prime_found25 = false;\n    let mut prime_found26\
    \ = false;\n    let mut prime_found27 = false;\n    let mut prime_found28 = false;\n\
    \    let mut prime_found29 = false;\n    let mut prime_found30 = false;\n    let\
    \ mut prime_found31 = false;\n    let mut prime_found32 = false;\n    let mut\
    \ prime_found33 = false;\n    let mut prime_found34 = false;\n    let mut prime_found35\
    \ = false;\n    let mut prime_found36 = false;\n    let mut prime_found37 = false;\n\
    \    let mut prime_found38 = false;\n    let mut prime_found39 = false;\n    let\
    \ mut prime_found40 = false;\n    let mut prime_found41 = false;\n    let mut\
    \ prime_found42 = false;\n    let mut prime_found43 = false;\n    let mut prime_found44\
    \ = false;\n    let mut prime_found45 = false;\n    let mut prime_found46 = false;\n\
    \    let mut prime_found47 = false;\n    let mut prime_found48 = false;\n    let\
    \ mut prime_found49 = false;\n    let mut prime_found50 = false;\n    let mut\
    \ prime_found51 = false;\n    let mut prime_found52 = false;\n    let mut prime_found53\
    \ = false;\n", "    let mut num: isize = 0;\n    let mut num_digits = num.len();\n\
    \    let mut num_primes = 0;\n    let mut num_primes_digits = 0;\n    let mut\
    \ num_primes_digits_prime = 0;\n    let mut num_primes_digits_prime_prime = 0;\n\
    \    let mut num_primes_digits_prime_prime_prime = 0;\n    let mut num_primes_digits_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime = 0;\n   \
    \ let mut num_primes_digits_prime_prime_prime_prime_prime_prime = 0;\n    let\
    \ mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime = 0;\n    let\
    \ mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n\
    \    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_primes_digits_prime_prime_prime_prime_prime_prime_prime_prime",
  "    let mut num: Vec<u8> = num.to_lowercase().chars().collect();\n    let mut num_prime:\
    \ Vec<u8> = vec![];\n    let mut num_prime_2: Vec<u8> = vec![];\n    let mut num_prime_3:\
    \ Vec<u8> = vec![];\n    let mut num_prime_4: Vec<u8> = vec![];\n    let mut num_prime_5:\
    \ Vec<u8> = vec![];\n    let mut num_prime_6: Vec<u8> = vec![];\n    let mut num_prime_7:\
    \ Vec<u8> = vec![];\n    let mut num_prime_8: Vec<u8> = vec![];\n    let mut num_prime_9:\
    \ Vec<u8> = vec![];\n    let mut num_prime_10: Vec<u8> = vec![];\n    let mut\
    \ num_prime_11: Vec<u8> = vec![];\n    let mut num_prime_12: Vec<u8> = vec![];\n\
    \    let mut num_prime_13: Vec<u8> = vec![];\n    let mut num_prime_14: Vec<u8>\
    \ = vec![];\n    let mut num_prime_15: Vec<u8> = vec![];\n    let mut num_prime_16:\
    \ Vec<u8> = vec![];\n    let mut num_prime_17: Vec<u8> = vec![];\n    let mut\
    \ num_prime_18: Vec<u8> = vec![];\n    let mut num_prime_19: Vec<u8> = vec![];\n\
    \    let mut num_prime_20: Vec<u8> = vec![];\n    let mut num_prime_21: Vec<u8>\
    \ = vec![];\n    let mut num_prime_22: Vec<u8> = vec![];\n    let mut num_prime_23:\
    \ Vec<u8> = vec![];\n    let mut num_prime_24: Vec<u8> = vec![];\n    let mut\
    \ num_prime_25: Vec<u8> = vec![];\n    let mut num_prime_26: Vec<u8> = vec![];\n\
    \    let mut num_prime_27: Vec<u8> = vec![];\n    let mut num_prime_28: Vec<u8>\
    \ = vec![];\n    let mut num_prime_29: Vec<u8> = vec![];\n    let mut num_prime_",
  "    let mut num: isize = 0;\n    let mut digit: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    let mut remainder: isize = 0;\n    let mut i: isize = 0;\n \
    \   let mut j: isize = 0;\n    let mut k: isize = 0;\n    let mut l: isize = 0;\n\
    \    let mut m: isize = 0;\n    let mut n: isize = 0;\n    let mut o: isize =\
    \ 0;\n    let mut p: isize = 0;\n    let mut q: isize = 0;\n    let mut r: isize\
    \ = 0;\n    let mut s: isize = 0;\n    let mut t: isize = 0;\n    let mut u: isize\
    \ = 0;\n    let mut v: isize = 0;\n    let mut w: isize = 0;\n    let mut x: isize\
    \ = 0;\n    let mut y: isize = 0;\n    let mut z: isize = 0;\n    let mut a: isize\
    \ = 0;\n    let mut b: isize = 0;\n    let mut c: isize = 0;\n    let mut d: isize\
    \ = 0;\n    let mut e: isize = 0;\n    let mut f: isize = 0;\n    let mut g: isize\
    \ = 0;\n    let mut h: isize = 0;\n    let mut i: isize = 0;\n    let mut j: isize\
    \ = 0;\n    let mut k: isize = 0;\n    let mut l: isize = 0;\n    let mut m: isize\
    \ = 0;\n    let mut n: isize = 0;\n    let mut o: isize = 0;\n    let mut p: isize\
    \ = 0;\n    let mut q: isize = 0;\n    let mut r: isize = 0;\n    let mut s: isize\
    \ = 0;\n    let mut t: isize = 0;\n    let mut u: isize = 0;\n    let mut v: isize\
    \ = 0;\n    let mut w: isize = 0;\n    let mut x: isize = 0;\n    let mut y: isize\
    \ = 0;\n    let mut z: isize = 0;\n    let mut a: isize = 0;\n    let mut b: isize\
    \ = 0;\n    let mut c: isize = 0;\n    let mut d: isize = 0;\n    let mut e: isize\
    \ = 0;\n    let mut f: isize = 0;\n    let mut g: isize = 0;\n    let mut h: isize\
    \ = 0;\n    let mut i: isize = 0;\n    let mut j: isize = 0;\n    let mut k: isize\
    \ = 0;\n    let mut l: isize = 0;\n    let mut m: isize = 0;\n    let mut ", " \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_primes = 0;\n    let mut num_primes_digits = 2;\n    let mut num_primes_digits_pow\
    \ = 1;\n    let mut num_primes_digits_pow_2 = 1;\n    let mut num_primes_digits_pow_3\
    \ = 1;\n    let mut num_primes_digits_pow_4 = 1;\n    let mut num_primes_digits_pow_5\
    \ = 1;\n    let mut num_primes_digits_pow_6 = 1;\n    let mut num_primes_digits_pow_7\
    \ = 1;\n    let mut num_primes_digits_pow_8 = 1;\n    let mut num_primes_digits_pow_9\
    \ = 1;\n    let mut num_primes_digits_pow_10 = 1;\n    let mut num_primes_digits_pow_11\
    \ = 1;\n    let mut num_primes_digits_pow_12 = 1;\n    let mut num_primes_digits_pow_13\
    \ = 1;\n    let mut num_primes_digits_pow_14 = 1;\n    let mut num_primes_digits_pow_15\
    \ = 1;\n    let mut num_primes_digits_pow_16 = 1;\n    let mut num_primes_digits_pow_17\
    \ = 1;\n    let mut num_primes_digits_pow_18 = 1;\n    let mut num_primes_digits_pow_19\
    \ = 1;\n    let mut num_primes_digits_pow_20 = 1;\n    let mut num_primes_digits_pow_21\
    \ = 1;\n    let mut num_primes_digits_pow_22 = 1;\n    let mut num_primes_digits_pow_23\
    \ = 1;\n    let mut num_primes_digits_pow_24 = 1;\n    let mut num_primes_digits_pow_25\
    \ = 1;\n    let mut num_primes_digits_pow_26 = 1;\n    let mut num_primes_digits_pow_27\
    \ = 1;\n    let mut num_primes_digits_pow_28 = 1;\n    let mut num_primes_digits_pow_29\
    \ = 1;\n    let mut num_primes_digits_pow_30 = 1;\n    let mut num_primes_digits_pow_31\
    \ = 1;\n    let mut num_primes_digits_pow_32 = 1;\n    let mut num_primes_digits_pow_33\
    \ = 1;\n    let mut num_primes_digits_pow_34 = 1;\n    let mut num_primes_digits_pow_35\
    \ = 1;\n    let mut num_primes_digits_pow_36 = 1;\n    let mut num_primes_digits_pow_37\
    \ = 1;\n    let mut num_primes_digits_pow_38 = 1;\n    let mut num_primes_digits_pow_39\
    \ = 1;\n    let mut num_primes_digits_", "    let mut num: isize = num.to_digits().parse().unwrap();\n\
    \    let mut prime_digits: Vec<isize> = vec![2, 3, 5, 7, 11, 13, 17, 19];\n  \
    \  let mut prime_digits_count: isize = 0;\n    let mut prime_digits_sum: isize\
    \ = 0;\n    let mut prime_digits_product: isize = 1;\n    let mut prime_digits_product2:\
    \ isize = 1;\n    let mut prime_digits_product3: isize = 1;\n    let mut prime_digits_product4:\
    \ isize = 1;\n    let mut prime_digits_product5: isize = 1;\n    let mut prime_digits_product6:\
    \ isize = 1;\n    let mut prime_digits_product7: isize = 1;\n    let mut prime_digits_product8:\
    \ isize = 1;\n    let mut prime_digits_product9: isize = 1;\n    let mut prime_digits_product10:\
    \ isize = 1;\n    let mut prime_digits_product11: isize = 1;\n    let mut prime_digits_product12:\
    \ isize = 1;\n    let mut prime_digits_product13: isize = 1;\n    let mut prime_digits_product14:\
    \ isize = 1;\n    let mut prime_digits_product15: isize = 1;\n    let mut prime_digits_product16:\
    \ isize = 1;\n    let mut prime_digits_product17: isize = 1;\n    let mut prime_digits_product18:\
    \ isize = 1;\n    let mut prime_digits_product19: isize = 1;\n    let mut prime_digits_product20:\
    \ isize = 1;\n    let mut prime_digits_product21: isize = 1;\n    let mut prime_digits_product22:\
    \ isize = 1;\n    let mut prime_digits_product23: isize = 1;\n    let mut prime_digits_product24:\
    \ isize = 1;\n    let mut prime_digits_product25: isize = 1;\n    let mut prime_digits_product26:\
    \ isize = 1;\n    let mut prime_digits_product27: isize = 1;\n    let mut prime_digits_product28:\
    \ isize = 1;\n    let mut prime_digits_product29: isize = 1;\n    let mut prime_digits_product30:\
    \ isize = 1;\n    let mut prime_digits_product31: isize = 1;\n    let mut prime_digits_product32:\
    \ isize = 1;\n    let mut prime", "    let mut prime_count = 0;\n    let mut prime_digits\
    \ = vec![];\n    let mut digits = num.chars().collect::<Vec<_>>();\n    let mut\
    \ digits_len = digits.length;\n    let mut digits_index = 0;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n    let mut prime_digits_index\
    \ = 0;\n    let mut prime_digits_len = prime_digits.length;\n", "    let mut num:\
    \ isize = 0;\n    let mut num_digits = num.len();\n    let mut num_digits_div:\
    \ isize = 0;\n    let mut num_digits_div_2: isize = 0;\n    let mut num_digits_div_3:\
    \ isize = 0;\n    let mut num_digits_div_4: isize = 0;\n    let mut num_digits_div_5:\
    \ isize = 0;\n    let mut num_digits_div_6: isize = 0;\n    let mut num_digits_div_7:\
    \ isize = 0;\n    let mut num_digits_div_8: isize = 0;\n    let mut num_digits_div_9:\
    \ isize = 0;\n    let mut num_digits_div_10: isize = 0;\n    let mut num_digits_div_11:\
    \ isize = 0;\n    let mut num_digits_div_12: isize = 0;\n    let mut num_digits_div_13:\
    \ isize = 0;\n    let mut num_digits_div_14: isize = 0;\n    let mut num_digits_div_15:\
    \ isize = 0;\n    let mut num_digits_div_16: isize = 0;\n    let mut num_digits_div_17:\
    \ isize = 0;\n    let mut num_digits_div_18: isize = 0;\n    let mut num_digits_div_19:\
    \ isize = 0;\n    let mut num_digits_div_20: isize = 0;\n    let mut num_digits_div_21:\
    \ isize = 0;\n    let mut num_digits_div_22: isize = 0;\n    let mut num_digits_div_23:\
    \ isize = 0;\n    let mut num_digits_div_24: isize = 0;\n    let mut num_digits_div_25:\
    \ isize = 0;\n    let mut num_digits_div_26: isize = 0;\n    let mut num_digits_div_27:\
    \ isize = 0;\n    let mut num_digits_div_28: isize = 0;\n    let mut num_digits_div_29:\
    \ isize = 0;\n    let mut num_digits_div_30: isize = 0;\n    let mut num_digits_div_31:\
    \ isize = 0;\n    let mut num_digits_div_32: isize = 0;\n    let mut num_digits_div_33:\
    \ isize = 0;\n    let mut num_digits_div_34: isize = 0;\n    let mut num_digits_div_35:\
    \ isize = 0;\n    let mut num_digits_div_36: isize = 0;\n    let mut num_digits_div_37:\
    \ isize = 0;\n    let mut num_digits_div_38: isize = 0;\n    let mut ", "    let\
    \ mut num: isize = 0;\n    let mut num_str: String = num.to_string();\n    let\
    \ mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str", "    let mut num: isize =\
    \ 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\"];\n    let mut\
    \ primes_count: usize = 0;\n    let mut primes_count_2: usize = 0;\n    let mut\
    \ primes_count_3: usize = 0;\n    let mut primes_count_4: usize = 0;\n    let\
    \ mut primes_count_5: usize = 0;\n    let mut primes_count_6: usize = 0;\n   \
    \ let mut primes_count_7: usize = 0;\n    let mut primes_count_8: usize = 0;\n\
    \    let mut primes_count_9: usize = 0;\n    let mut primes_count_10: usize =\
    \ 0;\n    let mut primes_count_11: usize = 0;\n    let mut primes_count_12: usize\
    \ = 0;\n    let mut primes_count_13: usize = 0;\n    let mut primes_count_14:\
    \ usize = 0;\n    let mut primes_count_15: usize = 0;\n    let mut primes_count_16:\
    \ usize = 0;\n    let mut primes_count_17: usize = 0;\n    let mut primes_count_18:\
    \ usize = 0;\n    let mut primes_count_19: usize = 0;\n    let mut primes_count_20:\
    \ usize = 0;\n    let mut primes_count_21: usize = 0;\n    let mut primes_count_22:\
    \ usize = 0;\n    let mut primes_count_23: usize = 0;\n    let mut primes_count_24:\
    \ usize = 0;\n    let mut primes_count_25: usize = 0;\n    let mut primes_count_26:\
    \ usize = 0;\n    let mut primes_count_27: usize = 0;\n    let mut primes_count_28:\
    \ usize = 0;\n    let mut primes_count_29: usize = 0;\n    let mut primes_count_30:\
    \ usize = 0;\n    let mut primes_count_31: usize = 0;\n    let mut primes_count_32:\
    \ usize = 0;\n    let mut primes_count_33: usize = 0;\n    let mut primes_count_34:\
    \ usize = 0;\n    let mut primes_count_35: usize = 0;\n    let mut primes_count_36:\
    \ usize = 0;\n    let mut primes_count_37: usize = 0;\n    let mut primes_count_38:\
    \ usize = 0;\n    let mut primes_count_39: usize = 0;\n", "    let mut num: isize\
    \ = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut prime: Vec<&str> = vec![];\n    let mut prime_digits: Vec<&str> =\
    \ vec![];\n    let mut prime_digits_count: usize = 0;\n    let mut prime_digits_count_max:\
    \ usize = 10;\n    let mut prime_digits_count_min: usize = 2;\n    let mut prime_digits_count_step:\
    \ usize = 2;\n    let mut prime_digits_count_max2: usize = 10;\n    let mut prime_digits_count_min2:\
    \ usize = 2;\n    let mut prime_digits_count_step2: usize = 2;\n    let mut prime_digits_count_max3:\
    \ usize = 10;\n    let mut prime_digits_count_min3: usize = 2;\n    let mut prime_digits_count_step3:\
    \ usize = 2;\n    let mut prime_digits_count_max4: usize = 10;\n    let mut prime_digits_count_min4:\
    \ usize = 2;\n    let mut prime_digits_count_step4: usize = 2;\n    let mut prime_digits_count_max5:\
    \ usize = 10;\n    let mut prime_digits_count_min5: usize = 2;\n    let mut prime_digits_count_step5:\
    \ usize = 2;\n    let mut prime_digits_count_max6: usize = 10;\n    let mut prime_digits_count_min6:\
    \ usize = 2;\n    let mut prime_digits_count_step6: usize = 2;\n    let mut prime_digits_count_max7:\
    \ usize = 10;\n    let mut prime_digits_count_min7: usize = 2;\n    let mut prime_digits_count_step7:\
    \ usize = 2;\n    let mut prime_digits_count_max8: usize = 10;\n    let mut prime_digits_count_min8:\
    \ usize = 2;\n    let mut prime_digits_count_step8: usize = 2;\n    let mut prime_digits_count_max9:\
    \ usize = 10;\n    let mut prime_digits_count_min9: usize = 2;\n    let mut prime_digits_count_step9:\
    \ usize = 2;\n    let mut prime_digits_count_max10: usize = 10;\n    let mut prime_digits_count_min10:\
    \ usize = 2;\n    let mut prime_digits_count_step10: usize = 2;\n    let mut prime",
  "    let mut prime_count = 0;\n    let mut digits = num.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut prime_digits = vec![false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, ", "    let mut num:\
    \ isize = 0;\n    let mut num_str: String = num.to_string();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str", "    let mut num: isize = 0;\n    let mut digits: Vec<&str>\
    \ = num.to_string().chars().collect();\n    let mut primes: Vec<&str> = vec![];\n\
    \    let mut prime: isize = 0;\n    let mut prime_found = false;\n    let mut\
    \ prime_found2 = false;\n    let mut prime_found3 = false;\n    let mut prime_found4\
    \ = false;\n    let mut prime_found5 = false;\n    let mut prime_found6 = false;\n\
    \    let mut prime_found7 = false;\n    let mut prime_found8 = false;\n    let\
    \ mut prime_found9 = false;\n    let mut prime_found10 = false;\n    let mut prime_found11\
    \ = false;\n    let mut prime_found12 = false;\n    let mut prime_found13 = false;\n\
    \    let mut prime_found14 = false;\n    let mut prime_found15 = false;\n    let\
    \ mut prime_found16 = false;\n    let mut prime_found17 = false;\n    let mut\
    \ prime_found18 = false;\n    let mut prime_found19 = false;\n    let mut prime_found20\
    \ = false;\n    let mut prime_found21 = false;\n    let mut prime_found22 = false;\n\
    \    let mut prime_found23 = false;\n    let mut prime_found24 = false;\n    let\
    \ mut prime_found25 = false;\n    let mut prime_found26 = false;\n    let mut\
    \ prime_found27 = false;\n    let mut prime_found28 = false;\n    let mut prime_found29\
    \ = false;\n    let mut prime_found30 = false;\n    let mut prime_found31 = false;\n\
    \    let mut prime_found32 = false;\n    let mut prime_found33 = false;\n    let\
    \ mut prime_found34 = false;\n    let mut prime_found35 = false;\n    let mut\
    \ prime_found36 = false;\n    let mut prime_found37 = false;\n    let mut prime_found38\
    \ = false;\n    let mut prime_found39 = false;\n    let mut prime_found40 = false;\n\
    \    let mut prime_found41 = false;\n    let mut prime_found42 = false;\n    let\
    \ mut prime_found43 = false;\n    let mut prime_found44 = false;\n    let mut\
    \ prime_found45 = false;\n    let mut prime_found46 = false;\n    let mut prime_found47\
    \ = false;\n    let mut prime_found48 = false;\n    let mut prime_found49 = false;\n\
    \    let mut prime_found50 = false;\n    let mut prime", "    let mut num: isize\
    \ = 0;\n    let mut num_digits = num.len();\n    let mut prime_digits = 2;\n \
    \   let mut prime_digits_counter = 1;\n    let mut prime_digits_counter_2 = 0;\n\
    \    let mut prime_digits_counter_3 = 0;\n    let mut prime_digits_counter_4 =\
    \ 0;\n    let mut prime_digits_counter_5 = 0;\n    let mut prime_digits_counter_6\
    \ = 0;\n    let mut prime_digits_counter_7 = 0;\n    let mut prime_digits_counter_8\
    \ = 0;\n    let mut prime_digits_counter_9 = 0;\n    let mut prime_digits_counter_10\
    \ = 0;\n    let mut prime_digits_counter_11 = 0;\n    let mut prime_digits_counter_12\
    \ = 0;\n    let mut prime_digits_counter_13 = 0;\n    let mut prime_digits_counter_14\
    \ = 0;\n    let mut prime_digits_counter_15 = 0;\n    let mut prime_digits_counter_16\
    \ = 0;\n    let mut prime_digits_counter_17 = 0;\n    let mut prime_digits_counter_18\
    \ = 0;\n    let mut prime_digits_counter_19 = 0;\n    let mut prime_digits_counter_20\
    \ = 0;\n    let mut prime_digits_counter_21 = 0;\n    let mut prime_digits_counter_22\
    \ = 0;\n    let mut prime_digits_counter_23 = 0;\n    let mut prime_digits_counter_24\
    \ = 0;\n    let mut prime_digits_counter_25 = 0;\n    let mut prime_digits_counter_26\
    \ = 0;\n    let mut prime_digits_counter_27 = 0;\n    let mut prime_digits_counter_28\
    \ = 0;\n    let mut prime_digits_counter_29 = 0;\n    let mut prime_digits_counter_30\
    \ = 0;\n    let mut prime_digits_counter_31 = 0;\n    let mut prime_digits_counter_32\
    \ = 0;\n    let mut prime_digits_counter_33 = 0;\n    let mut prime_digits_counter_34\
    \ = 0;\n    let mut prime_digits_counter_35 = 0;\n    let mut prime_digits_counter_36\
    \ = 0;\n    let mut prime_digits_counter_37 = 0;\n    let mut prime_digits_counter_38\
    \ = 0;\n    let mut prime_digits_counter_39 = 0;\n    let mut prime_digits_counter_40\
    \ = 0;\n    let mut prime_digits_counter_41 = 0;\n    let mut prime_digits_counter_42\
    \ = 0;\n    let mut prime_digits_counter_43 = 0;\n    let mut prime_digits_counter_44\
    \ = 0;\n    let mut ", "    let mut num: isize = 0;\n    let mut digits: Vec<&str>\
    \ = num.to_lowercase().chars().collect();\n    let mut prime: Vec<&str> = vec![\"\
    \".to_string()];\n    let mut prime_digits: Vec<&str> = vec![\"\".to_string()];\n\
    \    let mut prime_digits_count: usize = 0;\n    let mut prime_digits_count_max:\
    \ usize = 0;\n    let mut prime_digits_count_min: usize = 0;\n    let mut prime_digits_count_max_min:\
    \ usize = 0;\n    let mut prime_digits_count_min_max: usize = 0;\n    let mut\
    \ prime_digits_count_min_max_min: usize = 0;\n    let mut prime_digits_count_min_max_min_max:\
    \ usize = 0;\n    let mut prime_digits_count_min_max_min_max_min: usize = 0;\n\
    \    let mut prime_digits_count_min_max_min_max_min_max: usize = 0;\n    let mut\
    \ prime_digits_count_min_max_min_max_min_max_min: usize = 0;\n    let mut prime_digits_count_min_max_min_max_min_max_min_max:\
    \ usize = 0;\n    let mut prime_digits_count_min_max_min_max_min_max_min_max_min:\
    \ usize = 0;\n    let mut prime_digits_count_min_max_min_max_min_max_min_max_min_max:\
    \ usize = 0;\n    let mut prime_digits_count_min_max_min_max_min_max_min_max_min_max_min:\
    \ usize = 0;\n    let mut prime_digits_count_min_max_min_max_min_max_min_max_min_max_min_max:\
    \ usize = 0;\n    let mut prime_digits_count_min_max_min_max_min_max_min_max_min_max_min_max_min:\
    \ usize = 0;\n    let mut prime_digits_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max:\
    \ usize = 0;\n    let mut prime_digits_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min:\
    \ usize = 0;\n    let mut prime_digits_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min:\
    \ usize = 0;\n    let mut prime_digits_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max:\
    \ usize = 0;\n    let mut prime_digits_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min:\
    \ usize = 0;\n    let mu", "    let mut num: isize = num.to_digits().unwrap();\n\
    \    let mut prime_count: isize = 0;\n    let mut prime_digit: isize = 2;\n  \
    \  let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count: isize\
    \ = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime", " \
    \   let mut num: isize = num.len();\n    let mut prime: isize = 0;\n    let mut\
    \ prime_found = false;\n    let mut prime_found2 = false;\n    let mut prime_found3\
    \ = false;\n    let mut prime_found4 = false;\n    let mut prime_found5 = false;\n\
    \    let mut prime_found6 = false;\n    let mut prime_found7 = false;\n    let\
    \ mut prime_found8 = false;\n    let mut prime_found9 = false;\n    let mut prime_found10\
    \ = false;\n    let mut prime_found11 = false;\n    let mut prime_found12 = false;\n\
    \    let mut prime_found13 = false;\n    let mut prime_found14 = false;\n    let\
    \ mut prime_found15 = false;\n    let mut prime_found16 = false;\n    let mut\
    \ prime_found17 = false;\n    let mut prime_found18 = false;\n    let mut prime_found19\
    \ = false;\n    let mut prime_found20 = false;\n    let mut prime_found21 = false;\n\
    \    let mut prime_found22 = false;\n    let mut prime_found23 = false;\n    let\
    \ mut prime_found24 = false;\n    let mut prime_found25 = false;\n    let mut\
    \ prime_found26 = false;\n    let mut prime_found27 = false;\n    let mut prime_found28\
    \ = false;\n    let mut prime_found29 = false;\n    let mut prime_found30 = false;\n\
    \    let mut prime_found31 = false;\n    let mut prime_found32 = false;\n    let\
    \ mut prime_found33 = false;\n    let mut prime_found34 = false;\n    let mut\
    \ prime_found35 = false;\n    let mut prime_found36 = false;\n    let mut prime_found37\
    \ = false;\n    let mut prime_found38 = false;\n    let mut prime_found39 = false;\n\
    \    let mut prime_found40 = false;\n    let mut prime_found41 = false;\n    let\
    \ mut prime_found42 = false;\n    let mut prime_found43 = false;\n    let mut\
    \ prime_found44 = false;\n    let mut prime_found45 = false;\n    let mut prime_found46\
    \ = false;\n    let mut prime_found47 = false;\n    let mut prime_found48 = false;\n\
    \    let mut prime_found49 = false;\n    let mut prime_found50 = false;\n    let\
    \ mut prime_found51 = false;\n    let mut prime_found52 = false;\n    let mut\
    \ prime_found53 = false;\n    let mut prime_found", "    let mut num: isize =\
    \ 0;\n    let mut digit: isize = 0;\n    let mut prime: isize = 0;\n    let mut\
    \ prime_found = false;\n    let mut prime_found2 = false;\n    let mut prime_found3\
    \ = false;\n    let mut prime_found4 = false;\n    let mut prime_found5 = false;\n\
    \    let mut prime_found6 = false;\n    let mut prime_found7 = false;\n    let\
    \ mut prime_found8 = false;\n    let mut prime_found9 = false;\n    let mut prime_found10\
    \ = false;\n    let mut prime_found11 = false;\n    let mut prime_found12 = false;\n\
    \    let mut prime_found13 = false;\n    let mut prime_found14 = false;\n    let\
    \ mut prime_found15 = false;\n    let mut prime_found16 = false;\n    let mut\
    \ prime_found17 = false;\n    let mut prime_found18 = false;\n    let mut prime_found19\
    \ = false;\n    let mut prime_found20 = false;\n    let mut prime_found21 = false;\n\
    \    let mut prime_found22 = false;\n    let mut prime_found23 = false;\n    let\
    \ mut prime_found24 = false;\n    let mut prime_found25 = false;\n    let mut\
    \ prime_found26 = false;\n    let mut prime_found27 = false;\n    let mut prime_found28\
    \ = false;\n    let mut prime_found29 = false;\n    let mut prime_found30 = false;\n\
    \    let mut prime_found31 = false;\n    let mut prime_found32 = false;\n    let\
    \ mut prime_found33 = false;\n    let mut prime_found34 = false;\n    let mut\
    \ prime_found35 = false;\n    let mut prime_found36 = false;\n    let mut prime_found37\
    \ = false;\n    let mut prime_found38 = false;\n    let mut prime_found39 = false;\n\
    \    let mut prime_found40 = false;\n    let mut prime_found41 = false;\n    let\
    \ mut prime_found42 = false;\n    let mut prime_found43 = false;\n    let mut\
    \ prime_found44 = false;\n    let mut prime_found45 = false;\n    let mut prime_found46\
    \ = false;\n    let mut prime_found47 = false;\n    let mut prime_found48 = false;\n\
    \    let mut prime_found49 = false;\n    let mut prime_found50 = false;\n    let\
    \ mut prime_found51 = false;\n    let mut prime_found52 = false;\n    let mut\
    \ prime_found53 = false;\n", "    let mut num: isize = 0;\n    let mut num_digits\
    \ = num.len();\n    let mut num_primes = 0;\n    let mut num_primes_digits = 0;\n\
    \    let mut num_primes_digits_primes = 0;\n    let mut num_primes_digits_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes = 0;\n\
    \    let mut num_primes_digits_primes_primes_primes_primes_primes_primes = 0;\n\
    \    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime",
  "    let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut prime: Vec<&str> = vec![\"\".to_string()];\n    let mut prime_digits:\
    \ Vec<&str> = vec![\"\".to_string()];\n    let mut prime_digits_count: Vec<isize>\
    \ = vec![0; 10];\n    let mut prime_digits_count_index: Vec<isize> = vec![0; 10];\n\
    \    let mut prime_digits_count_index: Vec<isize> = vec![0; 10];\n    let mut\
    \ prime_digits_count_index: Vec<isize> = vec![0; 10];\n    let mut prime_digits_count_index:\
    \ Vec<isize> = vec![0; 10];\n    let mut prime_digits_count_index: Vec<isize>\
    \ = vec![0; 10];\n    let mut prime_digits_count_index: Vec<isize> = vec![0; 10];\n\
    \    let mut prime_digits_count_index: Vec<isize> = vec![0; 10];\n    let mut\
    \ prime_digits_count_index: Vec<isize> = vec![0; 10];\n    let mut prime_digits_count_index:\
    \ Vec<isize> = vec![0; 10];\n    let mut prime_digits_count_index: Vec<isize>\
    \ = vec![0; 10];\n    let mut prime_digits_count_index: Vec<isize> = vec![0; 10];\n\
    \    let mut prime_digits_count_index: Vec<isize> = vec![0; 10];\n    let mut\
    \ prime_digits_count_index: Vec<isize> = vec![0; 10];\n    let mut prime_digits_count_index:\
    \ Vec<isize> = vec![0; 10];\n    let mut prime_digits_count_index: Vec<isize>\
    \ = vec![0; 10];\n    let mut prime_digits_count_index: Vec<isize> = vec![0; 10];\n\
    \    let mut prime_digits_count_index: Vec<isize> = vec![0; 10];\n    let mut\
    \ prime_digits_count_index: Vec<isize> = vec![0; 10];\n    let mut prime_digits_count_index:\
    \ Vec<isize> = vec![0; 10];\n    let mut prime_digits_count_index: Vec<isize>\
    \ = vec![0; 10];\n    let mut prime_", "    let mut num: isize = 0;\n    let mut\
    \ digits: Vec<&str> = num.to_string().chars().collect();\n    let mut primes:\
    \ Vec<&str> = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_count:\
    \ isize = 0;\n    \n    for digit in digits {\n        if primes.contains(&digit)\
    \ {\n            primes_count += 1;\n        }\n    }\n    \n    return primes_count;",
  "    let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut num_primes\
    \ = 0;\n    let mut num_primes_digits = 0;\n    let mut num_primes_digits_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes = 0;\n    let\
    \ mut num_primes_digits_primes_primes_primes_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime",
  "    let mut num: isize = num.to_string().parse().unwrap();\n    let mut prime_count:\
    \ isize = 0;\n    let mut prime_digit: isize = 2;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mu", "    let mut num: isize = 0;\n    let mut num_str:\
    \ String = num.to_string();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str", "    let mut\
    \ num: Vec<u8> = num.to_lowercase().chars().collect();\n    let mut prime_count:\
    \ isize = 0;\n    let mut prime_digit: u8 = 0;\n    let mut prime_digit_count:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ u8 = 0;\n    let mut prime_digit_value_count: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime_digit_value_position:\
    \ isize = 0;\n    let mut prime_digit_value_length: isize = 0;\n    let mut prime",
  "    let mut prime_count = vec![false; 26];\n    let mut prime_digits = vec![0;\
    \ 26];\n    let mut prime_digits_count = vec![0; 26];\n    let mut prime_digits_count_in_hex\
    \ = vec![0; 26];\n    let mut prime_digits_count_in_decimal = vec![0; 26];\n \
    \   let mut prime_digits_count_in_octal = vec![0; 26];\n    let mut prime_digits_count_in_binary\
    \ = vec![0; 26];\n    let mut prime_digits_count_in_hex_string = vec![0; 26];\n\
    \    let mut prime_digits_count_in_decimal_string = vec![0; 26];\n    let mut\
    \ prime_digits_count_in_octal_string = vec![0; 26];\n    let mut prime_digits_count_in_binary_string\
    \ = vec![0; 26];\n    let mut prime_digits_count_in_hex_string_2 = vec![0; 26];\n\
    \    let mut prime_digits_count_in_decimal_string_2 = vec![0; 26];\n    let mut\
    \ prime_digits_count_in_octal_string_2 = vec![0; 26];\n    let mut prime_digits_count_in_binary_string_2\
    \ = vec![0; 26];\n    let mut prime_digits_count_in_hex_string_3 = vec![0; 26];\n\
    \    let mut prime_digits_count_in_decimal_string_3 = vec![0; 26];\n    let mut\
    \ prime_digits_count_in_octal_string_3 = vec![0; 26];\n    let mut prime_digits_count_in_binary_string_3\
    \ = vec![0; 26];\n    let mut prime_digits_count_in_hex_string_4 = vec![0; 26];\n\
    \    let mut prime_digits_count_in_decimal_string_4 = vec![0; 26];\n    let mut\
    \ prime_digits_count_in_octal_string_4 = vec![0; 26];\n    let mut prime_digits_count_in_binary_string_4\
    \ = vec![0; 26];\n    let mut prime_digits_count_in_hex_string_5 = vec![0; 26];\n\
    \    let mut prime_digits_count_in_decimal_string_5 = vec![0; 26];\n    let mut\
    \ prime_digits_count_in_octal_string_5 = vec![0; 26];\n    let mut prime_digits_count_in_binary_string_5\
    \ = vec![0; 26];\n    let mut prime_digits_count_in_hex_string_6 = vec![0; 26];\n\
    \    let mut prime_digits_count_in_decimal_string_6 = vec![0; 26];\n    let mut\
    \ prime_digit", "    let mut num: isize = num.to_digits().parse().unwrap();\n\
    \    let mut prime_digits = vec![];\n    let mut prime_digits_count = vec![];\n\
    \    let mut prime_digits_count_max = vec![];\n    let mut prime_digits_count_min\
    \ = vec![];\n    let mut prime_digits_count_max = vec![];\n    let mut prime_digits_count_min\
    \ = vec![];\n    let mut prime_digits_count_max = vec![];\n    let mut prime_digits_count_min\
    \ = vec![];\n    let mut prime_digits_count_max = vec![];\n    let mut prime_digits_count_min\
    \ = vec![];\n    let mut prime_digits_count_max = vec![];\n    let mut prime_digits_count_min\
    \ = vec![];\n    let mut prime_digits_count_max = vec![];\n    let mut prime_digits_count_min\
    \ = vec![];\n    let mut prime_digits_count_max = vec![];\n    let mut prime_digits_count_min\
    \ = vec![];\n    let mut prime_digits_count_max = vec![];\n    let mut prime_digits_count_min\
    \ = vec![];\n    let mut prime_digits_count_max = vec![];\n    let mut prime_digits_count_min\
    \ = vec![];\n    let mut prime_digits_count_max = vec![];\n    let mut prime_digits_count_min\
    \ = vec![];\n    let mut prime_digits_count_max = vec![];\n    let mut prime_digits_count_min\
    \ = vec![];\n    let mut prime_digits_count_max = vec![];\n    let mut prime_digits_count_min\
    \ = vec![];\n    let mut prime_digits_count_max = vec![];\n    let mut prime_digits_count_min\
    \ = vec![];\n    let mut prime_digits_count_max = vec![];\n    let mut prime_digits_count_min\
    \ = vec![];\n    let mut prime_digits_count_max = vec![];\n    let mut prime_digits_count_min\
    \ = vec![];\n    let mut prime_digits_count_max = vec![];\n    let mut prime_digits_count_min\
    \ = vec![];\n    let mut prime_digits_count_max = vec![];\n    let mut prime_digits_count_min\
    \ = vec![];\n    let mut prime_digits_count_max = vec![];\n    let mut prime_digits_count_min\
    \ = vec![];\n    let mut prime_", "    let mut num: Vec<u8> = num.to_lowercase().chars().collect();\n\
    \    let mut prime_count = 0;\n    let mut prime_digits = vec![2, 3];\n    let\
    \ mut prime_digits_counter = vec![2, 3];\n    let mut prime_digits_counter2 =\
    \ vec![2, 3];\n    let mut prime_digits_counter3 = vec![2, 3];\n    let mut prime_digits_counter4\
    \ = vec![2, 3];\n    let mut prime_digits_counter5 = vec![2, 3];\n    let mut\
    \ prime_digits_counter6 = vec![2, 3];\n    let mut prime_digits_counter7 = vec![2,\
    \ 3];\n    let mut prime_digits_counter8 = vec![2, 3];\n    let mut prime_digits_counter9\
    \ = vec![2, 3];\n    let mut prime_digits_counter10 = vec![2, 3];\n    let mut\
    \ prime_digits_counter11 = vec![2, 3];\n    let mut prime_digits_counter12 = vec![2,\
    \ 3];\n    let mut prime_digits_counter13 = vec![2, 3];\n    let mut prime_digits_counter14\
    \ = vec![2, 3];\n    let mut prime_digits_counter15 = vec![2, 3];\n    let mut\
    \ prime_digits_counter16 = vec![2, 3];\n    let mut prime_digits_counter17 = vec![2,\
    \ 3];\n    let mut prime_digits_counter18 = vec![2, 3];\n    let mut prime_digits_counter19\
    \ = vec![2, 3];\n    let mut prime_digits_counter20 = vec![2, 3];\n    let mut\
    \ prime_digits_counter21 = vec![2, 3];\n    let mut prime_digits_counter22 = vec![2,\
    \ 3];\n    let mut prime_digits_counter23 = vec![2, 3];\n    let mut prime_digits_counter24\
    \ = vec![2, 3];\n    let mut prime_digits_counter25 = vec![2, 3];\n    let mut\
    \ prime_digits_counter26 = vec![2, 3];\n    let mut prime_digits_counter27 = vec![2,\
    \ 3];\n    let mut prime_digits_counter28 = vec![2, 3];\n    let mut prime_digits_counter29\
    \ = vec![2, 3];\n    let mut prime_digits_counter30 = vec![2, 3];\n    let mut\
    \ prime_", "    let mut num: isize = num.len();\n    let mut prime: isize = 0;\n\
    \    let mut prime_digit: isize = 0;\n    let mut prime_digit_count: isize = 0;\n\
    \    let mut prime_digit_count_2: isize = 0;\n    let mut prime_digit_count_3:\
    \ isize = 0;\n    let mut prime_digit_count_4: isize = 0;\n    let mut prime_digit_count_5:\
    \ isize = 0;\n    let mut prime_digit_count_6: isize = 0;\n    let mut prime_digit_count_7:\
    \ isize = 0;\n    let mut prime_digit_count_8: isize = 0;\n    let mut prime_digit_count_9:\
    \ isize = 0;\n    let mut prime_digit_count_10: isize = 0;\n    let mut prime_digit_count_11:\
    \ isize = 0;\n    let mut prime_digit_count_12: isize = 0;\n    let mut prime_digit_count_13:\
    \ isize = 0;\n    let mut prime_digit_count_14: isize = 0;\n    let mut prime_digit_count_15:\
    \ isize = 0;\n    let mut prime_digit_count_16: isize = 0;\n    let mut prime_digit_count_17:\
    \ isize = 0;\n    let mut prime_digit_count_18: isize = 0;\n    let mut prime_digit_count_19:\
    \ isize = 0;\n    let mut prime_digit_count_20: isize = 0;\n    let mut prime_digit_count_21:\
    \ isize = 0;\n    let mut prime_digit_count_22: isize = 0;\n    let mut prime_digit_count_23:\
    \ isize = 0;\n    let mut prime_digit_count_24: isize = 0;\n    let mut prime_digit_count_25:\
    \ isize = 0;\n    let mut prime_digit_count_26: isize = 0;\n    let mut prime_digit_count_27:\
    \ isize = 0;\n    let mut prime_digit_count_28: isize = 0;\n    let mut prime_digit_count_29:\
    \ isize = 0;\n    let mut prime_digit_count_30: isize = 0;\n    let mut prime_digit_count_31:\
    \ isize = 0;\n    let mut prime_digit_count_32: isize = 0;\n    let mut prime_digit_count_33:\
    \ isize = 0;\n    let mut prime_digit_count_34: isize = 0;\n    let mut prime_digit_count_35:\
    \ isize = 0;\n    let mut prime_digit_count_36: isize = 0;\n    let mut prime_digit_count_37:\
    \ isize = 0;\n    let mut prime_", "    let mut prime_count = 0;\n    let mut\
    \ prime_digits = vec![2, 3, 4, 5, 7, 11, 13, 17, 19];\n    let mut digits = num.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut digits_len = digits.length;\n    let mut prime_digits_len = prime_digits.length;\n\
    \    let mut prime_digit_index = 0;\n    let mut prime_digit_index2 = 0;\n   \
    \ let mut prime_digit_index3 = 0;\n    let mut prime_digit_index4 = 0;\n    let\
    \ mut prime_digit_index5 = 0;\n    let mut prime_digit_index6 = 0;\n    let mut\
    \ prime_digit_index7 = 0;\n    let mut prime_digit_index8 = 0;\n    let mut prime_digit_index9\
    \ = 0;\n    let mut prime_digit_index10 = 0;\n    let mut prime_digit_index11\
    \ = 0;\n    let mut prime_digit_index12 = 0;\n    let mut prime_digit_index13\
    \ = 0;\n    let mut prime_digit_index14 = 0;\n    let mut prime_digit_index15\
    \ = 0;\n    let mut prime_digit_index16 = 0;\n    let mut prime_digit_index17\
    \ = 0;\n    let mut prime_digit_index18 = 0;\n    let mut prime_digit_index19\
    \ = 0;\n    let mut prime_digit_index20 = 0;\n    let mut prime_digit_index21\
    \ = 0;\n    let mut prime_digit_index22 = 0;\n    let mut prime_digit_index23\
    \ = 0;\n    let mut prime_digit_index24 = 0;\n    let mut prime_digit_index25\
    \ = 0;\n    let mut prime_digit_index26 = 0;\n    let mut prime_digit_index27\
    \ = 0;\n    let mut prime_digit_index28 = 0;\n    let mut prime_digit_index29\
    \ = 0;\n    let mut prime_digit_index30 = 0;\n    let mut prime_digit_index31\
    \ = 0;\n    let mut prime_digit_index32 = 0;\n    let mut prime_digit_index33\
    \ = 0;\n    let mut prime_digit_index34 = 0;\n    let mut prime_digit_index35\
    \ = 0;\n    let mut prime_digit_index36 = 0;\n    let mut prime_digit_index37\
    \ = 0;\n    let mut prime_digit_index38 = 0;\n    let mut prime_digit_index39\
    \ = 0;\n    let mut prime_digit_index40 = 0;\n    let mut prime_digit_index41\
    \ = 0;\n    let mut prime_digit_index42 = 0;\n    let mut prime_digit_index43\
    \ = 0;\n    let mut prime_digit_index44 = 0;\n    let mut prime_digit_index45\
    \ = 0;\n    let ", "    let mut num: isize = 0;\n    let mut digits: Vec<&str>\
    \ = num.to_lowercase().chars().collect();\n    let mut primes: Vec<&str> = vec![\"\
    2\", \"3\", \"5\", \"7\"];\n    let mut primes_count: isize = 0;\n    let mut\
    \ primes_count_2: isize = 0;\n    let mut primes_count_3: isize = 0;\n    let\
    \ mut primes_count_4: isize = 0;\n    let mut primes_count_5: isize = 0;\n   \
    \ let mut primes_count_6: isize = 0;\n    let mut primes_count_7: isize = 0;\n\
    \    let mut primes_count_8: isize = 0;\n    let mut primes_count_9: isize = 0;\n\
    \    let mut primes_count_10: isize = 0;\n    let mut primes_count_11: isize =\
    \ 0;\n    let mut primes_count_12: isize = 0;\n    let mut primes_count_13: isize\
    \ = 0;\n    let mut primes_count_14: isize = 0;\n    let mut primes_count_15:\
    \ isize = 0;\n    let mut primes_count_16: isize = 0;\n    let mut primes_count_17:\
    \ isize = 0;\n    let mut primes_count_18: isize = 0;\n    let mut primes_count_19:\
    \ isize = 0;\n    let mut primes_count_20: isize = 0;\n    let mut primes_count_21:\
    \ isize = 0;\n    let mut primes_count_22: isize = 0;\n    let mut primes_count_23:\
    \ isize = 0;\n    let mut primes_count_24: isize = 0;\n    let mut primes_count_25:\
    \ isize = 0;\n    let mut primes_count_26: isize = 0;\n    let mut primes_count_27:\
    \ isize = 0;\n    let mut primes_count_28: isize = 0;\n    let mut primes_count_29:\
    \ isize = 0;\n    let mut primes_count_30: isize = 0;\n    let mut primes_count_31:\
    \ isize = 0;\n    let mut primes_count_32: isize = 0;\n    let mut primes_count_33:\
    \ isize = 0;\n    let mut primes_count_34: isize = 0;\n    let mut primes_count_35:\
    \ isize = 0;\n    let mut primes_count_36: isize = 0;\n    let mut primes_count_37:\
    \ isize = 0;\n    let mut primes_count_38: isize = 0;\n    let mut primes_count_39:\
    \ isize = 0;\n", "    let mut prime_count = 0;\n    let mut digit_count = 1;\n\
    \    let mut digit = num[0];\n    let mut prime_found = false;\n    let mut prime_found2\
    \ = false;\n    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n\
    \    let mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let\
    \ mut prime_found7 = false;\n    let mut prime_found8 = false;\n    let mut prime_found9\
    \ = false;\n    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n\
    \    let mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let\
    \ mut prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut\
    \ prime_found16 = false;\n    let mut prime_found17 = false;\n    let mut prime_found18\
    \ = false;\n    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n\
    \    let mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let\
    \ mut prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut\
    \ prime_found25 = false;\n    let mut prime_found26 = false;\n    let mut prime_found27\
    \ = false;\n    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n\
    \    let mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let\
    \ mut prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut\
    \ prime_found34 = false;\n    let mut prime_found35 = false;\n    let mut prime_found36\
    \ = false;\n    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n\
    \    let mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let\
    \ mut prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut\
    \ prime_found43 = false;\n    let mut prime_found44 = false;\n    let mut prime_found45\
    \ = false;\n    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n\
    \    let mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let\
    \ mut prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut\
    \ prime_found52 = false;\n    let mut prime_found53 = false;\n    let mut prime_",
  "    let mut prime_count = 0;\n    let mut digits = num.to_string();\n    while\
    \ digits.len() > 0 {\n        let mut digit = digits.chars().nth(digits.len()\
    \ - 1);\n        if digit == 'A' || digit == 'B' || digit == 'C' || digit == 'D'\
    \ || digit == 'E' || digit == 'F' {\n            prime_count = prime_count + 1;\n\
    \        }\n        digits = digits.chars().skip_while(|&c| c != 'A' && c != 'B'\
    \ && c != 'C' && c != 'D' && c != 'E' && c != 'F').collect();\n    }\n    prime_count",
  "    let mut prime_count = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_digits_div2 = 0;\n    let mut num_digits_div3 = 0;\n    let mut num_digits_div4\
    \ = 0;\n    let mut num_digits_div5 = 0;\n    let mut num_digits_div6 = 0;\n \
    \   let mut num_digits_div7 = 0;\n    let mut num_digits_div8 = 0;\n    let mut\
    \ num_digits_div9 = 0;\n    let mut num_digits_div10 = 0;\n    let mut num_digits_div11\
    \ = 0;\n    let mut num_digits_div12 = 0;\n    let mut num_digits_div13 = 0;\n\
    \    let mut num_digits_div14 = 0;\n    let mut num_digits_div15 = 0;\n    let\
    \ mut num_digits_div16 = 0;\n    let mut num_digits_div17 = 0;\n    let mut num_digits_div18\
    \ = 0;\n    let mut num_digits_div19 = 0;\n    let mut num_digits_div20 = 0;\n\
    \    let mut num_digits_div21 = 0;\n    let mut num_digits_div22 = 0;\n    let\
    \ mut num_digits_div23 = 0;\n    let mut num_digits_div24 = 0;\n    let mut num_digits_div25\
    \ = 0;\n    let mut num_digits_div26 = 0;\n    let mut num_digits_div27 = 0;\n\
    \    let mut num_digits_div28 = 0;\n    let mut num_digits_div29 = 0;\n    let\
    \ mut num_digits_div30 = 0;\n    let mut num_digits_div31 = 0;\n    let mut num_digits_div32\
    \ = 0;\n    let mut num_digits_div33 = 0;\n    let mut num_digits_div34 = 0;\n\
    \    let mut num_digits_div35 = 0;\n    let mut num_digits_div36 = 0;\n    let\
    \ mut num_digits_div37 = 0;\n    let mut num_digits_div38 = 0;\n    let mut num_digits_div39\
    \ = 0;\n    let mut num_digits_div40 = 0;\n    let mut num_digits_div41 = 0;\n\
    \    let mut num_digits_div42 = 0;\n    let mut num_digits_div43 = 0;\n    let\
    \ mut num_digits_div44 = 0;\n    let mut num_digits_div45 = 0;\n    let mut num_digits_div46\
    \ = 0;\n    let mut num_digits_div47 = 0;\n    let mut num_digits_div48 = 0;\n\
    \    let mut num_digits_div49 = 0;\n    let mut num_digits_div50 = 0;\n    let\
    \ mut num_digits_div51", "    let mut num: isize = 0;\n    let mut digit: char;\n\
    \    let mut prime: isize = 0;\n    let mut prime_found = false;\n    let mut\
    \ prime_found2 = false;\n    let mut prime_found3 = false;\n    let mut prime_found4\
    \ = false;\n    let mut prime_found5 = false;\n    let mut prime_found6 = false;\n\
    \    let mut prime_found7 = false;\n    let mut prime_found8 = false;\n    let\
    \ mut prime_found9 = false;\n    let mut prime_found10 = false;\n    let mut prime_found11\
    \ = false;\n    let mut prime_found12 = false;\n    let mut prime_found13 = false;\n\
    \    let mut prime_found14 = false;\n    let mut prime_found15 = false;\n    let\
    \ mut prime_found16 = false;\n    let mut prime_found17 = false;\n    let mut\
    \ prime_found18 = false;\n    let mut prime_found19 = false;\n    let mut prime_found20\
    \ = false;\n    let mut prime_found21 = false;\n    let mut prime_found22 = false;\n\
    \    let mut prime_found23 = false;\n    let mut prime_found24 = false;\n    let\
    \ mut prime_found25 = false;\n    let mut prime_found26 = false;\n    let mut\
    \ prime_found27 = false;\n    let mut prime_found28 = false;\n    let mut prime_found29\
    \ = false;\n    let mut prime_found30 = false;\n    let mut prime_found31 = false;\n\
    \    let mut prime_found32 = false;\n    let mut prime_found33 = false;\n    let\
    \ mut prime_found34 = false;\n    let mut prime_found35 = false;\n    let mut\
    \ prime_found36 = false;\n    let mut prime_found37 = false;\n    let mut prime_found38\
    \ = false;\n    let mut prime_found39 = false;\n    let mut prime_found40 = false;\n\
    \    let mut prime_found41 = false;\n    let mut prime_found42 = false;\n    let\
    \ mut prime_found43 = false;\n    let mut prime_found44 = false;\n    let mut\
    \ prime_found45 = false;\n    let mut prime_found46 = false;\n    let mut prime_found47\
    \ = false;\n    let mut prime_found48 = false;\n    let mut prime_found49 = false;\n\
    \    let mut prime_found50 = false;\n    let mut prime_found51 = false;\n    let\
    \ mut prime_found52 = false;\n    let mut prime_found53 = false;\n    let ", " \
    \   let mut num: isize = 0;\n    let mut num_digits = num.len();\n    let mut\
    \ num_primes = 0;\n    let mut num_primes_digits = 2;\n    let mut num_primes_digits_pow\
    \ = 1;\n    let mut num_primes_digits_pow_2 = 1;\n    let mut num_primes_digits_pow_3\
    \ = 1;\n    let mut num_primes_digits_pow_4 = 1;\n    let mut num_primes_digits_pow_5\
    \ = 1;\n    let mut num_primes_digits_pow_6 = 1;\n    let mut num_primes_digits_pow_7\
    \ = 1;\n    let mut num_primes_digits_pow_8 = 1;\n    let mut num_primes_digits_pow_9\
    \ = 1;\n    let mut num_primes_digits_pow_10 = 1;\n    let mut num_primes_digits_pow_11\
    \ = 1;\n    let mut num_primes_digits_pow_12 = 1;\n    let mut num_primes_digits_pow_13\
    \ = 1;\n    let mut num_primes_digits_pow_14 = 1;\n    let mut num_primes_digits_pow_15\
    \ = 1;\n    let mut num_primes_digits_pow_16 = 1;\n    let mut num_primes_digits_pow_17\
    \ = 1;\n    let mut num_primes_digits_pow_18 = 1;\n    let mut num_primes_digits_pow_19\
    \ = 1;\n    let mut num_primes_digits_pow_20 = 1;\n    let mut num_primes_digits_pow_21\
    \ = 1;\n    let mut num_primes_digits_pow_22 = 1;\n    let mut num_primes_digits_pow_23\
    \ = 1;\n    let mut num_primes_digits_pow_24 = 1;\n    let mut num_primes_digits_pow_25\
    \ = 1;\n    let mut num_primes_digits_pow_26 = 1;\n    let mut num_primes_digits_pow_27\
    \ = 1;\n    let mut num_primes_digits_pow_28 = 1;\n    let mut num_primes_digits_pow_29\
    \ = 1;\n    let mut num_primes_digits_pow_30 = 1;\n    let mut num_primes_digits_pow_31\
    \ = 1;\n    let mut num_primes_digits_pow_32 = 1;\n    let mut num_primes_digits_pow_33\
    \ = 1;\n    let mut num_primes_digits_pow_34 = 1;\n    let mut num_primes_digits_pow_35\
    \ = 1;\n    let mut num_primes_digits_pow_36 = 1;\n    let mut num_primes_digits_pow_37\
    \ = 1;\n    let mut num_primes_digits_pow_38 = 1;\n    let mut num_primes_digits_pow_39\
    \ = 1;\n    let mut num_primes_digits_", "    let mut num: isize = 0;\n    let\
    \ mut digits: Vec<isize> = num.to_string().chars().collect();\n    for digit in\
    \ digits {\n        if digit == 'A' || digit == 'B' || digit == 'C' || digit ==\
    \ 'D' || digit == 'E' || digit == 'F' {\n            num = num * 16 + digit as\
    \ isize;\n        } else {\n            num = num * 10 + digit as isize;\n   \
    \     }\n    }\n    return num;", "    let mut num: isize = 0;\n    let mut digits:\
    \ Vec<isize> = num.to_lowercase().chars().collect();\n    let mut prime: Vec<isize>\
    \ = vec![2, 3, 5, 7, 11, 13, 17, 19];\n    let mut prime_digit: Vec<isize> = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19];\n    let mut prime_digit_count: isize = 0;\n    let\
    \ mut prime_digit_index: isize = 0;\n    let mut prime_digit_value: isize = 0;\n\
    \    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value: isize\
    \ = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: isize = 0;\n    let mut prime_digit_value:\
    \ isize = 0;\n    let mut prime_digit_index: i", "    let mut num: isize = 0;\n\
    \    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n    for\
    \ digit in digits {\n        if digit == 'a' || digit == 'b' || digit == 'c' ||\
    \ digit == 'd' || digit == 'e' || digit == 'f' {\n            num += digit as\
    \ isize;\n        }\n    }\n    return num;", "    let mut num: isize = 0;\n \
    \   let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n    let\
    \ mut primes: Vec<&str> = vec![];\n    let mut prime_digits: Vec<&str> = vec![];\n\
    \    let mut prime_digits_count: usize = 0;\n    let mut prime_digits_count_2:\
    \ usize = 0;\n    let mut prime_digits_count_3: usize = 0;\n    let mut prime_digits_count_4:\
    \ usize = 0;\n    let mut prime_digits_count_5: usize = 0;\n    let mut prime_digits_count_6:\
    \ usize = 0;\n    let mut prime_digits_count_7: usize = 0;\n    let mut prime_digits_count_8:\
    \ usize = 0;\n    let mut prime_digits_count_9: usize = 0;\n    let mut prime_digits_count_10:\
    \ usize = 0;\n    let mut prime_digits_count_11: usize = 0;\n    let mut prime_digits_count_12:\
    \ usize = 0;\n    let mut prime_digits_count_13: usize = 0;\n    let mut prime_digits_count_14:\
    \ usize = 0;\n    let mut prime_digits_count_15: usize = 0;\n    let mut prime_digits_count_16:\
    \ usize = 0;\n    let mut prime_digits_count_17: usize = 0;\n    let mut prime_digits_count_18:\
    \ usize = 0;\n    let mut prime_digits_count_19: usize = 0;\n    let mut prime_digits_count_20:\
    \ usize = 0;\n    let mut prime_digits_count_21: usize = 0;\n    let mut prime_digits_count_22:\
    \ usize = 0;\n    let mut prime_digits_count_23: usize = 0;\n    let mut prime_digits_count_24:\
    \ usize = 0;\n    let mut prime_digits_count_25: usize = 0;\n    let mut prime_digits_count_26:\
    \ usize = 0;\n    let mut prime_digits_count_27: usize = 0;\n    let mut prime_digits_count_28:\
    \ usize = 0;\n    let mut prime_digits_count_29: usize = 0;\n    let mut prime_digits_count_30:\
    \ usize = 0;\n    let mut prime_digits_count_31: usize = 0;\n    let mut prime_digits_count_32:\
    \ usize = 0;\n    let mut prime_digits_count_33", "    let mut num: isize = 0;\n\
    \    let mut num_digits = num.len();\n    let mut num_primes = 0;\n    let mut\
    \ num_primes_digits = 0;\n    let mut num_primes_digits_primes = 0;\n    let mut\
    \ num_primes_digits_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes = 0;\n    let\
    \ mut num_primes_digits_primes_primes_primes_primes_primes = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = 0;\n    let mut num_primes_digits_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime",
  "    let mut num: isize = 0;\n    let mut digit: char;\n    let mut prime: isize\
    \ = 2;\n    let mut prime_found = false;\n    for digit in num {\n        if digit\
    \ == 'A' || digit == 'B' || digit == 'C' || digit == 'D' || digit == 'E' || digit\
    \ == 'F' {\n            prime = prime * 2;\n        }\n        if digit == '0'\
    \ {\n            prime = prime + 1;\n        }\n        if prime > 100 {\n   \
    \         break;\n        }\n        if digit == '2' || digit == '3' || digit\
    \ == '5' || digit == '7' || digit == 'B' || digit == 'D' {\n            prime_found\
    \ = true;\n        }\n        num = num.chars().filter(|c| c != 'A' && c != 'B'\
    \ && c != 'C' && c != 'D' && c != 'E' && c != 'F').collect::<String>().to_owned();\n\
    \    }\n    if prime_found {\n        return prime;\n    }\n    return num.chars().filter(|c|\
    \ c != 'A' && c != 'B' && c != 'C' && c != 'D' && c != 'E' && c != 'F').collect::<String>().to_owned();",
  "    let mut num: isize = num.len();\n    let mut prime: isize = 0;\n    let mut\
    \ hex: isize = 0;\n    let mut hex2: isize = 0;\n    let mut hex3: isize = 0;\n\
    \    let mut hex4: isize = 0;\n    let mut hex5: isize = 0;\n    let mut hex6:\
    \ isize = 0;\n    let mut hex7: isize = 0;\n    let mut hex8: isize = 0;\n   \
    \ let mut hex9: isize = 0;\n    let mut hex10: isize = 0;\n    let mut hex11:\
    \ isize = 0;\n    let mut hex12: isize = 0;\n    let mut hex13: isize = 0;\n \
    \   let mut hex14: isize = 0;\n    let mut hex15: isize = 0;\n    let mut hex16:\
    \ isize = 0;\n    let mut hex17: isize = 0;\n    let mut hex18: isize = 0;\n \
    \   let mut hex19: isize = 0;\n    let mut hex20: isize = 0;\n    let mut hex21:\
    \ isize = 0;\n    let mut hex22: isize = 0;\n    let mut hex23: isize = 0;\n \
    \   let mut hex24: isize = 0;\n    let mut hex25: isize = 0;\n    let mut hex26:\
    \ isize = 0;\n    let mut hex27: isize = 0;\n    let mut hex28: isize = 0;\n \
    \   let mut hex29: isize = 0;\n    let mut hex30: isize = 0;\n    let mut hex31:\
    \ isize = 0;\n    let mut hex32: isize = 0;\n    let mut hex33: isize = 0;\n \
    \   let mut hex34: isize = 0;\n    let mut hex35: isize = 0;\n    let mut hex36:\
    \ isize = 0;\n    let mut hex37: isize = 0;\n    let mut hex38: isize = 0;\n \
    \   let mut hex39: isize = 0;\n    let mut hex40: isize = 0;\n    let mut hex41:\
    \ isize = 0;\n    let mut hex42: isize = 0;\n    let mut hex43: isize = 0;\n \
    \   let mut hex44: isize = 0;\n    let mut hex45: isize = 0;\n    let mut hex46:\
    \ isize = 0;\n    let mut hex47: isize = 0;\n    let mut hex48: isize = 0;\n \
    \   let mut hex49: isize = 0;\n    let mut hex50: ", "    let mut num: Vec<u8>\
    \ = num.to_lowercase().chars().collect();\n    let mut prime_digits = vec![];\n\
    \    let mut prime_digits_counter: usize = 0;\n    let mut prime_digits_counter2:\
    \ usize = 0;\n    let mut prime_digits_counter3: usize = 0;\n    let mut prime_digits_counter4:\
    \ usize = 0;\n    let mut prime_digits_counter5: usize = 0;\n    let mut prime_digits_counter6:\
    \ usize = 0;\n    let mut prime_digits_counter7: usize = 0;\n    let mut prime_digits_counter8:\
    \ usize = 0;\n    let mut prime_digits_counter9: usize = 0;\n    let mut prime_digits_counter10:\
    \ usize = 0;\n    let mut prime_digits_counter11: usize = 0;\n    let mut prime_digits_counter12:\
    \ usize = 0;\n    let mut prime_digits_counter13: usize = 0;\n    let mut prime_digits_counter14:\
    \ usize = 0;\n    let mut prime_digits_counter15: usize = 0;\n    let mut prime_digits_counter16:\
    \ usize = 0;\n    let mut prime_digits_counter17: usize = 0;\n    let mut prime_digits_counter18:\
    \ usize = 0;\n    let mut prime_digits_counter19: usize = 0;\n    let mut prime_digits_counter20:\
    \ usize = 0;\n    let mut prime_digits_counter21: usize = 0;\n    let mut prime_digits_counter22:\
    \ usize = 0;\n    let mut prime_digits_counter23: usize = 0;\n    let mut prime_digits_counter24:\
    \ usize = 0;\n    let mut prime_digits_counter25: usize = 0;\n    let mut prime_digits_counter26:\
    \ usize = 0;\n    let mut prime_digits_counter27: usize = 0;\n    let mut prime_digits_counter28:\
    \ usize = 0;\n    let mut prime_digits_counter29: usize = 0;\n    let mut prime_digits_counter30:\
    \ usize = 0;\n    let mut prime_digits_counter31: usize = 0;\n    let mut prime_digits_counter32:\
    \ usize = 0;\n    let mut prime_digits_counter33: usize = 0;\n    let mut prime_digits_counter34:\
    \ usize = 0;\n    let mut prime_digits_counter35: u", "    let mut prime_count\
    \ = 0;\n    let mut num_digits = num.len();\n    let mut num_digits_prime = 0;\n\
    \    let mut num_digits_not_prime = 0;\n    let mut num_digits_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime = 0;\n    let mut num_digits_prime_prime\
    \ = 0;\n    let mut num_digits_prime_not_prime_prime = 0;\n    let mut num_digits_not_prime_not_prime_prime\
    \ = 0;\n    let mut num_digits_prime_prime_prime = 0;\n    let mut num_digits_prime_not_prime_not_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_not_prime_prime = 0;\n    let mut\
    \ num_digits_prime_prime_prime_prime = 0;\n    let mut num_digits_prime_not_prime_not_prime_not_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime = 0;\n    let\
    \ mut num_digits_prime_prime_not_prime_not_prime_not_prime_prime = 0;\n    let\
    \ mut num_digits_not_prime_prime_prime_prime_prime_prime = 0;\n    let mut num_digits_prime_prime_not_prime_not_prime_not_prime_not_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_digits_prime_prime_not_prime_not_prime_not_prime_not_prime_not_prime_prime\
    \ = 0;\n    let mut num_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_digits_prime_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0;\n    let mut num_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_digits_prime_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0;\n    let mut num_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_digits_prime_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime_not_prime\
    \ = 0;\n    let mut num_digits_prime_prime", "    let mut num: isize = 0;\n  \
    \  let mut digit: isize = 0;\n    let mut prime: isize = 0;\n    let mut prime_found\
    \ = false;\n    let mut prime_found2 = false;\n    let mut prime_found3 = false;\n\
    \    let mut prime_found4 = false;\n    let mut prime_found5 = false;\n    let\
    \ mut prime_found6 = false;\n    let mut prime_found7 = false;\n    let mut prime_found8\
    \ = false;\n    let mut prime_found9 = false;\n    let mut prime_found10 = false;\n\
    \    let mut prime_found11 = false;\n    let mut prime_found12 = false;\n    let\
    \ mut prime_found13 = false;\n    let mut prime_found14 = false;\n    let mut\
    \ prime_found15 = false;\n    let mut prime_found16 = false;\n    let mut prime_found17\
    \ = false;\n    let mut prime_found18 = false;\n    let mut prime_found19 = false;\n\
    \    let mut prime_found20 = false;\n    let mut prime_found21 = false;\n    let\
    \ mut prime_found22 = false;\n    let mut prime_found23 = false;\n    let mut\
    \ prime_found24 = false;\n    let mut prime_found25 = false;\n    let mut prime_found26\
    \ = false;\n    let mut prime_found27 = false;\n    let mut prime_found28 = false;\n\
    \    let mut prime_found29 = false;\n    let mut prime_found30 = false;\n    let\
    \ mut prime_found31 = false;\n    let mut prime_found32 = false;\n    let mut\
    \ prime_found33 = false;\n    let mut prime_found34 = false;\n    let mut prime_found35\
    \ = false;\n    let mut prime_found36 = false;\n    let mut prime_found37 = false;\n\
    \    let mut prime_found38 = false;\n    let mut prime_found39 = false;\n    let\
    \ mut prime_found40 = false;\n    let mut prime_found41 = false;\n    let mut\
    \ prime_found42 = false;\n    let mut prime_found43 = false;\n    let mut prime_found44\
    \ = false;\n    let mut prime_found45 = false;\n    let mut prime_found46 = false;\n\
    \    let mut prime_found47 = false;\n    let mut prime_found48 = false;\n    let\
    \ mut prime_found49 = false;\n    let mut prime_found50 = false;\n    let mut\
    \ prime_found51 = false;\n    let mut prime_found52 = false;\n    let mut prime_found53\
    \ = false;\n", "    let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut primes: Vec<isize> = vec![2, 3, 5, 7, 11, 13, 17, 19];\n    let mut\
    \ prime: isize = 0;\n    let mut prime_found = false;\n    let mut prime_found2\
    \ = false;\n    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n\
    \    let mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let\
    \ mut prime_found7 = false;\n    let mut prime_found8 = false;\n    let mut prime_found9\
    \ = false;\n    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n\
    \    let mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let\
    \ mut prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut\
    \ prime_found16 = false;\n    let mut prime_found17 = false;\n    let mut prime_found18\
    \ = false;\n    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n\
    \    let mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let\
    \ mut prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut\
    \ prime_found25 = false;\n    let mut prime_found26 = false;\n    let mut prime_found27\
    \ = false;\n    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n\
    \    let mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let\
    \ mut prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut\
    \ prime_found34 = false;\n    let mut prime_found35 = false;\n    let mut prime_found36\
    \ = false;\n    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n\
    \    let mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let\
    \ mut prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut\
    \ prime_found43 = false;\n    let mut prime_found44 = false;\n    let mut prime_found45\
    \ = false;\n    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n\
    \    let mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let\
    \ mut prime_found", "    let mut prime_count = 0;\n    let mut digit_count = 1;\n\
    \    let mut digits = num.to_string();\n    while digit_count < hexadecimal::DIGITS.len()\
    \ {\n        let mut prime = true;\n        for digit in &digits[digit_count..]\
    \ {\n            if hexadecimal::DIGITS[digit] == hexadecimal::DIGITS[digit_count]\
    \ {\n                prime = false;\n                break;\n            }\n \
    \       }\n        if prime {\n            prime_count++;\n        }\n       \
    \ digit_count++;\n    }\n    prime_count", "    let mut num: isize = 0;\n    let\
    \ mut digits: Vec<isize> = num.to_string().chars().collect();\n    let mut prime:\
    \ Vec<isize> = vec![2, 3];\n    let mut prime_found = false;\n    let mut prime_found2\
    \ = false;\n    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n\
    \    let mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let\
    \ mut prime_found7 = false;\n    let mut prime_found8 = false;\n    let mut prime_found9\
    \ = false;\n    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n\
    \    let mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let\
    \ mut prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut\
    \ prime_found16 = false;\n    let mut prime_found17 = false;\n    let mut prime_found18\
    \ = false;\n    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n\
    \    let mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let\
    \ mut prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut\
    \ prime_found25 = false;\n    let mut prime_found26 = false;\n    let mut prime_found27\
    \ = false;\n    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n\
    \    let mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let\
    \ mut prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut\
    \ prime_found34 = false;\n    let mut prime_found35 = false;\n    let mut prime_found36\
    \ = false;\n    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n\
    \    let mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let\
    \ mut prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut\
    \ prime_found43 = false;\n    let mut prime_found44 = false;\n    let mut prime_found45\
    \ = false;\n    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n\
    \    let mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let\
    \ mut prime_found50 = false;\n    let mut prime_found51 = false;\n    let ", " \
    \   let mut num: isize = 0;\n    let mut digit: char;\n    let mut prime: isize\
    \ = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n    let ", "    let mut num: isize\
    \ = 0;\n    let mut digits: Vec<isize> = num.to_lowercase().chars().collect();\n\
    \    let mut prime: Vec<isize> = vec![2,3,5,7,11,13,17,19];\n    let mut prime_found\
    \ = false;\n    \n    for digit in digits {\n        if prime == prime_found {\n\
    \            break;\n        }\n        \n        if digit == 'a' || digit ==\
    \ 'b' || digit == 'c' || digit == 'd' || digit == 'e' || digit == 'f' {\n    \
    \        continue;\n        }\n        \n        let mut prime_found = false;\n\
    \        \n        for prime in prime {\n            if digit % prime == 0 {\n\
    \                prime_found = true;\n                break;\n            }\n\
    \        }\n        \n        if prime_found {\n            prime = vec![2,3,5,7,11,13,17,19];\n\
    \        }\n        \n        prime = prime_found ? prime : vec![2,3,5,7,11,13,17,19];\n\
    \        \n        prime_found = false;\n        \n        for prime in prime\
    \ {\n            if digit % prime == 0 {\n                prime_found = true;\n\
    \                break;\n            }\n        }\n        \n        if prime_found\
    \ {\n            prime = vec![2,3,5,7,11,13,17,19];\n        }\n        \n   \
    \     prime = prime_found ? prime : vec![2,3,5,7,11,13,17,19];\n        \n   \
    \     prime_found = false;\n        \n        for prime in prime {\n         \
    \   if digit % prime == 0 {\n                prime_found = true;\n           \
    \     break;\n            }\n        }\n        \n        if prime_found {\n \
    \           prime = vec![2,3,5,7,11,13,17,19];\n        }\n        \n        prime\
    \ = prime_found ? prime : vec![2,3,5,7,11,13,17,19];\n        \n        prime_found\
    \ = false;\n        \n        for prime in prime {\n            if digit % prime\
    \ == 0 {\n                prime_found = true;\n                break;\n      \
    \      }\n        }\n        \n        if prime_found {\n            prime = vec![2,3,5,7,11,13,17,19];\n\
    \        }\n        \n        prime = prime_found ? prime : vec![2,3,5,7,11,13,17,19];\n\
    \        \n        prime_found = false;\n        \n        for prime in prime\
    \ {\n            if digit % prime == 0 {\n                prime_found = true;\n\
    \                break;\n            }\n        }\n        \n        if prime_found\
    \ {\n            prime = vec![2,3,5,7,11,13,17,19];\n        }\n        \n   \
    \     prime", "    let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![];\n    let mut prime: isize = 0;\n    let\
    \ mut prime_found = false;\n    \n    for digit in digits {\n        prime_found\
    \ = false;\n        for prime in primes {\n            if prime == digit {\n \
    \               prime_found = true;\n                break;\n            }\n \
    \       }\n        if prime_found == false {\n            primes.push(digit);\n\
    \        }\n    }\n    \n    for prime in primes {\n        num = num.chars().filter(|&x|\
    \ x == prime).count();\n    }\n    \n    return num;", "    let mut num: isize\
    \ = 0;\n    let mut num_str: String = num.to_string();\n    let mut num_str: Vec<String>\
    \ = num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str",
  "    let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    for digit in digits {\n        if digit == 'A' || digit == 'B' || digit ==\
    \ 'C' || digit == 'D' || digit == 'E' || digit == 'F' {\n            num = num\
    \ * 16 + digit as isize;\n        }\n    }\n    return num;", "    let mut num:\
    \ isize = 0;\n    let mut digits: Vec<isize> = num.to_chars().collect();\n   \
    \ let mut prime: Vec<isize> = vec![2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let mut prime_digits: Vec<isize> = vec![2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let mut prime_digits_count: isize = 0;\n    let mut prime_digits_count_2:\
    \ isize = 0;\n    let mut prime_digits_count_3: isize = 0;\n    let mut prime_digits_count_4:\
    \ isize = 0;\n    let mut prime_digits_count_5: isize = 0;\n    let mut prime_digits_count_6:\
    \ isize = 0;\n    let mut prime_digits_count_7: isize = 0;\n    let mut prime_digits_count_8:\
    \ isize = 0;\n    let mut prime_digits_count_9: isize = 0;\n    let mut prime_digits_count_10:\
    \ isize = 0;\n    let mut prime_digits_count_11: isize = 0;\n    let mut prime_digits_count_12:\
    \ isize = 0;\n    let mut prime_digits_count_13: isize = 0;\n    let mut prime_digits_count_14:\
    \ isize = 0;\n    let mut prime_digits_count_15: isize = 0;\n    let mut prime_digits_count_16:\
    \ isize = 0;\n    let mut prime_digits_count_17: isize = 0;\n    let mut prime_digits_count_18:\
    \ isize = 0;\n    let mut prime_digits_count_19: isize = 0;\n    let mut prime_digits_count_20:\
    \ isize = 0;\n    let mut prime_digits_count_21: isize = 0;\n    let mut prime_digits_count_22:\
    \ isize = 0;\n    let mut prime_digits_count_23: isize = 0;\n    let mut prime_digits_count_24:\
    \ isize = 0;\n    let mut prime_digits_count_25: isize = 0;\n    let mut prime_digits_count_26:\
    \ isize = 0;\n    let mut prime_digits_count_27: isize = 0;\n    let mut prime_digits_",
  "    let mut num: isize = num.len();\n    let mut prime: isize = 0;\n    let mut\
    \ prime_digit: isize = 0;\n    let mut prime_digit_count: isize = 0;\n    let\
    \ mut prime_digit_count_2: isize = 0;\n    let mut prime_digit_count_3: isize\
    \ = 0;\n    let mut prime_digit_count_4: isize = 0;\n    let mut prime_digit_count_5:\
    \ isize = 0;\n    let mut prime_digit_count_6: isize = 0;\n    let mut prime_digit_count_7:\
    \ isize = 0;\n    let mut prime_digit_count_8: isize = 0;\n    let mut prime_digit_count_9:\
    \ isize = 0;\n    let mut prime_digit_count_10: isize = 0;\n    let mut prime_digit_count_11:\
    \ isize = 0;\n    let mut prime_digit_count_12: isize = 0;\n    let mut prime_digit_count_13:\
    \ isize = 0;\n    let mut prime_digit_count_14: isize = 0;\n    let mut prime_digit_count_15:\
    \ isize = 0;\n    let mut prime_digit_count_16: isize = 0;\n    let mut prime_digit_count_17:\
    \ isize = 0;\n    let mut prime_digit_count_18: isize = 0;\n    let mut prime_digit_count_19:\
    \ isize = 0;\n    let mut prime_digit_count_20: isize = 0;\n    let mut prime_digit_count_21:\
    \ isize = 0;\n    let mut prime_digit_count_22: isize = 0;\n    let mut prime_digit_count_23:\
    \ isize = 0;\n    let mut prime_digit_count_24: isize = 0;\n    let mut prime_digit_count_25:\
    \ isize = 0;\n    let mut prime_digit_count_26: isize = 0;\n    let mut prime_digit_count_27:\
    \ isize = 0;\n    let mut prime_digit_count_28: isize = 0;\n    let mut prime_digit_count_29:\
    \ isize = 0;\n    let mut prime_digit_count_30: isize = 0;\n    let mut prime_digit_count_31:\
    \ isize = 0;\n    let mut prime_digit_count_32: isize = 0;\n    let mut prime_digit_count_33:\
    \ isize = 0;\n    let mut prime_digit_count_34: isize = 0;\n    let mut prime_digit_count_35:\
    \ isize = 0;\n    let mut prime_digit_count_36: isize = 0;\n    let mut prime_digit_count_37:\
    \ isize = 0;\n    let mut prime_", "    let mut num: isize = 0;\n    let mut digits:\
    \ Vec<&str> = num.to_string().chars().collect();\n    let mut primes: Vec<&str>\
    \ = vec![];\n    let mut prime: isize = 0;\n    let mut i: isize = 0;\n    let\
    \ mut j: isize = 0;\n    let mut k: isize = 0;\n    let mut l: isize = 0;\n  \
    \  let mut m: isize = 0;\n    let mut n: isize = 0;\n    let mut o: isize = 0;\n\
    \    let mut p: isize = 0;\n    let mut q: isize = 0;\n    let mut r: isize =\
    \ 0;\n    let mut s: isize = 0;\n    let mut t: isize = 0;\n    let mut u: isize\
    \ = 0;\n    let mut v: isize = 0;\n    let mut w: isize = 0;\n    let mut x: isize\
    \ = 0;\n    let mut y: isize = 0;\n    let mut z: isize = 0;\n    let mut a: isize\
    \ = 0;\n    let mut b: isize = 0;\n    let mut c: isize = 0;\n    let mut d: isize\
    \ = 0;\n    let mut e: isize = 0;\n    let mut f: isize = 0;\n    let mut g: isize\
    \ = 0;\n    let mut h: isize = 0;\n    let mut i: isize = 0;\n    let mut j: isize\
    \ = 0;\n    let mut k: isize = 0;\n    let mut l: isize = 0;\n    let mut m: isize\
    \ = 0;\n    let mut n: isize = 0;\n    let mut o: isize = 0;\n    let mut p: isize\
    \ = 0;\n    let mut q: isize = 0;\n    let mut r: isize = 0;\n    let mut s: isize\
    \ = 0;\n    let mut t: isize = 0;\n    let mut u: isize = 0;\n    let mut v: isize\
    \ = 0;\n    let mut w: isize = 0;\n    let mut x: isize = 0;\n    let mut y: isize\
    \ = 0;\n    let mut z: isize = 0;\n    let mut a: isize = 0;\n    let mut b: isize\
    \ = 0;\n    let mut c: isize = 0;\n    let mut d: isize = 0;\n    let mut e: isize\
    \ = 0;\n    let mut f: isize = 0;\n    let mut g: isize = 0;\n    let mut h: isize\
    \ = 0;\n    let mut i: isize = 0;\n    let mut j: isize = 0;\n    let mut k: isize\
    \ = 0;\n    let mut l", "    let mut num: isize = 0;\n    let mut digit: char;\n\
    \    for digit in num {\n        if digit == 'A' || digit == 'B' || digit == 'C'\
    \ || digit == 'D' || digit == 'E' || digit == 'F' {\n            num = num.chars().filter(|c|\
    \ c != 'A' && c != 'B' && c != 'C' && c != 'D' && c != 'E' && c != 'F').count();\n\
    \        }\n        else {\n            num = num.chars().filter(|c| c != '0').count();\n\
    \        }\n    }\n    return num;", "    let mut prime_count = 0;\n    let mut\
    \ num_digits = num.len();\n    let mut num_prime_digits = 0;\n    let mut num_primes\
    \ = 0;\n    let mut num_prime_digits_2 = num_digits / 2;\n    let mut num_primes_2\
    \ = num_digits - num_prime_digits_2;\n    let mut num_primes_3 = num_digits -\
    \ num_prime_digits_2;\n    let mut num_primes_4 = num_digits - num_prime_digits_2;\n\
    \    let mut num_primes_5 = num_digits - num_prime_digits_2;\n    let mut num_primes_6\
    \ = num_digits - num_prime_digits_2;\n    let mut num_primes_7 = num_digits -\
    \ num_prime_digits_2;\n    let mut num_primes_8 = num_digits - num_prime_digits_2;\n\
    \    let mut num_primes_9 = num_digits - num_prime_digits_2;\n    let mut num_primes_10\
    \ = num_digits - num_prime_digits_2;\n    let mut num_primes_11 = num_digits -\
    \ num_prime_digits_2;\n    let mut num_primes_12 = num_digits - num_prime_digits_2;\n\
    \    let mut num_primes_13 = num_digits - num_prime_digits_2;\n    let mut num_primes_14\
    \ = num_digits - num_prime_digits_2;\n    let mut num_primes_15 = num_digits -\
    \ num_prime_digits_2;\n    let mut num_primes_16 = num_digits - num_prime_digits_2;\n\
    \    let mut num_primes_17 = num_digits - num_prime_digits_2;\n    let mut num_primes_18\
    \ = num_digits - num_prime_digits_2;\n    let mut num_primes_19 = num_digits -\
    \ num_prime_digits_2;\n    let mut num_primes_20 = num_digits - num_prime_digits_2;\n\
    \    let mut num_primes_21 = num_digits - num_prime_digits_2;\n    let mut num_primes_22\
    \ = num_digits - num_prime_digits_2;\n    let mut num_primes_23 = num_digits -\
    \ num_prime_digits_2;\n    let mut num_primes_24 = num_digits - num_prime_digits_2;\n\
    \    let mut num_primes_25 = num_digits - num_prime_digits_2;\n    let mut num_primes_26\
    \ = num_digits - num_prime_digits_2;\n    let mut num_primes_27 = num_digits -\
    \ num_prime_digits_2;\n    let mut num_primes_28", "    let mut num: isize = 0;\n\
    \    let mut digits: Vec<&str> = num.to_lowercase().chars().collect();\n    let\
    \ mut primes: Vec<&str> = vec![];\n    let mut primes_count: usize = 0;\n    let\
    \ mut primes_count_2: usize = 0;\n    let mut primes_count_3: usize = 0;\n   \
    \ let mut primes_count_4: usize = 0;\n    let mut primes_count_5: usize = 0;\n\
    \    let mut primes_count_6: usize = 0;\n    let mut primes_count_7: usize = 0;\n\
    \    let mut primes_count_8: usize = 0;\n    let mut primes_count_9: usize = 0;\n\
    \    let mut primes_count_10: usize = 0;\n    let mut primes_count_11: usize =\
    \ 0;\n    let mut primes_count_12: usize = 0;\n    let mut primes_count_13: usize\
    \ = 0;\n    let mut primes_count_14: usize = 0;\n    let mut primes_count_15:\
    \ usize = 0;\n    let mut primes_count_16: usize = 0;\n    let mut primes_count_17:\
    \ usize = 0;\n    let mut primes_count_18: usize = 0;\n    let mut primes_count_19:\
    \ usize = 0;\n    let mut primes_count_20: usize = 0;\n    let mut primes_count_21:\
    \ usize = 0;\n    let mut primes_count_22: usize = 0;\n    let mut primes_count_23:\
    \ usize = 0;\n    let mut primes_count_24: usize = 0;\n    let mut primes_count_25:\
    \ usize = 0;\n    let mut primes_count_26: usize = 0;\n    let mut primes_count_27:\
    \ usize = 0;\n    let mut primes_count_28: usize = 0;\n    let mut primes_count_29:\
    \ usize = 0;\n    let mut primes_count_30: usize = 0;\n    let mut primes_count_31:\
    \ usize = 0;\n    let mut primes_count_32: usize = 0;\n    let mut primes_count_33:\
    \ usize = 0;\n    let mut primes_count_34: usize = 0;\n    let mut primes_count_35:\
    \ usize = 0;\n    let mut primes_count_36: usize = 0;\n    let mut primes_count_37:\
    \ usize = 0;\n    let mut primes_count_38: usize = 0;\n    let mut primes_count_39:\
    \ usize = 0;\n    let mut primes_count_", "    let mut num: isize = 0;\n    let\
    \ mut num_digits = num.len();\n    let mut prime_digits = 2;\n    let mut prime_digits_counter\
    \ = 0;\n    let mut prime_digits_counter2 = 0;\n    let mut prime_digits_counter3\
    \ = 0;\n    let mut prime_digits_counter4 = 0;\n    let mut prime_digits_counter5\
    \ = 0;\n    let mut prime_digits_counter6 = 0;\n    let mut prime_digits_counter7\
    \ = 0;\n    let mut prime_digits_counter8 = 0;\n    let mut prime_digits_counter9\
    \ = 0;\n    let mut prime_digits_counter10 = 0;\n    let mut prime_digits_counter11\
    \ = 0;\n    let mut prime_digits_counter12 = 0;\n    let mut prime_digits_counter13\
    \ = 0;\n    let mut prime_digits_counter14 = 0;\n    let mut prime_digits_counter15\
    \ = 0;\n    let mut prime_digits_counter16 = 0;\n    let mut prime_digits_counter17\
    \ = 0;\n    let mut prime_digits_counter18 = 0;\n    let mut prime_digits_counter19\
    \ = 0;\n    let mut prime_digits_counter20 = 0;\n    let mut prime_digits_counter21\
    \ = 0;\n    let mut prime_digits_counter22 = 0;\n    let mut prime_digits_counter23\
    \ = 0;\n    let mut prime_digits_counter24 = 0;\n    let mut prime_digits_counter25\
    \ = 0;\n    let mut prime_digits_counter26 = 0;\n    let mut prime_digits_counter27\
    \ = 0;\n    let mut prime_digits_counter28 = 0;\n    let mut prime_digits_counter29\
    \ = 0;\n    let mut prime_digits_counter30 = 0;\n    let mut prime_digits_counter31\
    \ = 0;\n    let mut prime_digits_counter32 = 0;\n    let mut prime_digits_counter33\
    \ = 0;\n    let mut prime_digits_counter34 = 0;\n    let mut prime_digits_counter35\
    \ = 0;\n    let mut prime_digits_counter36 = 0;\n    let mut prime_digits_counter37\
    \ = 0;\n    let mut prime_digits_counter38 = 0;\n    let mut prime_digits_counter39\
    \ = 0;\n    let mut prime_digits_counter40 = 0;\n    let mut prime_digits_counter41\
    \ = 0;\n    let mut prime_digits_counter42 = 0;\n    let mut prime_digits_counter43\
    \ = 0;\n    let mut prime_digits_counter44 = 0;\n    let mut prime", "    let\
    \ mut num: isize = 0;\n    let mut digits: Vec<isize> = num.chars().collect();\n\
    \    let mut prime: Vec<isize> = vec![];\n    let mut prime_found = false;\n \
    \   let mut prime_found2 = false;\n    let mut prime_found3 = false;\n    let\
    \ mut prime_found4 = false;\n    let mut prime_found5 = false;\n    let mut prime_found6\
    \ = false;\n    let mut prime_found7 = false;\n    let mut prime_found8 = false;\n\
    \    let mut prime_found9 = false;\n    let mut prime_found10 = false;\n    let\
    \ mut prime_found11 = false;\n    let mut prime_found12 = false;\n    let mut\
    \ prime_found13 = false;\n    let mut prime_found14 = false;\n    let mut prime_found15\
    \ = false;\n    let mut prime_found16 = false;\n    let mut prime_found17 = false;\n\
    \    let mut prime_found18 = false;\n    let mut prime_found19 = false;\n    let\
    \ mut prime_found20 = false;\n    let mut prime_found21 = false;\n    let mut\
    \ prime_found22 = false;\n    let mut prime_found23 = false;\n    let mut prime_found24\
    \ = false;\n    let mut prime_found25 = false;\n    let mut prime_found26 = false;\n\
    \    let mut prime_found27 = false;\n    let mut prime_found28 = false;\n    let\
    \ mut prime_found29 = false;\n    let mut prime_found30 = false;\n    let mut\
    \ prime_found31 = false;\n    let mut prime_found32 = false;\n    let mut prime_found33\
    \ = false;\n    let mut prime_found34 = false;\n    let mut prime_found35 = false;\n\
    \    let mut prime_found36 = false;\n    let mut prime_found37 = false;\n    let\
    \ mut prime_found38 = false;\n    let mut prime_found39 = false;\n    let mut\
    \ prime_found40 = false;\n    let mut prime_found41 = false;\n    let mut prime_found42\
    \ = false;\n    let mut prime_found43 = false;\n    let mut prime_found44 = false;\n\
    \    let mut prime_found45 = false;\n    let mut prime_found46 = false;\n    let\
    \ mut prime_found47 = false;\n    let mut prime_found48 = false;\n    let mut\
    \ prime_found49 = false;\n    let mut prime_found50 = false;\n    let mut prime_found51\
    \ = false;\n    let mut prime_", "    let mut num: isize = 0;\n    let mut num_str:\
    \ String = num.to_string();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str: Vec<String> =\
    \ num_str.chars().collect();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.chars().collect();\n    let mut num_str:\
    \ Vec<String> = num_str.chars().collect();\n    let mut num_str", "    let mut\
    \ num: isize = 0;\n    let mut digits: Vec<isize> = num.chars().collect();\n \
    \   let mut prime: isize = 0;\n    let mut prime_found = false;\n    let mut prime_found2\
    \ = false;\n    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n\
    \    let mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let\
    \ mut prime_found7 = false;\n    let mut prime_found8 = false;\n    let mut prime_found9\
    \ = false;\n    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n\
    \    let mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let\
    \ mut prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut\
    \ prime_found16 = false;\n    let mut prime_found17 = false;\n    let mut prime_found18\
    \ = false;\n    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n\
    \    let mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let\
    \ mut prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut\
    \ prime_found25 = false;\n    let mut prime_found26 = false;\n    let mut prime_found27\
    \ = false;\n    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n\
    \    let mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let\
    \ mut prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut\
    \ prime_found34 = false;\n    let mut prime_found35 = false;\n    let mut prime_found36\
    \ = false;\n    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n\
    \    let mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let\
    \ mut prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut\
    \ prime_found43 = false;\n    let mut prime_found44 = false;\n    let mut prime_found45\
    \ = false;\n    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n\
    \    let mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let\
    \ mut prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut\
    \ prime_found52 = false;\n    let ", "    let mut num: isize = 0;\n    let mut\
    \ digits: Vec<isize> = num.chars().collect();\n    digits.sort_unstable();\n \
    \   for i in 0..digits.len() {\n        if digits[i] >= 'A' && digits[i] <= 'F'\
    \ {\n            num = num * 16 + digits[i] - 'A' + 1;\n        } else {\n   \
    \         num = num * 16 + digits[i] - '0';\n        }\n    }\n    return num;",
  "    let mut num: isize = 0;\n    let mut digit: char;\n    let mut prime: isize\
    \ = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n    let ", "    let mut num: Vec<u8>\
    \ = num.to_lowercase().chars().collect();\n    let mut prime_count: isize = 0;\n\
    \    let mut prime_digit: u8 = 0;\n    let mut prime_digit_count: isize = 0;\n\
    \    let mut prime_digit_sum: isize = 0;\n    let mut prime_digit_product: isize\
    \ = 1;\n    let mut prime_digit_sum2: isize = 1;\n    let mut prime_digit_product2:\
    \ isize = 1;\n    let mut prime_digit_sum3: isize = 1;\n    let mut prime_digit_product3:\
    \ isize = 1;\n    let mut prime_digit_sum4: isize = 1;\n    let mut prime_digit_product4:\
    \ isize = 1;\n    let mut prime_digit_sum5: isize = 1;\n    let mut prime_digit_product5:\
    \ isize = 1;\n    let mut prime_digit_sum6: isize = 1;\n    let mut prime_digit_product6:\
    \ isize = 1;\n    let mut prime_digit_sum7: isize = 1;\n    let mut prime_digit_product7:\
    \ isize = 1;\n    let mut prime_digit_sum8: isize = 1;\n    let mut prime_digit_product8:\
    \ isize = 1;\n    let mut prime_digit_sum9: isize = 1;\n    let mut prime_digit_product9:\
    \ isize = 1;\n    let mut prime_digit_sum10: isize = 1;\n    let mut prime_digit_product10:\
    \ isize = 1;\n    let mut prime_digit_sum11: isize = 1;\n    let mut prime_digit_product11:\
    \ isize = 1;\n    let mut prime_digit_sum12: isize = 1;\n    let mut prime_digit_product12:\
    \ isize = 1;\n    let mut prime_digit_sum13: isize = 1;\n    let mut prime_digit_product13:\
    \ isize = 1;\n    let mut prime_digit_sum14: isize = 1;\n    let mut prime_digit_product14:\
    \ isize = 1;\n    let mut prime_digit_sum15: isize = 1;\n    let mut prime_digit_product15:\
    \ isize = 1;\n    let mut prime_digit_sum16: isize = 1;\n    let mut prime_digit_product16:\
    \ isize = 1;\n    let mut prime_digit_sum17: isize = 1;\n    let mut prime_digit_product17:\
    \ isize = 1;\n    let mut prime_digit_sum18: isize = 1;\n    let mut prime_digit_product18:\
    \ isize = 1;\n    let mut prime", "    let mut num: isize = 0;\n    let mut num_str:\
    \ String = num.to_string();\n    let mut num_str: Vec<String> = num_str.chars().collect();\n\
    \    let mut num_str: Vec<String> = num_str.to_vec();\n    let mut num_str: Vec<String>\
    \ = num_str.to_owned();\n    let mut num_str: Vec<String> = num_str.to_owned();\n\
    \    let mut num_str: Vec<String> = num_str.to_owned();\n    let mut num_str:\
    \ Vec<String> = num_str.to_owned();\n    let mut num_str: Vec<String> = num_str.to_owned();\n\
    \    let mut num_str: Vec<String> = num_str.to_owned();\n    let mut num_str:\
    \ Vec<String> = num_str.to_owned();\n    let mut num_str: Vec<String> = num_str.to_owned();\n\
    \    let mut num_str: Vec<String> = num_str.to_owned();\n    let mut num_str:\
    \ Vec<String> = num_str.to_owned();\n    let mut num_str: Vec<String> = num_str.to_owned();\n\
    \    let mut num_str: Vec<String> = num_str.to_owned();\n    let mut num_str:\
    \ Vec<String> = num_str.to_owned();\n    let mut num_str: Vec<String> = num_str.to_owned();\n\
    \    let mut num_str: Vec<String> = num_str.to_owned();\n    let mut num_str:\
    \ Vec<String> = num_str.to_owned();\n    let mut num_str: Vec<String> = num_str.to_owned();\n\
    \    let mut num_str: Vec<String> = num_str.to_owned();\n    let mut num_str:\
    \ Vec<String> = num_str.to_owned();\n    let mut num_str: Vec<String> = num_str.to_owned();\n\
    \    let mut num_str: Vec<String> = num_str.to_owned();\n    let mut num_str:\
    \ Vec<String> = num_str.to_owned();\n    let mut num_str: Vec<String> = num_str.to_owned();\n\
    \    let mut num_str: Vec<String> = num_str.to_owned();\n    let mut num_str:\
    \ Vec<String> = num_str.to_owned();\n    let mut num_str: ", "    let mut num:\
    \ isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    for d in digits {\n        if d == 'A' || d == 'B' || d == 'C' || d == 'D'\
    \ || d == 'E' || d == 'F' {\n            num += 1;\n        }\n    }\n    return\
    \ num;", "    let mut num: isize = num.to_string().parse().unwrap();\n    let\
    \ mut prime_digits = vec![2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let mut prime_digits_count = prime_digits.len();\n    let mut prime_digits_count_2\
    \ = prime_digits_count - 1;\n    let mut prime_digits_count_3 = prime_digits_count\
    \ - 2;\n    let mut prime_digits_count_4 = prime_digits_count - 3;\n    let mut\
    \ prime_digits_count_5 = prime_digits_count - 4;\n    let mut prime_digits_count_6\
    \ = prime_digits_count - 5;\n    let mut prime_digits_count_7 = prime_digits_count\
    \ - 6;\n    let mut prime_digits_count_8 = prime_digits_count - 7;\n    let mut\
    \ prime_digits_count_9 = prime_digits_count - 8;\n    let mut prime_digits_count_10\
    \ = prime_digits_count - 9;\n    let mut prime_digits_count_11 = prime_digits_count\
    \ - 10;\n    let mut prime_digits_count_12 = prime_digits_count - 11;\n    let\
    \ mut prime_digits_count_13 = prime_digits_count - 12;\n    let mut prime_digits_count_14\
    \ = prime_digits_count - 13;\n    let mut prime_digits_count_15 = prime_digits_count\
    \ - 14;\n    let mut prime_digits_count_16 = prime_digits_count - 15;\n    let\
    \ mut prime_digits_count_17 = prime_digits_count - 16;\n    let mut prime_digits_count_18\
    \ = prime_digits_count - 17;\n    let mut prime_digits_count_19 = prime_digits_count\
    \ - 18;\n    let mut prime_digits_count_20 = prime_digits_count - 19;\n    let\
    \ mut prime_digits_count_21 = prime_digits_count - 20;\n    let mut prime_digits_count_22\
    \ = prime_digits_count - 21;\n    let mut prime_digits_count_23 = prime_digits_count\
    \ - 22;\n    let mut prime_digits_count_24 = prime_digits_count - 23;\n    let\
    \ mut prime_digits_count_25 = prime_digits_count - 24;\n    let mut prime_digit",
  "    let mut num: isize = 0;\n    let mut digit: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n", "    let mut num: isize = num.to_digits().parse().unwrap();\n\
    \    let mut prime: isize = 2;\n    let mut prime_found = false;\n    let mut\
    \ prime_found2 = false;\n    let mut prime_found3 = false;\n    let mut prime_found4\
    \ = false;\n    let mut prime_found5 = false;\n    let mut prime_found6 = false;\n\
    \    let mut prime_found7 = false;\n    let mut prime_found8 = false;\n    let\
    \ mut prime_found9 = false;\n    let mut prime_found10 = false;\n    let mut prime_found11\
    \ = false;\n    let mut prime_found12 = false;\n    let mut prime_found13 = false;\n\
    \    let mut prime_found14 = false;\n    let mut prime_found15 = false;\n    let\
    \ mut prime_found16 = false;\n    let mut prime_found17 = false;\n    let mut\
    \ prime_found18 = false;\n    let mut prime_found19 = false;\n    let mut prime_found20\
    \ = false;\n    let mut prime_found21 = false;\n    let mut prime_found22 = false;\n\
    \    let mut prime_found23 = false;\n    let mut prime_found24 = false;\n    let\
    \ mut prime_found25 = false;\n    let mut prime_found26 = false;\n    let mut\
    \ prime_found27 = false;\n    let mut prime_found28 = false;\n    let mut prime_found29\
    \ = false;\n    let mut prime_found30 = false;\n    let mut prime_found31 = false;\n\
    \    let mut prime_found32 = false;\n    let mut prime_found33 = false;\n    let\
    \ mut prime_found34 = false;\n    let mut prime_found35 = false;\n    let mut\
    \ prime_found36 = false;\n    let mut prime_found37 = false;\n    let mut prime_found38\
    \ = false;\n    let mut prime_found39 = false;\n    let mut prime_found40 = false;\n\
    \    let mut prime_found41 = false;\n    let mut prime_found42 = false;\n    let\
    \ mut prime_found43 = false;\n    let mut prime_found44 = false;\n    let mut\
    \ prime_found45 = false;\n    let mut prime_found46 = false;\n    let mut prime_found47\
    \ = false;\n    let mut prime_found48 = false;\n    let mut prime_found49 = false;\n\
    \    let mut prime_found50 = false;\n    let mut prime_found51 = false;\n    let\
    \ mut prime_found52 = false;\n    let mut prime_found53 = false;\n    let mu",
  '    let mut prime_digits = vec![false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, ', "    let mut num: isize = 0;\n    let mut digits:\
    \ Vec<&str> = num.to_lowercase().chars().collect();\n    let mut primes: Vec<&str>\
    \ = vec![\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let mut primes_count:\
    \ usize = 0;\n    let mut primes_count_2: usize = 0;\n    let mut primes_count_3:\
    \ usize = 0;\n    let mut primes_count_4: usize = 0;\n    let mut primes_count_5:\
    \ usize = 0;\n    let mut primes_count_6: usize = 0;\n    let mut primes_count_7:\
    \ usize = 0;\n    let mut primes_count_8: usize = 0;\n    let mut primes_count_9:\
    \ usize = 0;\n    let mut primes_count_10: usize = 0;\n    let mut primes_count_11:\
    \ usize = 0;\n    let mut primes_count_12: usize = 0;\n    let mut primes_count_13:\
    \ usize = 0;\n    let mut primes_count_14: usize = 0;\n    let mut primes_count_15:\
    \ usize = 0;\n    let mut primes_count_16: usize = 0;\n    let mut primes_count_17:\
    \ usize = 0;\n    let mut primes_count_18: usize = 0;\n    let mut primes_count_19:\
    \ usize = 0;\n    let mut primes_count_20: usize = 0;\n    let mut primes_count_21:\
    \ usize = 0;\n    let mut primes_count_22: usize = 0;\n    let mut primes_count_23:\
    \ usize = 0;\n    let mut primes_count_24: usize = 0;\n    let mut primes_count_25:\
    \ usize = 0;\n    let mut primes_count_26: usize = 0;\n    let mut primes_count_27:\
    \ usize = 0;\n    let mut primes_count_28: usize = 0;\n    let mut primes_count_29:\
    \ usize = 0;\n    let mut primes_count_30: usize = 0;\n    let mut primes_count_31:\
    \ usize = 0;\n    let mut primes_count_32: usize = 0;\n    let mut primes_count_33:\
    \ usize = 0;\n    let mut primes_count_34: usize = 0;\n    let mut primes_count_35:\
    \ usize = 0;\n    let mut primes_count_36: usize = 0;\n    let mut primes_count_37:\
    \ usize = 0;\n    let mut primes_count_38: usize = 0;\n    let mut primes_count_39: ",
  "    let mut num: isize = 0;\n    let mut digit: char;\n    let mut prime: isize\
    \ = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n    let ", "    let mut prime_count\
    \ = 0;\n    let mut num_digits = num.len();\n    let mut num_digits_prime = 0;\n\
    \    let mut num_digits_not_prime = 0;\n    let mut num_digits_not_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_not_prime = 0;\n    let mut num_digits_not_prime_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_not_prime = 0;\n    let mut num_digits_not_prime_prime_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_not_prime = 0;\n    let mut\
    \ num_digits_not_prime_prime_prime_prime_prime = 0;\n    let mut num_digits_not_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime = 0;\n\
    \    let mut num_digits_not_prime_prime_prime_prime_prime_not_prime = 0;\n   \
    \ let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime = 0;\n    let\
    \ mut num_digits_not_prime_prime_prime_prime_prime_prime_not_prime = 0;\n    let\
    \ mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  \
    \  let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0;\n    let mut num_digits_not_prime_prime_prime_prime_prime_prime_prime_",
  "    let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.chars().collect();\n\
    \    let mut prime: Vec<&str> = vec![];\n    let mut prime_found = false;\n  \
    \  loop {\n        if digits.len() == 0 {\n            break;\n        }\n   \
    \     let digit = digits.remove(0).unwrap();\n        if digit == 'A' || digit\
    \ == 'B' || digit == 'C' || digit == 'D' || digit == 'E' || digit == 'F' {\n \
    \           prime_found = true;\n        }\n        if digit == '2' || digit ==\
    \ '3' || digit == '5' || digit == '7' || digit == 'B' || digit == 'D' {\n    \
    \        prime_found = true;\n        }\n        if digit == '2' || digit == '3'\
    \ || digit == '5' || digit == '7' || digit == 'B' || digit == 'D' || digit ==\
    \ 'E' || digit == 'F' {\n            prime_found = true;\n        }\n        if\
    \ digit == '2' || digit == '3' || digit == '5' || digit == '7' || digit == 'B'\
    \ || digit == 'D' || digit == 'E' || digit == 'F' || digit == 'A' || digit ==\
    \ 'C' || digit == 'F' {\n            prime_found = true;\n        }\n        if\
    \ digit == '2' || digit == '3' || digit == '5' || digit == '7' || digit == 'B'\
    \ || digit == 'D' || digit == 'E' || digit == 'F' || digit == 'A' || digit ==\
    \ 'C' || digit == 'F' || digit == 'A' || digit == 'C' || digit == 'F' {\n    \
    \        prime_found = true;\n        }\n        if digit == '2' || digit == '3'\
    \ || digit == '5' || digit == '7' || digit == 'B' || digit == 'D' || digit ==\
    \ 'E' || digit == 'F' || digit == 'A' || digit == 'C' || digit == 'F' || digit\
    \ == 'A' || digit == 'C' || digit == 'F' || digit == 'A' || digit == 'C' || digit\
    \ == 'F' {\n            prime_found = true;\n        }\n        if digit == '2'\
    \ || digit == '3' || digit == '5' || digit == '7' || digit == 'B' || digit ==\
    \ 'D' || digit == 'E' || digit == 'F' || digit == 'A' || digit == 'C' || digit\
    \ == 'F' || digit == 'A' || digit == 'C' || digit == 'F' || digit == 'A' || digit\
    \ == 'C' || digit == 'F' || digit == 'A' || digit == 'C' || digit == 'F' {\n \
    \           prime_found = true;\n        }\n        if digit == '2' || digit ==\
    \ '3' || digit == '5' || digit == '7' || digit == 'B' || digit == 'D' || digit\
    \ == 'E' || digit == 'F' || digit ", "    let mut num: isize = 0;\n    let mut\
    \ digits: Vec<&str> = num.to_string().chars().collect();\n    let mut primes:\
    \ Vec<isize> = vec![2, 3];\n    let mut primes_found: Vec<isize> = vec![2, 3];\n\
    \    let mut primes_found2: Vec<isize> = vec![2, 3];\n    let mut primes_found3:\
    \ Vec<isize> = vec![2, 3];\n    let mut primes_found4: Vec<isize> = vec![2, 3];\n\
    \    let mut primes_found5: Vec<isize> = vec![2, 3];\n    let mut primes_found6:\
    \ Vec<isize> = vec![2, 3];\n    let mut primes_found7: Vec<isize> = vec![2, 3];\n\
    \    let mut primes_found8: Vec<isize> = vec![2, 3];\n    let mut primes_found9:\
    \ Vec<isize> = vec![2, 3];\n    let mut primes_found10: Vec<isize> = vec![2, 3];\n\
    \    let mut primes_found11: Vec<isize> = vec![2, 3];\n    let mut primes_found12:\
    \ Vec<isize> = vec![2, 3];\n    let mut primes_found13: Vec<isize> = vec![2, 3];\n\
    \    let mut primes_found14: Vec<isize> = vec![2, 3];\n    let mut primes_found15:\
    \ Vec<isize> = vec![2, 3];\n    let mut primes_found16: Vec<isize> = vec![2, 3];\n\
    \    let mut primes_found17: Vec<isize> = vec![2, 3];\n    let mut primes_found18:\
    \ Vec<isize> = vec![2, 3];\n    let mut primes_found19: Vec<isize> = vec![2, 3];\n\
    \    let mut primes_found20: Vec<isize> = vec![2, 3];\n    let mut primes_found21:\
    \ Vec<isize> = vec![2, 3];\n    let mut primes_found22: Vec<isize> = vec![2, 3];\n\
    \    let mut primes_found23: Vec<isize> = vec![2, 3];\n    let mut primes_found24:\
    \ Vec<i", "    let mut num_digits = num.len();\n    let mut num_primes = 0;\n\
    \    let mut num_primes_found = 0;\n    let mut num_primes_found2 = 0;\n    let\
    \ mut num_primes_found3 = 0;\n    let mut num_primes_found4 = 0;\n    let mut\
    \ num_primes_found5 = 0;\n    let mut num_primes_found6 = 0;\n    let mut num_primes_found7\
    \ = 0;\n    let mut num_primes_found8 = 0;\n    let mut num_primes_found9 = 0;\n\
    \    let mut num_primes_found10 = 0;\n    let mut num_primes_found11 = 0;\n  \
    \  let mut num_primes_found12 = 0;\n    let mut num_primes_found13 = 0;\n    let\
    \ mut num_primes_found14 = 0;\n    let mut num_primes_found15 = 0;\n    let mut\
    \ num_primes_found16 = 0;\n    let mut num_primes_found17 = 0;\n    let mut num_primes_found18\
    \ = 0;\n    let mut num_primes_found19 = 0;\n    let mut num_primes_found20 =\
    \ 0;\n    let mut num_primes_found21 = 0;\n    let mut num_primes_found22 = 0;\n\
    \    let mut num_primes_found23 = 0;\n    let mut num_primes_found24 = 0;\n  \
    \  let mut num_primes_found25 = 0;\n    let mut num_primes_found26 = 0;\n    let\
    \ mut num_primes_found27 = 0;\n    let mut num_primes_found28 = 0;\n    let mut\
    \ num_primes_found29 = 0;\n    let mut num_primes_found30 = 0;\n    let mut num_primes_found31\
    \ = 0;\n    let mut num_primes_found32 = 0;\n    let mut num_primes_found33 =\
    \ 0;\n    let mut num_primes_found34 = 0;\n    let mut num_primes_found35 = 0;\n\
    \    let mut num_primes_found36 = 0;\n    let mut num_primes_found37 = 0;\n  \
    \  let mut num_primes_found38 = 0;\n    let mut num_primes_found39 = 0;\n    let\
    \ mut num_primes_found40 = 0;\n    let mut num_primes_found41 = 0;\n    let mut\
    \ num_primes_found42 = 0;\n    let mut num_primes_found43 = 0;\n    let mut num_primes_found44\
    \ = 0;\n    let mut num_primes_found45 = 0;\n    let mut num_primes_found46 =\
    \ 0;\n    let mut num_primes_found47 = 0;\n    let mut num_primes_found48 = 0;\n\
    \    let mut num_primes_found49 = 0;\n    let mut num_primes_found50 = 0;", " \
    \   let mut num: isize = 0;\n    let mut digits: Vec<&str> = num.to_string().chars().collect();\n\
    \    let mut primes: Vec<&str> = vec![];\n    let mut prime: isize = 2;\n    let\
    \ mut i: usize = 0;\n    while i < digits.len() {\n        let digit = digits[i];\n\
    \        if digit == '0' {\n            primes.push(digit);\n        }\n     \
    \   if digit == 'A' || digit == 'B' || digit == 'C' || digit == 'D' || digit ==\
    \ 'E' || digit == 'F' {\n            primes.push(digit);\n        }\n        i\
    \ += 1;\n    }\n    for prime in primes {\n        if prime < 10 {\n         \
    \   num += prime;\n        } else {\n            num += prime - 10;\n        }\n\
    \    }\n    return num;", "    let mut num: isize = 0;\n    let mut digits: Vec<&str>\
    \ = num.chars().collect();\n    for d in digits {\n        let mut digit: isize\
    \ = 0;\n        let mut is_prime: isize = 0;\n        let mut is_odd: isize =\
    \ 0;\n        let mut is_even: isize = 0;\n        let mut is_prime_odd: isize\
    \ = 0;\n        let mut is_prime_even: isize = 0;\n        let mut is_odd_even:\
    \ isize = 0;\n        let mut is_odd_odd: isize = 0;\n        let mut is_even_even:\
    \ isize = 0;\n        let mut is_even_odd: isize = 0;\n        let mut is_odd_even_even:\
    \ isize = 0;\n        let mut is_odd_even_odd: isize = 0;\n        let mut is_even_odd_even:\
    \ isize = 0;\n        let mut is_even_odd_odd: isize = 0;\n        let mut is_odd_even_odd_even:\
    \ isize = 0;\n        let mut is_odd_even_odd_odd: isize = 0;\n        let mut\
    \ is_even_odd_odd_even: isize = 0;\n        let mut is_even_odd_odd_odd: isize\
    \ = 0;\n        let mut is_odd_even_odd_odd_even: isize = 0;\n        let mut\
    \ is_odd_even_odd_odd_odd: isize = 0;\n        let mut is_even_odd_odd_odd_even:\
    \ isize = 0;\n        let mut is_even_odd_odd_odd_odd: isize = 0;\n        let\
    \ mut is_odd_even_odd_odd_odd_even: isize = 0;\n        let mut is_odd_even_odd_odd_odd_odd:\
    \ isize = 0;\n        let mut is_even_odd_odd_odd_odd_even: isize = 0;\n     \
    \   let mut is_even_odd_odd_odd_odd_odd: isize = 0;\n        let mut is_odd_even_odd_odd_odd_odd_even:\
    \ isize = 0;\n        let mut is_odd_even_odd_odd_odd_odd_odd: isize = 0;\n  \
    \      let mut is_even_odd_odd_odd_odd_odd_even: isize = 0;\n        let mut is_even_odd_odd_odd_odd_odd_odd:\
    \ isize = 0;\n        let mut is_odd_even_od", "    let mut num_digits = num.len();\n\
    \    let mut prime_count = 0;\n    let mut prime_digits = vec![0; 8];\n    let\
    \ mut prime_digits_index = 0;\n    let mut prime_digits_index2 = 0;\n    let mut\
    \ prime_digits_index3 = 0;\n    let mut prime_digits_index4 = 0;\n    let mut\
    \ prime_digits_index5 = 0;\n    let mut prime_digits_index6 = 0;\n    let mut\
    \ prime_digits_index7 = 0;\n    let mut prime_digits_index8 = 0;\n    let mut\
    \ prime_digits_index9 = 0;\n    let mut prime_digits_index10 = 0;\n    let mut\
    \ prime_digits_index11 = 0;\n    let mut prime_digits_index12 = 0;\n    let mut\
    \ prime_digits_index13 = 0;\n    let mut prime_digits_index14 = 0;\n    let mut\
    \ prime_digits_index15 = 0;\n    let mut prime_digits_index16 = 0;\n    let mut\
    \ prime_digits_index17 = 0;\n    let mut prime_digits_index18 = 0;\n    let mut\
    \ prime_digits_index19 = 0;\n    let mut prime_digits_index20 = 0;\n    let mut\
    \ prime_digits_index21 = 0;\n    let mut prime_digits_index22 = 0;\n    let mut\
    \ prime_digits_index23 = 0;\n    let mut prime_digits_index24 = 0;\n    let mut\
    \ prime_digits_index25 = 0;\n    let mut prime_digits_index26 = 0;\n    let mut\
    \ prime_digits_index27 = 0;\n    let mut prime_digits_index28 = 0;\n    let mut\
    \ prime_digits_index29 = 0;\n    let mut prime_digits_index30 = 0;\n    let mut\
    \ prime_digits_index31 = 0;\n    let mut prime_digits_index32 = 0;\n    let mut\
    \ prime_digits_index33 = 0;\n    let mut prime_digits_index34 = 0;\n    let mut\
    \ prime_digits_index35 = 0;\n    let mut prime_digits_index36 = 0;\n    let mut\
    \ prime_digits_index37 = 0;\n    let mut prime_digits_index38 = 0;\n    let mut\
    \ prime_digits_index39 = 0;\n    let mut prime_digits_index40 = 0;\n    let mut\
    \ prime_digits_index41 = 0;\n    let mut prime_digits_index42 = 0;\n    let mut\
    \ prime_digits_index43 = 0;\n    let mut prime_digits_index44 = 0;\n    let mu"]
stop_tokens:
- "\n}"
