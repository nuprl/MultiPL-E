language: rs
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n    let\
    \ mut notes: Vec<&str> = music_string.split_whitespace().collect();\n    let mut\
    \ notes_len: usize = 0;\n    let mut current_note = 0;\n    let mut current_beat\
    \ = 0;\n    let mut current_note_len = 0;\n    let mut current_beat_len = 0;\n\
    \    let mut current_note_beat_len = 0;\n    let mut current_note_beat_len2 =\
    \ 0;\n    let mut current_note_beat_len3 = 0;\n    let mut current_note_beat_len4\
    \ = 0;\n    let mut current_note_beat_len5 = 0;\n    let mut current_note_beat_len6\
    \ = 0;\n    let mut current_note_beat_len7 = 0;\n    let mut current_note_beat_len8\
    \ = 0;\n    let mut current_note_beat_len9 = 0;\n    let mut current_note_beat_len10\
    \ = 0;\n    let mut current_note_beat_len11 = 0;\n    let mut current_note_beat_len12\
    \ = 0;\n    let mut current_note_beat_len13 = 0;\n    let mut current_note_beat_len14\
    \ = 0;\n    let mut current_note_beat_len15 = 0;\n    let mut current_note_beat_len16\
    \ = 0;\n    let mut current_note_beat_len17 = 0;\n    let mut current_note_beat_len18\
    \ = 0;\n    let mut current_note_beat_len19 = 0;\n    let mut current_note_beat_len20\
    \ = 0;\n    let mut current_note_beat_len21 = 0;\n    let mut current_note_beat_len22\
    \ = 0;\n    let mut current_note_beat_len23 = 0;\n    let mut current_note_beat_len24\
    \ = 0;\n    let mut current_note_beat_len25 = 0;\n    let mut current_note_beat_len26\
    \ = 0;\n    let mut current_note_beat_len27 = 0;\n    let mut current_note_beat_len28\
    \ = 0;\n    let mut current_note_beat_len29 = 0;\n    let mut current_note_beat_len30\
    \ = 0;\n    let mut current_note_beat_len31 = 0;\n    let mut current_note_beat_len32\
    \ = 0;\n    let mut current_note_beat_len33 = 0;\n    let mut current_note_beat_len34\
    \ = 0;\n    let mut current_note_beat_len35 = 0;\n    let mut current_note_beat_len36\
    \ = 0;\n    let mut current_note_beat_len37 = 0;\n    let mut current_note_beat_len38\
    \ = 0;\n    let mut current_note_beat_len39 = 0;\n    let mut current_note_beat_len40\
    \ = 0;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbb9jmf6w.rs:8:41\n  |\n8 |\
    \ fn parse_music(music_string: String) -> Vec<isize> {\n  |    -----------   \
    \                       ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n\
    \  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut music_vec: Vec<isize> = Vec::new();\n \
    \   let mut music_str: String = music_string;\n    let mut music_char: char;\n\
    \    let mut music_beats: isize = 0;\n    let mut music_notes: isize = 0;\n  \
    \  let mut music_last_char: char;\n    let mut music_last_beats: isize = 0;\n\
    \    let mut music_last_notes: isize = 0;\n    let mut music_last_last_char: char;\n\
    \    let mut music_last_last_beats: isize = 0;\n    let mut music_last_last_notes:\
    \ isize = 0;\n    let mut music_last_last_last_char: char;\n    let mut music_last_last_last_beats:\
    \ isize = 0;\n    let mut music_last_last_last_notes: isize = 0;\n    let mut\
    \ music_last_last_last_last_char: char;\n    let mut music_last_last_last_last_beats:\
    \ isize = 0;\n    let mut music_last_last_last_last_notes: isize = 0;\n    let\
    \ mut music_last_last_last_last_last_char: char;\n    let mut music_last_last_last_last_last_beats:\
    \ isize = 0;\n    let mut music_last_last_last_last_last_notes: isize = 0;\n \
    \   let mut music_last_last_last_last_last_last_char: char;\n    let mut music_last_last_last_last_last_last_beats:\
    \ isize = 0;\n    let mut music_last_last_last_last_last_last_notes: isize = 0;\n\
    \    let mut music_last_last_last_last_last_last_last_char: char;\n    let mut\
    \ music_last_last_last_last_last_last_last_beats: isize = 0;\n    let mut music_last_last_last_last_last_last_last_notes:\
    \ isize = 0;\n    let mut music_last_last_last_last_last_last_last_last_char:\
    \ char;\n    let mut music_last_last_last_last_last_last_last_last_beats: isize\
    \ = 0;\n    let mut music_last_last_last_last_last_last_last_last_notes: isize\
    \ = 0;\n    let mut music_last_last_last_last_last_last_last_last_last_char: char;\n\
    \    let mut music_last_last_last_last_last_last_last_last_last_beats: isize =\
    \ 0;\n    let mut music_last_last_last_last_last_last_last_last_last_notes: isize\
    \ = 0;\n    let mut music_last_last_last_last_last_last_last_last_last_last_char:\
    \ char;\n    let mut music_last_last_\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_b7lnfbu.rs:42:29\n   |\n\
    42 |     let mut music_last_last_\n   |                             ^ help: add\
    \ `;` here\n43 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp_b7lnfbu.rs:8:41\n  |\n8 | fn parse_music(music_string: String)\
    \ -> Vec<isize> {\n  |    -----------                          ^^^^^^^^^^ expected\
    \ struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n\
    \          found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = vec![];\n    let mut notes = music_string.chars().enumerate().filter(|(_,\
    \ c)| c == 'o' || c == '|' || c == '.').collect::<Vec<_>>();\n    for note in\
    \ notes {\n        let mut beat = 0;\n        let mut note = note.1;\n       \
    \ while note != 'o' && note != '|' && note != '.' {\n            beat += 1;\n\
    \            note += 1;\n        }\n        beats.push(beat);\n    }\n    return\
    \ beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp4j322lka.rs:10:72\n\
    \   |\n10 |     let mut notes = music_string.chars().enumerate().filter(|(_, c)|\
    \ c == 'o' || c == '|' || c == '.').collect::<Vec<_>>();\n   |               \
    \                                                         ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp4j322lka.rs:10:84\n\
    \   |\n10 |     let mut notes = music_string.chars().enumerate().filter(|(_, c)|\
    \ c == 'o' || c == '|' || c == '.').collect::<Vec<_>>();\n   |               \
    \                                                                     ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp4j322lka.rs:10:96\n\
    \   |\n10 |     let mut notes = music_string.chars().enumerate().filter(|(_, c)|\
    \ c == 'o' || c == '|' || c == '.').collect::<Vec<_>>();\n   |               \
    \                                                                            \
    \     ^^ no implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0368]: binary assignment operation\
    \ `+=` cannot be applied to type `char`\n  --> /tmp/tmp4j322lka.rs:16:13\n   |\n\
    16 |             note += 1;\n   |             ----^^^^^\n   |             |\n\
    \   |             cannot use `+=` on type `char`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0368.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut notes: Vec<isize> = vec![];\n    let mut\
    \ beats: Vec<isize> = vec![];\n    let mut current_note = String::new();\n   \
    \ let mut current_beat = String::new();\n    let mut current_beats: isize = 0;\n\
    \    let mut current_notes: isize = 0;\n    let mut current_notes_beats: isize\
    \ = 0;\n    let mut current_notes_beats_beats: isize = 0;\n    let mut current_notes_beats_beats_beats:\
    \ isize = 0;\n    let mut current_notes_beats_beats_beats_beats: isize = 0;\n\
    \    let mut current_notes_beats_beats_beats_beats_beats: isize = 0;\n    let\
    \ mut current_notes_beats_beats_beats_beats_beats_beats: isize = 0;\n    let mut\
    \ current_notes_beats_beats_beats_beats_beats_beats_beats: isize = 0;\n    let\
    \ mut current_notes_beats_beats_beats_beats_beats_beats_beats_beats: isize = 0;\n\
    \    let mut current_notes_beats_beats_beats_beats_beats_beats_beats_beats: isize\
    \ = 0;\n    let mut current_notes_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ isize = 0;\n    let mut current_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ isize = 0;\n    let mut current_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ isize = 0;\n    let mut current_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ isize = 0;\n    let mut current_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ isize = 0;\n    let mut current_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ isize = 0;\n    let mut current_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ isize = 0;\n    let mut current_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ isize = 0;\n    let mut current_notes_beats_beats_beats_beats_beats_beats_\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp8y818o09.rs:32:63\n   |\n\
    32 |     let mut current_notes_beats_beats_beats_beats_beats_beats_\n   |    \
    \                                                           ^ help: add `;` here\n\
    33 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp8y818o09.rs:8:41\n\
    \  |\n8 | fn parse_music(music_string: String) -> Vec<isize> {\n  |    -----------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut music_vec: Vec<isize> = Vec::new();\n \
    \   let mut notes: Vec<&str> = music_string.split(\"|\").collect();\n    for note\
    \ in notes {\n        let mut note_string = note.trim();\n        let mut beats:\
    \ isize = 0;\n        let mut last_note = false;\n        while note_string.len()\
    \ > 0 {\n            let mut note = note_string[0];\n            note_string =\
    \ note_string.split_whitespace().collect();\n            if note == \"o\" {\n\
    \                beats = 4;\n                last_note = true;\n            }\
    \ else if note == \"o|\" {\n                beats = 2;\n                last_note\
    \ = true;\n            } else if note == \".|\" {\n                beats = 1;\n\
    \                last_note = true;\n            } else if note == \".\" {\n  \
    \              beats = 0;\n                last_note = false;\n            } else\
    \ {\n                panic!(\"Invalid note '{}'\", note);\n            }\n   \
    \         music_vec.push(beats);\n        }\n        if last_note {\n        \
    \    music_vec.push(4);\n        }\n    }\n    music_vec\n}\n\nfn main() {\n \
    \   let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `str` cannot be indexed by `{integer}`\n  --> /tmp/tmpq5e7zbs6.rs:16:28\n\
    \   |\n16 |             let mut note = note_string[0];\n   |                 \
    \           ^^^^^^^^^^^^^^ string indices are ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<str>` is not implemented for `{integer}`\n   = note: you\
    \ can use `.chars().nth()` or `.bytes().nth()`\n           for more information,\
    \ see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n\
    \   = note: required because of the requirements on the impl of `Index<{integer}>`\
    \ for `str`\n\nerror[E0277]: a value of type `&str` cannot be built from an iterator\
    \ over elements of type `&str`\n  --> /tmp/tmpq5e7zbs6.rs:17:58\n   |\n17 |  \
    \           note_string = note_string.split_whitespace().collect();\n   |    \
    \                                                      ^^^^^^^ value of type `&str`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n   |\n   = help: the\
    \ trait `FromIterator<&str>` is not implemented for `&str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = vec![];\n    let mut\
    \ current_beat = 0;\n    let mut current_note = 0;\n    let mut current_note_len\
    \ = 0;\n    let mut current_note_char = 0;\n    let mut current_note_char_len\
    \ = 0;\n    let mut current_note_char_value = 0;\n    let mut current_note_char_next_value\
    \ = 0;\n    let mut current_note_char_next_next_value = 0;\n    let mut current_note_char_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_value = 0;\n    let\
    \ mut current_note_char_next_next_next_next_next_value = 0;\n    let mut current_note_char_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0;\n    let mut current_note_char_next_next_next_next_next_next_next_\n}\n\
    \nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp0ce243wk.rs:41:66\n   |\n\
    41 |     let mut current_note_char_next_next_next_next_next_next_next_\n   | \
    \                                                                 ^ help: add\
    \ `;` here\n42 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp0ce243wk.rs:8:41\n  |\n8 | fn parse_music(music_string: String)\
    \ -> Vec<isize> {\n  |    -----------                          ^^^^^^^^^^ expected\
    \ struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n\
    \          found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n    let mut notes\
    \ = music_string.chars().enumerate();\n    let mut current_note = 0;\n    let\
    \ mut current_beat = 0;\n    let mut current_note_index = 0;\n    let mut current_beat_length\
    \ = 0;\n    let mut current_note_length = 0;\n    let mut current_note_length_index\
    \ = 0;\n    let mut current_note_length_index2 = 0;\n    let mut current_note_length_index3\
    \ = 0;\n    let mut current_note_length_index4 = 0;\n    let mut current_note_length_index5\
    \ = 0;\n    let mut current_note_length_index6 = 0;\n    let mut current_note_length_index7\
    \ = 0;\n    let mut current_note_length_index8 = 0;\n    let mut current_note_length_index9\
    \ = 0;\n    let mut current_note_length_index10 = 0;\n    let mut current_note_length_index11\
    \ = 0;\n    let mut current_note_length_index12 = 0;\n    let mut current_note_length_index13\
    \ = 0;\n    let mut current_note_length_index14 = 0;\n    let mut current_note_length_index15\
    \ = 0;\n    let mut current_note_length_index16 = 0;\n    let mut current_note_length_index17\
    \ = 0;\n    let mut current_note_length_index18 = 0;\n    let mut current_note_length_index19\
    \ = 0;\n    let mut current_note_length_index20 = 0;\n    let mut current_note_length_index21\
    \ = 0;\n    let mut current_note_length_index22 = 0;\n    let mut current_note_length_index23\
    \ = 0;\n    let mut current_note_length_index24 = 0;\n    let mut current_note_length_index25\
    \ = 0;\n    let mut current_note_length_index26 = 0;\n    let mut current_note_length_index27\
    \ = 0;\n    let mut current_note_length_index28 = 0;\n    let mut current_note_length_index29\
    \ = 0;\n    let mut current_note_length_index30 = 0;\n    let mut current_note_length_index31\
    \ = 0;\n    let mut current_note_length_index32 = 0;\n    let mut current_note_length_index33\
    \ = 0;\n    let mut current_note_length_index34 = 0;\n    let mut current_note_length_index35\
    \ = 0;\n    let mut current_note_length_index36 = 0;\n    let mut current_note_length_index37\
    \ = 0;\n    let mut current_note_length_index38 = 0;\n    let mut current_note_length_index39\
    \ = 0;\n    let mut current_note_length_index40 = 0;\n    let mut current_note_length_index41\
    \ = 0;\n    let mut current_note_length_index42 = 0;\n    let mut current_note_length_index43\
    \ = 0;\n    let mut current_note_length_index44 = 0;\n    let mut current_note_length_index45\
    \ = 0;\n    let mut current_note_\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp5urpqlei.rs:61:26\n   |\n\
    61 |     let mut current_note_\n   |                          ^ help: add `;`\
    \ here\n62 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp5urpqlei.rs:8:41\n  |\n8 | fn parse_music(music_string: String) -> Vec<isize>\
    \ {\n  |    -----------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n    let\
    \ mut notes: Vec<&str> = music_string.split_whitespace().collect();\n    let mut\
    \ current_note = notes.last().unwrap();\n    let mut current_beat = 0;\n    for\
    \ note in notes {\n        if note == current_note {\n            current_beat\
    \ += 1;\n        } else {\n            beats.push(current_beat);\n           \
    \ current_beat = 1;\n            current_note = note;\n        }\n    }\n    beats.push(current_beat);\n\
    \    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `str` with `&str`\n  --> /tmp/tmpb4wn8tto.rs:14:17\n\
    \   |\n14 |         if note == current_note {\n   |                 ^^ no implementation\
    \ for `str == &str`\n   |\n   = help: the trait `PartialEq<&str>` is not implemented\
    \ for `str`\n   = note: required because of the requirements on the impl of `PartialEq<&&str>`\
    \ for `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb4wn8tto.rs:19:28\n\
    \   |\n19 |             current_note = note;\n   |                           \
    \ ^^^^ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&str`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = vec![];\n    let mut\
    \ notes: Vec<&str> = vec![];\n    let mut notes_len: usize = 0;\n    let mut current_note\
    \ = String::new();\n    let mut current_beat = 0;\n    let mut current_len = 0;\n\
    \    let mut current_len2 = 0;\n    let mut current_len3 = 0;\n    let mut current_len4\
    \ = 0;\n    let mut current_len5 = 0;\n    let mut current_len6 = 0;\n    let\
    \ mut current_len7 = 0;\n    let mut current_len8 = 0;\n    let mut current_len9\
    \ = 0;\n    let mut current_len10 = 0;\n    let mut current_len11 = 0;\n    let\
    \ mut current_len12 = 0;\n    let mut current_len13 = 0;\n    let mut current_len14\
    \ = 0;\n    let mut current_len15 = 0;\n    let mut current_len16 = 0;\n    let\
    \ mut current_len17 = 0;\n    let mut current_len18 = 0;\n    let mut current_len19\
    \ = 0;\n    let mut current_len20 = 0;\n    let mut current_len21 = 0;\n    let\
    \ mut current_len22 = 0;\n    let mut current_len23 = 0;\n    let mut current_len24\
    \ = 0;\n    let mut current_len25 = 0;\n    let mut current_len26 = 0;\n    let\
    \ mut current_len27 = 0;\n    let mut current_len28 = 0;\n    let mut current_len29\
    \ = 0;\n    let mut current_len30 = 0;\n    let mut current_len31 = 0;\n    let\
    \ mut current_len32 = 0;\n    let mut current_len33 = 0;\n    let mut current_len34\
    \ = 0;\n    let mut current_len35 = 0;\n    let mut current_len36 = 0;\n    let\
    \ mut current_len37 = 0;\n    let mut current_len38 = 0;\n    let mut current_len39\
    \ = 0;\n    let mut current_len40 = 0;\n    let mut current_len41 = 1;\n    let\
    \ mut current_len42 = 1;\n    let mut current_len43 = 1;\n    let mut current_len44\
    \ = 1;\n    let mut current_len45 = 1;\n    let mut current_len46 = 1;\n    let\
    \ mut current_len47 = 1;\n    let mut current_len48 = 1;\n    let mut current_len49\
    \ = 1;\n    let mut current_len50 = 1;\n    let mut current_len51 = 1;\n    let\
    \ mut current_len52 = 1;\n    let mut current_len53 = 1;\n    let mut current_len54\
    \ = 1;\n    let mut current_len55 = 1;\n    let mut current_len56 = 1;\n    let\
    \ mut current_len57\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp2qli1i1j.rs:70:26\n   |\n\
    70 |     let mut current_len57\n   |                          ^ help: add `;`\
    \ here\n71 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp2qli1i1j.rs:8:41\n  |\n8 | fn parse_music(music_string: String) -> Vec<isize>\
    \ {\n  |    -----------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n    let mut notes\
    \ = music_string.chars().enumerate().filter(|(_, c)| c != '|');\n    let mut current_note\
    \ = 0;\n    let mut last_note = 0;\n    let mut last_beat = 0;\n    let mut last_beats\
    \ = 0;\n    for note in notes {\n        if note.1 == 0 {\n            if last_note\
    \ != 0 {\n                beats.push(last_beat);\n            }\n            last_beat\
    \ = 0;\n            last_note = 0;\n            last_beats = 0;\n            current_note\
    \ = note.0;\n        } else {\n            if last_note != 0 {\n             \
    \   beats.push(last_beat);\n            }\n            last_beat = 0;\n      \
    \      last_note = note.0;\n            last_beats = note.1;\n            current_note\
    \ = note.0;\n        }\n    }\n    if last_note != 0 {\n        beats.push(last_beat);\n\
    \    }\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp5g34q8es.rs:10:72\n\
    \   |\n10 |     let mut notes = music_string.chars().enumerate().filter(|(_, c)|\
    \ c != '|');\n   |                                                           \
    \             ^^ no implementation for `&char == char`\n   |\n   = help: the trait\
    \ `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5g34q8es.rs:16:22\n   |\n16 |         if note.1 == 0 {\n\
    \   |                      ^ expected `char`, found `u8`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5g34q8es.rs:30:26\n   |\n30 |             last_beats =\
    \ note.1;\n   |                          ^^^^^^ expected integer, found `char`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat = 0;\n    let mut current_note = 0;\n    let mut current_note_length\
    \ = 0;\n    let mut current_note_length_index = 0;\n    let mut current_note_length_value\
    \ = 0;\n    let mut current_note_length_value_length = 0;\n    let mut current_note_length_value_length_index\
    \ = 0;\n    let mut current_note_length_value_length_value = 0;\n    let mut current_note_length_value_length_value_index\
    \ = 0;\n    let mut current_note_length_value_length_value_value = 0;\n    let\
    \ mut current_note_length_value_length_value_value_index = 0;\n    let mut current_note_length_value_length_value_value_value\
    \ = 0;\n    let mut current_note_length_value_length_value_value_index = 0;\n\
    \    let mut current_note_length_value_length_value_value_value = 0;\n    let\
    \ mut current_note_length_value_length_value_value_index = 0;\n    let mut current_note_length_value_length_value_value_value\
    \ = 0;\n    let mut current_note_length_value_length_value_value_index = 0;\n\
    \    let mut current_note_length_value_length_value_value_value = 0;\n    let\
    \ mut current_note_length_value_length_value_value_index = 0;\n    let mut current_note_length_value_length_value_value_value\
    \ = 0;\n    let mut current_note_length_value_length_value_value_index = 0;\n\
    \    let mut current_note_length_value_length_value_value_value = 0;\n    let\
    \ mut current_note_length_value_length_value_value_index = 0;\n    let mut current_note_length_value_length_value_value_value\
    \ = 0;\n    let mut current_note_length_value_length_value_value_index = 0;\n\
    \    let mut current_note_length_value_length_value_value_value = 0;\n    let\
    \ mut current_note_length_value_length_value_value_index = 0;\n    let mut current_note_length_value_length_value_value_value\
    \ = 0;\n    let mut current_note_length_value_length_value_value_index = 0;\n\
    \    let mut current_note_length_value_length_value_value_value = 0;\n    let\
    \ mut current_note_length_value_length_value_value_index = 0;\n    let mut current_note_length_value_length_value_value_value\
    \ = 0;\n    let mut current_note_length_value_length_value_value_index = 0;\n\
    \    let mut current_note_length_value_length_value_value_value = 0;\n    let\
    \ mut current_note_length_value_length_value_value_index = 0;\n    let mut current_note_length_value_length_value_value_value\
    \ = 0;\n    let mut current_note_length_value_length_value_value_index = 0;\n\
    \    let mut current_note_length_value_length_value_value_value = 0;\n    let\
    \ mut current_note_length_value_length_value_value_index = 0;\n    let mut current_note_length_value_length_value_value_value\
    \ = 0;\n    let mut current_note_length_value_length_value_value\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp2kkcsh6c.rs:50:57\n   |\n\
    50 |     let mut current_note_length_value_length_value_value\n   |          \
    \                                               ^ help: add `;` here\n51 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp2kkcsh6c.rs:8:41\n\
    \  |\n8 | fn parse_music(music_string: String) -> Vec<isize> {\n  |    -----------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = vec![];\n    let mut\
    \ notes: Vec<&str> = music_string.split_whitespace().collect();\n    let mut last_note\
    \ = notes.last().unwrap();\n    let mut last_beat = -1;\n    let mut last_beats:\
    \ isize = 0;\n    notes.iter().for_each(|note| {\n        if note == last_note\
    \ {\n            last_beats += 1;\n        } else {\n            beats.push(last_beats);\n\
    \            last_beats = 1;\n            last_note = note;\n        }\n    });\n\
    \    beats.push(last_beats);\n    beats\n}\n\nfn main() {\n    let candidate =\
    \ parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpujk_qt0k.rs:11:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = vec![];\n    let mut\
    \ notes: Vec<&str> = vec![];\n    let mut last_note = String::new();\n    let\
    \ mut last_beat = 0;\n    let mut last_beats: isize = 0;\n    let mut last_beats_length\
    \ = 0;\n    let mut last_beats_lengths: Vec<isize> = vec![];\n    let mut last_beats_lengths_length\
    \ = 0;\n    let mut last_beats_lengths_lengths: Vec<isize> = vec![];\n    let\
    \ mut last_beats_lengths_lengths_length = 0;\n    let mut last_beats_lengths_lengths_lengths:\
    \ Vec<isize> = vec![];\n    let mut last_beats_lengths_lengths_lengths_length\
    \ = 0;\n    let mut last_beats_lengths_lengths_lengths_lengths: Vec<isize> = vec![];\n\
    \    let mut last_beats_lengths_lengths_lengths_lengths_length = 0;\n    let mut\
    \ last_beats_lengths_lengths_lengths_lengths_lengths: Vec<isize> = vec![];\n \
    \   let mut last_beats_lengths_lengths_lengths_lengths_lengths_length = 0;\n \
    \   let mut last_beats_lengths_lengths_lengths_lengths_lengths_lengths: Vec<isize>\
    \ = vec![];\n    let mut last_beats_lengths_lengths_lengths_lengths_lengths_lengths_length\
    \ = 0;\n    let mut last_beats_lengths_lengths_lengths_lengths_lengths_lengths_lengths:\
    \ Vec<isize> = vec![];\n    let mut last_beats_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length\
    \ = 0;\n    let mut last_beats_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths:\
    \ Vec<isize> = vec![];\n    let mut last_beats_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length\
    \ = 0;\n    let mut last_beats_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths:\
    \ Vec<isize> = vec![];\n    let mut last_beats_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length\
    \ = 0;\n    let mut last_beats_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths:\
    \ Vec<isize> = vec![];\n    let mut last_\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp0lugw86_.rs:34:18\n   |\n\
    34 |     let mut last_\n   |                  ^ help: add `;` here\n35 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp0lugw86_.rs:8:41\n\
    \  |\n8 | fn parse_music(music_string: String) -> Vec<isize> {\n  |    -----------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = vec![];\n    let mut current_beat\
    \ = 0;\n    let mut current_note = String::new();\n    let mut current_note_len\
    \ = 0;\n    for c in music_string {\n        if c.is_ascii() {\n            if\
    \ c.to_ascii_lowercase() == \"o\" {\n                beats.push(current_beat);\n\
    \                current_beat += 4;\n                current_note = String::new();\n\
    \                current_note_len = String::new();\n            } else if c.to_ascii_lowercase()\
    \ == \"o|\" {\n                beats.push(current_beat);\n                current_beat\
    \ += 2;\n                current_note = String::new();\n                current_note_len\
    \ = String::new();\n            } else if c.to_ascii_lowercase() == \".|\" {\n\
    \                beats.push(current_beat);\n                current_beat += 1;\n\
    \                current_note = String::new();\n                current_note_len\
    \ = String::new();\n            } else {\n                current_note.push(c);\n\
    \                current_note_len = c.len();\n            }\n        } else {\n\
    \            if current_note.len() > 0 {\n                beats.push(current_beat);\n\
    \                current_beat += current_note_len;\n                current_note\
    \ = String::new();\n                current_note_len = String::new();\n      \
    \      }\n        }\n    }\n    beats.push(current_beat);\n    current_beat +=\
    \ current_note_len;\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `String` is not an iterator\n   --> /tmp/tmppsy9191d.rs:13:14\n\
    \    |\n13  |     for c in music_string {\n    |              ^^^^^^^^^^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = help:\
    \ the trait `Iterator` is not implemented for `String`\n    = note: required because\
    \ of the requirements on the impl of `IntoIterator` for `String`\nnote: required\
    \ by `into_iter`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppsy9191d.rs:19:36\n\
    \   |\n19 |                 current_note_len = String::new();\n   |          \
    \                          ^^^^^^^^^^^^^ expected integer, found struct `String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmppsy9191d.rs:24:36\n   |\n24 |\
    \                 current_note_len = String::new();\n   |                    \
    \                ^^^^^^^^^^^^^ expected integer, found struct `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppsy9191d.rs:29:36\n   |\n29 |              \
    \   current_note_len = String::new();\n   |                                  \
    \  ^^^^^^^^^^^^^ expected integer, found struct `String`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppsy9191d.rs:39:36\n   |\n39 |                 current_note_len\
    \ = String::new();\n   |                                    ^^^^^^^^^^^^^ expected\
    \ integer, found struct `String`\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = vec![];\n    let mut\
    \ notes: Vec<&str> = music_string.split_whitespace().collect();\n    let mut current_beat:\
    \ isize = 0;\n    let mut current_note = notes.first().unwrap();\n    let mut\
    \ current_note_len: isize = 0;\n    let mut last_note = notes.last().unwrap();\n\
    \    let mut last_note_len: isize = 0;\n    let mut last_beat: isize = 0;\n  \
    \  let mut last_beat_len: isize = 0;\n    while current_note != last_note {\n\
    \        if current_note_len > last_note_len() {\n            beats.push(current_beat);\n\
    \            current_beat = 0;\n            current_note_len = 0;\n        }\n\
    \        if current_note_len == last_note_len() {\n            current_beat +=\
    \ 1;\n        }\n        if current_note_len > last_note_len() {\n           \
    \ current_note_len = 0;\n        }\n        if current_note_len == last_note_len()\
    \ {\n            current_note_len += 1;\n        }\n        if current_note_len\
    \ == last_note_len() {\n            current_note_len += 1;\n        }\n      \
    \  if current_note_len == last_note_len() {\n            current_note_len += 1;\n\
    \        }\n        if current_note_len == last_note_len() {\n            current_note_len\
    \ += 1;\n        }\n        if current_note_len == last_note_len() {\n       \
    \     current_note_len += 1;\n        }\n        if current_note_len == last_note_len()\
    \ {\n            current_note_len += 1;\n        }\n        if current_note_len\
    \ == last_note_len() {\n            current_note_len += 1;\n        }\n      \
    \  if current_note_len == last_note_len() {\n            current_note_len += 1;\n\
    \        }\n        if current_note_len == last_note_len() {\n            current_note_len\
    \ += 1;\n        }\n        if current_note_len == last_note_len() {\n       \
    \     current_note_len += 1;\n        }\n        if current_note_len == last_note_len()\
    \ {\n            current_note_len += 1;\n        }\n        if current_note_len\
    \ == last_note_len() {\n            current_note_len += 1;\n        }\n      \
    \  if current_note_len == last_note_len() {\n            current_note_len += 1;\n\
    \        }\n        if current_note_len == last_note_len() {\n            current_note_len\
    \ += 1;\n        }\n        if current_note_len == last_note_len() {\n       \
    \     current_note_len += 1;\n        }\n        if current_note_len == last_note_len()\
    \ {\n            current_note_len += 1;\n        }\n        if current_note_len\
    \ == last_note_len() {\n            current_note_len += 1;\n        }\n      \
    \  if current_note_len == last_note_len() {\n            current_note_len += 1;\n\
    \        }\n        if current_note\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpvxdqn4yv.rs:94:3\n\
    \   |\n8  | fn parse_music(music_string: String) -> Vec<isize> {\n   |       \
    \                                             - unclosed delimiter\n...\n18 |\
    \     while current_note != last_note {\n   |                                \
    \     - this delimiter might not be properly closed...\n...\n85 | }\n   | - ...as\
    \ it matches this but it has different indentation\n...\n94 | }\n   |   ^\n\n\
    error: expected `{`, found `}`\n  --> /tmp/tmpvxdqn4yv.rs:85:1\n   |\n84 |   \
    \      if current_note\n   |         -- this `if` expression has a condition,\
    \ but no block\n85 | }\n   | ^ expected `{`\n\nerror[E0618]: expected function,\
    \ found `isize`\n  --> /tmp/tmpvxdqn4yv.rs:19:31\n   |\n15 |     let mut last_note_len:\
    \ isize = 0;\n   |         ----------------- `last_note_len` has type `isize`\n\
    ...\n19 |         if current_note_len > last_note_len() {\n   |              \
    \                 ^^^^^^^^^^^^^--\n   |                               |\n   |\
    \                               call expression requires function\n\nerror[E0618]:\
    \ expected function, found `isize`\n  --> /tmp/tmpvxdqn4yv.rs:24:32\n   |\n15\
    \ |     let mut last_note_len: isize = 0;\n   |         ----------------- `last_note_len`\
    \ has type `isize`\n...\n24 |         if current_note_len == last_note_len() {\n\
    \   |                                ^^^^^^^^^^^^^--\n   |                   \
    \             |\n   |                                call expression requires\
    \ function\n\nerror[E0618]: expected function, found `isize`\n  --> /tmp/tmpvxdqn4yv.rs:27:31\n\
    \   |\n15 |     let mut last_note_len: isize = 0;\n   |         -----------------\
    \ `last_note_len` has type `isize`\n...\n27 |         if current_note_len > last_note_len()\
    \ {\n   |                               ^^^^^^^^^^^^^--\n   |                \
    \               |\n   |                               call expression requires\
    \ function\n\nerror[E0618]: expected function, found `isize`\n  --> /tmp/tmpvxdqn4yv.rs:30:32\n\
    \   |\n15 |     let mut last_note_len: isize = 0;\n   |         -----------------\
    \ `last_note_len` has type `i"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n    let\
    \ mut notes: Vec<&str> = music_string.split_whitespace().collect();\n    let mut\
    \ current_note = notes.first().unwrap();\n    let mut current_beat = 0;\n    let\
    \ mut current_length = 0;\n    for note in notes {\n        if note == current_note\
    \ {\n            current_beat += 1;\n            current_length += 1;\n      \
    \  } else {\n            beats.push(current_beat);\n            current_beat =\
    \ 1;\n            current_length = 1;\n            current_note = note;\n    \
    \    }\n    }\n    beats.push(current_beat);\n    beats\n}\n\nfn main() {\n  \
    \  let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `str` with `&str`\n  --> /tmp/tmpjrbujdqe.rs:15:17\n\
    \   |\n15 |         if note == current_note {\n   |                 ^^ no implementation\
    \ for `str == &str`\n   |\n   = help: the trait `PartialEq<&str>` is not implemented\
    \ for `str`\n   = note: required because of the requirements on the impl of `PartialEq<&&str>`\
    \ for `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjrbujdqe.rs:22:28\n\
    \   |\n22 |             current_note = note;\n   |                           \
    \ ^^^^ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&str`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n    let mut notes\
    \ = music_string.chars().enumerate();\n    let mut current_note = 0;\n    let\
    \ mut current_beat = 0;\n    let mut current_note_len = 0;\n    let mut current_beat_len\
    \ = 0;\n    let mut current_note_char = 0;\n    let mut current_beat_char = 0;\n\
    \    let mut current_note_char_is_octave = false;\n    let mut current_beat_char_is_octave\
    \ = false;\n    let mut current_note_char_is_note = false;\n    let mut current_beat_char_is_note\
    \ = false;\n    let mut current_note_char_is_rest = false;\n    let mut current_beat_char_is_rest\
    \ = false;\n    let mut current_note_char_is_rest = false;\n    let mut current_beat_char_is_rest\
    \ = false;\n    let mut current_note_char_is_rest = false;\n    let mut current_beat_char_is_rest\
    \ = false;\n    let mut current_note_char_is_rest = false;\n    let mut current_beat_char_is_rest\
    \ = false;\n    let mut current_note_char_is_rest = false;\n    let mut current_beat_char_is_rest\
    \ = false;\n    let mut current_note_char_is_rest = false;\n    let mut current_beat_char_is_rest\
    \ = false;\n    let mut current_note_char_is_rest = false;\n    let mut current_beat_char_is_rest\
    \ = false;\n    let mut current_note_char_is_rest = false;\n    let mut current_beat_char_is_rest\
    \ = false;\n    let mut current_note_char_is_rest = false;\n    let mut current_beat_char_is_rest\
    \ = false;\n    let mut current_note_char_is_rest = false;\n    let mut current_beat_char_is_rest\
    \ = false;\n    let mut current_note_char_is_rest = false;\n    let mut current_beat_char_is_rest\
    \ = false;\n    let mut current_note_char_is_rest = false;\n    let mut current_beat_char_is_rest\
    \ = false;\n    let mut current_note_char_is_rest = false;\n    let mut current_beat_char_is_rest\
    \ = false;\n    let mut current_note_char_is_rest = false;\n    let mut current_beat_char_is_rest\
    \ = false;\n    let mut current_note_char_is_rest = false;\n    let mut current_beat_char_is_rest\
    \ = false;\n    let mut current_note_char_is_rest = false;\n    let mut current_beat_char_is_rest\
    \ = false;\n    let mut current_note_char_is_rest = false;\n    let mut current_beat_char_is_rest\
    \ = false;\n    let mut current_note_char_is_rest = false;\n    let mut current_beat_char_is_rest\
    \ = false;\n    let mut current_note_char_is_rest = false;\n    let mut current_beat_char_is_rest\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptcfv0b0a.rs:58:38\n   |\n\
    58 |     let mut current_beat_char_is_rest\n   |                             \
    \         ^ help: add `;` here\n59 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmptcfv0b0a.rs:8:41\n  |\n8 | fn parse_music(music_string:\
    \ String) -> Vec<isize> {\n  |    -----------                          ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut notes = music_string.chars().map(|c| match\
    \ c {\n        'o' => 1,\n        'o|' => 2,\n        '.|' => 3,\n        _ =>\
    \ 0,\n    }).collect::<Vec<isize>>();\n    notes.sort_unstable();\n    notes.reverse();\n\
    \    notes\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpps61qbmq.rs:11:12\n\
    \   |\n11 |         'o|' => 2,\n   |            ^^^^^^^\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = vec![];\n    let mut\
    \ current_beat: isize = 0;\n    let mut current_note = String::new();\n    let\
    \ mut current_note_length = 0;\n    let mut current_note_length_index = 0;\n \
    \   let mut current_note_length_index2 = 0;\n    for c in music_string {\n   \
    \     if c.is_ascii() {\n            if c == 'o' {\n                if current_note_length_index\
    \ == 0 {\n                    current_note = String::new();\n                \
    \    current_note_length_index = 0;\n                    current_note_length_index2\
    \ = 0;\n                }\n                current_note.push(c);\n           \
    \     current_note_length_index += 1;\n            } else if c == '|' {\n    \
    \            if current_note_length_index2 == 0 {\n                    current_note\
    \ = String::new();\n                    current_note_length_index = 0;\n     \
    \               current_note_length_index2 = 1;\n                }\n         \
    \       current_note.push(c);\n                current_note_length_index += 1;\n\
    \            } else if c == '.' {\n                if current_note_length_index2\
    \ == 0 {\n                    current_note = String::new();\n                \
    \    current_note_length_index = 0;\n                    current_note_length_index2\
    \ = 1;\n                }\n                current_note.push(c);\n           \
    \     current_note_length_index += 1;\n            } else if c == '|' {\n    \
    \            if current_note_length_index2 == 0 {\n                    current_note\
    \ = String::new();\n                    current_note_length_index = 0;\n     \
    \               current_note_length_index2 = 1;\n                }\n         \
    \       current_note.push(c);\n                current_note_length_index += 1;\n\
    \            } else if c == '|' {\n                if current_note_length_index2\
    \ == 0 {\n                    current_note = String::new();\n                \
    \    current_note_length_index = 0;\n                    current_note_length_index2\
    \ = 1;\n                }\n                current_note.push(c);\n           \
    \     current_note_length_index += 1;\n            } else if c == '|' {\n    \
    \            if current_note_length_index2 == 0 {\n                    current_note\
    \ = String::new();\n                    current_note_length_index = 0;\n     \
    \               current_note_length_index2 = 1;\n                }\n         \
    \       current_note.push(c);\n                current_note_length_index += 1;\n\
    \            } else if c == '|' {\n                if current_note_length_index2\
    \ == 0 {\n                    current_note = String::new();\n                \
    \    current_note_length_index = 0;\n                    current_note_length_index2\
    \ = 1;\n                }\n                current_note.push(c);\n           \
    \     current_note_length_index += 1;\n            } else if c == '|' {\n    \
    \            if current_note_length_index2 == 0 {\n                    current_note\
    \ = String::new();\n                    current_note_length_index = 0;\n     \
    \               current_note_length_index2 = 1;\n                }\n         \
    \       current_note.push(c);\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp8z75_zky.rs:89:3\n\
    \   |\n8  | fn parse_music(music_string: String) -> Vec<isize> {\n   |       \
    \                                             - unclosed delimiter\n...\n15 |\
    \     for c in music_string {\n   |                           - unclosed delimiter\n\
    16 |         if c.is_ascii() {\n   |                         - unclosed delimiter\n\
    ...\n73 |             } else if c == '|' {\n   |                             \
    \   - this delimiter might not be properly closed...\n...\n80 | }\n   | - ...as\
    \ it matches this but it has different indentation\n...\n89 | }\n   |   ^\n\n\
    error[E0277]: `String` is not an iterator\n   --> /tmp/tmp8z75_zky.rs:15:14\n\
    \    |\n15  |     for c in music_string {\n    |              ^^^^^^^^^^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = help:\
    \ the trait `Iterator` is not implemented for `String`\n    = note: required because\
    \ of the requirements on the impl of `IntoIterator` for `String`\nnote: required\
    \ by `into_iter`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8z75_zky.rs:15:5\n\
    \   |\n8  |   fn parse_music(music_string: String) -> Vec<isize> {\n   |     \
    \                                      ---------- expected `Vec<isize>` because\
    \ of return type\n...\n15 | /     for c in music_string {\n16 | |         if c.is_ascii()\
    \ {\n17 | |             if c == 'o' {\n18 | |                 if current_note_length_index\
    \ == 0 {\n...  |\n88 | |     assert_eq!(candidate(String::from(\"o| .| o| .| o\
    \ o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n89 | | }\n   | |__^ expected struct\
    \ `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n         \
    \  found unit type `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = vec![];\n    let mut\
    \ current_beat = 0;\n    let mut current_note = String::new();\n    let mut current_octave\
    \ = 0;\n    let mut current_length = 0;\n    let mut current_note_is_octave =\
    \ false;\n    let mut current_note_is_length = false;\n\n    for c in music_string\
    \ {\n        if c == 'o' {\n            if current_note_is_octave {\n        \
    \        println!(\"Invalid music string: note {} is octave {} but octave was\
    \ already set\", current_note, current_octave);\n                return beats;\n\
    \            }\n            current_note_is_octave = true;\n            current_octave\
    \ = 0;\n            current_length = 0;\n            current_note_is_length =\
    \ false;\n            current_note = String::new();\n            current_note_is_length\
    \ = true;\n            current_beat = 0;\n        } else if c == '|' {\n     \
    \       if current_note_is_length {\n                println!(\"Invalid music\
    \ string: note {} is length {} but length was already set\", current_note, current_length);\n\
    \                return beats;\n            }\n            current_note_is_length\
    \ = true;\n            current_length = 0;\n            current_note_is_octave\
    \ = false;\n            current_note = String::new();\n            current_note_is_octave\
    \ = true;\n            current_beat = 0;\n        } else if c == '.' {\n     \
    \       if current_note_is_length {\n                println!(\"Invalid music\
    \ string: note {} is length {} but length was already set\", current_note, current_length);\n\
    \                return beats;\n            }\n            current_note_is_length\
    \ = true;\n            current_length = 0;\n            current_note_is_octave\
    \ = false;\n            current_note = String::new();\n            current_note_is_octave\
    \ = true;\n            current_beat = 0;\n        } else if c.is_ascii() {\n \
    \           if current_note_is_length {\n                current_length += 1;\n\
    \            } else if current_note_is_octave {\n                current_octave\
    \ += 1;\n            } else if current_note.is_empty() {\n                current_note\
    \ = c.to_ascii_lowercase();\n                current_beat = 0;\n            }\
    \ else {\n                println!(\"Invalid music string: note {} is length {},\
    \ octave {} but note was already set\", current_note, current_length, current_octave);\n\
    \                return beats;\n            }\n        } else {\n            println!(\"\
    Invalid music string: note {} is length {}, octave {} but note was already set\"\
    , current_note, current_length, current_octave);\n            return beats;\n\
    \        }\n    }\n\n    if current_note_is_length {\n        println!(\"Invalid\
    \ music string: note {} is length {}, octave {} but note was already set\", current_note,\
    \ \n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpiy3agwui.rs:81:3\n\
    \   |\n8  | fn parse_music(music_string: String) -> Vec<isize> {\n   |       \
    \                                             - unclosed delimiter\n...\n70 |\
    \     if current_note_is_length {\n   |                               - this delimiter\
    \ might not be properly closed...\n71 |         println!(\"Invalid music string:\
    \ note {} is length {}, octave {} but note was already set\", current_note, \n\
    72 | }\n   | - ...as it matches this but it has different indentation\n...\n81\
    \ | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpiy3agwui.rs:71:17\n\
    \   |\n8  | fn parse_music(music_string: String) -> Vec<isize> {\n   |       \
    \                                             - closing delimiter possibly meant\
    \ for this\n...\n71 |         println!(\"Invalid music string: note {} is length\
    \ {}, octave {} but note was already set\", current_note, \n   |             \
    \    ^ unclosed delimiter\n72 | }\n   | ^ mismatched closing delimiter\n\nerror:\
    \ 3 positional arguments in format string, but there is 1 argument\n  --> /tmp/tmpiy3agwui.rs:71:46\n\
    \   |\n71 |         println!(\"Invalid music string: note {} is length {}, octave\
    \ {} but note was already set\", current_note, \n   |                        \
    \                      ^^           ^^         ^^                            ------------\n\
    \nerror[E0277]: `String` is not an iterator\n   --> /tmp/tmpiy3agwui.rs:17:14\n\
    \    |\n17  |     for c in music_string {\n    |              ^^^^^^^^^^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = help:\
    \ the trait `Iterator` is not implemented for `String`\n    = note: required because\
    \ of the requirements on the impl of `IntoIterator` for `String`\nnote: required\
    \ by `into_iter`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpiy3agwui.rs:8:41\n\
    \  |\n8 | fn parse_music(music_string: String) -> Vec<isize> {\n  |    -----------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression"
  stdout: ''
  timestamp: 1659749153
