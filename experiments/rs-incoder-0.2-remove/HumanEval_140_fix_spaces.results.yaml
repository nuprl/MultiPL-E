language: rs
name: HumanEval_140_fix_spaces
results:
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp8d1jat4l.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \")\n        .chars()\n        .filter(|c|\
    \ c.is_whitespace())\n        .for_each(|c| s.replace(c, \"-\"));\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzcrcnd0n.rs:9:23\n  |\n9 |\
    \         .for_each(|c| s.replace(c, \"-\"));\n  |                       ^^^^^^^^^^^^^^^^^\
    \ expected `()`, found struct `String`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n\
    \        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpm1ogfber.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \" \");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpdmfuot7v.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp7psxcq4g.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n\
    \        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpm1ogfber.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \").trim()\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuyzsltr_.rs:6:5\n  |\n4 |\
    \ fn fix_spaces(text: String) -> String {\n  |                               \
    \ ------ expected `String` because of return type\n5 |     let mut s = text;\n\
    6 |     s.replace(\"_\", \" \").replace(\"  \", \"- \").trim()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |     |\n  |     expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \" \");\n    let mut i = 0;\n    while\
    \ i < s.len() {\n        if s[i] != ' ' {\n            i += 1;\n        } else\
    \ {\n            if i + 1 < s.len() {\n                if s[i + 1] == ' ' {\n\
    \                    i += 1;\n                } else {\n                    s\
    \ = &s[0..i];\n                    s.replace(\"  \", \"_\");\n               \
    \ }\n            } else {\n                s = &s[0..i];\n                s.replace(\"\
    \  \", \"_\");\n            }\n        }\n    }\n    s\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmp74j2kx_c.rs:9:12\n\
    \  |\n9 |         if s[i] != ' ' {\n  |            ^^^^ `String` cannot be indexed\
    \ by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp74j2kx_c.rs:13:20\n\
    \   |\n13 |                 if s[i + 1] == ' ' {\n   |                    ^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp74j2kx_c.rs:16:25\n\
    \   |\n16 |                     s = &s[0..i];\n   |                         ^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\nhelp: try using a conversion method\n\
    \   |\n16 |                     s = (&s[0..i]).to_string();\n   |            \
    \             +        +++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp74j2kx_c.rs:20:21\n   |\n20 |                 s = &s[0..i];\n   |  \
    \                   ^^^^^^^^ expected struct `String`, found `&str`\n   |\nhelp:\
    \ try using a conversion method\n   |\n20 |                 s = (&s[0..i]).to_string();\n\
    \   |                     +        +++++++++++++\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut spaces = 0;\n    for ch in text.chars()\
    \ {\n        if ch == ' ' {\n            spaces += 1;\n        } else {\n    \
    \        spaces = 0;\n        }\n        if spaces == 2 {\n            result.push_str(\"\
    _\");\n            spaces = 0;\n        } else {\n            result.push_str(&format!(\"\
    {}\", ch));\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp72u10qgu.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp8d1jat4l.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp8d1jat4l.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ let mut i = 0;\n        while i < s.len() - 2 {\n            if s[i] == s[i\
    \ + 1] && s[i + 1] == s[i + 2] {\n                s.insert(i + 1, \"-\");\n  \
    \              i += 2;\n            } else {\n                i += 1;\n      \
    \      }\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp5i42wsq4.rs:10:16\n\
    \   |\n10 |             if s[i] == s[i + 1] && s[i + 1] == s[i + 2] {\n   |  \
    \              ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp5i42wsq4.rs:10:24\n   |\n10 |             if s[i] == s[i + 1] &&\
    \ s[i + 1] == s[i + 2] {\n   |                        ^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp5i42wsq4.rs:10:36\n   |\n10 |             if s[i] == s[i + 1] &&\
    \ s[i + 1] == s[i + 2] {\n   |                                    ^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \  "
  stdout: ''
  timestamp: 1659976515
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \" \").unwrap();\n    if s.len() > 2 {\n\
    \        s.replace(\"  \", \" \").unwrap();\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpo8x78kla.rs:6:26\n  |\n6 |     s.replace(\"  \"\
    , \" \").unwrap();\n  |                          ^^^^^^ method not found in `String`\n\
    \nerror[E0599]: no method named `unwrap` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpo8x78kla.rs:8:30\n  |\n8 |         s.replace(\"  \", \"\
    \ \").unwrap();\n  |                              ^^^^^^ method not found in `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976515
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ let mut s = text;\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpcvkxjv2l.rs:5:9\n\
    \  |\n5 |     let mut s = text;\n  |         ----^\n  |         |\n  |       \
    \  help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\
    \nwarning: variable does not need to be mutable\n --> /tmp/tmpcvkxjv2l.rs:8:13\n\
    \  |\n8 |         let mut s = text;\n  |             ----^\n  |             |\n\
    \  |             help: remove this `mut`\n\nerror[E0382]: use of moved value:\
    \ `text`\n --> /tmp/tmpcvkxjv2l.rs:8:21\n  |\n4 | fn fix_spaces(text: String)\
    \ -> String {\n  |               ---- move occurs because `text` has type `String`,\
    \ which does not implement the `Copy` trait\n5 |     let mut s = text;\n  |  \
    \               ---- value moved here\n...\n8 |         let mut s = text;\n  |\
    \                     ^^^^ value used here after move\n\nerror: aborting due to\
    \ previous error; 2 warnings emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976515
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().filter(|c| c\
    \ == ' ').count() > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n --> /tmp/tmpmcyezyyk.rs:7:31\n\
    \  |\n7 |     if s.chars().filter(|c| c == ' ').count() > 2 {\n  |           \
    \                    ^^ no implementation for `&char == char`\n  |\n  = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n  = help: the trait\
    \ `PartialEq` is implemented for `char`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976515
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp8d1jat4l.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \").trim()\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuyzsltr_.rs:6:5\n  |\n4 |\
    \ fn fix_spaces(text: String) -> String {\n  |                               \
    \ ------ expected `String` because of return type\n5 |     let mut s = text;\n\
    6 |     s.replace(\"_\", \" \").replace(\"  \", \"- \").trim()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |     |\n  |     expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \" \").unwrap();\n    if s.len() > 2 {\n\
    \        s.replace(\"  \", \" \").unwrap();\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpo8x78kla.rs:6:26\n  |\n6 |     s.replace(\"  \"\
    , \" \").unwrap();\n  |                          ^^^^^^ method not found in `String`\n\
    \nerror[E0599]: no method named `unwrap` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpo8x78kla.rs:8:30\n  |\n8 |         s.replace(\"  \", \"\
    \ \").unwrap();\n  |                              ^^^^^^ method not found in `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976515
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp8d1jat4l.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp8d1jat4l.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \" \").unwrap();\n    let mut i = 0;\n\
    \    while i < s.len() {\n        if s[i] == ' ' {\n            s[i] = '_';\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \").unwrap();\n    }\n   \
    \ s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpypg94ntn.rs:6:26\n  |\n6 |     s.replace(\"  \"\
    , \" \").unwrap();\n  |                          ^^^^^^ method not found in `String`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpypg94ntn.rs:9:12\n\
    \  |\n9 |         if s[i] == ' ' {\n  |            ^^^^ `String` cannot be indexed\
    \ by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n\
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \   <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpypg94ntn.rs:10:13\n\
    \   |\n10 |             s[i] = '_';\n   |             ^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `unwrap` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpypg94ntn.rs:17:30\n   |\n17 |         s.replace(\"\
    \  \", \" \").unwrap();\n   |                              ^^^^^^ method not found\
    \ in `String`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976515
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ let mut s = s;\n        s.replace(\"  \", \" \");\n        while s.len() > 2\
    \ {\n            s = s.replace(\"  \", \" \");\n        }\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmp6kczrxj2.rs:5:9\n\
    \  |\n5 |     let mut s = text;\n  |         ----^\n  |         |\n  |       \
    \  help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\
    \nerror[E0382]: use of moved value: `s`\n  --> /tmp/tmp6kczrxj2.rs:14:5\n   |\n\
    5  |     let mut s = text;\n   |         ----- move occurs because `s` has type\
    \ `String`, which does not implement the `Copy` trait\n...\n8  |         let mut\
    \ s = s;\n   |                     - value moved here\n...\n14 |     s\n   | \
    \    ^ value used here after move\n\nerror: aborting due to previous error; 1\
    \ warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976515
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmph4szluwx.rs:79:1\n   |\n79\
    \ | }\n   | ^\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976515
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \" \").unwrap();\n    let mut i = 0;\n\
    \    while i < s.len() {\n        if s[i] == ' ' {\n            s.insert(i, \"\
    \ \");\n            i += 1;\n        }\n        i += 1;\n    }\n    if s.len()\
    \ > 2 {\n        let mut i = 0;\n        while i < s.len() {\n            if s[i]\
    \ == ' ' {\n                s.insert(i, \" \");\n                i += 1;\n   \
    \         } else {\n                i += 1;\n            }\n        }\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpmiwhm95f.rs:6:26\n  |\n6 |     s.replace(\"  \"\
    , \" \").unwrap();\n  |                          ^^^^^^ method not found in `String`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpmiwhm95f.rs:9:12\n\
    \  |\n9 |         if s[i] == ' ' {\n  |            ^^^^ `String` cannot be indexed\
    \ by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n\
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \   <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmiwhm95f.rs:10:25\n   |\n10 |\
    \             s.insert(i, \" \");\n   |                         ^^^ expected `char`,\
    \ found `&str`\n   |\nhelp: if you meant to write a `char` literal, use single\
    \ quotes\n   |\n10 |             s.insert(i, ' ');\n   |                     \
    \    ~~~\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n  -->\
    \ /tmp/tmpmiwhm95f.rs:18:16\n   |\n18 |             if s[i] == ' ' {\n   |   \
    \             ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmiwhm95f.rs:19:29\n\
    \   |\n19 |                 s.insert(i, \" \");\n   |                        \
    \     ^^^ expected `char`, found `&str`\n   |\nhelp: if you meant"
  stdout: ''
  timestamp: 1659976515
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n\
    \        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpm1ogfber.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n\
    \        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpm1ogfber.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \" \");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpdmfuot7v.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count(|c| c ==\
    \ ' ') {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmp7t_wr9_t.rs:7:18\n    |\n7   |     if s.chars().count(|c| c ==\
    \ ' ') {\n    |                  ^^^^^ ------------ supplied 1 argument\n    |\
    \                  |\n    |                  expected 0 arguments\n    |\nnote:\
    \ associated function defined here\n\nerror[E0308]: mismatched types\n --> /tmp/tmp7t_wr9_t.rs:7:8\n\
    \  |\n7 |     if s.chars().count(|c| c == ' ') {\n  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976515
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n\
    \        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpm1ogfber.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \" \");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpdmfuot7v.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces += 1;\n        } else {\n     \
    \       if spaces > 2 {\n                result.push('-');\n            } else\
    \ {\n                result.push(' ');\n            }\n            spaces = 0;\n\
    \        }\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\" E x a m p l e\"`,\n right: `\"Example\"`', /tmp/tmpnc6igdue.rs:25:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976516
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp7psxcq4g.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ let mut s = text;\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpr2v4ope9.rs:5:9\n\
    \  |\n5 |     let mut s = text;\n  |         ----^\n  |         |\n  |       \
    \  help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\
    \nwarning: variable does not need to be mutable\n --> /tmp/tmpr2v4ope9.rs:8:13\n\
    \  |\n8 |         let mut s = text;\n  |             ----^\n  |             |\n\
    \  |             help: remove this `mut`\n\nerror[E0382]: use of moved value:\
    \ `text`\n --> /tmp/tmpr2v4ope9.rs:8:21\n  |\n4 | fn fix_spaces(text: String)\
    \ -> String {\n  |               ---- move occurs because `text` has type `String`,\
    \ which does not implement the `Copy` trait\n5 |     let mut s = text;\n  |  \
    \               ---- value moved here\n...\n8 |         let mut s = text;\n  |\
    \                     ^^^^ value used here after move\n\nerror: aborting due to\
    \ previous error; 2 warnings emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976515
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n\
    \        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpm1ogfber.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"\
    \  \", \" \");\n    s.replace(\"  \", \" \");\n    s.replace(\"  \", \" \");\n\
    \    s.\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmph4szluwx.rs:79:1\n   |\n79\
    \ | }\n   | ^\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976515
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp8d1jat4l.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \")\n        .chars()\n        .filter(|c|\
    \ *c != ' ')\n        .for_each(|c| {\n            if s.chars().any(|c| *c ==\
    \ ' ') {\n                *c = ' ';\n            }\n        });\n    if s.chars().any(|c|\
    \ *c == ' ') {\n        s.replace(\"  \", \"- \")\n    } else {\n        s\n \
    \   }\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpuussja1q.rs:10:34\n\
    \   |\n10 |             if s.chars().any(|c| *c == ' ') {\n   |              \
    \                    ^^\n\nerror[E0614]: type `char` cannot be dereferenced\n\
    \  --> /tmp/tmpuussja1q.rs:11:17\n   |\n11 |                 *c = ' ';\n   | \
    \                ^^\n\nerror[E0614]: type `char` cannot be dereferenced\n  -->\
    \ /tmp/tmpuussja1q.rs:14:26\n   |\n14 |     if s.chars().any(|c| *c == ' ') {\n\
    \   |                          ^^\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976515
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n\
    \        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpm1ogfber.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \" \").unwrap();\n    if s.len() > 2 {\n\
    \        s.replace(\"  \", \" -\").unwrap();\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpis891ypa.rs:6:26\n  |\n6 |     s.replace(\"  \"\
    , \" \").unwrap();\n  |                          ^^^^^^ method not found in `String`\n\
    \nerror[E0599]: no method named `unwrap` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpis891ypa.rs:8:31\n  |\n8 |         s.replace(\"  \", \"\
    \ -\").unwrap();\n  |                               ^^^^^^ method not found in\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976515
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n\
    \        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpm1ogfber.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ let mut s = text;\n        s.replace(\"  \", \" \");\n        while s.len()\
    \ > 2 {\n            s.replace(\"  \", \" \");\n        }\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpv_q8eypi.rs:5:9\n\
    \  |\n5 |     let mut s = text;\n  |         ----^\n  |         |\n  |       \
    \  help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\
    \nwarning: variable does not need to be mutable\n --> /tmp/tmpv_q8eypi.rs:8:13\n\
    \  |\n8 |         let mut s = text;\n  |             ----^\n  |             |\n\
    \  |             help: remove this `mut`\n\nerror[E0382]: use of moved value:\
    \ `text`\n --> /tmp/tmpv_q8eypi.rs:8:21\n  |\n4 | fn fix_spaces(text: String)\
    \ -> String {\n  |               ---- move occurs because `text` has type `String`,\
    \ which does not implement the `Copy` trait\n5 |     let mut s = text;\n  |  \
    \               ---- value moved here\n...\n8 |         let mut s = text;\n  |\
    \                     ^^^^ value used here after move\n\nerror: aborting due to\
    \ previous error; 2 warnings emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976515
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \" \").chars().filter(|c| c != ' ').for_each(|c|\
    \ {\n        if c == ' ' {\n            s.replace(\"  \", \" \").unwrap();\n \
    \       } else {\n            s.replace(\"  \", \"-\").unwrap();\n        }\n\
    \    });\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n --> /tmp/tmpslmrdvgy.rs:6:47\n\
    \  |\n6 |     s.replace(\"  \", \" \").chars().filter(|c| c != ' ').for_each(|c|\
    \ {\n  |                                               ^^ no implementation for\
    \ `&char == char`\n  |\n  = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n  = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0599]:\
    \ no method named `unwrap` found for struct `String` in the current scope\n -->\
    \ /tmp/tmpslmrdvgy.rs:8:34\n  |\n8 |             s.replace(\"  \", \" \").unwrap();\n\
    \  |                                  ^^^^^^ method not found in `String`\n\n\
    error[E0599]: no method named `unwrap` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpslmrdvgy.rs:10:34\n   |\n10 |             s.replace(\"\
    \  \", \"-\").unwrap();\n   |                                  ^^^^^^ method not\
    \ found in `String`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976515
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().filter(|c| c\
    \ == ' ').count() > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n --> /tmp/tmpmcyezyyk.rs:7:31\n\
    \  |\n7 |     if s.chars().filter(|c| c == ' ').count() > 2 {\n  |           \
    \                    ^^ no implementation for `&char == char`\n  |\n  = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n  = help: the trait\
    \ `PartialEq` is implemented for `char`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976515
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n\
    \        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpm1ogfber.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n\
    \        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpm1ogfber.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp8d1jat4l.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp8d1jat4l.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp7psxcq4g.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \" \").unwrap();\n    let mut i = 0;\n\
    \    while i < s.len() {\n        if s[i] != ' ' {\n            i += 1;\n    \
    \        continue;\n        }\n        let mut j = i + 1;\n        while j < s.len()\
    \ {\n            if s[j] == ' ' {\n                s[j] = '-';\n             \
    \   i += 1;\n                break;\n            }\n            j += 1;\n    \
    \    }\n    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpp3zskfeb.rs:6:26\n  |\n6 |     s.replace(\"  \"\
    , \" \").unwrap();\n  |                          ^^^^^^ method not found in `String`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpp3zskfeb.rs:9:12\n\
    \  |\n9 |         if s[i] != ' ' {\n  |            ^^^^ `String` cannot be indexed\
    \ by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n\
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \   <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpp3zskfeb.rs:15:16\n\
    \   |\n15 |             if s[j] == ' ' {\n   |                ^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpp3zskfeb.rs:16:17\n   |\n16 |                 s[j] = '-';\n   |\
    \                 ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as In"
  stdout: ''
  timestamp: 1659976515
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \" \");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpdmfuot7v.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp8d1jat4l.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \")\n        .chars()\n        .filter(|c|\
    \ c.is_whitespace())\n        .for_each(|c| s.replace(\"-\", \" \").push(c));\n\
    \    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmppqn0ck1u.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976516
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n\
    \        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpm1ogfber.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp7psxcq4g.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \" \");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpdmfuot7v.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp8d1jat4l.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n\
    \        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpm1ogfber.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp8d1jat4l.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ let mut s = s;\n        s.replace(\"  \", \" \");\n        while s.len() > 2\
    \ {\n            s.replace(\"  \", \" \");\n        }\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpohog9kvd.rs:5:9\n\
    \  |\n5 |     let mut s = text;\n  |         ----^\n  |         |\n  |       \
    \  help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\
    \nwarning: variable does not need to be mutable\n --> /tmp/tmpohog9kvd.rs:8:13\n\
    \  |\n8 |         let mut s = s;\n  |             ----^\n  |             |\n \
    \ |             help: remove this `mut`\n\nerror[E0382]: use of moved value: `s`\n\
    \  --> /tmp/tmpohog9kvd.rs:14:5\n   |\n5  |     let mut s = text;\n   |      \
    \   ----- move occurs because `s` has type `String`, which does not implement\
    \ the `Copy` trait\n...\n8  |         let mut s = s;\n   |                   \
    \  - value moved here\n...\n14 |     s\n   |     ^ value used here after move\n\
    \nerror: aborting due to previous error; 2 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976515
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut spaces = 0;\n    for ch in text.chars()\
    \ {\n        if ch == ' ' {\n            spaces += 1;\n        } else {\n    \
    \        if spaces > 1 {\n                result.push('-');\n                spaces\
    \ = 0;\n            }\n            result.push(ch);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpcpyl0mg5.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976516
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp8d1jat4l.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n\
    \        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpm1ogfber.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp8d1jat4l.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \" \").unwrap();\n    let mut spaces =\
    \ false;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i] == ' '\
    \ {\n            spaces = true;\n        }\n        if spaces {\n            s.replace('\
    \ ', '-');\n        }\n        i += 1;\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpv9u8gda9.rs:6:26\n  |\n6 |     s.replace(\"  \"\
    , \" \").unwrap();\n  |                          ^^^^^^ method not found in `String`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpv9u8gda9.rs:10:12\n\
    \   |\n10 |         if s[i] == ' ' {\n   |            ^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv9u8gda9.rs:14:28\n\
    \   |\n14 |             s.replace(' ', '-');\n   |                           \
    \ ^^^ expected `&str`, found `char`\n   |\nhelp: if you meant to write a `str`\
    \ literal, use double quotes\n   |\n14 |             s.replace(' ', \"-\");\n\
    \   |                            ~~~\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976516
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"  \"\
    , \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\" \
    \ \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmp99yvws8j.rs:63:1\n   |\n63\
    \ | }\n   | ^\n\nerror[E0599]: no method named `unwrap` found for struct `String`\
    \ in the current scope\n --> /tmp/tmp99yvws8j.rs:6:26\n  |\n6 |     s.replace(\"\
    \  \", \" \").unwrap();\n  |                          ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `unwrap` found for struct `String`\
    \ in the current scope\n --> /tmp/tmp99yvws8j.rs:7:26\n  |\n7 |     s.replace(\"\
    \  \", \" \").unwrap();\n  |                          ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `unwrap` found for struct `String`\
    \ in the current scope\n --> /tmp/tmp99yvws8j.rs:8:26\n  |\n8 |     s.replace(\"\
    \  \", \" \").unwrap();\n  |                          ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `unwrap` found for struct `String`\
    \ in the current scope\n --> /tmp/tmp99yvws8j.rs:9:26\n  |\n9 |     s.replace(\"\
    \  \", \" \").unwrap();\n  |                          ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `unwrap` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp99yvws8j.rs:10:26\n   |\n10 |     s.replace(\"\
    \  \", \" \").unwrap();\n   |                          ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `unwrap` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp99yvws8j.rs:11:26\n   |\n11 |     s.replace(\"\
    \  \", \" \").unwrap();\n   |                          ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `unwrap` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp99yvws8j.rs:12:26\n   |\n12 |     s.replace(\"\
    \  \", \" \").unwrap();\n   |                          ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `unwrap` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp99yvws8j.rs:13:26\n   |\n13 |     s.replace(\"\
    \  \", \" \").unwrap();\n   |                          ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `unwrap` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp99yvws8j.rs:14:26\n   |\n14 |     s.replace(\"\
    \  \", "
  stdout: ''
  timestamp: 1659976516
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp8d1jat4l.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp8d1jat4l.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n\
    \        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpm1ogfber.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp8d1jat4l.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \" \");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpdmfuot7v.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \" \");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpdmfuot7v.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        let mut s = text;\n        s.replace(\"  \", \"\
    \ \");\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n  \
    \  let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmp5cr_ah3q.rs:5:9\n\
    \  |\n5 |     let mut s = text;\n  |         ----^\n  |         |\n  |       \
    \  help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\
    \nwarning: variable does not need to be mutable\n --> /tmp/tmp5cr_ah3q.rs:9:13\n\
    \  |\n9 |         let mut s = text;\n  |             ----^\n  |             |\n\
    \  |             help: remove this `mut`\n\nerror[E0382]: use of moved value:\
    \ `text`\n --> /tmp/tmp5cr_ah3q.rs:9:21\n  |\n4 | fn fix_spaces(text: String)\
    \ -> String {\n  |               ---- move occurs because `text` has type `String`,\
    \ which does not implement the `Copy` trait\n5 |     let mut s = text;\n  |  \
    \               ---- value moved here\n...\n9 |         let mut s = text;\n  |\
    \                     ^^^^ value used here after move\n\nerror: aborting due to\
    \ previous error; 2 warnings emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976515
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \" \").unwrap();\n    if s.len() > 2 {\n\
    \        s.replace(\"  \", \" \").unwrap();\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpo8x78kla.rs:6:26\n  |\n6 |     s.replace(\"  \"\
    , \" \").unwrap();\n  |                          ^^^^^^ method not found in `String`\n\
    \nerror[E0599]: no method named `unwrap` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpo8x78kla.rs:8:30\n  |\n8 |         s.replace(\"  \", \"\
    \ \").unwrap();\n  |                              ^^^^^^ method not found in `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976515
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp8d1jat4l.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n\
    \        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpm1ogfber.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n\
    \        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpm1ogfber.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ let mut s = text;\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpr2v4ope9.rs:5:9\n\
    \  |\n5 |     let mut s = text;\n  |         ----^\n  |         |\n  |       \
    \  help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\
    \nwarning: variable does not need to be mutable\n --> /tmp/tmpr2v4ope9.rs:8:13\n\
    \  |\n8 |         let mut s = text;\n  |             ----^\n  |             |\n\
    \  |             help: remove this `mut`\n\nerror[E0382]: use of moved value:\
    \ `text`\n --> /tmp/tmpr2v4ope9.rs:8:21\n  |\n4 | fn fix_spaces(text: String)\
    \ -> String {\n  |               ---- move occurs because `text` has type `String`,\
    \ which does not implement the `Copy` trait\n5 |     let mut s = text;\n  |  \
    \               ---- value moved here\n...\n8 |         let mut s = text;\n  |\
    \                     ^^^^ value used here after move\n\nerror: aborting due to\
    \ previous error; 2 warnings emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976515
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmptp9j5ogx.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976516
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n\
    \        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpm1ogfber.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ let mut s = s;\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpzepwss3q.rs:5:9\n\
    \  |\n5 |     let mut s = text;\n  |         ----^\n  |         |\n  |       \
    \  help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\
    \nwarning: variable does not need to be mutable\n --> /tmp/tmpzepwss3q.rs:8:13\n\
    \  |\n8 |         let mut s = s;\n  |             ----^\n  |             |\n \
    \ |             help: remove this `mut`\n\nerror[E0382]: use of moved value: `s`\n\
    \  --> /tmp/tmpzepwss3q.rs:11:5\n   |\n5  |     let mut s = text;\n   |      \
    \   ----- move occurs because `s` has type `String`, which does not implement\
    \ the `Copy` trait\n...\n8  |         let mut s = s;\n   |                   \
    \  - value moved here\n...\n11 |     s\n   |     ^ value used here after move\n\
    \nerror: aborting due to previous error; 2 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976515
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n\
    \        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpm1ogfber.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ let mut s = text;\n        s.replace(\"  \", \" \");\n        while s.len()\
    \ > 2 {\n            s.replace(\"  \", \" \");\n        }\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpv_q8eypi.rs:5:9\n\
    \  |\n5 |     let mut s = text;\n  |         ----^\n  |         |\n  |       \
    \  help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\
    \nwarning: variable does not need to be mutable\n --> /tmp/tmpv_q8eypi.rs:8:13\n\
    \  |\n8 |         let mut s = text;\n  |             ----^\n  |             |\n\
    \  |             help: remove this `mut`\n\nerror[E0382]: use of moved value:\
    \ `text`\n --> /tmp/tmpv_q8eypi.rs:8:21\n  |\n4 | fn fix_spaces(text: String)\
    \ -> String {\n  |               ---- move occurs because `text` has type `String`,\
    \ which does not implement the `Copy` trait\n5 |     let mut s = text;\n  |  \
    \               ---- value moved here\n...\n8 |         let mut s = text;\n  |\
    \                     ^^^^ value used here after move\n\nerror: aborting due to\
    \ previous error; 2 warnings emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976515
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp7psxcq4g.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"  \"\
    , \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\" \
    \ \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.replace(\"  \", \" \").unwrap();\n    s.replace(\"\
    \  \", \" \").unwrap();\n    s.\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmp99yvws8j.rs:63:1\n   |\n63\
    \ | }\n   | ^\n\nerror[E0599]: no method named `unwrap` found for struct `String`\
    \ in the current scope\n --> /tmp/tmp99yvws8j.rs:6:26\n  |\n6 |     s.replace(\"\
    \  \", \" \").unwrap();\n  |                          ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `unwrap` found for struct `String`\
    \ in the current scope\n --> /tmp/tmp99yvws8j.rs:7:26\n  |\n7 |     s.replace(\"\
    \  \", \" \").unwrap();\n  |                          ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `unwrap` found for struct `String`\
    \ in the current scope\n --> /tmp/tmp99yvws8j.rs:8:26\n  |\n8 |     s.replace(\"\
    \  \", \" \").unwrap();\n  |                          ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `unwrap` found for struct `String`\
    \ in the current scope\n --> /tmp/tmp99yvws8j.rs:9:26\n  |\n9 |     s.replace(\"\
    \  \", \" \").unwrap();\n  |                          ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `unwrap` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp99yvws8j.rs:10:26\n   |\n10 |     s.replace(\"\
    \  \", \" \").unwrap();\n   |                          ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `unwrap` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp99yvws8j.rs:11:26\n   |\n11 |     s.replace(\"\
    \  \", \" \").unwrap();\n   |                          ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `unwrap` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp99yvws8j.rs:12:26\n   |\n12 |     s.replace(\"\
    \  \", \" \").unwrap();\n   |                          ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `unwrap` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp99yvws8j.rs:13:26\n   |\n13 |     s.replace(\"\
    \  \", \" \").unwrap();\n   |                          ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `unwrap` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp99yvws8j.rs:14:26\n   |\n14 |     s.replace(\"\
    \  \", "
  stdout: ''
  timestamp: 1659976516
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces += 1;\n        } else {\n     \
    \       if spaces > 1 {\n                result.push('-');\n            }\n  \
    \          result.push(c);\n            spaces = 0;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpyv1d6oil.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976516
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ let mut i = 0;\n        while i < s.len() - 2 {\n            if s[i] == s[i\
    \ + 1] && s[i + 1] == s[i + 2] {\n                s.replace(\"  \", &format!(\"\
    {}-\", s[i..i + 3]));\n                i += 3;\n            } else {\n       \
    \         i += 1;\n            }\n        }\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmprc03gwd1.rs:10:16\n\
    \   |\n10 |             if s[i] == s[i + 1] && s[i + 1] == s[i + 2] {\n   |  \
    \              ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmprc03gwd1.rs:10:24\n   |\n10 |             if s[i] == s[i + 1] &&\
    \ s[i + 1] == s[i + 2] {\n   |                        ^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmprc03gwd1.rs:10:36\n   |\n10 |             if s[i] == s[i + 1] &&\
    \ s[i + 1] == s[i + 2] {\n   |                                    ^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \  "
  stdout: ''
  timestamp: 1659976516
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n\
    \        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpm1ogfber.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"_\", \" \").replace(\"  \", \"- \");\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb902ik21.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n       \
    \ s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplwfm5hgo.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749301
