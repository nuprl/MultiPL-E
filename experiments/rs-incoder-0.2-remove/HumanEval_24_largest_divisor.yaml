name: HumanEval_24_largest_divisor
language: rs
prompt: "/// For a given number n, find the largest number that divides n evenly,\
  \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
  \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n   \
  \ assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
completions: ["    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n \
    \   let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    for i in 1..n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_remainder\
    \ = n % i;\n            }\n        }\n    }\n    max_divisor_remainder", "   \
    \ let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_index =\
    \ i;\n            }\n            if max_divisor_value < i {\n                max_divisor_value\
    \ = i;\n            }\n        }\n    }\n    max_divisor_index", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_value\
    \ = n;\n\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n        \
    \    if divisor > max_divisor {\n                max_divisor = divisor;\n    \
    \            max_divisor_size = divisor;\n            } else if divisor == max_divisor\
    \ {\n                max_divisor_size = divisor + 1;\n            }\n        }\n\
    \    }\n\n    if max_divisor_size != max_divisor {\n        max_divisor_value\
    \ = max_divisor_size / max_divisor;\n    }\n\n    max_divisor_value", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n        \
    \    if divisor > max_divisor {\n                max_divisor = divisor;\n    \
    \            max_divisor_index = divisor;\n            }\n        } else {\n \
    \           if divisor > max_divisor_value {\n                max_divisor_value\
    \ = divisor;\n                max_divisor_index = divisor;\n            }\n  \
    \      }\n    }\n\n    max_divisor_index", "    let mut max_divisor = 0;\n   \
    \ let mut max_divisor_size = 0;\n    for d in divisors(n) {\n        if n % d\
    \ == 0 {\n            if d > max_divisor {\n                max_divisor = d;\n\
    \                max_divisor_size = 1;\n            } else if d == max_divisor\
    \ {\n                max_divisor_size += 1;\n            }\n        }\n    }\n\
    \    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_size_size = 0;\n    for i in 1..=n {\n       \
    \ if n % i == 0 {\n            if max_divisor_size < i {\n                max_divisor_size\
    \ = i;\n                max_divisor_size_size = i;\n            }\n          \
    \  if max_divisor_size == i {\n                max_divisor_size_size = i;\n  \
    \          }\n        }\n    }\n    max_divisor", "    let mut max_divisor = 1;\n\
    \    let mut max_divisor_remainder = 0;\n    let mut max_divisor_remainder_pow\
    \ = 1;\n    let mut max_divisor_remainder_pow_pow = 1;\n    let mut max_divisor_remainder_pow_pow_pow\
    \ = 1;\n    let mut max_divisor_remainder_pow_pow_pow_pow = 1;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow\
    \ = 1;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow = 1;\n    let mut\
    \ max_divisor_remainder_pow_pow_pow_pow_pow_pow = 1;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow\
    \ = 1;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow = 1;\n\
    \    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow = 1;\n    let\
    \ mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow = 1;\n    let mut\
    \ max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow = 1;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 1;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 1;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 1;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 1;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 1;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 1;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 1;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 1;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 1;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 1;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 1;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 1;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 1;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 1;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 1;\n", "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n\
    \    for divisor in 1..=n {\n        if n % divisor == 0 {\n            if divisor\
    \ > max_divisor {\n                max_divisor = divisor;\n                max_divisor_size\
    \ = 1;\n            } else if divisor == max_divisor {\n                max_divisor_size\
    \ += 1;\n            }\n        }\n    }\n    max_divisor", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n) {\n      \
    \  if n % d == 0 {\n            if d > max_divisor {\n                max_divisor\
    \ = d;\n                max_divisor_size = 1;\n            } else {\n        \
    \        max_divisor += d;\n                max_divisor_size++;\n            }\n\
    \        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut\
    \ max_divisor_index = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n    \
    \        if max_divisor < i {\n                max_divisor = i;\n            \
    \    max_divisor_index = i;\n            }\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_index = divisor;\n            }\n        } else {\n   \
    \         if divisor > max_divisor_value {\n                max_divisor_value\
    \ = divisor;\n                max_divisor_index = divisor;\n            }\n  \
    \      }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_remainder = 0;\n    for divisor in 1..=n {\n        if n % divisor\
    \ == 0 {\n            if divisor > max_divisor {\n                max_divisor\
    \ = divisor;\n                max_divisor_remainder = n % divisor;\n         \
    \   }\n        }\n    }\n    max_divisor_remainder", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n\
    \    for divisor in 1..=n {\n        if n % divisor == 0 {\n            if divisor\
    \ > max_divisor {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        } else {\n            if divisor > max_divisor_value\
    \ {\n                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n)\
    \ {\n        if n % d == 0 {\n            if d > max_divisor {\n             \
    \   max_divisor = d;\n                max_divisor_size = 1;\n            } else\
    \ {\n                max_divisor += d;\n                max_divisor_size++;\n\
    \            }\n        }\n    }\n    max_divisor", "    let mut max_divisor =\
    \ n;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_indexes: Vec<usize>\
    \ = Vec::new();\n\n    for i in 1..=max_divisor {\n        if n % i == 0 {\n \
    \           if max_divisor > i {\n                max_divisor = i;\n         \
    \       max_divisor_index = i;\n            }\n        } else {\n            if\
    \ max_divisor > i {\n                max_divisor = i;\n                max_divisor_index\
    \ = i;\n                max_divisor_indexes.push(i);\n            }\n        }\n\
    \    }\n\n    if max_divisor == n {\n        max_divisor_indexes.push(max_divisor_index);\n\
    \    }\n\n    max_divisor_indexes.sort_unstable();\n\n    max_divisor_indexes.pop();\n\
    \n    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n    let mut max_divisor_value = n;\n\n    for divisor in 1..=n {\n   \
    \     if n % divisor == 0 {\n            if divisor > max_divisor {\n        \
    \        max_divisor = divisor;\n                max_divisor_size = max_divisor_value\
    \ - max_divisor;\n            }\n        }\n    }\n\n    max_divisor_value", " \
    \   let mut max_divisor = 0;\n    let mut max_divisor_size = n;\n    let mut max_divisor_value\
    \ = n;\n    while max_divisor_size != 1 {\n        if max_divisor_value % 2 ==\
    \ 0 {\n            max_divisor_value /= 2;\n        } else {\n            max_divisor_value\
    \ /= 3;\n        }\n        max_divisor_size = max_divisor_value + 1;\n      \
    \  if max_divisor_size > max_divisor {\n            max_divisor = max_divisor_size;\n\
    \        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut\
    \ max_divisor_size = 0;\n    for divisor in 1..=n {\n        if n % divisor ==\
    \ 0 {\n            if divisor > max_divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_size = divisor;\n            } else if divisor ==\
    \ max_divisor {\n                max_divisor_size = divisor + 1;\n           \
    \ }\n        }\n    }\n    max_divisor", "    let mut max_divisor = n;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n    for divisor\
    \ in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n            if max_divisor\
    \ < divisor {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor as isize;\n                max_divisor_value = n;\n            }\n\
    \        }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n   \
    \ let mut max_divisor_index = 0;\n    for i in 1..=n {\n        if n % i == 0\
    \ {\n            if max_divisor < i {\n                max_divisor = i;\n    \
    \            max_divisor_index = i;\n            }\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_indexes:\
    \ Vec<usize> = Vec::new();\n    for i in 1..=max_divisor {\n        if n % i ==\
    \ 0 {\n            max_divisor = i;\n            max_divisor_index = i;\n    \
    \    }\n    }\n    max_divisor_indexes.push(max_divisor_index);\n    for i in\
    \ 2..=max_divisor {\n        if n % i == 0 {\n            if max_divisor == i\
    \ {\n                max_divisor = i;\n                max_divisor_index = i;\n\
    \            } else {\n                max_divisor_indexes.push(i);\n        \
    \    }\n        }\n    }\n    max_divisor_indexes.push(max_divisor_index);\n \
    \   for i in 3..=max_divisor {\n        if n % i == 0 {\n            if max_divisor\
    \ == i {\n                max_divisor = i;\n                max_divisor_index\
    \ = i;\n            } else {\n                max_divisor_indexes.push(i);\n \
    \           }\n        }\n    }\n    max_divisor_indexes.push(max_divisor_index);\n\
    \    for i in 4..=max_divisor {\n        if n % i == 0 {\n            if max_divisor\
    \ == i {\n                max_divisor = i;\n                max_divisor_index\
    \ = i;\n            } else {\n                max_divisor_indexes.push(i);\n \
    \           }\n        }\n    }\n    max_divisor_indexes.push(max_divisor_index);\n\
    \    for i in 5..=max_divisor {\n        if n % i == 0 {\n            if max_divisor\
    \ == i {\n                max_divisor = i;\n                max_divisor_index\
    \ = i;\n            } else {\n                max_divisor_indexes.push(i);\n \
    \           }\n        }\n    }\n    max_divisor_indexes.push(max_divisor_index);\n\
    \    for i in 6..=max_divisor {\n        if n % i == 0 {\n            if max_divisor\
    \ == i {\n                max_divisor = i;\n                max_divisor_index\
    \ = i;\n            } else {\n                max_divisor_indexes.push(i);\n \
    \           }\n        }\n    }\n    max_divisor_indexes.push(max_divisor_index);\n\
    \    for i in 7..=max_divisor {\n        if n % i == 0 {\n            if max_divisor\
    \ == i {\n                max_divisor = i;\n                max_divisor_index\
    \ = i;\n            } else {\n                max_divisor_indexes.push(i);\n \
    \           }\n        }\n    }\n    max_divisor_indexes.push(max_divisor_index);\n\
    \    for i in 8..=max_divisor {\n        if n % i == 0 {\n            if max_divisor\
    \ == i {\n                max_divisor = i;\n                max_divisor_index\
    \ = i;\n            } else {\n                max_divisor_indexes.push(i);\n \
    \           }\n        }\n    }\n    max_divisor_indexes.push(max_divisor_index);\n\
    \    for i in 9..=max_divisor {\n        if n % i == 0 {\n            if max_divisor\
    \ == i {\n                max_divisor = i;\n                max_divisor_index\
    \ = i;\n            } else {\n                max_divisor_indexes.push(i);", " \
    \   let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for\
    \ divisor in 1..=n {\n        if n % divisor == 0 {\n            if max_divisor_remainder\
    \ < divisor {\n                max_divisor = divisor;\n                max_divisor_remainder\
    \ = n % divisor;\n            }\n        }\n    }\n    max_divisor", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_index = divisor;\n            }\n        } else {\n   \
    \         if divisor > max_divisor_value {\n                max_divisor_value\
    \ = divisor;\n                max_divisor_index = divisor;\n            }\n  \
    \      }\n    }\n    max_divisor_index", "    let mut max_divisor = 1;\n    let\
    \ mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4\
    \ = 1;\n    let mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let\
    \ mut max_divisor7 = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9\
    \ = 1;\n    let mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let\
    \ mut max_divisor12 = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14\
    \ = 1;\n    let mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let\
    \ mut max_divisor17 = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19\
    \ = 1;\n    let mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let\
    \ mut max_divisor22 = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24\
    \ = 1;\n    let mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let\
    \ mut max_divisor27 = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29\
    \ = 1;\n    let mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let\
    \ mut max_divisor32 = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34\
    \ = 1;\n    let mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let\
    \ mut max_divisor37 = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39\
    \ = 1;\n    let mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let\
    \ mut max_divisor42 = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44\
    \ = 1;\n    let mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let\
    \ mut max_divisor47 = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49\
    \ = 1;\n    let mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let\
    \ mut max_divisor52 = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54\
    \ = 1;\n    let mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let\
    \ mut max_divisor57 = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59\
    \ = 1;\n    let mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let\
    \ mut max_divisor62 = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    let mut\
    \ max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count2 =\
    \ 0;\n    let mut max_divisor_remainder_count3 = 0;\n    let mut max_divisor_remainder_count4\
    \ = 0;\n    let mut max_divisor_remainder_count5 = 0;\n    let mut max_divisor_remainder_count6\
    \ = 0;\n    let mut max_divisor_remainder_count7 = 0;\n    let mut max_divisor_remainder_count8\
    \ = 0;\n    let mut max_divisor_remainder_count9 = 0;\n    let mut max_divisor_remainder_count10\
    \ = 0;\n    let mut max_divisor_remainder_count11 = 0;\n    let mut max_divisor_remainder_count12\
    \ = 0;\n    let mut max_divisor_remainder_count13 = 0;\n    let mut max_divisor_remainder_count14\
    \ = 0;\n    let mut max_divisor_remainder_count15 = 0;\n    let mut max_divisor_remainder_count16\
    \ = 0;\n    let mut max_divisor_remainder_count17 = 0;\n    let mut max_divisor_remainder_count18\
    \ = 0;\n    let mut max_divisor_remainder_count19 = 0;\n    let mut max_divisor_remainder_count20\
    \ = 0;\n    let mut max_divisor_remainder_count21 = 0;\n    let mut max_divisor_remainder_count22\
    \ = 0;\n    let mut max_divisor_remainder_count23 = 0;\n    let mut max_divisor_remainder_count24\
    \ = 0;\n    let mut max_divisor_remainder_count25 = 0;\n    let mut max_divisor_remainder_count26\
    \ = 0;\n    let mut max_divisor_remainder_count27 = 0;\n    let mut max_divisor_remainder_count28\
    \ = 0;\n    let mut max_divisor_remainder_count29 = 0;\n    let mut max_divisor_remainder_count30\
    \ = 0;\n    let mut max_divisor_remainder_count31 = 0;\n    let mut max_divisor_remainder_count32\
    \ = 0;\n    let mut max_divisor_remainder_count33 = 0;\n    let mut max_divisor_remainder_count34\
    \ = 0;\n    let mut max_divisor_remainder_count35 = 0;\n    let mut max_divisor_remainder_count36\
    \ = 0;\n    let mut max_divisor_remainder_count37 = 0;\n    let mut max_divisor_remainder_count38\
    \ = 0;\n    let mut max_divisor_remainder_count39 = 0;\n    let mut max_divisor_remainder_count40\
    \ = 0;\n    let mut max_divisor_remainder_count41 = 0;\n    let mut max_divisor_remainder_count",
  "    let mut max_divisor = 0;\n    let mut max_divisor_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_ind = i;\n\
    \                max_divisor_ind_ind = i;\n            }\n            if max_divisor\
    \ == i {\n                max_divisor_ind_ind = i;\n            }\n        }\n\
    \    }\n    if max_divisor == 0 {\n        max_divisor_ind = -1;\n    }\n    max_divisor_ind_ind",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    let mut max_divisor_remainder_size = 0;\n    let mut max_divisor_remainder_remainder\
    \ = 0;\n    let mut max_divisor_remainder_remainder_size = 0;\n    let mut max_divisor_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder_size = 0;\n    let\
    \ mut max_divisor_remainder_remainder_remainder_remainder = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_size\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_size =\
    \ 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_size =\
    \ 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_size =\
    \ 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_size =\
    \ 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_size =\
    \ 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_size =\
    \ 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_size =\
    \ 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_size =\
    \ 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_size =\
    \ 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_size =\
    \ 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_size =\
    \ 0;\n    let mut max_", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor_remainder\
    \ == 0 {\n                max_divisor = i;\n                max_divisor_remainder\
    \ = n;\n                max_divisor_remainder_count = 0;\n            } else {\n\
    \                if max_divisor_remainder > i {\n                    max_divisor\
    \ = i;\n                    max_divisor_remainder = n;\n                    max_divisor_remainder_count\
    \ = 0;\n                }\n            }\n        }\n        if max_divisor_remainder_count\
    \ < max_divisor_remainder {\n            max_divisor_remainder_count = max_divisor_remainder;\n\
    \            max_divisor_remainder = i;\n        }\n    }\n    max_divisor_remainder_count",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = n;\n    for d in divisors(n)\
    \ {\n        if n % d == 0 {\n            if max_divisor < d {\n             \
    \   max_divisor = d;\n                max_divisor_size = n;\n            }\n \
    \       }\n    }\n    max_divisor_size", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_idx = -1;\n    let mut max_divisor_value = n;\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_idx =\
    \ divisor;\n            }\n        }\n    }\n    max_divisor", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_remainder = 0;\n    for divisor in 1..=n {\n \
    \       if n % divisor == 0 {\n            if divisor > max_divisor {\n      \
    \          max_divisor = divisor;\n                max_divisor_remainder = 0;\n\
    \            } else {\n                max_divisor_remainder += divisor - max_divisor;\n\
    \            }\n        }\n    }\n    if max_divisor_remainder > 0 {\n       \
    \ max_divisor = max_divisor + 1;\n    }\n    max_divisor", "    let mut max_divisor\
    \ = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let\
    \ mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let mut max_divisor6\
    \ = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8 = 1;\n    let\
    \ mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let mut max_divisor11\
    \ = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13 = 1;\n    let\
    \ mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let mut max_divisor16\
    \ = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18 = 1;\n    let\
    \ mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let mut max_divisor21\
    \ = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23 = 1;\n    let\
    \ mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let mut max_divisor26\
    \ = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28 = 1;\n    let\
    \ mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let mut max_divisor31\
    \ = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33 = 1;\n    let\
    \ mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let mut max_divisor36\
    \ = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38 = 1;\n    let\
    \ mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let mut max_divisor41\
    \ = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43 = 1;\n    let\
    \ mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let mut max_divisor46\
    \ = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48 = 1;\n    let\
    \ mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let mut max_divisor51\
    \ = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53 = 1;\n    let\
    \ mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let mut max_divisor56\
    \ = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58 = 1;\n    let\
    \ mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let mut max_divisor61\
    \ = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63 = 1;\n    let\
    \ mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    let mut max_divisor_remainder_pow = 0;\n    let mut max_divisor_remainder_pow_max\
    \ = 0;\n    let mut max_divisor_remainder_pow_min = 0;\n    let mut max_divisor_remainder_pow_min_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_dec = 0;\n    let mut max_divisor_remainder_pow_min_dec_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_dec_inc_inc = 0;\n    let mut\
    \ max_divisor_remainder_pow_min_dec_inc_inc_inc = 0;\n    let mut max_divisor_remainder_pow_min_dec_inc_inc_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_dec_inc_inc_inc_inc_inc = 0;\n\
    \    let mut max_divisor_remainder_pow_min_dec_inc_inc_inc_inc_inc_inc = 0;\n\
    \    let mut max_divisor_remainder_pow_min_dec_inc_inc_inc_inc_inc_inc_inc = 0;\n\
    \    let mut max_divisor_remainder_pow_min_dec_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_dec_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_dec_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_dec_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_dec_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_dec_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_dec_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_dec_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_dec_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc_in",
  "    let mut max_divisor = 1;\n    let mut max_divisor_size = n;\n    let mut max_divisor_size\
    \ = max_divisor_size / 2;\n    while max_divisor_size != 1 {\n        if n % max_divisor_size\
    \ == 0 {\n            max_divisor = max_divisor * max_divisor_size;\n        }\n\
    \        max_divisor_size = max_divisor_size / 2;\n    }\n    max_divisor", " \
    \   let mut max_divisor = 0;\n    let mut max_divisor_size = n;\n    for d in\
    \ 2..=max_divisor_size.clone() {\n        if n % d == 0 {\n            max_divisor\
    \ = d;\n            max_divisor_size = n;\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_index = divisor;\n                max_divisor_value = n;\n\
    \            }\n        } else {\n            if divisor > max_divisor_value {\n\
    \                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = n;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_indexes: Vec<usize> = Vec::new();\n    let mut\
    \ max_divisor_indexes_len = 0;\n    while max_divisor % 2 == 0 {\n        max_divisor\
    \ /= 2;\n        max_divisor_indexes.push(max_divisor_index);\n        max_divisor_indexes_len\
    \ += 1;\n    }\n    for i in max_divisor_indexes.iter().rev() {\n        if max_divisor\
    \ % i == 0 {\n            max_divisor = i as isize;\n            max_divisor_index\
    \ = i;\n        }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_size = n;\n    for divisor in 1..=n {\n        if n %\
    \ divisor == 0 {\n            if divisor > max_divisor {\n                max_divisor\
    \ = divisor;\n                max_divisor_size = n;\n            }\n        }\
    \ else {\n            break;\n        }\n    }\n    max_divisor", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for divisor in &[2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97] {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = 0;\n            }\n            if divisor == max_divisor {\n             \
    \   max_divisor_index += 1;\n            }\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_size\
    \ = divisor;\n            } else {\n                max_divisor_size = divisor;\n\
    \            }\n        }\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_size = 0;\n    for divisor in 1..=n {\n        if\
    \ n % divisor == 0 {\n            if divisor > max_divisor {\n               \
    \ max_divisor = divisor;\n                max_divisor_size = 1;\n            }\
    \ else if divisor == max_divisor {\n                max_divisor_size += 1;\n \
    \           }\n        }\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size = 0;\n\
    \    let mut max_divisor_size_size_size = 0;\n    let mut max_divisor_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size = 0;\n    let mut\
    \ max_divisor_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size =\
    \ 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n \
    \   let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size",
  "    let mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    for divisor\
    \ in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n            if max_divisor\
    \ < divisor {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = 0;\n            }\n            if max_divisor == divisor {\n             \
    \   max_divisor_index += 1;\n            }\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 1;\n    let mut max_divisor_size = n;\n    for divisor\
    \ in 2..=max_divisor {\n        if n % divisor == 0 {\n            max_divisor\
    \ = divisor;\n            max_divisor_size = n / divisor;\n        }\n    }\n\
    \    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_size = 1;\n            } else {\n                max_divisor\
    \ += 1;\n                max_divisor_size += 1;\n            }\n        }\n  \
    \  }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor_remainder\
    \ == 0 {\n                max_divisor = i;\n                max_divisor_remainder\
    \ = n % i;\n            } else {\n                if max_divisor_remainder > max_divisor\
    \ {\n                    max_divisor = i;\n                    max_divisor_remainder\
    \ = n % i;\n                }\n            }\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if max_divisor < divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_remainder\
    \ = n % divisor;\n            }\n        }\n    }\n    if max_divisor_remainder\
    \ == 0 {\n        max_divisor\n    } else {\n        max_divisor_remainder\n \
    \   }", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n\
    \    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor ==\
    \ 0 {\n                max_divisor = i;\n                max_divisor_remainder\
    \ = n % i;\n            } else {\n                if max_divisor_remainder ==\
    \ 0 {\n                    max_divisor = i;\n                    max_divisor_remainder\
    \ = n % i;\n                } else {\n                    if max_divisor > i {\n\
    \                        max_divisor = i;\n                        max_divisor_remainder\
    \ = n % i;\n                    }\n                }\n            }\n        }\n\
    \    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \            }\n        } else {\n            if divisor > max_divisor_value {\n\
    \                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 1;\n    let mut max_divisor_size = n;\n\n    for divisor in\
    \ 2..=n {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_size\
    \ = n;\n            }\n        }\n    }\n\n    max_divisor", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size =\
    \ 0;\n    let mut max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor = 0;\n    let mut\
    \ max_divisor_size_divisor_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor = 0;\n \
    \   let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_size = divisor;\n            } else {\n               \
    \ max_divisor_size = divisor;\n            }\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_size = divisor;\n                max_divisor_value = n;\n\
    \            }\n        } else {\n            if divisor > max_divisor_size {\n\
    \                max_divisor_size = divisor;\n                max_divisor_value\
    \ = n;\n            }\n        }\n    }\n    max_divisor_value", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for divisor in\
    \ &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n            if max_divisor\
    \ < divisor {\n                max_divisor = divisor;\n                max_divisor_remainder\
    \ = n % divisor;\n            }\n        }\n    }\n    if max_divisor_remainder\
    \ == 0 {\n        max_divisor\n    } else {\n        max_divisor_remainder\n \
    \   }", "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n  \
    \  let mut max_divisor_value = 0;\n    for i in 1..=n {\n        if n % i == 0\
    \ {\n            if max_divisor < i {\n                max_divisor = i;\n    \
    \            max_divisor_index = i;\n                max_divisor_value = i;\n\
    \            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_remainder = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count_index = 0;\n    let mut max_divisor_remainder_count_index2\
    \ = 0;\n    let mut max_divisor_remainder_count_index3 = 0;\n    let mut max_divisor_remainder_count_index4\
    \ = 0;\n    let mut max_divisor_remainder_count_index5 = 0;\n    let mut max_divisor_remainder_count_index6\
    \ = 0;\n    let mut max_divisor_remainder_count_index7 = 0;\n    let mut max_divisor_remainder_count_index8\
    \ = 0;\n    let mut max_divisor_remainder_count_index9 = 0;\n    let mut max_divisor_remainder_count_index10\
    \ = 0;\n    let mut max_divisor_remainder_count_index11 = 0;\n    let mut max_divisor_remainder_count_index12\
    \ = 0;\n    let mut max_divisor_remainder_count_index13 = 0;\n    let mut max_divisor_remainder_count_index14\
    \ = 0;\n    let mut max_divisor_remainder_count_index15 = 0;\n    let mut max_divisor_remainder_count_index16\
    \ = 0;\n    let mut max_divisor_remainder_count_index17 = 0;\n    let mut max_divisor_remainder_count_index18\
    \ = 0;\n    let mut max_divisor_remainder_count_index19 = 0;\n    let mut max_divisor_remainder_count_index20\
    \ = 0;\n    let mut max_divisor_remainder_count_index21 = 0;\n    let mut max_divisor_remainder_count_index22\
    \ = 0;\n    let mut max_divisor_remainder_count_index23 = 0;\n    let mut max_divisor_remainder_count_index24\
    \ = 0;\n    let mut max_divisor_remainder_count_index25 = 0;\n    let mut max_divisor_remainder_count_index26\
    \ = 0;\n    let mut max_divisor_remainder_count_index27 = 0;\n    let mut max_divisor_remainder_count_index28\
    \ = 0;\n    let mut max_divisor_remainder_count_index29 = 0;\n    let mut max_divisor_remainder_count_index30\
    \ = 0;\n    let mut max_divisor_remainder_count_index31 = 0;\n    let mut max_divisor_remainder_count_index32\
    \ = 0;\n    let mut max_divisor_remainder_count_index33 = 0;\n    let mut max_divisor_remainder_count_index34\
    \ = 0;\n    let mut max_divisor_remainder_count_index35 = 0;\n    let mut max_divisor_remainder_count_index36\
    \ = 0;\n    let mut max_divisor_remainder_count_index37 = 0;\n    let mut max_divisor_remainder_count_",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n)\
    \ {\n        if n % d == 0 {\n            if d > max_divisor {\n             \
    \   max_divisor = d;\n                max_divisor_size = 1;\n            } else\
    \ {\n                max_divisor += d;\n                max_divisor_size = 2;\n\
    \            }\n        }\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 1;\n    let mut max_divisor_size = n;\n    while max_divisor_size != 1 {\n \
    \       max_divisor_size /= 2;\n        max_divisor *= 2;\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_n\
    \ = 0;\n    let mut max_divisor_size_n_n = 0;\n    let mut max_divisor_size_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut\
    \ max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut\
    \ max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let\
    \ mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n  \
    \  let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut\
    \ max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_", "    let\
    \ mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in &[2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97] {\n        if n % divisor == 0 {\n            if divisor > max_divisor {\n\
    \                max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \                max_divisor_value = n;\n            }\n        }\n    }\n   \
    \ max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_size_size = 0;\n    let mut max_divisor_size_prime\
    \ = 0;\n    let mut max_divisor_size_prime_size = 0;\n    let mut max_divisor_size_prime_prime\
    \ = 0;\n    let mut max_divisor_size_prime_prime_size = 0;\n    let mut max_divisor_size_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_size_prime_prime_prime_size = 0;\n    let mut\
    \ max_divisor_size_prime_prime_prime_prime = 0;\n    let mut max_divisor_size_prime_prime_prime_prime_size\
    \ = 0;\n    let mut max_divisor_size_prime_prime_prime_prime_prime = 0;\n    let\
    \ mut max_divisor_size_prime_prime_prime_prime_prime_size = 0;\n    let mut max_divisor_size_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_size_prime_prime_prime_prime_prime_prime_size\
    \ = 0;\n    let mut max_divisor_size_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_size_prime_prime_prime_prime_prime_prime_size\
    \ = 0;\n    let mut max_divisor_size_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_size_prime_prime_prime_prime_prime_prime_prime_size\
    \ = 0;\n    let mut max_divisor_size_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_size_prime_prime_prime_prime_prime_prime_prime_size\
    \ = 0;\n    let mut max_divisor_size_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_size_prime_prime_prime_prime_prime_prime_prime_prime_size\
    \ = 0;\n    let mut max_divisor_size_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_size_prime_prime_prime_prime_prime_prime_prime_prime_prime_size\
    \ = 0;\n    let mut max_divisor_size_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_size_prime_prime_prime_prime_prime_prime_prime_prime_prime_size\
    \ = 0;\n    let mut max_divisor_size_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut max_divisor_size_prime", "    let mut max_divisor = n;\n \
    \   let mut max_divisor_index = 0;\n    for divisor in &[2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n\
    \        if n % divisor == 0 {\n            if max_divisor % divisor == 0 {\n\
    \                max_divisor = divisor;\n                max_divisor_index = divisor\
    \ as usize;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = 0;\n    let mut max_divisor_value_found\
    \ = false;\n\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n    \
    \        if divisor > max_divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_index = divisor;\n                max_divisor_value\
    \ = divisor;\n                max_divisor_value_found = true;\n            } else\
    \ if divisor == max_divisor {\n                max_divisor_value = divisor;\n\
    \                max_divisor_value_found = true;\n            }\n        }\n \
    \   }\n\n    if max_divisor_value_found {\n        max_divisor_index\n    } else\
    \ {\n        max_divisor\n    }", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \                max_divisor_value = n;\n            }\n        } else {\n   \
    \         if divisor > max_divisor_value {\n                max_divisor_value\
    \ = divisor;\n                max_divisor_index = divisor;\n            }\n  \
    \      }\n    }\n    max_divisor_value", "    let mut max_divisor = 1;\n    let\
    \ mut max_divisor_size = n;\n\n    while max_divisor_size != 1 {\n        if n\
    \ % max_divisor == 0 {\n            max_divisor += 1;\n        } else {\n    \
    \        max_divisor -= 1;\n        }\n        max_divisor_size = max_divisor\
    \ as isize;\n    }\n\n    max_divisor", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_value = 0;\n    for i in\
    \ 1..=n {\n        if n % i == 0 {\n            if max_divisor < i {\n       \
    \         max_divisor = i;\n                max_divisor_index = i;\n         \
    \       max_divisor_value = i;\n            }\n            if max_divisor_value\
    \ < i {\n                max_divisor_value = i;\n            }\n        }\n  \
    \  }\n    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_index = 1;\n            } else if divisor == max_divisor\
    \ {\n                max_divisor_index += 1;\n            }\n        }\n    }\n\
    \    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    for d in divisors(n) {\n        if d > max_divisor {\n           \
    \ max_divisor = d;\n            max_divisor_size = 1;\n        }\n        if d\
    \ > max_divisor_size {\n            max_divisor_size = d;\n        }\n    }\n\
    \    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if max_divisor < divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_size = n;\n            }\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_idx = 1;\n    let mut max_divisor_value\
    \ = n;\n\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n        \
    \    if divisor > max_divisor {\n                max_divisor = divisor;\n    \
    \            max_divisor_idx = 1;\n            } else if divisor == max_divisor\
    \ {\n                max_divisor_idx += 1;\n            }\n        }\n    }\n\n\
    \    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_size_n = 0;\n    let mut max_divisor_size_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut\
    \ max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut\
    \ max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let\
    \ mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n  \
    \  let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut\
    \ max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_",
  "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    let mut max_divisor_value_found\
    \ = false;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_index =\
    \ i;\n                max_divisor_value = i;\n                max_divisor_value_found\
    \ = true;\n            }\n        }\n    }\n    if max_divisor_value_found {\n\
    \        max_divisor_value\n    } else {\n        max_divisor_value\n    }", " \
    \   let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    let\
    \ mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor",
  "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = 1;\n    let mut max_divisors\
    \ = vec![max_divisor];\n    let mut max_divisors_index = 0;\n    let mut max_divisors_indexs\
    \ = vec![max_divisors_index];\n    let mut max_divisors_indexs_index = 0;\n  \
    \  let mut max_divisors_indexs_indexs = vec![max_divisors_indexs_index];\n   \
    \ let mut max_divisors_indexs_indexs_index = 0;\n    let mut max_divisors_indexs_indexs_indexs\
    \ = vec![max_divisors_indexs_indexs_index];\n\n    for divisor in &mut max_divisors\
    \ {\n        if n % divisor == 0 {\n            max_divisors_indexs[max_divisors_indexs_index]\
    \ = divisor;\n            max_divisors_indexs_indexs[max_divisors_indexs_indexs_index]\
    \ = max_divisors_indexs_index;\n            max_divisors_indexs_indexs_indexs[max_divisors_indexs_indexs_index]\
    \ = max_divisors_indexs_indexs_index;\n            max_divisors_indexs_indexs_indexs_indexs[max_divisors_indexs_indexs_indexs_index]\
    \ = max_divisors_indexs_indexs_indexs_index;\n            max_divisors_indexs_indexs_indexs_indexs[max_divisors_indexs_indexs_indexs_index]\
    \ = max_divisors_indexs_indexs_indexs_index;\n            max_divisors_indexs_indexs_indexs_indexs[max_divisors_indexs_indexs_indexs_index]\
    \ = max_divisors_indexs_indexs_indexs_index;\n            max_divisors_indexs_indexs_indexs_indexs[max_divisors_indexs_indexs_indexs_index]\
    \ = max_divisors_indexs_indexs_indexs_index;\n            max_divisors_indexs_indexs_indexs_indexs[max_divisors_indexs_indexs_indexs_index]\
    \ = max_divisors_indexs_indexs_indexs_index;\n            max_divisors_indexs_indexs_indexs_indexs[max_divisors_indexs_indexs_indexs_index]\
    \ = max_divisors_indexs_indexs_indexs_index;\n            max_divisors_indexs_indexs_indexs_indexs[max_divisors_indexs_indexs_indexs_index]\
    \ = max_divisors_indexs_indexs_indexs_index;\n            max_divisors_indexs_indexs_indexs_indexs[max_divisors_indexs_indexs_indexs_index]\
    \ = max_divisors_indexs_indexs_indexs_index;\n            max_divisors_indexs_indexs_indexs_indexs[max_divisors_indexs_indexs_indexs_index]\
    \ = max_divisors_indexs_indexs_indexs_index;\n            max_divisors_indexs_indexs_indexs_indexs[max_divisors_indexs_indexs_indexs_",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n)\
    \ {\n        if n % d == 0 {\n            if d > max_divisor {\n             \
    \   max_divisor = d;\n                max_divisor_size = 1;\n            } else\
    \ {\n                max_divisor += d;\n                max_divisor_size++;\n\
    \            }\n        }\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 1;\n    let mut max_divisor_size = n;\n    let mut max_divisor_size = max_divisor_size\
    \ / 2;\n    while max_divisor_size != 1 {\n        if n % max_divisor_size ==\
    \ 0 {\n            max_divisor = max_divisor_size;\n        }\n        max_divisor_size\
    \ = max_divisor_size / 2;\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_value = n;\n\
    \    let mut max_divisor_value_prime = 1;\n    let mut max_divisor_value_prime_prime\
    \ = 1;\n    let mut max_divisor_value_prime_prime_prime = 1;\n\n    for divisor\
    \ in 1..=n {\n        let mut divisor_value = n;\n        let mut divisor_value_prime\
    \ = 1;\n        let mut divisor_value_prime_prime = 1;\n        let mut divisor_value_prime_prime_prime\
    \ = 1;\n\n        while divisor_value % divisor == 0 {\n            divisor_value\
    \ /= divisor;\n            divisor_value_prime *= divisor;\n            divisor_value_prime_prime\
    \ *= divisor;\n            divisor_value_prime_prime_prime *= divisor;\n     \
    \   }\n\n        if divisor_value > max_divisor {\n            max_divisor = divisor_value;\n\
    \            max_divisor_size = divisor;\n            max_divisor_value = divisor_value;\n\
    \            max_divisor_value_prime = divisor_value_prime;\n            max_divisor_value_prime_prime\
    \ = divisor_value_prime_prime;\n            max_divisor_value_prime_prime_prime\
    \ = divisor_value_prime_prime_prime;\n        }\n\n        if divisor_value ==\
    \ 1 {\n            break;\n        }\n    }\n\n    max_divisor", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_size = n;\n    while max_divisor_size\
    \ != 1 {\n        max_divisor += 1;\n        max_divisor_size = max_divisor_size\
    \ / 2;\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_size = n;\n            }\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = n;\n    let mut max_divisor_ind = 1;\n    let mut max_divisor_ind_2\
    \ = 2;\n    let mut max_divisor_ind_3 = 3;\n    let mut max_divisor_ind_4 = 4;\n\
    \    let mut max_divisor_ind_5 = 5;\n    let mut max_divisor_ind_6 = 6;\n    let\
    \ mut max_divisor_ind_7 = 7;\n    let mut max_divisor_ind_8 = 8;\n    let mut\
    \ max_divisor_ind_9 = 9;\n    let mut max_divisor_ind_10 = 10;\n    let mut max_divisor_ind_11\
    \ = 11;\n    let mut max_divisor_ind_12 = 12;\n    let mut max_divisor_ind_13\
    \ = 13;\n    let mut max_divisor_ind_14 = 14;\n    let mut max_divisor_ind_15\
    \ = 15;\n    let mut max_divisor_ind_16 = 16;\n    let mut max_divisor_ind_17\
    \ = 17;\n    let mut max_divisor_ind_18 = 18;\n    let mut max_divisor_ind_19\
    \ = 19;\n    let mut max_divisor_ind_20 = 20;\n    let mut max_divisor_ind_21\
    \ = 21;\n    let mut max_divisor_ind_22 = 22;\n    let mut max_divisor_ind_23\
    \ = 23;\n    let mut max_divisor_ind_24 = 24;\n    let mut max_divisor_ind_25\
    \ = 25;\n    let mut max_divisor_ind_26 = 26;\n    let mut max_divisor_ind_27\
    \ = 27;\n    let mut max_divisor_ind_28 = 28;\n    let mut max_divisor_ind_29\
    \ = 29;\n    let mut max_divisor_ind_30 = 30;\n    let mut max_divisor_ind_31\
    \ = 31;\n    let mut max_divisor_ind_32 = 32;\n    let mut max_divisor_ind_33\
    \ = 33;\n    let mut max_divisor_ind_34 = 34;\n    let mut max_divisor_ind_35\
    \ = 35;\n    let mut max_divisor_ind_36 = 36;\n    let mut max_divisor_ind_37\
    \ = 37;\n    let mut max_divisor_ind_38 = 38;\n    let mut max_divisor_ind_39\
    \ = 39;\n    let mut max_divisor_ind_40 = 40;\n    let mut max_divisor_ind_41\
    \ = 41;\n    let mut max_divisor_ind_42 = 42;\n    let mut max_divisor_ind_43\
    \ = 43;\n    let mut max_divisor_ind_44 = 44;\n    let mut max_divisor_ind_45\
    \ = 45;\n    let mut max_divisor_ind_46 = 46;\n", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_index = 0;\n    for i in 1..=n {\n        if n % i ==\
    \ 0 {\n            if max_divisor < i {\n                max_divisor = i;\n  \
    \              max_divisor_index = i;\n            }\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n\
    \            if max_divisor < divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_index = divisor as usize;\n                max_divisor_value\
    \ = n / divisor;\n            }\n        }\n    }\n    max_divisor_index", " \
    \   let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for divisor\
    \ in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n            if divisor\
    \ > max_divisor {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor as usize;\n            }\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_index = divisor;\n                max_divisor_value = n;\n\
    \            }\n        } else {\n            if divisor > max_divisor_value {\n\
    \                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor = 0;\n    let mut\
    \ max_divisor_size_divisor_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor = 0;\n \
    \   let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n    while max_divisor_size != 0 {\n        let divisor = max_divisor_size\
    \ % 2 == 0 ? max_divisor_size / 2 : (max_divisor_size + 1);\n        if divisor\
    \ > max_divisor {\n            max_divisor = divisor;\n            max_divisor_size\
    \ = divisor;\n        }\n        max_divisor_size /= 2;\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    let mut\
    \ max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count2 =\
    \ 0;\n    let mut max_divisor_remainder_count3 = 0;\n    let mut max_divisor_remainder_count4\
    \ = 0;\n    let mut max_divisor_remainder_count5 = 0;\n    let mut max_divisor_remainder_count6\
    \ = 0;\n    let mut max_divisor_remainder_count7 = 0;\n    let mut max_divisor_remainder_count8\
    \ = 0;\n    let mut max_divisor_remainder_count9 = 0;\n    let mut max_divisor_remainder_count10\
    \ = 0;\n    let mut max_divisor_remainder_count11 = 0;\n    let mut max_divisor_remainder_count12\
    \ = 0;\n    let mut max_divisor_remainder_count13 = 0;\n    let mut max_divisor_remainder_count14\
    \ = 0;\n    let mut max_divisor_remainder_count15 = 0;\n    let mut max_divisor_remainder_count16\
    \ = 0;\n    let mut max_divisor_remainder_count17 = 0;\n    let mut max_divisor_remainder_count18\
    \ = 0;\n    let mut max_divisor_remainder_count19 = 0;\n    let mut max_divisor_remainder_count20\
    \ = 0;\n    let mut max_divisor_remainder_count21 = 0;\n    let mut max_divisor_remainder_count22\
    \ = 0;\n    let mut max_divisor_remainder_count23 = 0;\n    let mut max_divisor_remainder_count24\
    \ = 0;\n    let mut max_divisor_remainder_count25 = 0;\n    let mut max_divisor_remainder_count26\
    \ = 0;\n    let mut max_divisor_remainder_count27 = 0;\n    let mut max_divisor_remainder_count28\
    \ = 0;\n    let mut max_divisor_remainder_count29 = 0;\n    let mut max_divisor_remainder_count30\
    \ = 0;\n    let mut max_divisor_remainder_count31 = 0;\n    let mut max_divisor_remainder_count32\
    \ = 0;\n    let mut max_divisor_remainder_count33 = 0;\n    let mut max_divisor_remainder_count34\
    \ = 0;\n    let mut max_divisor_remainder_count35 = 0;\n    let mut max_divisor_remainder_count36\
    \ = 0;\n    let mut max_divisor_remainder_count37 = 0;\n    let mut max_divisor_remainder_count38\
    \ = 0;\n    let mut max_divisor_remainder_count39 = 0;\n    let mut max_divisor_remainder_count40\
    \ = 0;\n    let mut max_divisor_remainder_count41 = 0;\n    let mut max_divisor_remainder_count",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_index = divisor;\n                max_divisor_value = n;\n\
    \            }\n        } else {\n            if divisor > max_divisor_value {\n\
    \                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for divisor in\
    \ 1..=n {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_size\
    \ = divisor;\n            } else {\n                max_divisor_size = divisor;\n\
    \            }\n        }\n    }\n    max_divisor", "    let mut max_divisor =\
    \ n;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_index2 = 0;\n\
    \    let mut max_divisor_index3 = 0;\n    let mut max_divisor_index4 = 0;\n  \
    \  let mut max_divisor_index5 = 0;\n    let mut max_divisor_index6 = 0;\n    let\
    \ mut max_divisor_index7 = 0;\n    let mut max_divisor_index8 = 0;\n    let mut\
    \ max_divisor_index9 = 0;\n    let mut max_divisor_index10 = 0;\n    let mut max_divisor_index11\
    \ = 0;\n    let mut max_divisor_index12 = 0;\n    let mut max_divisor_index13\
    \ = 0;\n    let mut max_divisor_index14 = 0;\n    let mut max_divisor_index15\
    \ = 0;\n    let mut max_divisor_index16 = 0;\n    let mut max_divisor_index17\
    \ = 0;\n    let mut max_divisor_index18 = 0;\n    let mut max_divisor_index19\
    \ = 0;\n    let mut max_divisor_index20 = 0;\n    let mut max_divisor_index21\
    \ = 0;\n    let mut max_divisor_index22 = 0;\n    let mut max_divisor_index23\
    \ = 0;\n    let mut max_divisor_index24 = 0;\n    let mut max_divisor_index25\
    \ = 0;\n    let mut max_divisor_index26 = 0;\n    let mut max_divisor_index27\
    \ = 0;\n    let mut max_divisor_index28 = 0;\n    let mut max_divisor_index29\
    \ = 0;\n    let mut max_divisor_index30 = 0;\n    let mut max_divisor_index31\
    \ = 0;\n    let mut max_divisor_index32 = 0;\n    let mut max_divisor_index33\
    \ = 0;\n    let mut max_divisor_index34 = 0;\n    let mut max_divisor_index35\
    \ = 0;\n    let mut max_divisor_index36 = 0;\n    let mut max_divisor_index37\
    \ = 0;\n    let mut max_divisor_index38 = 0;\n    let mut max_divisor_index39\
    \ = 0;\n    let mut max_divisor_index40 = 0;\n    let mut max_divisor_index41\
    \ = 0;\n    let mut max_divisor_index42 = 0;\n    let mut max_divisor_index43\
    \ = 0;\n    let mut max_divisor_index44 = 0;\n    let mut max_divisor_index45\
    \ = 0;\n    let mut max_divisor_index46 = 0;\n    let mut max_divisor_index47\
    \ = 0;\n    let mut max_divisor_index48 = 0;\n    let mut max_divisor_index49\
    \ = 0;\n    let mut max_divisor_index50 = 0;\n    let mut max_divisor_index51\
    \ = 0;\n    let mut max_divisor_index52 = 0;\n    let mut max_divisor_index53\
    \ = 0;\n    let mut max_divisor_index54 = 0;\n    let mut max_divisor_index55\
    \ = 0;\n    let mut max_divisor_index56 = 0;\n    let mut max_divisor", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for divisor in\
    \ 1..=n {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        } else {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_indexes:\
    \ Vec<usize> = vec![];\n\n    for divisor in 1..=max_divisor {\n        if n %\
    \ divisor == 0 {\n            max_divisor = divisor;\n            max_divisor_index\
    \ = 0;\n            max_divisor_indexes.clear();\n        }\n        if max_divisor\
    \ % divisor == 0 {\n            max_divisor_indexes.push(divisor);\n         \
    \   if max_divisor_indexes.len() > max_divisor_index {\n                max_divisor_index\
    \ = max_divisor_indexes.len();\n            }\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    let mut\
    \ max_divisor_remainder_pow = 0;\n\n    for i in 1..=n {\n        let mut divisor\
    \ = i;\n        let mut remainder = 0;\n        let mut remainder_pow = 0;\n\n\
    \        while divisor != 0 {\n            remainder_pow = remainder_pow + 1;\n\
    \            remainder = remainder + divisor % i;\n            divisor = divisor\
    \ / i;\n        }\n\n        if remainder > max_divisor_remainder {\n        \
    \    max_divisor = i;\n            max_divisor_remainder = remainder;\n      \
    \      max_divisor_remainder_pow = remainder_pow;\n        }\n    }\n\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n\
    \            if max_divisor < divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_index = divisor as usize;\n                max_divisor_value\
    \ = n;\n            }\n        }\n    }\n    max_divisor_index", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for d in divisors(n)\
    \ {\n        if n % d == 0 {\n            if d > max_divisor {\n             \
    \   max_divisor = d;\n                max_divisor_remainder = n % d;\n       \
    \     }\n        }\n    }\n    max_divisor_remainder", "    let mut max_divisor\
    \ = 1;\n    let mut max_divisor_size = n;\n    while max_divisor_size != 1 {\n\
    \        max_divisor_size /= 2;\n        max_divisor *= 2;\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    let mut\
    \ max_divisor_remainder_count = 0;\n\n    for divisor in 1..=n {\n        if n\
    \ % divisor == 0 {\n            if divisor > max_divisor {\n                max_divisor\
    \ = divisor;\n                max_divisor_remainder = n % divisor;\n         \
    \       max_divisor_remainder_count = 0;\n            }\n            else {\n\
    \                max_divisor_remainder_count += 1;\n            }\n        }\n\
    \    }\n\n    if max_divisor_remainder_count == 0 {\n        max_divisor_remainder_count\
    \ = 1;\n    }\n\n    max_divisor_remainder += max_divisor_remainder_count * max_divisor;\n\
    \n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_value = n;\n\n    for divisor in 1..=n {\n   \
    \     if n % divisor == 0 {\n            if divisor > max_divisor {\n        \
    \        max_divisor = divisor;\n                max_divisor_size = divisor;\n\
    \            } else {\n                max_divisor = max_divisor;\n          \
    \      max_divisor_size = max_divisor_size;\n            }\n        }\n    }\n\
    \n    if max_divisor_size == n {\n        max_divisor = max_divisor_value;\n \
    \   }\n\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_size = n;\n            }\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    let mut\
    \ max_divisor_remainder_pow = 0;\n    let mut max_divisor_remainder_pow_pow =\
    \ 0;\n    let mut max_divisor_remainder_pow_pow_pow = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow = 0;\n    let mut\
    \ max_divisor_remainder_pow_pow_pow_pow_pow = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow = 0;\n \
    \   let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow = 0;\n    let\
    \ mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow = 0;\n    let mut\
    \ max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size =\
    \ 0;\n    let mut max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor = 0;\n    let mut\
    \ max_divisor_size_divisor_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor = 0;\n \
    \   let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut ", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for i in 1..=n {\n        if n\
    \ % i == 0 {\n            if max_divisor < i {\n                max_divisor =\
    \ i;\n                max_divisor_index = i;\n            }\n        }\n    }\n\
    \    max_divisor_value", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_size = divisor;\n \
    \               max_divisor_value = n;\n            } else {\n               \
    \ max_divisor_size = divisor;\n            }\n        }\n    }\n    max_divisor_value",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    let mut\
    \ max_divisor_remainder_count = 0;\n    for divisor in 1..=n {\n        if n %\
    \ divisor == 0 {\n            if divisor > max_divisor {\n                max_divisor\
    \ = divisor;\n                max_divisor_remainder = n % divisor;\n         \
    \       max_divisor_remainder_count = 0;\n            }\n            if divisor\
    \ == max_divisor {\n                max_divisor_remainder_count += 1;\n      \
    \      }\n        }\n    }\n    if max_divisor_remainder_count == 0 {\n      \
    \  max_divisor_remainder_count = 1;\n    }\n    if max_divisor_remainder_count\
    \ > 1 {\n        max_divisor_remainder *= max_divisor_remainder_count;\n    }\n\
    \    max_divisor * max_divisor_remainder", "    let mut max_divisor = 0;\n   \
    \ let mut max_divisor_remainder = 0;\n    let mut max_divisor_remainder_pow =\
    \ 0;\n    let mut max_divisor_remainder_pow_max = 0;\n    let mut max_divisor_remainder_pow_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc = 0;\n    let mut max_divisor_remainder_pow_min_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc_inc_inc = 0;\n    let mut\
    \ max_divisor_remainder_pow_min_inc_inc_inc_inc = 0;\n    let mut max_divisor_remainder_pow_min_inc_inc_inc_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc_inc_inc_inc_inc_inc = 0;\n\
    \    let mut max_divisor_remainder_pow_min_inc_inc_inc_inc_inc_inc_inc = 0;\n\
    \    let mut max_divisor_remainder_pow_min_inc_inc_inc_inc_inc_inc_inc = 0;\n\
    \    let mut max_divisor_remainder_pow_min_inc_inc_inc_inc_inc_inc_inc_inc = 0;\n\
    \    let mut max_divisor_remainder_pow_min_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc_inc", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_remainder = 0;\n    let mut max_divisor_remainder_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_neg = 0;\n    let mut max_divisor_remainder_pow_neg2\
    \ = 0;\n    let mut max_divisor_remainder_pow_neg3 = 0;\n    let mut max_divisor_remainder_pow_neg4\
    \ = 0;\n    let mut max_divisor_remainder_pow_neg5 = 0;\n    let mut max_divisor_remainder_pow_neg6\
    \ = 0;\n    let mut max_divisor_remainder_pow_neg7 = 0;\n    let mut max_divisor_remainder_pow_neg8\
    \ = 0;\n    let mut max_divisor_remainder_pow_neg9 = 0;\n    let mut max_divisor_remainder_pow_neg10\
    \ = 0;\n    let mut max_divisor_remainder_pow_neg11 = 0;\n    let mut max_divisor_remainder_pow_neg12\
    \ = 0;\n    let mut max_divisor_remainder_pow_neg13 = 0;\n    let mut max_divisor_remainder_pow_neg14\
    \ = 0;\n    let mut max_divisor_remainder_pow_neg15 = 0;\n    let mut max_divisor_remainder_pow_neg16\
    \ = 0;\n    let mut max_divisor_remainder_pow_neg17 = 0;\n    let mut max_divisor_remainder_pow_neg18\
    \ = 0;\n    let mut max_divisor_remainder_pow_neg19 = 0;\n    let mut max_divisor_remainder_pow_neg20\
    \ = 0;\n    let mut max_divisor_remainder_pow_neg21 = 0;\n    let mut max_divisor_remainder_pow_neg22\
    \ = 0;\n    let mut max_divisor_remainder_pow_neg23 = 0;\n    let mut max_divisor_remainder_pow_neg24\
    \ = 0;\n    let mut max_divisor_remainder_pow_neg25 = 0;\n    let mut max_divisor_remainder_pow_neg26\
    \ = 0;\n    let mut max_divisor_remainder_pow_neg27 = 0;\n    let mut max_divisor_remainder_pow_neg28\
    \ = 0;\n    let mut max_divisor_remainder_pow_neg29 = 0;\n    let mut max_divisor_remainder_pow_neg30\
    \ = 0;\n    let mut max_divisor_remainder_pow_neg31 = 0;\n    let mut max_divisor_remainder_pow_neg32\
    \ = 0;\n    let mut max_divisor_remainder_pow_neg33 = 0;\n    let mut max_divisor_remainder_pow_neg34\
    \ = 0;\n    let mut max_divisor_remainder_pow_neg35 = 0;\n    let mut max_divisor_remainder_pow_neg36\
    \ = 0;\n    let mut max_divisor_remainder_pow_neg37 = 0;\n    let mut max_divisor_re",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor = 0;\n    let mut\
    \ max_divisor_size_divisor_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor = 0;\n \
    \   let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divis", "    let mut max_divisor = 0;\n \
    \   let mut max_divisor_size = 0;\n    let mut max_divisor_size_size = 0;\n  \
    \  for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor_size\
    \ < i {\n                max_divisor = i;\n                max_divisor_size =\
    \ i;\n                max_divisor_size_size = i;\n            }\n            if\
    \ max_divisor_size == i {\n                max_divisor_size_size = i;\n      \
    \      }\n        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size = 0;\n \
    \   for d in divisors(n) {\n        if n % d == 0 {\n            if d > max_divisor\
    \ {\n                max_divisor = d;\n                max_divisor_size = n;\n\
    \                max_divisor_size_size = n;\n            }\n            if d >\
    \ max_divisor_size_size {\n                max_divisor_size = d;\n           \
    \     max_divisor_size_size = n;\n            }\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = 1;\n    let mut max_divisor_remainder = 0;\n    for i\
    \ in 2..=n {\n        if n % i == 0 {\n            if max_divisor_remainder ==\
    \ 0 {\n                max_divisor = i;\n                max_divisor_remainder\
    \ = n % i;\n            } else {\n                if max_divisor_remainder > max_divisor\
    \ {\n                    max_divisor = max_divisor_remainder;\n              \
    \      max_divisor_remainder = n % max_divisor;\n                }\n         \
    \   }\n        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n   \
    \ let mut max_divisor_remainder = 0;\n    for i in 1..=n {\n        if n % i ==\
    \ 0 {\n            if max_divisor == 0 {\n                max_divisor = i;\n \
    \               max_divisor_remainder = n % i;\n            } else {\n       \
    \         if max_divisor_remainder > max_divisor_remainder {\n               \
    \     max_divisor = i;\n                    max_divisor_remainder = n % i;\n \
    \               }\n            }\n        }\n    }\n    max_divisor", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    for i in 1..n {\n        let remainder = n % i;\n        if remainder\
    \ == 0 {\n            max_divisor = i;\n            max_divisor_remainder = remainder;\n\
    \        }\n    }\n    max_divisor", "    let mut max_divisor = 1;\n    let mut\
    \ max_divisor_remainder = 0;\n    for divisor in 1..=n {\n        if n % divisor\
    \ == 0 {\n            if divisor > max_divisor {\n                max_divisor\
    \ = divisor;\n                max_divisor_remainder = 0;\n            } else {\n\
    \                max_divisor_remainder += divisor - max_divisor;\n           \
    \ }\n        }\n    }\n    max_divisor + max_divisor_remainder", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_index\
    \ = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n\
    \n    for divisor in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n \
    \           if divisor > max_divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_size = divisor;\n                max_divisor_size_index\
    \ = divisor;\n                max_divisor_index = divisor;\n                max_divisor_value\
    \ = n;\n            }\n            if divisor > max_divisor_value {\n        \
    \        max_divisor_value = divisor;\n                max_divisor_size_index\
    \ = divisor;\n                max_divisor_index = divisor;\n            }\n  \
    \      }\n    }\n\n    max_divisor", "    let mut max_divisor = 0;\n    let mut\
    \ max_divisor_size = n;\n    while max_divisor_size != 0 {\n        max_divisor\
    \ += 1;\n        max_divisor_size = max_divisor_size / 2;\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_index\
    \ = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n\
    \    let mut max_divisor_value_pos = 0;\n    let mut max_divisor_value_neg = 0;\n\
    \    let mut max_divisor_value_neg_index = 0;\n    let mut max_divisor_value_neg_size\
    \ = 0;\n    let mut max_divisor_value_neg_size_index = 0;\n    let mut max_divisor_value_neg_index2\
    \ = 0;\n    let mut max_divisor_value_neg_index2_size = 0;\n    let mut max_divisor_value_neg_index2_size_index\
    \ = 0;\n    let mut max_divisor_value_neg_index3 = 0;\n    let mut max_divisor_value_neg_index3_size\
    \ = 0;\n    let mut max_divisor_value_neg_index3_size_index = 0;\n    let mut\
    \ max_divisor_value_neg_index4 = 0;\n    let mut max_divisor_value_neg_index4_size\
    \ = 0;\n    let mut max_divisor_value_neg_index4_size_index = 0;\n    let mut\
    \ max_divisor_value_neg_index5 = 0;\n    let mut max_divisor_value_neg_index5_size\
    \ = 0;\n    let mut max_divisor_value_neg_index5_size_index = 0;\n    let mut\
    \ max_divisor_value_neg_index6 = 0;\n    let mut max_divisor_value_neg_index6_size\
    \ = 0;\n    let mut max_divisor_value_neg_index6_size_index = 0;\n    let mut\
    \ max_divisor_value_neg_index7 = 0;\n    let mut max_divisor_value_neg_index7_size\
    \ = 0;\n    let mut max_divisor_value_neg_index7_size_index = 0;\n    let mut\
    \ max_divisor_value_neg_index8 = 0;\n    let mut max_divisor_value_neg_index8_size\
    \ = 0;\n    let mut max_divisor_value_neg_index8_size_index = 0;\n    let mut\
    \ max_divisor_value_neg_index9 = 0;\n    let mut max_divisor_value_neg_index9_size\
    \ = 0;\n    let mut max_divisor_value_neg_index9_size_index = 0;\n    let mut\
    \ max_divisor_value_neg_index10 = 0;\n    let mut max_divisor_value_neg_index10_size\
    \ = 0;\n    let mut max_divisor_value_neg_index10_size_index = 0;\n    let mut\
    \ max_divisor_value_neg_index11 = 0;\n    let mut max_divisor_value_neg_index11_size\
    \ = 0;\n    let mut max_divisor_value_neg_index11_size_index = 0;\n    let mut\
    \ max_divisor_value_neg_index12 = 0;\n    let mut max_divisor_value_neg_index12_size\
    \ = 0;\n    let mut max_divisor_value_neg_index12_size_index = 0;\n    let mut\
    \ max_divisor_value_neg_index13 = 0;\n    let mut max_divisor_value_neg_index13_size\
    \ = 0;\n    let mut max_divisor_value_neg_index", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_index = 0;\n    let mut max_divisor_value = 0;\n    let\
    \ mut max_divisor_value_index = 0;\n    let mut max_divisor_value_value = 0;\n\
    \    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_value_index = 0;\n    let mut max_divisor_value_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_value_index = 0;\n    let mut max_divisor_value_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_value_index = 0;\n    let mut max_divisor_value_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_value_index = 0;\n    let mut max_divisor_value_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_value_index = 0;\n    let mut max_divisor_value_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_value_index = 0;\n    let mut max_divisor_value_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_value_index = 0;\n    let mut max_divisor_value_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_value_index = 0;\n    let mut max_divisor_value_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_value_index = 0;\n    let mut max_divisor_value_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_value_index = 0;\n    let mut max_divisor_value_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_value_index = 0;\n    let mut max_divisor_value_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_value_index = 0;\n    let mut max_divisor_value_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_value_index = 0;\n    let mut max_divisor_value_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_value_index = 0;\n    let mut max_divisor_value_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_value_index = 0;\n    let mut max_divisor_value_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_value_index = 0;\n    let mut max_divisor_value_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_value_index = 0;\n    let mut max_divisor_value_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_value_index = 0;\n    let mut max_divisor_value_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_value_index = 0;\n    let mut max_divisor_value_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_value_index = 0;\n    let ", "   \
    \ let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_index = divisor;\n                max_divisor_value = n;\n\
    \            }\n        } else {\n            if divisor > max_divisor_value {\n\
    \                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_value = n;\n\n    for divisor in 1..=n {\n   \
    \     if n % divisor == 0 {\n            if divisor > max_divisor {\n        \
    \        max_divisor = divisor;\n                max_divisor_size = divisor;\n\
    \            } else {\n                max_divisor = max_divisor;\n          \
    \      max_divisor_size = max_divisor_size;\n            }\n        }\n    }\n\
    \n    if max_divisor_size > n {\n        max_divisor = max_divisor_size;\n   \
    \ }\n\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    for i in 1..=n {\n        let mut divisor = i;\n        while divisor\
    \ % 2 == 0 {\n            divisor /= 2;\n        }\n        if divisor > max_divisor\
    \ {\n            max_divisor = divisor;\n            max_divisor_remainder = i;\n\
    \        }\n    }\n    max_divisor_remainder", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_size = n;\n    while max_divisor_size != 1 {\n      \
    \  max_divisor += 1;\n        max_divisor_size = max_divisor_size / 2;\n    }\n\
    \    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \                max_divisor_value = n;\n            }\n        }\n    }\n   \
    \ max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ == 0 {\n                max_divisor = i;\n                max_divisor_remainder\
    \ = n % i;\n            } else {\n                if max_divisor_remainder ==\
    \ 0 {\n                    max_divisor = i;\n                    max_divisor_remainder\
    \ = n % i;\n                } else {\n                    if max_divisor_remainder\
    \ > max_divisor_remainder {\n                        max_divisor = i;\n      \
    \                  max_divisor_remainder = n % i;\n                    }\n   \
    \             }\n            }\n        }\n    }\n    max_divisor", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for i in 1..n {\n \
    \       if n % i == 0 {\n            if max_divisor_size == 0 {\n            \
    \    max_divisor = i;\n                max_divisor_size = 1;\n            } else\
    \ {\n                if max_divisor_size > i {\n                    max_divisor\
    \ = i;\n                    max_divisor_size = i;\n                }\n       \
    \     }\n        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n \
    \   let mut max_divisor_remainder = 0;\n    for divisor in 1..=n {\n        if\
    \ n % divisor == 0 {\n            if divisor > max_divisor {\n               \
    \ max_divisor = divisor;\n                max_divisor_remainder = n % divisor;\n\
    \            }\n        }\n    }\n    if max_divisor_remainder == 0 {\n      \
    \  max_divisor\n    } else {\n        max_divisor_remainder\n    }", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for i in 1..=n\
    \ {\n        let divisor = i / n;\n        if divisor > max_divisor {\n      \
    \      max_divisor = divisor;\n            max_divisor_remainder = i;\n      \
    \  }\n    }\n    max_divisor_remainder", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_index = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n\
    \            if max_divisor < i {\n                max_divisor = i;\n        \
    \        max_divisor_index = i;\n            }\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_index =\
    \ i;\n                max_divisor_value = i;\n            }\n            if max_divisor_value\
    \ == i {\n                max_divisor_value = i;\n            }\n        }\n \
    \   }\n    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_value = 0;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found = false;\n    let mut ", "   \
    \ let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_index = divisor;\n                max_divisor_value = n;\n\
    \            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_remainder = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    for i in 1..=n {\n        let remainder = n % i;\n        if remainder\
    \ == 0 {\n            max_divisor = i;\n            max_divisor_remainder = remainder;\n\
    \        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut\
    \ max_divisor_index = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n    \
    \        if max_divisor < i {\n                max_divisor = i;\n            \
    \    max_divisor_index = i;\n            }\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_size_size = 0;\n    let mut max_divisor_size_pow2\
    \ = 0;\n\n    for divisor in &[isize::MIN, isize::MAX] {\n        if n % divisor\
    \ == 0 {\n            let divisor_size = divisor as isize;\n            let divisor_size_size\
    \ = divisor_size * divisor_size;\n            if divisor_size > max_divisor_size\
    \ {\n                max_divisor = divisor;\n                max_divisor_size\
    \ = divisor_size;\n                max_divisor_size_size = divisor_size_size;\n\
    \                max_divisor_size_pow2 = divisor_size_pow2;\n            }\n \
    \       }\n    }\n\n    if max_divisor_size > max_divisor_size_pow2 {\n      \
    \  max_divisor_size_pow2 = max_divisor_size;\n    }\n\n    max_divisor_size_pow2",
  "    let mut max_divisor = n;\n    let mut max_divisor_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind\
    \ = 1;\n", "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let\
    \ mut max_divisor3 = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5\
    \ = 1;\n    let mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let\
    \ mut max_divisor8 = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10\
    \ = 1;\n    let mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let\
    \ mut max_divisor13 = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15\
    \ = 1;\n    let mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let\
    \ mut max_divisor18 = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20\
    \ = 1;\n    let mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let\
    \ mut max_divisor23 = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25\
    \ = 1;\n    let mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let\
    \ mut max_divisor28 = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30\
    \ = 1;\n    let mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let\
    \ mut max_divisor33 = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35\
    \ = 1;\n    let mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let\
    \ mut max_divisor38 = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40\
    \ = 1;\n    let mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let\
    \ mut max_divisor43 = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45\
    \ = 1;\n    let mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let\
    \ mut max_divisor48 = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50\
    \ = 1;\n    let mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let\
    \ mut max_divisor53 = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55\
    \ = 1;\n    let mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let\
    \ mut max_divisor58 = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60\
    \ = 1;\n    let mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let\
    \ mut max_divisor63 = 1;\n    let mut max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size = 0;\n\
    \    let mut max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor = 0;\n    let mut\
    \ max_divisor_size_divisor_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor = 0;\n \
    \   let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            let mut divisor\
    \ = i;\n            while divisor < n {\n                divisor += i;\n     \
    \       }\n            if divisor > max_divisor {\n                max_divisor\
    \ = divisor;\n                max_divisor_remainder = n % divisor;\n         \
    \   }\n        }\n    }\n    max_divisor_remainder", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_remainder = 0;\n    for i in 1..=n {\n       \
    \ if n % i == 0 {\n            if max_divisor == 0 {\n                max_divisor\
    \ = i;\n                max_divisor_remainder = n % i;\n            } else {\n\
    \                if max_divisor_remainder == 0 {\n                    max_divisor\
    \ = i;\n                    max_divisor_remainder = n % i;\n                }\n\
    \            }\n        }\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n\
    \    for divisor in 1..=n {\n        if n % divisor == 0 {\n            if divisor\
    \ > max_divisor {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n                max_divisor_value = n;\n            }\n        }\
    \ else {\n            if divisor > max_divisor_value {\n                max_divisor_value\
    \ = divisor;\n                max_divisor_index = divisor;\n            }\n  \
    \      }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_size = 0;\n    let mut max_divisor_size_size = 0;\n    for d\
    \ in divisors(n) {\n        if n % d == 0 {\n            if max_divisor_size ==\
    \ 0 {\n                max_divisor = d;\n                max_divisor_size = n;\n\
    \                max_divisor_size_size = n;\n            } else {\n          \
    \      if n > max_divisor_size {\n                    max_divisor = d;\n     \
    \               max_divisor_size = n;\n                    max_divisor_size_size\
    \ = n;\n                }\n            }\n        }\n    }\n    if max_divisor_size\
    \ == 0 {\n        max_divisor = n;\n        max_divisor_size = n;\n        max_divisor_size_size\
    \ = n;\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n        \
    \    if max_divisor < divisor {\n                max_divisor = divisor;\n    \
    \            max_divisor_size = n;\n            }\n        }\n    }\n\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_index = divisor;\n                max_divisor_value = n;\n\
    \            }\n        } else {\n            if divisor > max_divisor_value {\n\
    \                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    let mut max_divisor_remainder_n\
    \ = 0;\n    let mut max_divisor_remainder_n2 = 0;\n    let mut max_divisor_remainder_n3\
    \ = 0;\n    let mut max_divisor_remainder_n4 = 0;\n    let mut max_divisor_remainder_n5\
    \ = 0;\n    let mut max_divisor_remainder_n6 = 0;\n    let mut max_divisor_remainder_n7\
    \ = 0;\n    let mut max_divisor_remainder_n8 = 0;\n    let mut max_divisor_remainder_n9\
    \ = 0;\n    let mut max_divisor_remainder_n10 = 0;\n    let mut max_divisor_remainder_n11\
    \ = 0;\n    let mut max_divisor_remainder_n12 = 0;\n    let mut max_divisor_remainder_n13\
    \ = 0;\n    let mut max_divisor_remainder_n14 = 0;\n    let mut max_divisor_remainder_n15\
    \ = 0;\n    let mut max_divisor_remainder_n16 = 0;\n    let mut max_divisor_remainder_n17\
    \ = 0;\n    let mut max_divisor_remainder_n18 = 0;\n    let mut max_divisor_remainder_n19\
    \ = 0;\n    let mut max_divisor_remainder_n20 = 0;\n    let mut max_divisor_remainder_n21\
    \ = 0;\n    let mut max_divisor_remainder_n22 = 0;\n    let mut max_divisor_remainder_n23\
    \ = 0;\n    let mut max_divisor_remainder_n24 = 0;\n    let mut max_divisor_remainder_n25\
    \ = 0;\n    let mut max_divisor_remainder_n26 = 0;\n    let mut max_divisor_remainder_n27\
    \ = 0;\n    let mut max_divisor_remainder_n28 = 0;\n    let mut max_divisor_remainder_n29\
    \ = 0;\n    let mut max_divisor_remainder_n30 = 0;\n    let mut max_divisor_remainder_n31\
    \ = 0;\n    let mut max_divisor_remainder_n32 = 0;\n    let mut max_divisor_remainder_n33\
    \ = 0;\n    let mut max_divisor_remainder_n34 = 0;\n    let mut max_divisor_remainder_n35\
    \ = 0;\n    let mut max_divisor_remainder_n36 = 0;\n    let mut max_divisor_remainder_n37\
    \ = 0;\n    let mut max_divisor_remainder_n38 = 0;\n    let mut max_divisor_remainder_n39\
    \ = 0;\n    let mut max_divisor_remainder_n40 = 0;\n    let mut max_divisor_remainder_n41\
    \ = 0;\n    let mut max_divisor_remainder_", "    let mut max_divisor = 0;\n \
    \   let mut max_divisor_remainder = 0;\n    let mut max_divisor_remainder_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_max = 0;\n    let mut max_divisor_remainder_pow_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc = 0;\n    let mut max_divisor_remainder_pow_min_dec\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc_dec = 0;\n    let mut max_divisor_remainder_pow_min_dec_dec\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc_dec_dec = 0;\n    let mut\
    \ max_divisor_remainder_pow_min_dec_dec_dec = 0;\n    let mut max_divisor_remainder_pow_min_inc_dec_dec_dec\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_dec_dec_dec_dec = 0;\n    let\
    \ mut max_divisor_remainder_pow_min_inc_dec_dec_dec_dec = 0;\n    let mut max_divisor_remainder_pow_min_dec_dec_dec_dec\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_dec_dec_dec_dec = 0;\n    let\
    \ mut max_divisor_remainder_pow_min_dec_dec_dec_dec = 0;\n    let mut max_divisor_remainder_pow_min_dec_dec_dec_dec\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_dec_dec_dec_dec = 0;\n    let\
    \ mut max_divisor_remainder_pow_min_dec_dec_dec_dec = 0;\n    let mut max_divisor_remainder_pow_min_dec_dec_dec_dec\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_dec_dec_dec_dec = 0;\n    let\
    \ mut max_divisor_remainder_pow_min_dec_dec_dec_dec = 0;\n    let mut max_divisor_remainder_pow_min_dec_dec_dec_dec\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_dec_dec_dec_dec = 0;\n    let\
    \ mut max_divisor_remainder_pow_min_dec_dec_dec_dec = 0;\n    let mut max_divisor_remainder_pow_min_dec_dec_dec_dec\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_dec_dec_dec_dec = 0;\n    let\
    \ mut max_divisor_remainder_pow_min_dec_dec_dec_dec = 0;\n    let mut max_divisor_remainder_pow_min_dec_dec_dec_dec\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_dec_dec_dec_dec = 0;\n    let\
    \ mut max_divisor_remainder_pow_min_dec_dec_dec_dec = 0;\n    let mut max_divisor_remainder_pow_min_dec_dec_dec_dec\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_dec_dec_dec_dec = 0;\n    let\
    \ mu", "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let\
    \ mut max_divisor_value = n;\n    for divisor in 1..=n {\n        if n % divisor\
    \ == 0 {\n            if divisor > max_divisor {\n                max_divisor\
    \ = divisor;\n                max_divisor_size = divisor;\n                max_divisor_value\
    \ = n;\n            }\n        }\n    }\n    max_divisor", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    for divisor in 1..=n {\n      \
    \  if n % divisor == 0 {\n            if divisor > max_divisor {\n           \
    \     max_divisor = divisor;\n                max_divisor_size = divisor;\n  \
    \          } else {\n                max_divisor_size = divisor;\n           \
    \ }\n        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_size = 0;\n    let mut max_divisor_value = n;\n    for divisor\
    \ in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n            if divisor\
    \ > max_divisor {\n                max_divisor = divisor;\n                max_divisor_size\
    \ = divisor;\n                max_divisor_value = n;\n            }\n        }\n\
    \    }\n    max_divisor_value", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count_remainder\
    \ = 0;\n\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor_remainder\
    \ < i {\n                max_divisor_remainder = i;\n                max_divisor_remainder_count\
    \ = max_divisor_remainder_count_remainder;\n            }\n            if max_divisor_remainder\
    \ == i {\n                max_divisor_remainder_count_remainder += 1;\n      \
    \      }\n        }\n    }\n\n    if max_divisor_remainder == 0 {\n        max_divisor_remainder\
    \ = n;\n        max_divisor_remainder_count = max_divisor_remainder_count_remainder;\n\
    \    }\n\n    max_divisor_remainder", "    let mut max_divisor = n;\n    let mut\
    \ max_divisor_index = 0;\n    for divisor in &[2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n        if\
    \ n % divisor == 0 {\n            if max_divisor % divisor == 0 {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor as\
    \ usize;\n            }\n        }\n    }\n    max_divisor_index", "    let mut\
    \ max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3 =\
    \ 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let mut\
    \ max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8 =\
    \ 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let mut\
    \ max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = n;\n    let mut max_divisor_ind\
    \ = 1;\n\n    for divisor in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n        if n % divisor ==\
    \ 0 {\n            if divisor > max_divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_ind = 1;\n            } else {\n                max_divisor_ind\
    \ += 1;\n            }\n        }\n    }\n\n    max_divisor_ind", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count2 = 0;\n    let mut max_divisor_remainder_count3\
    \ = 0;\n    let mut max_divisor_remainder_count4 = 0;\n    let mut max_divisor_remainder_count5\
    \ = 0;\n    let mut max_divisor_remainder_count6 = 0;\n    let mut max_divisor_remainder_count7\
    \ = 0;\n    let mut max_divisor_remainder_count8 = 0;\n    let mut max_divisor_remainder_count9\
    \ = 0;\n    let mut max_divisor_remainder_count10 = 0;\n    let mut max_divisor_remainder_count11\
    \ = 0;\n    let mut max_divisor_remainder_count12 = 0;\n    let mut max_divisor_remainder_count13\
    \ = 0;\n    let mut max_divisor_remainder_count14 = 0;\n    let mut max_divisor_remainder_count15\
    \ = 0;\n    let mut max_divisor_remainder_count16 = 0;\n    let mut max_divisor_remainder_count17\
    \ = 0;\n    let mut max_divisor_remainder_count18 = 0;\n    let mut max_divisor_remainder_count19\
    \ = 0;\n    let mut max_divisor_remainder_count20 = 0;\n    let mut max_divisor_remainder_count21\
    \ = 0;\n    let mut max_divisor_remainder_count22 = 0;\n    let mut max_divisor_remainder_count23\
    \ = 0;\n    let mut max_divisor_remainder_count24 = 0;\n    let mut max_divisor_remainder_count25\
    \ = 0;\n    let mut max_divisor_remainder_count26 = 0;\n    let mut max_divisor_remainder_count27\
    \ = 0;\n    let mut max_divisor_remainder_count28 = 0;\n    let mut max_divisor_remainder_count29\
    \ = 0;\n    let mut max_divisor_remainder_count30 = 0;\n    let mut max_divisor_remainder_count31\
    \ = 0;\n    let mut max_divisor_remainder_count32 = 0;\n    let mut max_divisor_remainder_count33\
    \ = 0;\n    let mut max_divisor_remainder_count34 = 0;\n    let mut max_divisor_remainder_count35\
    \ = 0;\n    let mut max_divisor_remainder_count36 = 0;\n    let mut max_divisor_remainder_count37\
    \ = 0;\n    let mut max_divisor_remainder_count38 = 0;\n    let mut max_divisor_remainder_count39\
    \ = 0;\n    let mut max_divisor_remainder_count40 = 0;\n    let mut max_divisor_remainder_count41\
    \ = 0;\n    let mut max_divisor_remainder_count", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_index = 0;\n    for divisor in &[2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\
    \ {\n        if n % divisor == 0 {\n            if divisor > max_divisor {\n \
    \               max_divisor = divisor;\n                max_divisor_index = divisor\
    \ as usize;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for i in 1..=n\
    \ {\n        let remainder = i % n;\n        if remainder == 0 {\n           \
    \ max_divisor = i;\n            max_divisor_remainder = remainder;\n        }\n\
    \    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \            }\n        } else {\n            if divisor > max_divisor_value {\n\
    \                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n\
    \            if divisor > max_divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_index = divisor;\n                max_divisor_value\
    \ = n;\n            }\n        }\n    }\n    max_divisor_index", "    let mut\
    \ max_divisor = n;\n    let mut max_divisor_index = 0;\n    for i in 1..=max_divisor\
    \ {\n        if n % i == 0 {\n            max_divisor = i;\n            max_divisor_index\
    \ = i;\n        }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_index = 0;\n    for i in 1..=n {\n        if n % i ==\
    \ 0 {\n            if max_divisor < i {\n                max_divisor = i;\n  \
    \              max_divisor_index = i;\n            }\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = n;\n    while max_divisor_size\
    \ != 1 {\n        max_divisor += 1;\n        max_divisor_size = max_divisor_size\
    \ / 2;\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_index =\
    \ i;\n            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n\
    \    for divisor in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n \
    \           if divisor > max_divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_index = divisor as usize;\n                max_divisor_value\
    \ = n / divisor as isize;\n            }\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for i in 1..=n\
    \ {\n        if n % i == 0 {\n            if max_divisor < i {\n             \
    \   max_divisor = i;\n                max_divisor_size = 1;\n            }\n \
    \           else {\n                max_divisor += 1;\n                max_divisor_size\
    \ += 1;\n            }\n        }\n    }\n    max_divisor", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_n = 0;\n\
    \    let mut max_divisor_size_n_n = 0;\n    let mut max_divisor_size_n_n_n = 0;\n\
    \    let mut max_divisor_size_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut\
    \ max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut\
    \ max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let\
    \ mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n  \
    \  let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut\
    \ max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_value\
    \ = n;\n\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n        \
    \    if divisor > max_divisor {\n                max_divisor = divisor;\n    \
    \            max_divisor_size = divisor;\n            }\n            else {\n\
    \                max_divisor = max_divisor;\n                max_divisor_size\
    \ = max_divisor_size;\n            }\n        }\n    }\n\n    max_divisor_value",
  "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n\n    for divisor in &[2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97] {\n        if n % divisor == 0 {\n            if max_divisor < divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n                max_divisor_value = n;\n            }\n        }\n\
    \    }\n\n    max_divisor_index", "    let mut max_divisor = 1;\n    let mut max_divisor2\
    \ = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4 = 1;\n    let\
    \ mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let mut max_divisor7\
    \ = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9 = 1;\n    let\
    \ mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let mut max_divisor12\
    \ = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14 = 1;\n    let\
    \ mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let mut max_divisor17\
    \ = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19 = 1;\n    let\
    \ mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let mut max_divisor22\
    \ = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24 = 1;\n    let\
    \ mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let mut max_divisor27\
    \ = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29 = 1;\n    let\
    \ mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let mut max_divisor32\
    \ = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34 = 1;\n    let\
    \ mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let mut max_divisor37\
    \ = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39 = 1;\n    let\
    \ mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let mut max_divisor42\
    \ = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44 = 1;\n    let\
    \ mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let mut max_divisor47\
    \ = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49 = 1;\n    let\
    \ mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let mut max_divisor52\
    \ = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54 = 1;\n    let\
    \ mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let mut max_divisor57\
    \ = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59 = 1;\n    let\
    \ mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let mut max_divisor62\
    \ = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_index = divisor;\n            }\n        } else {\n   \
    \         if divisor > max_divisor_value {\n                max_divisor_value\
    \ = divisor;\n                max_divisor_index = divisor;\n            }\n  \
    \      }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        } else {\n            if divisor > max_divisor_value\
    \ {\n                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n\n    max_divisor_index", "   \
    \ let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in 1..=n\
    \ {\n        if n % i == 0 {\n            if max_divisor < i {\n             \
    \   max_divisor = i;\n                max_divisor_index = i;\n            }\n\
    \        }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n   \
    \ let mut max_divisor_remainder = 0;\n    for i in 1..=n {\n        if n % i ==\
    \ 0 {\n            if max_divisor_remainder == 0 {\n                max_divisor\
    \ = i;\n                max_divisor_remainder = n % i;\n            } else {\n\
    \                if max_divisor_remainder > max_divisor {\n                  \
    \  max_divisor = i;\n                    max_divisor_remainder = n % i;\n    \
    \            }\n            }\n        }\n    }\n    max_divisor", "    let mut\
    \ max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3 =\
    \ 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let mut\
    \ max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8 =\
    \ 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let mut\
    \ max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_remainder = 0;\n    let mut max_divisor_remainder_size\
    \ = 0;\n    let mut max_divisor_remainder_remainder = 0;\n    let mut max_divisor_remainder_remainder_size\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder = 0;\n    let mut\
    \ max_divisor_remainder_remainder_remainder_size = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_size =\
    \ 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_size =\
    \ 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_size =\
    \ 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_size =\
    \ 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_size =\
    \ 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_size =\
    \ 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_size =\
    \ 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_size =\
    \ 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_size =\
    \ 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_size =\
    \ 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_size =\
    \ 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut max_divisor_remainder_remainder_remainder_remainder_size =\
    \ 0;\n    let mut max_", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    for i in 1..n {\n        if n % i == 0 {\n            if max_divisor\
    \ == 0 {\n                max_divisor = i;\n                max_divisor_remainder\
    \ = 0;\n            } else {\n                if max_divisor_remainder < i {\n\
    \                    max_divisor = i;\n                    max_divisor_remainder\
    \ = i;\n                } else {\n                    max_divisor_remainder =\
    \ i;\n                }\n            }\n        }\n    }\n    max_divisor", " \
    \   let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut\
    \ max_divisor_value = n;\n    for divisor in &[2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n        if\
    \ n % divisor == 0 {\n            if max_divisor < divisor {\n               \
    \ max_divisor = divisor;\n                max_divisor_index = divisor as usize;\n\
    \                max_divisor_value = n;\n            }\n        }\n    }\n   \
    \ max_divisor_index", "    let mut max_divisor = n;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_indexes: Vec<usize> = Vec::new();\n    while max_divisor\
    \ % 2 == 0 {\n        max_divisor /= 2;\n        max_divisor_indexes.push(max_divisor_index);\n\
    \    }\n    for i in 1..max_divisor_indexes.len() {\n        let mut max_divisor_index2\
    \ = max_divisor_indexes[i];\n        let mut max_divisor_index3 = max_divisor_indexes[i\
    \ + 1];\n        while max_divisor_index2 % 2 == 0 {\n            max_divisor_index2\
    \ /= 2;\n        }\n        while max_divisor_index3 % 2 == 0 {\n            max_divisor_index3\
    \ /= 2;\n        }\n        if max_divisor_index2 < max_divisor_index3 {\n   \
    \         max_divisor = max_divisor_index2;\n            max_divisor_index = i;\n\
    \        } else {\n            max_divisor = max_divisor_index3;\n           \
    \ max_divisor_index = i + 1;\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_size = n;\n    for divisor in\
    \ 1..=n {\n        if n % divisor == 0 {\n            if max_divisor_size < divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_size\
    \ = divisor;\n            } else {\n                max_divisor_size = divisor\
    \ + 1;\n            }\n        }\n    }\n    max_divisor", "    let mut max_divisor\
    \ = 1;\n    let mut max_divisor_size = n;\n    while max_divisor_size != 1 {\n\
    \        max_divisor_size /= 2;\n        max_divisor *= 2;\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    let mut\
    \ max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count_max\
    \ = 0;\n    let mut max_divisor_remainder_count_min = 0;\n    let mut max_divisor_remainder_count_min_index\
    \ = 0;\n    let mut max_divisor_remainder_count_min_index2 = 0;\n    let mut max_divisor_remainder_count_min_index3\
    \ = 0;\n    let mut max_divisor_remainder_count_min_index4 = 0;\n    let mut max_divisor_remainder_count_min_index5\
    \ = 0;\n    let mut max_divisor_remainder_count_min_index6 = 0;\n    let mut max_divisor_remainder_count_min_index7\
    \ = 0;\n    let mut max_divisor_remainder_count_min_index8 = 0;\n    let mut max_divisor_remainder_count_min_index9\
    \ = 0;\n    let mut max_divisor_remainder_count_min_index10 = 0;\n    let mut\
    \ max_divisor_remainder_count_min_index11 = 0;\n    let mut max_divisor_remainder_count_min_index12\
    \ = 0;\n    let mut max_divisor_remainder_count_min_index13 = 0;\n    let mut\
    \ max_divisor_remainder_count_min_index14 = 0;\n    let mut max_divisor_remainder_count_min_index15\
    \ = 0;\n    let mut max_divisor_remainder_count_min_index16 = 0;\n    let mut\
    \ max_divisor_remainder_count_min_index17 = 0;\n    let mut max_divisor_remainder_count_min_index18\
    \ = 0;\n    let mut max_divisor_remainder_count_min_index19 = 0;\n    let mut\
    \ max_divisor_remainder_count_min_index20 = 0;\n    let mut max_divisor_remainder_count_min_index21\
    \ = 0;\n    let mut max_divisor_remainder_count_min_index22 = 0;\n    let mut\
    \ max_divisor_remainder_count_min_index23 = 0;\n    let mut max_divisor_remainder_count_min_index24\
    \ = 0;\n    let mut max_divisor_remainder_count_min_index25 = 0;\n    let mut\
    \ max_divisor_remainder_count_min_index26 = 0;\n    let mut max_divisor_remainder_count_min_index27\
    \ = 0;\n    let mut max_divisor_remainder_count_min_index28 = 0;\n    let mut\
    \ max_divisor_remainder_count_min_index29 = 0;\n    let mut max_divisor_remainder_count_min_index30\
    \ = 0;\n    let mut max_divisor_remainder_count_min_index31 = 0;\n    let mut\
    \ max_divisor_remainder_count_min_index32 = 0;\n    let mut max_divisor_remainder_count_min_index33\
    \ = 0;\n    let mut max_", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = 0;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \                max_divisor_value = divisor;\n            } else {\n        \
    \        max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \                max_divisor_value = divisor;\n            }\n        }\n    }\n\
    \    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \            }\n        } else {\n            if divisor > max_divisor_value {\n\
    \                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n)\
    \ {\n        if n % d == 0 {\n            if d > max_divisor {\n             \
    \   max_divisor = d;\n                max_divisor_size = 1;\n            } else\
    \ {\n                max_divisor += d;\n                max_divisor_size++;\n\
    \            }\n        }\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let mut\
    \ max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let mut max_divisor6 =\
    \ 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8 = 1;\n    let mut\
    \ max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let mut max_divisor11\
    \ = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13 = 1;\n    let\
    \ mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let mut max_divisor16\
    \ = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18 = 1;\n    let\
    \ mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let mut max_divisor21\
    \ = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23 = 1;\n    let\
    \ mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let mut max_divisor26\
    \ = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28 = 1;\n    let\
    \ mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let mut max_divisor31\
    \ = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33 = 1;\n    let\
    \ mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let mut max_divisor36\
    \ = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38 = 1;\n    let\
    \ mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let mut max_divisor41\
    \ = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43 = 1;\n    let\
    \ mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let mut max_divisor46\
    \ = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48 = 1;\n    let\
    \ mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let mut max_divisor51\
    \ = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53 = 1;\n    let\
    \ mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let mut max_divisor56\
    \ = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58 = 1;\n    let\
    \ mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let mut max_divisor61\
    \ = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63 = 1;\n    let\
    \ mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n    while max_divisor_size != 0 {\n        max_divisor += 1;\n       \
    \ max_divisor_size = max_divisor_size / 2;\n    }\n    max_divisor", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if max_divisor < divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_remainder\
    \ = n % divisor;\n            }\n        }\n    }\n    if max_divisor_remainder\
    \ == 0 {\n        max_divisor\n    } else {\n        max_divisor + 1\n    }",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for i in 1..=n\
    \ {\n        if n % i == 0 {\n            if max_divisor < i {\n             \
    \   max_divisor = i;\n                max_divisor_size = i;\n            }\n \
    \           if max_divisor_size == i {\n                max_divisor_size = i;\n\
    \            }\n        }\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n) {\n        if\
    \ n % d == 0 {\n            if d > max_divisor {\n                max_divisor\
    \ = d;\n                max_divisor_size = 1;\n            } else {\n        \
    \        max_divisor += d;\n                max_divisor_size++;\n            }\n\
    \        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut\
    \ max_divisor_idx = 1;\n    let mut max_divisor_remainder = 0;\n    for i in 1..=n\
    \ {\n        if n % i == 0 {\n            if max_divisor_remainder < i {\n   \
    \             max_divisor = i;\n                max_divisor_remainder = i;\n \
    \           }\n            else {\n                max_divisor_remainder = i;\n\
    \            }\n        }\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_remainder = 0;\n    let mut max_divisor_remainder_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow = 0;\n    let mut max_divisor_remainder_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow = 0;\n    let mut\
    \ max_divisor_remainder_pow_pow_pow_pow_pow_pow = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow = 0;\n\
    \    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow = 0;\n    let\
    \ mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow = 0;\n    let mut\
    \ max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_pow_pow_", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    for divisor in 1..=n {\n      \
    \  if n % divisor == 0 {\n            if divisor > max_divisor {\n           \
    \     max_divisor = divisor;\n                max_divisor_size = 1;\n        \
    \    } else {\n                max_divisor += 1;\n                max_divisor_size\
    \ += 1;\n            }\n        }\n    }\n    max_divisor"]
stop_tokens:
- "\n}"
