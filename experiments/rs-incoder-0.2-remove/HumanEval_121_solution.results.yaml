language: rs
name: HumanEval_121_solution
results:
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp7llnhevy.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748355
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = vec![];\n    let mut odds = vec![];\n\
    \    for x in lst {\n        if x % 2 == 0 {\n            evens.push(x);\n   \
    \     } else {\n            odds.push(x);\n        }\n    }\n    evens.iter().filter(|x|\
    \ x % 2 == 1).sum::<isize>()\n        + odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpffnosu_6.rs:17:31\n\
    \   |\n17 |     evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n17 |     evens.iter().filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpffnosu_6.rs:18:36\n   |\n18 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n18 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659748355
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter().filter(|&x|\
    \ x % 2 == 1) {\n        sum += i;\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmp46x_oztt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748355
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpituvm0ru.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748355
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = vec![];\n    let mut odds = vec![];\n\
    \    for x in lst {\n        if x % 2 == 0 {\n            evens.push(x);\n   \
    \     } else {\n            odds.push(x);\n        }\n    }\n    evens.iter().filter(|x|\
    \ x % 2 != 0).sum::<isize>()\n        + odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpi5n0fhlu.rs:17:31\n\
    \   |\n17 |     evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n17 |     evens.iter().filter(|x| *x % 2 != 0).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpi5n0fhlu.rs:18:36\n   |\n18 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n18 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659748355
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter().skip(1).filter(|&x|\
    \ x % 2 == 1) {\n        sum += i;\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpxknl1ke7.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748355
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp7llnhevy.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748355
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = vec![];\n    let mut odds = vec![];\n\
    \    for x in lst {\n        if x % 2 == 0 {\n            evens.push(x);\n   \
    \     } else {\n            odds.push(x);\n        }\n    }\n    evens.iter().filter(|x|\
    \ x % 2 != 0).sum::<isize>()\n        + odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpi5n0fhlu.rs:17:31\n\
    \   |\n17 |     evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n17 |     evens.iter().filter(|x| *x % 2 != 0).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpi5n0fhlu.rs:18:36\n   |\n18 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n18 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659748355
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter().skip(1)\
    \ {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp2vtq7o1t.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748355
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter().skip(1)\
    \ {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp2vtq7o1t.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748355
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp3uo3jj8w.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748355
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp3uo3jj8w.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748355
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmhw4vfwq.rs:9:9\n  |\n9 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748355
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = vec![];\n    let mut odds = vec![];\n\
    \    for x in lst {\n        if x % 2 == 0 {\n            evens.push(x);\n   \
    \     } else {\n            odds.push(x);\n        }\n    }\n    evens.iter().filter(|x|\
    \ x % 2 != 0).sum::<isize>()\n        + odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpi5n0fhlu.rs:17:31\n\
    \   |\n17 |     evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n17 |     evens.iter().filter(|x| *x % 2 != 0).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpi5n0fhlu.rs:18:36\n   |\n18 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n18 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659748355
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp3u6rmk6g.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748355
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = vec![];\n    let mut odds = vec![];\n\
    \    for &i in lst {\n        if i % 2 == 0 {\n            evens.push(i);\n  \
    \      } else {\n            odds.push(i);\n        }\n    }\n    evens.iter().filter(|&i|\
    \ i % 2 == 1).sum::<isize>()\n        + odds.iter().filter(|&i| i % 2 == 0).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpub051a1r.rs:10:9\n   |\n\
    10 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748355
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp7llnhevy.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748355
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp7llnhevy.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748355
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp7lw_wzeq.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748355
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp3uo3jj8w.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748355
