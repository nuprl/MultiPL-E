language: rs
name: HumanEval_106_f
results:
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        return vec![1];\n    }\n    let mut res = vec![1];\n    for\
    \ i in 2..=n {\n        res.push(i * res.last());\n    }\n    return res;\n}\n\
    \nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2,\
    \ 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `Option<&{integer}>`\n  --> /tmp/tmp5knm8wvg.rs:13:20\n\
    \   |\n13 |         res.push(i * res.last());\n   |                    ^ no implementation\
    \ for `isize * Option<&{integer}>`\n   |\n   = help: the trait `Mul<Option<&{integer}>>`\
    \ is not implemented for `isize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut res = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n      \
    \      res[i] = res[i] * i;\n        } else {\n            res[i] = res[i] + i;\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkk0ruj3j.rs:8:27\n  |\n8 |\
    \     let mut res = vec![1; n];\n  |                           ^ expected `usize`,\
    \ found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n  |\n8 |     let mut res = vec![1; n.try_into().unwrap()];\n\
    \  |                           ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpkk0ruj3j.rs:11:13\n\
    \   |\n11 |             res[i] = res[i] * i;\n   |             ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpkk0ruj3j.rs:11:22\n\
    \   |\n11 |             res[i] = res[i] * i;\n   |                      ^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpkk0ruj3j.rs:13:13\n\
    \   |\n13 |             res[i] = res[i] + i;\n   |             ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpkk0ruj3j.rs:13:22\n\
    \   |\n13 |             res[i] = res[i] + i;\n   |                      ^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 5 previous errors\n\nSome er"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        return vec![1];\n    }\n    let mut res = vec![1];\n    for\
    \ i in 2..=n {\n        res.push(i * res[res.len() - 1]);\n    }\n    return res;\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 6, 24, 120]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp6p0qokq8.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749557
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n + 1];\n    for i in 1..n {\n        result[i] = if i\
    \ % 2 == 0 {\n            result[i] * i\n        } else {\n            result[i]\
    \ + i\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9u12sn5z.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9u12sn5z.rs:10:9\n\
    \   |\n10 |         result[i] = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9u12sn5z.rs:11:13\n\
    \   |\n11 |             result[i] * i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9u12sn5z.rs:13:13\n\
    \   |\n13 |             result[i] + i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i%2 == 0 {\n        \
    \    result.push(i*i);\n        } else {\n            result.push(i+1);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpr34z_wpb.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        return vec![];\n    }\n    let mut result = vec![1isize];\n\
    \    for i in 1..n {\n        result[i] = result[i] * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpp08bojlo.rs:13:9\n\
    \   |\n13 |         result[i] = result[i] * i;\n   |         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpp08bojlo.rs:13:21\n   |\n13 |  \
    \       result[i] = result[i] * i;\n   |                     ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n + 1];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq1ml5j1n.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        result[i] = if i % 2\
    \ == 0 {\n            (i * result[i - 1]).to_string()\n        } else {\n    \
    \        (result[i - 1] + i).to_string()\n        };\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6,\
    \ 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n \
    \   assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1, 2,\
    \ 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphjhjskly.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmphjhjskly.rs:10:9\n\
    \   |\n10 |         result[i] = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmphjhjskly.rs:11:18\n\
    \   |\n11 |             (i * result[i - 1]).to_string()\n   |                \
    \  ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmphjhjskly.rs:13:14\n   |\n13 |             (result[i\
    \ - 1] + i).to_string()\n   |              ^^^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        return vec![];\n    }\n    let mut result = vec![];\n    for\
    \ i in 1..=n {\n        if i % 2 == 0 {\n            result.push(result.clone());\n\
    \            result[result.len() - 1].push(i);\n        } else {\n           \
    \ let mut sum = 1;\n            for j in 1..=i {\n                sum += j;\n\
    \            }\n            result.push(sum);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz81u_lvm.rs:14:25\n   |\n\
    14 |             result.push(result.clone());\n   |                         ^^^^^^^^^^^^^^\n\
    \   |                         |\n   |                         cyclic type of infinite\
    \ size\n   |                         help: try using a conversion method: `result.to_vec()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749557
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n + 1];\n    for i in 1..n {\n        result[i] = if i\
    \ % 2 == 0 {\n            result[i] * i\n        } else {\n            result[i]\
    \ + i\n        };\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp42sqr6fp.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp42sqr6fp.rs:10:9\n\
    \   |\n10 |         result[i] = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp42sqr6fp.rs:11:13\n\
    \   |\n11 |             result[i] * i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp42sqr6fp.rs:13:13\n\
    \   |\n13 |             result[i] + i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1isize; n];\n    for i in 1..n {\n        result[i] = if i\
    \ % 2 == 0 {\n            (i * result[i-1])\n        } else {\n            result[i-1]\
    \ + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around block return value\n  --> /tmp/tmpl6r7saod.rs:11:13\n\
    \   |\n11 |             (i * result[i-1])\n   |             ^^^^^^^^^^^^^^^^^\
    \ help: remove these parentheses\n   |\n   = note: `#[warn(unused_parens)]` on\
    \ by default\n\nerror[E0308]: mismatched types\n --> /tmp/tmpl6r7saod.rs:8:35\n\
    \  |\n8 |     let mut result = vec![1isize; n];\n  |                         \
    \          ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n  |\n8 |     let\
    \ mut result = vec![1isize; n.try_into().unwrap()];\n  |                     \
    \              ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpl6r7saod.rs:10:9\n   |\n10 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = note: required because of the requirements on\
    \ the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpl6r7saod.rs:11:18\n   |\n11 |  \
    \           (i * result[i-1])\n   |                  ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpl6r7saod.rs:13:13\n   |\n13 |  \
    \           result[i-1] + i;\n   |             ^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277,\
    \ E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = i * result[i];\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcct2k9ol.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpcct2k9ol.rs:11:13\n\
    \   |\n11 |             result[i] = i * result[i];\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpcct2k9ol.rs:11:29\n\
    \   |\n11 |             result[i] = i * result[i];\n   |                     \
    \        ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  \
    \ |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpcct2k9ol.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpcct2k9ol.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{int"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1isize; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptxtfl7hk.rs:8:35\n  |\n8 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmptxtfl7hk.rs:11:13\n   |\n11 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmptxtfl7hk.rs:11:25\n   |\n11 |            \
    \ result[i] = result[i] * i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmptxtfl7hk.rs:13:13\n   |\n13 |            \
    \ result[i] = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmptxtfl7hk.rs:13:25\n   |\n13 |            \
    \ result[i] = result[i] + i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..n {\n        if i % 2 == 0 {\n       \
    \     result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpfliojcgn.rs:21:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1isize; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptxtfl7hk.rs:8:35\n  |\n8 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmptxtfl7hk.rs:11:13\n   |\n11 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmptxtfl7hk.rs:11:25\n   |\n11 |            \
    \ result[i] = result[i] * i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmptxtfl7hk.rs:13:13\n   |\n13 |            \
    \ result[i] = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmptxtfl7hk.rs:13:25\n   |\n13 |            \
    \ result[i] = result[i] + i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..n {\n        if i % 2 == 0 {\n       \
    \     result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpfliojcgn.rs:21:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i%2 == 0 {\n        \
    \    result.push(i*i);\n        } else {\n            result.push(i+1);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpr34z_wpb.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut res = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n         \
    \   res.push(i * i);\n        } else {\n            res.push(i + 1);\n       \
    \ }\n    }\n    res\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpueh57uv5.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1isize; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptxtfl7hk.rs:8:35\n  |\n8 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmptxtfl7hk.rs:11:13\n   |\n11 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmptxtfl7hk.rs:11:25\n   |\n11 |            \
    \ result[i] = result[i] * i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmptxtfl7hk.rs:13:13\n   |\n13 |            \
    \ result[i] = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmptxtfl7hk.rs:13:25\n   |\n13 |            \
    \ result[i] = result[i] + i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    if\
    \ n == 1 {\n        return vec![1];\n    }\n    let mut result = vec![];\n   \
    \ for i in 1..n {\n        let mut temp = 1;\n        for j in 1..i {\n      \
    \      temp *= j;\n        }\n        result.push(temp);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 2, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp5p40j39e.rs:24:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1isize; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptxtfl7hk.rs:8:35\n  |\n8 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmptxtfl7hk.rs:11:13\n   |\n11 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmptxtfl7hk.rs:11:25\n   |\n11 |            \
    \ result[i] = result[i] * i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmptxtfl7hk.rs:13:13\n   |\n13 |            \
    \ result[i] = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmptxtfl7hk.rs:13:25\n   |\n13 |            \
    \ result[i] = result[i] + i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    if\
    \ n % 2 == 0 {\n        vec![1..n]\n    } else {\n        vec![1..n].iter().map(|x|\
    \ x * x).collect()\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpub8kkkrb.rs:9:14\n  |\n9 |\
    \         vec![1..n]\n  |              ^^^^ expected `isize`, found struct `std::ops::Range`\n\
    \  |\n  = note: expected type `isize`\n           found struct `std::ops::Range<isize>`\n\
    \nerror[E0369]: cannot multiply `&std::ops::Range<isize>` by `&std::ops::Range<isize>`\n\
    \  --> /tmp/tmpub8kkkrb.rs:11:37\n   |\n11 |         vec![1..n].iter().map(|x|\
    \ x * x).collect()\n   |                                   - ^ - &std::ops::Range<isize>\n\
    \   |                                   |\n   |                              \
    \     &std::ops::Range<isize>\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n + 1];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq1ml5j1n.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1isize];\n    for i in 1..n {\n        if i % 2 == 0 {\n \
    \           result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxrubwh8h.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxrubwh8h.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxrubwh8h.rs:13:13\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxrubwh8h.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        result[i] = if i % 2\
    \ == 0 {\n            result[i] * i\n        } else {\n            result[i] +\
    \ i\n        };\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2au1mev1.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp2au1mev1.rs:10:9\n\
    \   |\n10 |         result[i] = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp2au1mev1.rs:11:13\n\
    \   |\n11 |             result[i] * i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp2au1mev1.rs:13:13\n   |\n13 |  \
    \           result[i] + i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..n {\n        if i % 2 == 0 {\n       \
    \     result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpfliojcgn.rs:21:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        return vec![];\n    }\n    let mut result = vec![];\n    for\
    \ i in 1..=n {\n        if i % 2 == 0 {\n            result.push(i * i);\n   \
    \     } else {\n            result.push(i + 1);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpko5p3gml.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    if\
    \ n % 2 == 0 {\n        vec![1..n]\n    } else {\n        vec![1..n].iter().map(|x|\
    \ x * x).collect()\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpub8kkkrb.rs:9:14\n  |\n9 |\
    \         vec![1..n]\n  |              ^^^^ expected `isize`, found struct `std::ops::Range`\n\
    \  |\n  = note: expected type `isize`\n           found struct `std::ops::Range<isize>`\n\
    \nerror[E0369]: cannot multiply `&std::ops::Range<isize>` by `&std::ops::Range<isize>`\n\
    \  --> /tmp/tmpub8kkkrb.rs:11:37\n   |\n11 |         vec![1..n].iter().map(|x|\
    \ x * x).collect()\n   |                                   - ^ - &std::ops::Range<isize>\n\
    \   |                                   |\n   |                              \
    \     &std::ops::Range<isize>\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i%2 == 0 {\n        \
    \    result.push(i*i);\n        } else {\n            result.push(i+1);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpr34z_wpb.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    if\
    \ n % 2 == 0 {\n        vec![1..n]\n    } else {\n        vec![1..n].iter().map(|x|\
    \ x * x).collect()\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpub8kkkrb.rs:9:14\n  |\n9 |\
    \         vec![1..n]\n  |              ^^^^ expected `isize`, found struct `std::ops::Range`\n\
    \  |\n  = note: expected type `isize`\n           found struct `std::ops::Range<isize>`\n\
    \nerror[E0369]: cannot multiply `&std::ops::Range<isize>` by `&std::ops::Range<isize>`\n\
    \  --> /tmp/tmpub8kkkrb.rs:11:37\n   |\n11 |         vec![1..n].iter().map(|x|\
    \ x * x).collect()\n   |                                   - ^ - &std::ops::Range<isize>\n\
    \   |                                   |\n   |                              \
    \     &std::ops::Range<isize>\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        return vec![];\n    }\n    let mut result = vec![];\n    for\
    \ i in 1..n {\n        if i % 2 == 0 {\n            result.push(i * i);\n    \
    \    } else {\n            result.push(result.last().unwrap() + i);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpkj0_kr67.rs:16:39

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        result[i] = if i % 2\
    \ == 0 {\n            result[i] * i\n        } else {\n            result[i] +\
    \ i\n        };\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2au1mev1.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp2au1mev1.rs:10:9\n\
    \   |\n10 |         result[i] = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp2au1mev1.rs:11:13\n\
    \   |\n11 |             result[i] * i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp2au1mev1.rs:13:13\n   |\n13 |  \
    \           result[i] + i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut res = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n         \
    \   res.push(i * i);\n        } else {\n            res.push(i + 1);\n       \
    \ }\n    }\n    res\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpueh57uv5.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n + 1];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq1ml5j1n.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n + 1];\n    for i in 1..n {\n        result[i] = if i\
    \ % 2 == 0 {\n            result[i] * i\n        } else {\n            result[i]\
    \ + i\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9u12sn5z.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9u12sn5z.rs:10:9\n\
    \   |\n10 |         result[i] = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9u12sn5z.rs:11:13\n\
    \   |\n11 |             result[i] * i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9u12sn5z.rs:13:13\n\
    \   |\n13 |             result[i] + i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n + 1];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq1ml5j1n.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    if\
    \ n == 1 {\n        return vec![1];\n    }\n    let mut res = vec![1];\n    for\
    \ i in 2..=n {\n        res.push(i * res.last());\n    }\n    return res;\n}\n\
    \nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2,\
    \ 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `Option<&{integer}>`\n  --> /tmp/tmp2vf39jts.rs:13:20\n\
    \   |\n13 |         res.push(i * res.last());\n   |                    ^ no implementation\
    \ for `isize * Option<&{integer}>`\n   |\n   = help: the trait `Mul<Option<&{integer}>>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1isize];\n    for i in 1..n {\n        if i % 2 == 0 {\n \
    \           result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxrubwh8h.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxrubwh8h.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxrubwh8h.rs:13:13\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxrubwh8h.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    if\
    \ n % 2 == 0 {\n        vec![1..n]\n    } else {\n        vec![1..n].iter().map(|x|\
    \ x * x).collect()\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpub8kkkrb.rs:9:14\n  |\n9 |\
    \         vec![1..n]\n  |              ^^^^ expected `isize`, found struct `std::ops::Range`\n\
    \  |\n  = note: expected type `isize`\n           found struct `std::ops::Range<isize>`\n\
    \nerror[E0369]: cannot multiply `&std::ops::Range<isize>` by `&std::ops::Range<isize>`\n\
    \  --> /tmp/tmpub8kkkrb.rs:11:37\n   |\n11 |         vec![1..n].iter().map(|x|\
    \ x * x).collect()\n   |                                   - ^ - &std::ops::Range<isize>\n\
    \   |                                   |\n   |                              \
    \     &std::ops::Range<isize>\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = i * result[i];\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcct2k9ol.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpcct2k9ol.rs:11:13\n\
    \   |\n11 |             result[i] = i * result[i];\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpcct2k9ol.rs:11:29\n\
    \   |\n11 |             result[i] = i * result[i];\n   |                     \
    \        ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  \
    \ |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpcct2k9ol.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpcct2k9ol.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{int"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..n {\n        if i % 2 == 0 {\n       \
    \     result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpfliojcgn.rs:21:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    if\
    \ n == 1 {\n        return vec![1];\n    }\n    let mut result = vec![];\n   \
    \ for i in 1..n {\n        if i % 2 == 0 {\n            result.push(i * i);\n\
    \        } else {\n            result.push(result.iter().cloned().sum());\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 4, 4, 16]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp_3vfanka.rs:24:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n + 1];\n    for i in 1..n {\n        result[i] = if i\
    \ % 2 == 0 {\n            result[i] * i\n        } else {\n            result[i]\
    \ + i\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9u12sn5z.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9u12sn5z.rs:10:9\n\
    \   |\n10 |         result[i] = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9u12sn5z.rs:11:13\n\
    \   |\n11 |             result[i] * i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9u12sn5z.rs:13:13\n\
    \   |\n13 |             result[i] + i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        return vec![];\n    }\n    let mut result = vec![];\n    for\
    \ i in 1..=n {\n        if i % 2 == 0 {\n            result.push(i * i);\n   \
    \     } else {\n            result.push(i + 1);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpko5p3gml.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        result[i] = if i % 2\
    \ == 0 {\n            result[i] * i\n        } else {\n            result[i] +\
    \ i\n        };\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2au1mev1.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp2au1mev1.rs:10:9\n\
    \   |\n10 |         result[i] = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp2au1mev1.rs:11:13\n\
    \   |\n11 |             result[i] * i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp2au1mev1.rs:13:13\n   |\n13 |  \
    \           result[i] + i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1isize];\n    for i in 1..n {\n        if i % 2 == 0 {\n \
    \           result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxrubwh8h.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxrubwh8h.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxrubwh8h.rs:13:13\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxrubwh8h.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i%2 == 0 {\n        \
    \    result.push(i*i);\n        } else {\n            result.push(i+1);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpr34z_wpb.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n + 1];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            result[i] = i * result[i];\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqfi6w1jv.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpqfi6w1jv.rs:11:13\n   |\n11 |            \
    \ result[i] = i * result[i];\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpqfi6w1jv.rs:11:29\n   |\n11 |  \
    \           result[i] = i * result[i];\n   |                             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpqfi6w1jv.rs:13:13\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpqfi6w1jv.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indic"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1isize];\n    for i in 1..n {\n        if i % 2 == 0 {\n \
    \           result.push(i * result.last());\n        } else {\n            result.push(result.last()\
    \ + i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `Option<&isize>`\n  --> /tmp/tmpo_brcubm.rs:11:27\n\
    \   |\n11 |             result.push(i * result.last());\n   |                \
    \           ^ no implementation for `isize * Option<&isize>`\n   |\n   = help:\
    \ the trait `Mul<Option<&isize>>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Mul<Rhs>`:\n             <&'a f32 as\
    \ Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n\
    \             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n    \
    \         <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n          \
    \   <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0369]: cannot\
    \ add `isize` to `Option<&isize>`\n  --> /tmp/tmpo_brcubm.rs:13:39\n   |\n13 |\
    \             result.push(result.last() + i);\n   |                         -------------\
    \ ^ - isize\n   |                         |\n   |                         Option<&isize>\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0369.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1isize; n];\n    for i in 1..n {\n        result[i] = if i\
    \ % 2 == 0 {\n            factorial(i)\n        } else {\n            result[i\
    \ - 1] + i\n        };\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpi7m6og69.rs:11:13\n\
    \   |\n11 |             factorial(i)\n   |             ^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpi7m6og69.rs:8:35\n\
    \  |\n8 |     let mut result = vec![1isize; n];\n  |                         \
    \          ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n  |\n8 |     let\
    \ mut result = vec![1isize; n.try_into().unwrap()];\n  |                     \
    \               ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpi7m6og69.rs:10:9\n   |\n10 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpi7m6og69.rs:13:13\n   |\n13 |            \
    \ result[i - 1] + i\n   |             ^^^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    if\
    \ n % 2 == 0 {\n        vec![1..n]\n    } else {\n        vec![1..n].iter().map(|x|\
    \ x * x).collect()\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpub8kkkrb.rs:9:14\n  |\n9 |\
    \         vec![1..n]\n  |              ^^^^ expected `isize`, found struct `std::ops::Range`\n\
    \  |\n  = note: expected type `isize`\n           found struct `std::ops::Range<isize>`\n\
    \nerror[E0369]: cannot multiply `&std::ops::Range<isize>` by `&std::ops::Range<isize>`\n\
    \  --> /tmp/tmpub8kkkrb.rs:11:37\n   |\n11 |         vec![1..n].iter().map(|x|\
    \ x * x).collect()\n   |                                   - ^ - &std::ops::Range<isize>\n\
    \   |                                   |\n   |                              \
    \     &std::ops::Range<isize>\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n + 1];\n    for i in 1..n {\n        result[i] = if i\
    \ % 2 == 0 {\n            result[i] * i\n        } else {\n            result[i]\
    \ + i\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9u12sn5z.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9u12sn5z.rs:10:9\n\
    \   |\n10 |         result[i] = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9u12sn5z.rs:11:13\n\
    \   |\n11 |             result[i] * i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9u12sn5z.rs:13:13\n\
    \   |\n13 |             result[i] + i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n + 1];\n    for i in 1..n {\n        result[i] = if i\
    \ % 2 == 0 {\n            (i * result[i - 1]) as isize\n        } else {\n   \
    \         result[i - 1] + i as isize\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpexjgyb2y.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpexjgyb2y.rs:10:9\n   |\n10 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpexjgyb2y.rs:11:18\n   |\n11 |  \
    \           (i * result[i - 1]) as isize\n   |                  ^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpexjgyb2y.rs:13:13\n\
    \   |\n13 |             result[i - 1] + i as isize\n   |             ^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1isize; n];\n    for i in 1..n {\n        result[i] = if i\
    \ % 2 == 0 {\n            factorial(i)\n        } else {\n            result[i]\
    \ + i\n        };\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpvvr5ehju.rs:11:13\n\
    \   |\n11 |             factorial(i)\n   |             ^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpvvr5ehju.rs:8:35\n\
    \  |\n8 |     let mut result = vec![1isize; n];\n  |                         \
    \          ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n  |\n8 |     let\
    \ mut result = vec![1isize; n.try_into().unwrap()];\n  |                     \
    \               ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpvvr5ehju.rs:10:9\n   |\n10 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpvvr5ehju.rs:13:13\n   |\n13 |            \
    \ result[i] + i\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n + 1];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq1ml5j1n.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut res = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n         \
    \   res.push(i * i);\n        } else {\n            res.push(i + 1);\n       \
    \ }\n    }\n    return res;\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpvlw5ellm.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i%2 == 0 {\n        \
    \    result.push(i*i);\n        } else {\n            result.push(i+1);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpr34z_wpb.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        result[i] = if i % 2\
    \ == 0 {\n            result[i] * i\n        } else {\n            result[i] +\
    \ i\n        };\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2au1mev1.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp2au1mev1.rs:10:9\n\
    \   |\n10 |         result[i] = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp2au1mev1.rs:11:13\n\
    \   |\n11 |             result[i] * i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp2au1mev1.rs:13:13\n   |\n13 |  \
    \           result[i] + i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1isize; n];\n    for i in 1..n {\n        result[i] = if i\
    \ % 2 == 0 {\n            result[i] * i\n        } else {\n            result[i]\
    \ + i\n        };\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp07udmsro.rs:8:35\n  |\n8 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp07udmsro.rs:10:9\n   |\n10 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp07udmsro.rs:11:13\n   |\n11 |            \
    \ result[i] * i\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp07udmsro.rs:13:13\n   |\n13 |            \
    \ result[i] + i\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n + 1];\n    for i in 1..n {\n        result[i] = if i\
    \ % 2 == 0 {\n            result[i] * i\n        } else {\n            result[i]\
    \ + i\n        };\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp42sqr6fp.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp42sqr6fp.rs:10:9\n\
    \   |\n10 |         result[i] = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp42sqr6fp.rs:11:13\n\
    \   |\n11 |             result[i] * i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp42sqr6fp.rs:13:13\n\
    \   |\n13 |             result[i] + i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i%2 == 0 {\n        \
    \    result.push(i*i);\n        } else {\n            result.push(i+1);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpr34z_wpb.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut res = vec![1; n + 1];\n    for i in 1..n {\n        if i % 2 == 0 {\n  \
    \          res[i] = res[i] * i;\n        } else {\n            res[i] = res[i]\
    \ + i;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbrxpxy_i.rs:8:27\n  |\n8 |\
    \     let mut res = vec![1; n + 1];\n  |                           ^^^^^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut res = vec![1;\
    \ (n + 1).try_into().unwrap()];\n  |                           +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpbrxpxy_i.rs:11:13\n\
    \   |\n11 |             res[i] = res[i] * i;\n   |             ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpbrxpxy_i.rs:11:22\n   |\n11 |  \
    \           res[i] = res[i] * i;\n   |                      ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpbrxpxy_i.rs:13:13\n   |\n13 |  \
    \           res[i] = res[i] + i;\n   |             ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpbrxpxy_i.rs:13:22\n   |\n13 |  \
    \           res[i] = res[i] + i;\n   |                      ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help"
  stdout: ''
  timestamp: 1659976573
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1isize];\n    for i in 1..n {\n        if i % 2 == 0 {\n \
    \           result.push(result.last() * i);\n        } else {\n            result.push(i\
    \ * result.last());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot multiply `Option<&isize>` by `isize`\n  --> /tmp/tmpf5k2hxpo.rs:11:39\n\
    \   |\n11 |             result.push(result.last() * i);\n   |                \
    \         ------------- ^ - isize\n   |                         |\n   |      \
    \                   Option<&isize>\n\nerror[E0277]: cannot multiply `isize` by\
    \ `Option<&isize>`\n  --> /tmp/tmpf5k2hxpo.rs:13:27\n   |\n13 |             result.push(i\
    \ * result.last());\n   |                           ^ no implementation for `isize\
    \ * Option<&isize>`\n   |\n   = help: the trait `Mul<Option<&isize>>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n + 1];\n    for i in 1..n {\n        result[i] = if i\
    \ % 2 == 0 {\n            result[i] * i\n        } else {\n            result[i]\
    \ + i\n        };\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp42sqr6fp.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp42sqr6fp.rs:10:9\n\
    \   |\n10 |         result[i] = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp42sqr6fp.rs:11:13\n\
    \   |\n11 |             result[i] * i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp42sqr6fp.rs:13:13\n\
    \   |\n13 |             result[i] + i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    if\
    \ n % 2 == 0 {\n        vec![1..n]\n    } else {\n        vec![1..n].iter().map(|x|\
    \ x * x).collect()\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpub8kkkrb.rs:9:14\n  |\n9 |\
    \         vec![1..n]\n  |              ^^^^ expected `isize`, found struct `std::ops::Range`\n\
    \  |\n  = note: expected type `isize`\n           found struct `std::ops::Range<isize>`\n\
    \nerror[E0369]: cannot multiply `&std::ops::Range<isize>` by `&std::ops::Range<isize>`\n\
    \  --> /tmp/tmpub8kkkrb.rs:11:37\n   |\n11 |         vec![1..n].iter().map(|x|\
    \ x * x).collect()\n   |                                   - ^ - &std::ops::Range<isize>\n\
    \   |                                   |\n   |                              \
    \     &std::ops::Range<isize>\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1isize; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptxtfl7hk.rs:8:35\n  |\n8 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmptxtfl7hk.rs:11:13\n   |\n11 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmptxtfl7hk.rs:11:25\n   |\n11 |            \
    \ result[i] = result[i] * i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmptxtfl7hk.rs:13:13\n   |\n13 |            \
    \ result[i] = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmptxtfl7hk.rs:13:25\n   |\n13 |            \
    \ result[i] = result[i] + i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..n {\n        if i % 2 == 0 {\n       \
    \     result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpfliojcgn.rs:21:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    if\
    \ n % 2 == 0 {\n        vec![1..n]\n    } else {\n        vec![1..n].iter().map(|x|\
    \ x * x).collect()\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpub8kkkrb.rs:9:14\n  |\n9 |\
    \         vec![1..n]\n  |              ^^^^ expected `isize`, found struct `std::ops::Range`\n\
    \  |\n  = note: expected type `isize`\n           found struct `std::ops::Range<isize>`\n\
    \nerror[E0369]: cannot multiply `&std::ops::Range<isize>` by `&std::ops::Range<isize>`\n\
    \  --> /tmp/tmpub8kkkrb.rs:11:37\n   |\n11 |         vec![1..n].iter().map(|x|\
    \ x * x).collect()\n   |                                   - ^ - &std::ops::Range<isize>\n\
    \   |                                   |\n   |                              \
    \     &std::ops::Range<isize>\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n + 1];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq1ml5j1n.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        return vec![];\n    }\n    let mut res = vec![];\n    for\
    \ i in 1..=n {\n        if i % 2 == 0 {\n            res.push(factorial(i));\n\
    \        } else {\n            res.push(i + 1);\n        }\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2,\
    \ 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp_ji71lge.rs:14:22\n\
    \   |\n14 |             res.push(factorial(i));\n   |                      ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        return vec![];\n    }\n    let mut result = vec![];\n    for\
    \ i in 1..=n {\n        if i % 2 == 0 {\n            result.push(i * i);\n   \
    \     } else {\n            result.push(i + 1);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpko5p3gml.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n + 1];\n    for i in 1..n {\n        result[i] = if i\
    \ % 2 == 0 {\n            result[i] * i\n        } else {\n            result[i]\
    \ + i\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9u12sn5z.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9u12sn5z.rs:10:9\n\
    \   |\n10 |         result[i] = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9u12sn5z.rs:11:13\n\
    \   |\n11 |             result[i] * i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9u12sn5z.rs:13:13\n\
    \   |\n13 |             result[i] + i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1isize; n];\n    for i in 1..n {\n        result[i] = if i\
    \ % 2 == 0 {\n            factorial(i)\n        } else {\n            result[i\
    \ - 1] + i\n        };\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpi7m6og69.rs:11:13\n\
    \   |\n11 |             factorial(i)\n   |             ^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpi7m6og69.rs:8:35\n\
    \  |\n8 |     let mut result = vec![1isize; n];\n  |                         \
    \          ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n  |\n8 |     let\
    \ mut result = vec![1isize; n.try_into().unwrap()];\n  |                     \
    \               ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpi7m6og69.rs:10:9\n   |\n10 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpi7m6og69.rs:13:13\n   |\n13 |            \
    \ result[i - 1] + i\n   |             ^^^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n + 1];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq1ml5j1n.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1isize; n];\n    for i in 1..n {\n        result[i] = if i\
    \ % 2 == 0 {\n            factorial(i)\n        } else {\n            result[i\
    \ - 1] + i\n        };\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpi7m6og69.rs:11:13\n\
    \   |\n11 |             factorial(i)\n   |             ^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpi7m6og69.rs:8:35\n\
    \  |\n8 |     let mut result = vec![1isize; n];\n  |                         \
    \          ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n  |\n8 |     let\
    \ mut result = vec![1isize; n.try_into().unwrap()];\n  |                     \
    \               ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpi7m6og69.rs:10:9\n   |\n10 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpi7m6og69.rs:13:13\n   |\n13 |            \
    \ result[i - 1] + i\n   |             ^^^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..n {\n        if i % 2 == 0 {\n       \
    \     result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpfliojcgn.rs:21:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n + 1];\n    for i in 1..n {\n        result[i] = if i\
    \ % 2 == 0 {\n            result[i] * i\n        } else {\n            result[i]\
    \ + i\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9u12sn5z.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9u12sn5z.rs:10:9\n\
    \   |\n10 |         result[i] = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9u12sn5z.rs:11:13\n\
    \   |\n11 |             result[i] * i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9u12sn5z.rs:13:13\n\
    \   |\n13 |             result[i] + i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n + 1];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq1ml5j1n.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n + 1];\n    for i in 1..n {\n        result[i] = if i\
    \ % 2 == 0 {\n            result[i] * i\n        } else {\n            result[i]\
    \ + i\n        };\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp42sqr6fp.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp42sqr6fp.rs:10:9\n\
    \   |\n10 |         result[i] = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp42sqr6fp.rs:11:13\n\
    \   |\n11 |             result[i] * i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp42sqr6fp.rs:13:13\n\
    \   |\n13 |             result[i] + i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n + 1];\n    for i in 1..n {\n        result[i] = if i\
    \ % 2 == 0 {\n            result[i] * i\n        } else {\n            result[i]\
    \ + i\n        };\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp42sqr6fp.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp42sqr6fp.rs:10:9\n\
    \   |\n10 |         result[i] = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp42sqr6fp.rs:11:13\n\
    \   |\n11 |             result[i] * i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp42sqr6fp.rs:13:13\n\
    \   |\n13 |             result[i] + i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        return vec![];\n    }\n    let mut result = vec![];\n    for\
    \ i in 1..=n {\n        if i % 2 == 0 {\n            result.push(i * i);\n   \
    \     } else {\n            result.push(result.last().unwrap() + i);\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpf_ihj_03.rs:16:39

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n + 1];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq1ml5j1n.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1isize; n];\n    for i in 1..n {\n        result[i] = if i\
    \ % 2 == 0 {\n            (i * result[i-1])\n        } else {\n            result[i-1]\
    \ + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around block return value\n  --> /tmp/tmpl6r7saod.rs:11:13\n\
    \   |\n11 |             (i * result[i-1])\n   |             ^^^^^^^^^^^^^^^^^\
    \ help: remove these parentheses\n   |\n   = note: `#[warn(unused_parens)]` on\
    \ by default\n\nerror[E0308]: mismatched types\n --> /tmp/tmpl6r7saod.rs:8:35\n\
    \  |\n8 |     let mut result = vec![1isize; n];\n  |                         \
    \          ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n  |\n8 |     let\
    \ mut result = vec![1isize; n.try_into().unwrap()];\n  |                     \
    \              ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpl6r7saod.rs:10:9\n   |\n10 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = note: required because of the requirements on\
    \ the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpl6r7saod.rs:11:18\n   |\n11 |  \
    \           (i * result[i-1])\n   |                  ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpl6r7saod.rs:13:13\n   |\n13 |  \
    \           result[i-1] + i;\n   |             ^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277,\
    \ E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    if\
    \ n % 2 == 0 {\n        vec![1..n]\n    } else {\n        vec![1..n].iter().map(|x|\
    \ x * x).collect()\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpub8kkkrb.rs:9:14\n  |\n9 |\
    \         vec![1..n]\n  |              ^^^^ expected `isize`, found struct `std::ops::Range`\n\
    \  |\n  = note: expected type `isize`\n           found struct `std::ops::Range<isize>`\n\
    \nerror[E0369]: cannot multiply `&std::ops::Range<isize>` by `&std::ops::Range<isize>`\n\
    \  --> /tmp/tmpub8kkkrb.rs:11:37\n   |\n11 |         vec![1..n].iter().map(|x|\
    \ x * x).collect()\n   |                                   - ^ - &std::ops::Range<isize>\n\
    \   |                                   |\n   |                              \
    \     &std::ops::Range<isize>\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n + 1];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            result[i] = i * result[i];\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqfi6w1jv.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpqfi6w1jv.rs:11:13\n   |\n11 |            \
    \ result[i] = i * result[i];\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpqfi6w1jv.rs:11:29\n   |\n11 |  \
    \           result[i] = i * result[i];\n   |                             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpqfi6w1jv.rs:13:13\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpqfi6w1jv.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indic"
  stdout: ''
  timestamp: 1659976573
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i%2 == 0 {\n        \
    \    result.push(i*i);\n        } else {\n            result.push(i+1);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpr34z_wpb.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n + 1];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq1ml5j1n.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq1ml5j1n.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        return vec![1];\n    }\n    let mut result = vec![1];\n  \
    \  for i in 2..=n {\n        result[i] = result[i-1] * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmp1ddjgbqz.rs:13:9\n   |\n13 |         result[i] = result[i-1] * i;\n\
    \   |         ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp1ddjgbqz.rs:13:21\n\
    \   |\n13 |         result[i] = result[i-1] * i;\n   |                     ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3rnrbnt.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:13\n   |\n13 |             result[i]\
    \ = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy3rnrbnt.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1isize];\n    for i in 1..n {\n        if i % 2 == 0 {\n \
    \           result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxrubwh8h.rs:11:13\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxrubwh8h.rs:11:25\n\
    \   |\n11 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxrubwh8h.rs:13:13\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxrubwh8h.rs:13:25\n\
    \   |\n13 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1isize];\n    for i in 1..n {\n        if i % 2 == 0 {\n \
    \           result.push(result.last() * i);\n        } else {\n            result.push(i\
    \ * result.last() + 1);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot multiply `Option<&isize>` by `isize`\n  --> /tmp/tmp4im7ioeb.rs:11:39\n\
    \   |\n11 |             result.push(result.last() * i);\n   |                \
    \         ------------- ^ - isize\n   |                         |\n   |      \
    \                   Option<&isize>\n\nerror[E0277]: cannot multiply `isize` by\
    \ `Option<&isize>`\n  --> /tmp/tmp4im7ioeb.rs:13:27\n   |\n13 |             result.push(i\
    \ * result.last() + 1);\n   |                           ^ no implementation for\
    \ `isize * Option<&isize>`\n   |\n   = help: the trait `Mul<Option<&isize>>` is\
    \ not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0369.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        return vec![];\n    }\n    let mut res = vec![];\n    for\
    \ i in 1..=n {\n        if i % 2 == 0 {\n            res.push(factorial(i));\n\
    \        } else {\n            res.push(i);\n        }\n    }\n    return res;\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpr7nanrfa.rs:14:22\n\
    \   |\n14 |             res.push(factorial(i));\n   |                      ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i%2 == 0 {\n        \
    \    result.push(i*i);\n        } else {\n            result.push(i+1);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpr34z_wpb.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![1; n + 1];\n    for i in 1..n {\n        result[i] = if i\
    \ % 2 == 0 {\n            result[i] * i\n        } else {\n            result[i]\
    \ + i\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9u12sn5z.rs:8:30\n  |\n8 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9u12sn5z.rs:10:9\n\
    \   |\n10 |         result[i] = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9u12sn5z.rs:11:13\n\
    \   |\n11 |             result[i] * i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9u12sn5z.rs:13:13\n\
    \   |\n13 |             result[i] + i\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    if\
    \ n % 2 == 0 {\n        vec![1..n]\n    } else {\n        vec![1..n].iter().map(|x|\
    \ x * x).collect()\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpub8kkkrb.rs:9:14\n  |\n9 |\
    \         vec![1..n]\n  |              ^^^^ expected `isize`, found struct `std::ops::Range`\n\
    \  |\n  = note: expected type `isize`\n           found struct `std::ops::Range<isize>`\n\
    \nerror[E0369]: cannot multiply `&std::ops::Range<isize>` by `&std::ops::Range<isize>`\n\
    \  --> /tmp/tmpub8kkkrb.rs:11:37\n   |\n11 |         vec![1..n].iter().map(|x|\
    \ x * x).collect()\n   |                                   - ^ - &std::ops::Range<isize>\n\
    \   |                                   |\n   |                              \
    \     &std::ops::Range<isize>\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 101
  program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfn f(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n      \
    \      result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ioytr_x.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749556
