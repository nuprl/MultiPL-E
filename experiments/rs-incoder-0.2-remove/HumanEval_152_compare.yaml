name: HumanEval_152_compare
language: rs
prompt: "/// I think we all remember that feeling when the result of some long-awaited\n\
  /// event is finally known. The feelings and thoughts you have at that moment are\n\
  /// definitely worth noting down and comparing.\n/// Your task is to determine if\
  \ a person correctly guessed the results of a number of matches.\n/// You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n/// Return an array of the same length denoting how far off each guess was.\
  \ If they have guessed correctly,\n/// the value is 0, and if not, the value is\
  \ the absolute difference between the guess and the score.\n/// example:\nfn compare(game:\
  \ Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
  \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
  \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
  \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
  \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
completions: ["    let mut result = Vec::new();\n    for index in 0..guess.len() {\n\
    \        let score = game[index];\n        let guess = guess[index];\n       \
    \ let diff = if guess == score { 0 } else { abs(guess - score) };\n        result.push(diff);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    for &score in game\
    \ {\n        let mut guess = guess.iter().cloned().collect::<Vec<_>>();\n    \
    \    let mut guess = guess.iter().cloned().collect::<Vec<_>>();\n        let mut\
    \ guess = guess.iter().cloned().collect::<Vec<_>>();\n        let mut guess =\
    \ guess.iter().cloned().collect::<Vec<_>>();\n        let mut guess = guess.iter().cloned().collect::<Vec<_>>();\n\
    \        let mut guess = guess.iter().cloned().collect::<Vec<_>>();\n        let\
    \ mut guess = guess.iter().cloned().collect::<Vec<_>>();\n        let mut guess\
    \ = guess.iter().cloned().collect::<Vec<_>>();\n        let mut guess = guess.iter().cloned().collect::<Vec<_>>();\n\
    \        let mut guess = guess.iter().cloned().collect::<Vec<_>>();\n        let\
    \ mut guess = guess.iter().cloned().collect::<Vec<_>>();\n        let mut guess\
    \ = guess.iter().cloned().collect::<Vec<_>>();\n        let mut guess = guess.iter().cloned().collect::<Vec<_>>();\n\
    \        let mut guess = guess.iter().cloned().collect::<Vec<_>>();\n        let\
    \ mut guess = guess.iter().cloned().collect::<Vec<_>>();\n        let mut guess\
    \ = guess.iter().cloned().collect::<Vec<_>>();\n        let mut guess = guess.iter().cloned().collect::<Vec<_>>();\n\
    \        let mut guess = guess.iter().cloned().collect::<Vec<_>>();\n        let\
    \ mut guess = guess.iter().cloned().collect::<Vec<_>>();\n        let mut guess\
    \ = guess.iter().cloned().collect::<Vec<_>>();\n        let mut guess = guess.iter().cloned().collect::<Vec<_>>();\n\
    \        let mut guess = guess.iter().cloned().collect::<Vec<_>>();\n        let\
    \ mut guess = guess.iter().cloned().collect::<Vec<_>>();\n        let mut guess\
    \ = guess.iter().cloned().collect::<Vec<_>>();\n        let mut guess = guess.iter().cloned().collect::<Vec",
  "    let mut result = Vec::new();\n    for index in 0..game.len() {\n        let\
    \ score = game[index];\n        let guess = guess[index];\n        let diff =\
    \ guess - score;\n        if diff < 0 {\n            result.push(diff);\n    \
    \    } else {\n            result.push(-diff);\n        }\n    }\n    result",
  "    let mut result = Vec::new();\n    for index in 0..game.len() {\n        let\
    \ mut guess = guess[index];\n        let mut score = game[index];\n        if\
    \ guess == score {\n            result.push(0);\n        } else {\n          \
    \  result.push(abs(guess - score));\n        }\n    }\n    result", "    let mut\
    \ result = Vec::new();\n    for &score in game {\n        let mut diff = score.unwrap()\
    \ - guess.iter().cloned().sum();\n        if diff < 0 {\n            diff *= -1;\n\
    \        }\n        result.push(diff);\n    }\n    result", "    let mut result\
    \ = Vec::new();\n    for index in 0..guess.len() {\n        let score = game[index];\n\
    \        let guess = guess[index];\n        let diff = abs(guess - score);\n \
    \       result.push(diff);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    for index in 0..game.len() {\n        let score = game[index];\n        let\
    \ guess = guess[index];\n        if guess == score {\n            result.push(0);\n\
    \        } else {\n            result.push(abs(guess - score));\n        }\n \
    \   }\n    result", "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        let mut diff = guess[i] - game[i];\n        if diff < 0 {\n     \
    \       diff *= -1;\n        }\n        result.push(diff);\n    }\n    result",
  "    let mut result = Vec::new();\n    for index in 0..game.len() {\n        let\
    \ score = game[index];\n        let guess = guess[index];\n        let diff =\
    \ guess - score;\n        if diff < 0 {\n            result.push(diff);\n    \
    \    } else {\n            result.push(-diff);\n        }\n    }\n    result",
  "    let mut result = Vec::new();\n    for i in 0..game.len() {\n        let mut\
    \ diff = 0;\n        for j in 0..guess.len() {\n            if game[i] == guess[j]\
    \ {\n                diff += 1;\n            }\n        }\n        result.push(diff);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    for &score in game\
    \ {\n        let mut guess = guess.clone();\n        guess.remove(0);\n      \
    \  let difference = if score == guess {\n            0\n        } else {\n   \
    \         score - guess\n        };\n        result.push(difference);\n    }\n\
    \    result", "    let mut result: Vec<isize> = game.iter().cloned().collect();\n\
    \    result.sort_unstable();\n    for &g in &guess {\n        let mut found =\
    \ false;\n        for &s in &game {\n            if s == g {\n               \
    \ found = true;\n                break;\n            }\n        }\n        if\
    \ !found {\n            result.push(g - s);\n        }\n    }\n    result", " \
    \   let mut result = Vec::new();\n    for &score in game {\n        let mut diff\
    \ = score.unwrap();\n        for &guess in guess {\n            if guess == score\
    \ {\n                diff = 0;\n                break;\n            }\n      \
    \      diff += abs(guess - score);\n        }\n        result.push(diff);\n  \
    \  }\n    result", "    let mut result = vec![0; game.len()];\n    for &(game,\
    \ guess) in game.iter().zip(guess.iter()) {\n        if game == guess {\n    \
    \        result[game] = 0;\n        } else {\n            result[game] = abs(guess\
    \ - game);\n        }\n    }\n    result", "    let mut result = Vec::new();\n\
    \    for index in 0..guess.len() {\n        let score = game[index];\n       \
    \ let guess = guess[index];\n        let diff = guess - score;\n        result.push(diff);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    for &score in game\
    \ {\n        if guess == score {\n            result.push(0);\n        } else\
    \ {\n            result.push((guess - score).abs());\n        }\n    }\n    result",
  "    let mut result = Vec::new();\n    for index in 0..game.len() {\n        let\
    \ score = game[index];\n        let guess = guess[index];\n        if guess ==\
    \ score {\n            result.push(0);\n        } else {\n            result.push(abs(score\
    \ - guess));\n        }\n    }\n    result", "    let mut result = Vec::new();\n\
    \    for index in 0..game.len() {\n        let score = game[index];\n        let\
    \ guess = guess[index];\n        if guess == score {\n            result.push(0);\n\
    \        } else {\n            result.push(abs(score - guess));\n        }\n \
    \   }\n    result", "    let mut result = Vec::new();\n    for &score in game\
    \ {\n        let mut diff = score;\n        for &guess in guess {\n          \
    \  if score == guess {\n                diff = 0;\n                break;\n  \
    \          }\n            diff += guess;\n        }\n        result.push(diff);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        let mut diff = guess[i] - game[i];\n        if diff < 0 {\n     \
    \       diff *= -1;\n        }\n        result.push(diff);\n    }\n    result"]
stop_tokens:
- "\n}"
