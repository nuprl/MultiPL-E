language: rs
name: HumanEval_62_derivative
results:
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp_tuu5e0f.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i]\
    \ / xs.len());\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplyniu75f.rs:7:49\n  |\n7 |\
    \         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |            \
    \                                     ^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot divide `isize` by `usize`\n --> /tmp/tmplyniu75f.rs:7:47\n\
    \  |\n7 |         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |    \
    \                                           ^ no implementation for `isize / usize`\n\
    \  |\n  = help: the trait `Div<usize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 1;\n    for &x in xs {\n        result.push((x * x) - x);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpp217fltf.rs:7:9\n  |\n7 |\
    \     for &x in xs {\n  |         ^^    -- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i] * xs[i + 1]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 8, 20]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpo_r6lvg2.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp_tuu5e0f.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.reverse();\n    dx\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpgpsn9sf8.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in xs.iter() {\n        result.push(i * i);\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpreahtp1b.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 1;\n    for i in xs.iter() {\n        result.push(x * i);\n \
    \       x *= i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 6, 24, 120]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp3ltbkh9t.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 0;\n    for &x in xs {\n        result.push((x * (x - 1)) / 2);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphl0aks_6.rs:7:9\n  |\n7 |\
    \     for &x in xs {\n  |         ^^    -- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i]\
    \ / xs.len() as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 2, 4, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpjrt2z2p5.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i\
    \ - 1]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpbsr500pb.rs:7:44

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp_tuu5e0f.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp_tuu5e0f.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 1;\n    for &x in xs {\n        result.push((x * x) as isize);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxn6f843l.rs:7:9\n  |\n7 |\
    \     for &x in xs {\n  |         ^^    -- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i]\
    \ / xs.len() as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 2, 4, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpjrt2z2p5.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i\
    \ as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-8, 1, 0, -11]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpdzmwjgcf.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i]\
    \ / xs.len());\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplyniu75f.rs:7:49\n  |\n7 |\
    \         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |            \
    \                                     ^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot divide `isize` by `usize`\n --> /tmp/tmplyniu75f.rs:7:47\n\
    \  |\n7 |         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |    \
    \                                           ^ no implementation for `isize / usize`\n\
    \  |\n  = help: the trait `Div<usize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.reverse();\n    dx\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpgpsn9sf8.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i] * (xs[i + 1] - xs[i]));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, 1, 4, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp6bcggdyz.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i]\
    \ / xs.len());\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplyniu75f.rs:7:49\n  |\n7 |\
    \         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |            \
    \                                     ^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot divide `isize` by `usize`\n --> /tmp/tmplyniu75f.rs:7:47\n\
    \  |\n7 |         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |    \
    \                                           ^ no implementation for `isize / usize`\n\
    \  |\n  = help: the trait `Div<usize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in xs.iter() {\n        result.push(i * i);\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpreahtp1b.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp_tuu5e0f.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp_tuu5e0f.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp_tuu5e0f.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i]\
    \ / xs.len());\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplyniu75f.rs:7:49\n  |\n7 |\
    \         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |            \
    \                                     ^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot divide `isize` by `usize`\n --> /tmp/tmplyniu75f.rs:7:47\n\
    \  |\n7 |         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |    \
    \                                           ^ no implementation for `isize / usize`\n\
    \  |\n  = help: the trait `Div<usize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 1;\n    for i in xs.iter() {\n        result.push((x - i) / x);\n\
    \        x = i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbv8kn5an.rs:9:13\n  |\n6 |\
    \     let mut x = 1;\n  |                 - expected due to this value\n...\n\
    9 |         x = i;\n  |             ^ expected `isize`, found `&isize`\n  |\n\
    help: consider dereferencing the borrow\n  |\n9 |         x = *i;\n  |       \
    \      +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.reverse();\n    dx.push(0);\n    dx\n}\n\nfn main() {\n\
    \    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpki64d1ad.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i\
    \ as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-8, 1, 0, -11]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpdzmwjgcf.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 1;\n    for &i in xs.iter() {\n        result.push((x - i) /\
    \ (2 * i));\n        x = i;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 0, 0, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp4x_qkqyh.rs:16:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i]\
    \ / xs.len() as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 2, 4, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpjrt2z2p5.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i\
    \ as usize - 1]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp74zwfb7f.rs:7:44

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 0;\n    for i in 0..(xs.len() - 1) {\n        result.push(xs.len()\
    \ - 1 - i);\n        x = x * xs.len() - 1 - i;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp446y7p0c.rs:11:5\n   |\n\
    4  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |                     \
    \             ---------- expected `Vec<isize>` because of return type\n...\n11\
    \ |     result\n   |     ^^^^^^ expected `isize`, found `usize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in xs.iter() {\n        result.push(i * i);\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpreahtp1b.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp_tuu5e0f.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i] * (xs[i + 1] - xs[i]));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, 1, 4, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp6bcggdyz.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.reverse();\n    dx\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpgpsn9sf8.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i\
    \ as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-8, 1, 0, -11]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpdzmwjgcf.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut xs_deriv = xs.clone();\n\
    \    xs_deriv[0] += 1;\n    xs_deriv.iter().cloned().for_each(|x| {\n        xs_deriv[0]\
    \ += x * x;\n    });\n    xs_deriv\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `xs_deriv` as mutable because it is also borrowed\
    \ as immutable\n --> /tmp/tmp1cls22_z.rs:7:39\n  |\n7 |     xs_deriv.iter().cloned().for_each(|x|\
    \ {\n  |     ---------------          -------- ^^^ mutable borrow occurs here\n\
    \  |     |                        |\n  |     |                        immutable\
    \ borrow later used by call\n  |     immutable borrow occurs here\n8 |       \
    \  xs_deriv[0] += x * x;\n  |         -------- second borrow occurs due to use\
    \ of `xs_deriv` in closure\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp_tuu5e0f.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 1;\n    let mut y = 1;\n    for &x in xs {\n        y += x;\n\
    \        result.push(y);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp53_qkumc.rs:8:9\n  |\n8 |\
    \     for &x in xs {\n  |         ^^    -- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut xs_dp = vec![];\n \
    \   for i in 0..(xs.len() - 1) {\n        xs_dp.push(xs[i + 1] - xs[i]);\n   \
    \ }\n    xs_dp\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpia9vej5y.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i]\
    \ / xs.len());\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplyniu75f.rs:7:49\n  |\n7 |\
    \         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |            \
    \                                     ^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot divide `isize` by `usize`\n --> /tmp/tmplyniu75f.rs:7:47\n\
    \  |\n7 |         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |    \
    \                                           ^ no implementation for `isize / usize`\n\
    \  |\n  = help: the trait `Div<usize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i]\
    \ / xs.len() as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 2, 4, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpjrt2z2p5.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i]\
    \ / xs.len());\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplyniu75f.rs:7:49\n  |\n7 |\
    \         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |            \
    \                                     ^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot divide `isize` by `usize`\n --> /tmp/tmplyniu75f.rs:7:47\n\
    \  |\n7 |         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |    \
    \                                           ^ no implementation for `isize / usize`\n\
    \  |\n  = help: the trait `Div<usize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 1;\n    for &x in xs {\n        result.push(x * x);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjyznhg2n.rs:7:9\n  |\n7 |\
    \     for &x in xs {\n  |         ^^    -- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i\
    \ - 1]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpbsr500pb.rs:7:44

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i\
    \ as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-8, 1, 0, -11]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpdzmwjgcf.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in xs.iter() {\n        result.push(i * i);\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpreahtp1b.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 0;\n    for i in 0..(xs.len() - 1) {\n        x += xs[i];\n \
    \       result.push((xs[i] - x) / xs[i]);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, -3, -2, -1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbctuk2_m.rs:16:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i]\
    \ / xs.len());\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplyniu75f.rs:7:49\n  |\n7 |\
    \         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |            \
    \                                     ^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot divide `isize` by `usize`\n --> /tmp/tmplyniu75f.rs:7:47\n\
    \  |\n7 |         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |    \
    \                                           ^ no implementation for `isize / usize`\n\
    \  |\n  = help: the trait `Div<usize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        let mut x = xs[i];\n        let mut\
    \ y = xs[i + 1];\n        let mut z = xs[i + 2];\n        let mut x2 = x * x;\n\
    \        let mut x3 = x2 * x;\n        let mut x4 = x2 * x2;\n        let mut\
    \ x5 = x2 * x3;\n        let mut x6 = x2 * x4;\n        let mut x7 = x2 * x5;\n\
    \        let mut x8 = x2 * x6;\n        let mut x9 = x2 * x7;\n        let mut\
    \ x10 = x2 * x8;\n        let mut x11 = x2 * x9;\n        let mut x12 = x2 * x10;\n\
    \        let mut x13 = x2 * x11;\n        let mut x14 = x2 * x12;\n        let\
    \ mut x15 = x2 * x13;\n        let mut x16 = x2 * x14;\n        let mut x17 =\
    \ x2 * x15;\n        let mut x18 = x2 * x16;\n        let mut x19 = x2 * x17;\n\
    \        let mut x20 = x2 * x18;\n        let mut x21 = x2 * x19;\n        let\
    \ mut x22 = x2 * x20;\n        let mut x23 = x2 * x21;\n        let mut x24 =\
    \ x2 * x22;\n        let mut x25 = x2 * x23;\n        let mut x26 = x2 * x24;\n\
    \        let mut x27 = x2 * x25;\n        let mut x28 = x2 * x26;\n        let\
    \ mut x29 = x2 * x27;\n        let mut x30 = x2 * x28;\n        let mut x31 =\
    \ x2 * x29;\n        let mut x32 = x2 * x30;\n        let mut x33 = x2 * x31;\n\
    \        let mut x34 = x2 * x32;\n        let mut x35 = x2 * x33;\n        let\
    \ mut x36 = x2 * x34;\n        let mut x37 = x2 * x35;\n        let mut x38 =\
    \ x2 * x36;\n        let mut x39 = x2 * x37;\n        let mut x40 = x2 * x38;\n\
    \        let mut x41 = x2 * x39;\n        let mut x42 = x2 * x40;\n        let\
    \ mut x43 = x2 * x41;\n        let mut x44 = x2 * x4\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp0spnmswk.rs:62:3\n\
    \   |\n4  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |              \
    \                               - unclosed delimiter\n5  |     let mut result\
    \ = Vec::new();\n6  |     for i in 0..(xs.len() - 1) {\n   |                 \
    \               - this delimiter might not be properly closed...\n...\n53 | }\n\
    \   | - ...as it matches this but it has different indentation\n...\n62 | }\n\
    \   |   ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp0spnmswk.rs:52:30\n\
    \   |\n52 |         let mut x44 = x2 * x4\n   |                              ^\
    \ help: add `;` here\n53 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp0spnmswk.rs:4:34\n  |\n4 | fn derivative(xs: Vec<isize>)\
    \ -> Vec<isize> {\n  |    ----------                    ^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n\
    \          found unit type `()`\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        let mut term = Vec::new();\n      \
    \  for j in 0..(xs.len() - 1 - i) {\n            term.push(pow(xs[j], i));\n \
    \       }\n        result.push(term.sum());\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `pow` in this scope\n --> /tmp/tmpx36z6pzy.rs:9:23\n\
    \  |\n9 |             term.push(pow(xs[j], i));\n  |                       ^^^\
    \ not found in this scope\n\nerror[E0599]: `Vec<_>` is not an iterator\n   -->\
    \ /tmp/tmpx36z6pzy.rs:11:26\n    |\n11  |           result.push(term.sum());\n\
    \    |                            ^^^ `Vec<_>` is not an iterator\n    |\n   \
    \ = note: the following trait bounds were not satisfied:\n            `Vec<_>:\
    \ Iterator`\n            which is required by `&mut Vec<_>: Iterator`\n      \
    \      `[_]: Iterator`\n            which is required by `&mut [_]: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 1;\n    for i in 0..(xs.len() - 1) {\n        result.push((xs[i]\
    \ * x) * x);\n        x = x * x;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpwwhr38f0.rs:16:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i\
    \ as usize - 1]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp74zwfb7f.rs:7:44

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i\
    \ as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-8, 1, 0, -11]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpdzmwjgcf.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i] * (xs[i + 1] - xs[i]));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, 1, 4, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp6bcggdyz.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp_tuu5e0f.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 1;\n    for &x in xs {\n        result.push((x * x) as isize);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxn6f843l.rs:7:9\n  |\n7 |\
    \     for &x in xs {\n  |         ^^    -- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 1;\n    for &x in xs {\n        result.push((x - 1) * x);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyjixc_g3.rs:7:9\n  |\n7 |\
    \     for &x in xs {\n  |         ^^    -- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i] * (xs[i + 1] - xs[i]));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, 1, 4, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp6bcggdyz.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut xs_dp = vec![];\n \
    \   for i in 0..(xs.len() - 1) {\n        xs_dp.push(xs[i + 1] - xs[i]);\n   \
    \ }\n    xs_dp\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpia9vej5y.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i\
    \ as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-8, 1, 0, -11]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpdzmwjgcf.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i] * (xs[i + 1] - xs[i]));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, 1, 4, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp6bcggdyz.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut xs_der: Vec<isize>\
    \ = xs.clone();\n    xs_der.pop();\n    xs_der.pop();\n    xs_der.pop();\n   \
    \ xs_der\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmps7dlb8qc.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i]\
    \ / xs.len());\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplyniu75f.rs:7:49\n  |\n7 |\
    \         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |            \
    \                                     ^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot divide `isize` by `usize`\n --> /tmp/tmplyniu75f.rs:7:47\n\
    \  |\n7 |         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |    \
    \                                           ^ no implementation for `isize / usize`\n\
    \  |\n  = help: the trait `Div<usize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 1;\n    for &x in xs {\n        result.push((x - 1) * x);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyjixc_g3.rs:7:9\n  |\n7 |\
    \     for &x in xs {\n  |         ^^    -- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp_tuu5e0f.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i]\
    \ / xs.len());\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplyniu75f.rs:7:49\n  |\n7 |\
    \         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |            \
    \                                     ^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot divide `isize` by `usize`\n --> /tmp/tmplyniu75f.rs:7:47\n\
    \  |\n7 |         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |    \
    \                                           ^ no implementation for `isize / usize`\n\
    \  |\n  = help: the trait `Div<usize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i] * (xs[i + 1] - xs[i]));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, 1, 4, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp6bcggdyz.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in xs.iter() {\n        result.push(i * i);\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpreahtp1b.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i]\
    \ / xs.len());\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplyniu75f.rs:7:49\n  |\n7 |\
    \         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |            \
    \                                     ^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot divide `isize` by `usize`\n --> /tmp/tmplyniu75f.rs:7:47\n\
    \  |\n7 |         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |    \
    \                                           ^ no implementation for `isize / usize`\n\
    \  |\n  = help: the trait `Div<usize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.reverse();\n    dx\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpgpsn9sf8.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in xs.iter() {\n        result.push(i * i);\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpreahtp1b.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i\
    \ as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-8, 1, 0, -11]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpdzmwjgcf.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 1;\n    for &x in xs {\n        result.push(x * x);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjyznhg2n.rs:7:9\n  |\n7 |\
    \     for &x in xs {\n  |         ^^    -- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp_tuu5e0f.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 1;\n    for &x in xs {\n        result.push(x * x);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjyznhg2n.rs:7:9\n  |\n7 |\
    \     for &x in xs {\n  |         ^^    -- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i]\
    \ / xs.len());\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplyniu75f.rs:7:49\n  |\n7 |\
    \         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |            \
    \                                     ^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot divide `isize` by `usize`\n --> /tmp/tmplyniu75f.rs:7:47\n\
    \  |\n7 |         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |    \
    \                                           ^ no implementation for `isize / usize`\n\
    \  |\n  = help: the trait `Div<usize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp_tuu5e0f.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp_tuu5e0f.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.reverse();\n    dx.push(0);\n    dx\n}\n\nfn main() {\n\
    \    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpki64d1ad.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i]\
    \ / xs.len());\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplyniu75f.rs:7:49\n  |\n7 |\
    \         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |            \
    \                                     ^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot divide `isize` by `usize`\n --> /tmp/tmplyniu75f.rs:7:47\n\
    \  |\n7 |         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |    \
    \                                           ^ no implementation for `isize / usize`\n\
    \  |\n  = help: the trait `Div<usize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 1;\n    for &x in xs {\n        result.push(x * x);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjyznhg2n.rs:7:9\n  |\n7 |\
    \     for &x in xs {\n  |         ^^    -- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in xs.iter() {\n        result.push(i * i);\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpreahtp1b.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i]\
    \ / xs.len());\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplyniu75f.rs:7:49\n  |\n7 |\
    \         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |            \
    \                                     ^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot divide `isize` by `usize`\n --> /tmp/tmplyniu75f.rs:7:47\n\
    \  |\n7 |         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |    \
    \                                           ^ no implementation for `isize / usize`\n\
    \  |\n  = help: the trait `Div<usize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i]\
    \ / xs.len());\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplyniu75f.rs:7:49\n  |\n7 |\
    \         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |            \
    \                                     ^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot divide `isize` by `usize`\n --> /tmp/tmplyniu75f.rs:7:47\n\
    \  |\n7 |         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |    \
    \                                           ^ no implementation for `isize / usize`\n\
    \  |\n  = help: the trait `Div<usize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp_tuu5e0f.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 1;\n    for &x in xs {\n        result.push((x * x) as isize);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxn6f843l.rs:7:9\n  |\n7 |\
    \     for &x in xs {\n  |         ^^    -- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut xs_der: Vec<isize>\
    \ = xs.clone();\n    xs_der.pop();\n    xs_der.pop();\n    xs_der.pop();\n   \
    \ xs_der.pop();\n    xs_der.pop();\n    xs_der\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp4v64bz3q.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i] * xs[i + 1]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 8, 20]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpo_r6lvg2.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i\
    \ as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-8, 1, 0, -11]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpdzmwjgcf.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i] * xs[i + 1]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 8, 20]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpo_r6lvg2.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 1;\n    for &x in xs {\n        result.push((x - 1) * x);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyjixc_g3.rs:7:9\n  |\n7 |\
    \     for &x in xs {\n  |         ^^    -- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        let mut j = 0;\n        while j < i\
    \ {\n            j += 1;\n        }\n        result.push(xs[j] - xs[i]);\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpcxyu2wub.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp_tuu5e0f.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i]\
    \ / xs.len());\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplyniu75f.rs:7:49\n  |\n7 |\
    \         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |            \
    \                                     ^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot divide `isize` by `usize`\n --> /tmp/tmplyniu75f.rs:7:47\n\
    \  |\n7 |         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |    \
    \                                           ^ no implementation for `isize / usize`\n\
    \  |\n  = help: the trait `Div<usize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i\
    \ as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-8, 1, 0, -11]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpdzmwjgcf.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut xs_der: Vec<isize>\
    \ = xs.clone();\n    xs_der.pop();\n    xs_der.pop();\n    xs_der.pop();\n   \
    \ xs_der\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmps7dlb8qc.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        let mut j = 0;\n        let mut k =\
    \ i;\n        while k < xs.len() {\n            j = k + 1;\n            k = j;\n\
    \        }\n        result.push(xs[j] - xs[i]);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 5 but the
    index is 5'', /tmp/tmps27zrd4b.rs:13:21

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.reverse();\n    dx\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpgpsn9sf8.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 1;\n    for &x in xs {\n        result.push(x * x);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjyznhg2n.rs:7:9\n  |\n7 |\
    \     for &x in xs {\n  |         ^^    -- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i\
    \ as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-8, 1, 0, -11]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpdzmwjgcf.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i] * xs[i + 1]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 8, 20]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpo_r6lvg2.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 1;\n    for &x in xs {\n        result.push((x * x) as isize);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxn6f843l.rs:7:9\n  |\n7 |\
    \     for &x in xs {\n  |         ^^    -- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i] * (xs[i + 1] - xs[i]));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, 1, 4, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp6bcggdyz.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp_tuu5e0f.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp_tuu5e0f.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i] * xs[i + 1]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 8, 20]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpo_r6lvg2.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 1;\n    for i in xs.iter() {\n        result.push((x - xs[i])\
    \ / (xs[i] - i));\n        x = xs[i];\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n --> /tmp/tmpc494xmjc.rs:8:26\n\
    \  |\n8 |         result.push((x - xs[i]) / (xs[i] - i));\n  |               \
    \           ^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n\
    \  = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n \
    \ = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n --> /tmp/tmpc494xmjc.rs:8:36\n\
    \  |\n8 |         result.push((x - xs[i]) / (xs[i] - i));\n  |               \
    \                     ^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n --> /tmp/tmpc494xmjc.rs:9:13\n\
    \  |\n9 |         x = xs[i];\n  |             ^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&isize`\n  = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n  = note: required because of the requirements on the impl of `Index<&isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in xs.iter() {\n        result.push(i * i);\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpreahtp1b.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i]\
    \ / xs.len());\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplyniu75f.rs:7:49\n  |\n7 |\
    \         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |            \
    \                                     ^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot divide `isize` by `usize`\n --> /tmp/tmplyniu75f.rs:7:47\n\
    \  |\n7 |         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |    \
    \                                           ^ no implementation for `isize / usize`\n\
    \  |\n  = help: the trait `Div<usize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 1;\n    for &x in xs {\n        result.push(x * x);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjyznhg2n.rs:7:9\n  |\n7 |\
    \     for &x in xs {\n  |         ^^    -- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i]\
    \ / xs.len());\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplyniu75f.rs:7:49\n  |\n7 |\
    \         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |            \
    \                                     ^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot divide `isize` by `usize`\n --> /tmp/tmplyniu75f.rs:7:47\n\
    \  |\n7 |         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |    \
    \                                           ^ no implementation for `isize / usize`\n\
    \  |\n  = help: the trait `Div<usize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 1;\n    for &x in xs {\n        result.push((x - 1) * x);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyjixc_g3.rs:7:9\n  |\n7 |\
    \     for &x in xs {\n  |         ^^    -- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut xs_der: Vec<isize>\
    \ = xs.clone();\n    xs_der.pop();\n    xs_der.pop();\n    xs_der.pop();\n   \
    \ xs_der\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmps7dlb8qc.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.reverse();\n    dx\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpgpsn9sf8.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in xs.iter() {\n        result.push(i * (i - 1));\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 0, 2, 12, 20]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp3ak3j5ky.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i] * xs[i + 1]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 8, 20]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpo_r6lvg2.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i]\
    \ / xs.len());\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplyniu75f.rs:7:49\n  |\n7 |\
    \         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |            \
    \                                     ^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot divide `isize` by `usize`\n --> /tmp/tmplyniu75f.rs:7:47\n\
    \  |\n7 |         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |    \
    \                                           ^ no implementation for `isize / usize`\n\
    \  |\n  = help: the trait `Div<usize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i]\
    \ / xs.len());\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplyniu75f.rs:7:49\n  |\n7 |\
    \         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |            \
    \                                     ^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot divide `isize` by `usize`\n --> /tmp/tmplyniu75f.rs:7:47\n\
    \  |\n7 |         result.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n  |    \
    \                                           ^ no implementation for `isize / usize`\n\
    \  |\n  = help: the trait `Div<usize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i] * xs[i\
    \ as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-8, 1, 0, -11]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpdzmwjgcf.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in 0..(xs.len() - 1) {\n        result.push(xs[i + 1] - xs[i]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbafjh3jv.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp_tuu5e0f.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp_tuu5e0f.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpe7_c3xpi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 1;\n    for &x in xs {\n        result.push((x - 1) * x);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyjixc_g3.rs:7:9\n  |\n7 |\
    \     for &x in xs {\n  |         ^^    -- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 0;\n    for i in xs.iter() {\n        x += i;\n        result.push(x);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 4, 6, 10, 15]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpyi8ytmf7.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp_tuu5e0f.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = 1;\n    for &i in xs.iter() {\n        result.push((x - i) /\
    \ x);\n        x = i;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 0, -1, -1, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp8sfb7a08.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
