language: rs
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack\n}\n\
    \nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmplw3b4c6v.rs:46:31\n   |\n\
    46 |     let mut paren_levels_stack\n   |                               ^ help:\
    \ add `;` here\n47 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmplw3b4c6v.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_ptr = paren_levels_stack_len;\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpodk0sqg7.rs:36:18\n   |\n\
    36 |     let mut paren\n   |                  ^ help: add `;` here\n37 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpodk0sqg7.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = &mut paren_levels_stack;\n    let mut paren_levels_ptr = &mut paren_levels;\n\
    \    let mut paren_levels_ptr_end = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_end_ptr\
    \ = &mut paren_levels_ptr_end;\n    let mut paren_levels_ptr_end_ptr_end = &mut\
    \ paren_levels_ptr_end_ptr;\n    let mut paren_levels_ptr_end_ptr_end_ptr = &mut\
    \ paren_levels_ptr_end_ptr_end;\n    let mut paren_levels_ptr_end_ptr_end_ptr_end\
    \ = &mut paren_levels_ptr_end_ptr_end_ptr;\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr\
    \ = &mut paren_levels_ptr_end_ptr_end_ptr_end_ptr;\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end;\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n    let mut\
    \ paren_levels_ptr_end_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr = &mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr = &mut\
    \ paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_\n}\n\nfn main() {\n   \
    \ let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp64x9sc8g.rs:21:130\n   |\n\
    21 |     let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_\n   |                 \
    \                                                                            \
    \                                     ^ help: add `;` here\n22 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `paren_levels_ptr_end_ptr_end_ptr_end_ptr`\
    \ in this scope\n  --> /tmp/tmp64x9sc8g.rs:15:61\n   |\n15 |     let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr\
    \ = &mut paren_levels_ptr_end_ptr_end_ptr_end_ptr;\n   |                     \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_ptr_end_ptr_end_ptr_end`\n\
    \nerror[E0425]: cannot find value `paren_levels_ptr_end_ptr_end_ptr_end_ptr_end`\
    \ in this scope\n  --> /tmp/tmp64x9sc8g.rs:16:65\n   |\n16 |     let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end;\n   |                 \
    \                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_ptr_end_ptr_end_ptr_end_ptr`\n\
    \nerror[E0425]: cannot find value `paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr`\
    \ in this scope\n  --> /tmp/tmp64x9sc8g.rs:17:69\n   |\n17 |     let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n   |             \
    \                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_ptr_end_ptr_end_ptr_end_ptr_ptr`\n\
    \nerror[E0425]: cannot find value `paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr`\
    \ in this scope\n  --> /tmp/tmp64x9sc8g.rs:18:73\n   |\n18 |     let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n   |     \
    \         "
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp23u0z2tx.rs:35:52\n   |\n\
    35 |     let mut paren_levels_stack_bottom = paren_level\n   |               \
    \                                     ^ help: add `;` here\n36 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp23u0z2tx.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_char = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut \n}\n\nfn main() {\n   \
    \ let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmphjbaz_zt.rs:53:1\n\
    \   |\n53 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_next = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_next = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_next = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_next = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_next = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_next = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_next = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_len = paren_level\n}\n\nfn main() {\n    let candidate =\
    \ parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphlcrii_5.rs:35:49\n   |\n\
    35 |     let mut paren_levels_stack_len = paren_level\n   |                  \
    \                               ^ help: add `;` here\n36 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmphlcrii_5.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_2akhuc1.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_2akhuc1.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = &mut paren_levels_stack;\n    let mut paren_levels_ptr = &mut paren_levels;\n\
    \    let mut paren_levels_ptr_end = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_end_ptr\
    \ = &mut paren_levels_ptr_end;\n    let mut paren_levels_ptr_end_ptr_ptr = &mut\
    \ paren_levels_ptr_end_ptr;\n    let mut paren_levels_ptr_end_ptr_ptr_ptr = &mut\
    \ paren_levels_ptr_end_ptr_ptr;\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr;\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr;\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n    let mut\
    \ paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `paren_levels_ptr_end_ptr_ptr_ptr_ptr`\
    \ in this scope\n  --> /tmp/tmpv7teo8g7.rs:14:57\n   |\n14 |     let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr;\n   |                         \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a\
    \ local variable with a similar name exists: `paren_levels_ptr_end_ptr_ptr_ptr`\n\
    \nerror[E0425]: cannot find value `paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr` in\
    \ this scope\n  --> /tmp/tmpv7teo8g7.rs:15:61\n   |\n15 |     let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr;\n   |                     \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_ptr_end_ptr_ptr_ptr_ptr`\n\
    \nerror[E0425]: cannot find value `paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr`\
    \ in this scope\n  --> /tmp/tmpv7teo8g7.rs:16:69\n   |\n16 |     let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n   |             \
    \                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr`\n\
    \nerror[E0425]: cannot find value `paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr`\
    \ in this scope\n  --> /tmp/tmpv7teo8g7.rs:17:77\n   |\n17 |     let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n   |     \
    \                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr`\n\
    \nerror[E0425]: cannot find value `paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr`\
    \ in this scope\n  --> /tmp/tmpv7teo8g7.rs:18:85\n   |\n18 | ...r_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpb203r7bj.rs:35:43\n   |\n\
    35 |     let mut paren_levels_stack_top = paren\n   |                        \
    \                   ^ help: add `;` here\n36 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `paren` in this scope\n  --> /tmp/tmpb203r7bj.rs:35:38\n\
    \   |\n35 |     let mut paren_levels_stack_top = paren\n   |                 \
    \                     ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpb203r7bj.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_2akhuc1.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_2akhuc1.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpe4zlsk32.rs:36:32\n   |\n\
    36 |     let mut paren_levels_stack_\n   |                                ^ help:\
    \ add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpe4zlsk32.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpb203r7bj.rs:35:43\n   |\n\
    35 |     let mut paren_levels_stack_top = paren\n   |                        \
    \                   ^ help: add `;` here\n36 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `paren` in this scope\n  --> /tmp/tmpb203r7bj.rs:35:38\n\
    \   |\n35 |     let mut paren_levels_stack_top = paren\n   |                 \
    \                     ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpb203r7bj.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr = Vec::new();\n    let mut paren_levels_ptr_end\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_end_ptr_end = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpv7tz7l19.rs:27:85\n   |\n\
    27 |     let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    \   |                                                                        \
    \             ^ help: add `;` here\n28 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpv7tz7l19.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack_len - 1;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len - 1;\n    let mut paren_levels_stack_top = paren_levels_stack_len\
    \ - 1;\n    let mut paren_levels_stack_bottom = paren_levels_stack_len - 1;\n\
    \    let mut paren_levels_stack_top = paren_levels_stack_len - 1;\n    let mut\
    \ paren_levels_stack_bottom = paren_levels_stack_len - 1;\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack_len - 1;\n    let mut paren_levels_stack_bottom = paren_levels_stack_len\
    \ - 1;\n    let mut paren_levels_stack_top = paren_levels_stack_len - 1;\n   \
    \ let mut paren_levels_stack_bottom = paren_levels_stack_len - 1;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len - 1;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len - 1;\n    let mut paren_levels_stack_top = paren_levels_stack_len\
    \ - 1;\n    let mut paren_levels_stack_bottom = paren_levels_stack_len - 1;\n\
    \    let mut paren_levels_stack_top = paren_levels_stack_len - 1;\n    let mut\
    \ paren_levels_stack_bottom = paren_levels_stack_len - 1;\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack_len - 1;\n    let mut paren_levels_stack_bottom = paren_levels_stack_len\
    \ - 1;\n    let mut paren_levels_stack_top = paren_levels_stack_len - 1;\n   \
    \ let mut paren_levels_stack_bottom = paren_levels_stack_len - 1;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len - 1;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len - 1;\n    let mut paren_levels_stack_top = paren_levels_stack_len\
    \ - 1;\n    let mut paren_levels_stack_bottom = paren_levels_stack_len - 1;\n\
    \    let mut paren_levels_stack_top = paren_levels_stack_len - 1;\n    let mut\
    \ paren_levels_stack_bottom = paren_level\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_r_fpue2.rs:35:52\n   |\n\
    35 |     let mut paren_levels_stack_bottom = paren_level\n   |               \
    \                                     ^ help: add `;` here\n36 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_r_fpue2.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = &mut paren_levels_stack;\n    let mut paren_levels_ptr = &mut paren_levels;\n\
    \    let mut paren_levels_ptr_ptr = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_end\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_end_ptr = &mut paren_levels_ptr_end;\n\
    \    let mut paren_levels_ptr_end_ptr_ptr = &mut paren_levels_ptr_end_ptr;\n \
    \   let mut paren_levels_ptr_end_ptr_ptr_ptr = &mut paren_levels_ptr_end_ptr_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr = &mut paren_levels_ptr_end_ptr_ptr_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n    let\
    \ mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = &mut\
    \ paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n    let mut\
    \ paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = \n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpwa5hcwu8.rs:24:1\n\
    \   |\n24 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr`\
    \ in this scope\n  --> /tmp/tmpwa5hcwu8.rs:21:85\n   |\n21 | ...r_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n   | \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_2akhuc1.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_2akhuc1.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let \n}\n\
    \nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp60sgh1h6.rs:36:1\n  \
    \ |\n36 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_iter = paren_string.char_indices();\n    let\
    \ mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let \n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpfs1wuxzn.rs:37:1\n  \
    \ |\n37 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_levels_iter = paren_string.char_indices().map(|i|\
    \ {\n        if paren_level_count == 0 {\n            paren_level_count = paren_level\
    \ + 1;\n        }\n        let level = paren_level_count;\n        let mut paren_levels_iter\
    \ = i.map(|j| {\n            if paren_level_count == 0 {\n                paren_level_count\
    \ = paren_level + 1;\n            }\n            paren_level_count = paren_level_count\
    \ + 1;\n            paren_level_count\n        });\n        paren_levels.push(level);\n\
    \        paren_levels_iter\n    });\n    paren_levels_iter\n}\n\nfn main() {\n\
    \    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `map` exists for tuple `(usize, char)`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmp52yegopb.rs:13:39\n   |\n13 |\
    \         let mut paren_levels_iter = i.map(|j| {\n   |                      \
    \                 ^^^ method cannot be called on `(usize, char)` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `(usize, char): Iterator`\n           which is required by `&mut (usize,\
    \ char): Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp52yegopb.rs:23:5\n\
    \   |\n4  | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n   |\
    \                                                 ---------- expected `Vec<isize>`\
    \ because of return type\n...\n23 |     paren_levels_iter\n   |     ^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `Map`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Map<CharIndices<'_>, _>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_levels_index = 0;\n\
    \    let mut paren_levels_index2 = 0;\n    let mut paren_levels_index3 = 0;\n\
    \    let mut paren_levels_index4 = 0;\n    let mut paren_levels_index5 = 0;\n\
    \    let mut paren_levels_index6 = 0;\n    let mut paren_levels_index7 = 0;\n\
    \    let mut paren_levels_index8 = 0;\n    let mut paren_levels_index9 = 0;\n\
    \    let mut paren_levels_index10 = 0;\n    let mut paren_levels_index11 = 0;\n\
    \    let mut paren_levels_index12 = 0;\n    let mut paren_levels_index13 = 0;\n\
    \    let mut paren_levels_index14 = 0;\n    let mut paren_levels_index15 = 0;\n\
    \    let mut paren_levels_index16 = 0;\n    let mut paren_levels_index17 = 0;\n\
    \    let mut paren_levels_index18 = 0;\n    let mut paren_levels_index19 = 0;\n\
    \    let mut paren_levels_index20 = 0;\n    let mut paren_levels_index21 = 0;\n\
    \    let mut paren_levels_index22 = 0;\n    let mut paren_levels_index23 = 0;\n\
    \    let mut paren_levels_index24 = 0;\n    let mut paren_levels_index25 = 0;\n\
    \    let mut paren_levels_index26 = 0;\n    let mut paren_levels_index27 = 0;\n\
    \    let mut paren_levels_index28 = 0;\n    let mut paren_levels_index29 = 0;\n\
    \    let mut paren_levels_index30 = 0;\n    let mut paren_levels_index31 = 0;\n\
    \    let mut paren_levels_index32 = 0;\n    let mut paren_levels_index33 = 0;\n\
    \    let mut paren_levels_index34 = 0;\n    let mut paren_levels_index35 = 0;\n\
    \    let mut paren_levels_index36 = 0;\n    let mut paren_levels_index37 = 0;\n\
    \    let mut paren_levels_index38 = 0;\n    let mut paren_levels_index39 = 0;\n\
    \    let mut paren_levels_index40 = 0;\n    let mut paren_levels_index41 = 0;\n\
    \    let mut paren_levels_index42 = 0;\n    let mut paren_levels_index43 = 0;\n\
    \    let mut paren_levels_index44 = 0;\n    let mut paren\n}\n\nfn main() {\n\
    \    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpuq2tph21.rs:52:18\n   |\n\
    52 |     let mut paren\n   |                  ^ help: add `;` here\n53 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpuq2tph21.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    while paren_level_count <\
    \ MAX_NESTING_DEPTH {\n        let mut paren_level_string = paren_string;\n  \
    \      let mut paren_level_string = paren_string;\n        let mut paren_level_string\
    \ = paren_string;\n        let mut paren_level_string = paren_string;\n      \
    \  let mut paren_level_string = paren_string;\n        let mut paren_level_string\
    \ = paren_string;\n        let mut paren_level_string = paren_string;\n      \
    \  let mut paren_level_string = paren_string;\n        let mut paren_level_string\
    \ = paren_string;\n        let mut paren_level_string = paren_string;\n      \
    \  let mut paren_level_string = paren_string;\n        let mut paren_level_string\
    \ = paren_string;\n        let mut paren_level_string = paren_string;\n      \
    \  let mut paren_level_string = paren_string;\n        let mut paren_level_string\
    \ = paren_string;\n        let mut paren_level_string = paren_string;\n      \
    \  let mut paren_level_string = paren_string;\n        let mut paren_level_string\
    \ = paren_string;\n        let mut paren_level_string = paren_string;\n      \
    \  let mut paren_level_string = paren_string;\n        let mut paren_level_string\
    \ = paren_string;\n        let mut paren_level_string = paren_string;\n      \
    \  let mut paren_level_string = paren_string;\n        let mut paren_level_string\
    \ = paren_string;\n        let mut paren_level_string = paren_string;\n      \
    \  let mut paren_level_string = paren_string;\n        let mut paren_level_string\
    \ = paren_string;\n        let mut paren_level_string = paren_string;\n      \
    \  let mut paren_level_string = paren_string;\n        let mut paren_level_string\
    \ = paren_string;\n        let mut paren_level_string = paren_string;\n      \
    \  let mut paren_level_string = paren_string;\n        let mut paren_level_string\
    \ = paren_string;\n        let mut paren_level_string = paren_string;\n      \
    \  let mut paren_level_string = paren_string;\n        let mut paren_level_string\
    \ = paren_string;\n        let mut paren_level_string = paren_string;\n      \
    \  let mu\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpnirwd_ki.rs:56:3\n\
    \   |\n4  | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n10 |     while paren_level_count < MAX_NESTING_DEPTH {\n   |            \
    \                                     - this delimiter might not be properly closed...\n\
    ...\n49 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    56 | }\n   |   ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpnirwd_ki.rs:48:15\n\
    \   |\n48 |         let mu\n   |               ^ help: add `;` here\n49 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `MAX_NESTING_DEPTH`\
    \ in this scope\n  --> /tmp/tmpnirwd_ki.rs:10:31\n   |\n10 |     while paren_level_count\
    \ < MAX_NESTING_DEPTH {\n   |                               ^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpnirwd_ki.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_char = 0;\n    let mut paren_level_char_next =\
    \ 0;\n    let mut paren_level_char_next2 = 0;\n    let mut paren_level_char_next3\
    \ = 0;\n    let mut paren_level_char_next4 = 0;\n    let mut paren_level_char_next5\
    \ = 0;\n    let mut paren_level_char_next6 = 0;\n    let mut paren_level_char_next7\
    \ = 0;\n    let mut paren_level_char_next8 = 0;\n    let mut paren_level_char_next9\
    \ = 0;\n    let mut paren_level_char_next10 = 0;\n    let mut paren_level_char_next11\
    \ = 0;\n    let mut paren_level_char_next12 = 0;\n    let mut paren_level_char_next13\
    \ = 0;\n    let mut paren_level_char_next14 = 0;\n    let mut paren_level_char_next15\
    \ = 0;\n    let mut paren_level_char_next16 = 0;\n    let mut paren_level_char_next17\
    \ = 0;\n    let mut paren_level_char_next18 = 0;\n    let mut paren_level_char_next19\
    \ = 0;\n    let mut paren_level_char_next20 = 0;\n    let mut paren_level_char_next21\
    \ = 0;\n    let mut paren_level_char_next22 = 0;\n    let mut paren_level_char_next23\
    \ = 0;\n    let mut paren_level_char_next24 = 0;\n    let mut paren_level_char_next25\
    \ = 0;\n    let mut paren_level_char_next26 = 0;\n    let mut paren_level_char_next27\
    \ = 0;\n    let mut paren_level_char_next28 = 0;\n    let mut paren_level_char_next29\
    \ = 0;\n    let mut paren_level_char_next30 = 0;\n    let mut paren_level_char_next31\
    \ = 0;\n    let mut paren_level_char_next32 = 0;\n    let mut paren_level_char_next33\
    \ = 0;\n    let mut paren_level_char_next34 = 0;\n    let mut paren_level_char_next35\
    \ = 0;\n    let mut paren_level_char_next36 = 0;\n    let mut paren_level_char_next37\
    \ = 0;\n    let mut paren_level_char_next38 = 0;\n    let mut paren_level_char_next39\
    \ = 0;\n    let mut paren_level_char_next40 = 0;\n    let mut paren_level_char_next41\
    \ = 0;\n    let mut paren_level_char_next42 = 0;\n    let mut paren_\n}\n\nfn\
    \ main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpewck9sgj.rs:52:19\n   |\n\
    52 |     let mut paren_\n   |                   ^ help: add `;` here\n53 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpewck9sgj.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_2akhuc1.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_2akhuc1.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsdfxszgj.rs:38:51\n   |\n\
    38 |     let mut paren_nesting_nesting_nesting_nesting_\n   |                \
    \                                   ^ help: add `;` here\n39 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpsdfxszgj.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_levels = Vec::new();\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_levels = Vec::new();\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_levels = Vec::new();\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_levels = Vec::new();\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_levels = Vec::new();\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_levels = Vec::new();\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_levels = Vec::new();\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_levels = Vec::new();\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_levels = Vec::new();\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_levels = Vec::new();\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_levels = Vec::new();\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_levels = Vec::new();\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_levels = Vec::new();\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_levels = Vec::new();\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_levels = Vec::new();\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_levels = Vec::new();\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_levels = Vec::new();\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_levels = Vec::new();\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_levels = Vec::new();\n    let mut paren_nesting_level\
    \ = 0;\n    let mut paren_nesting_levels = Vec::new();\n    let mut \n}\n\nfn\
    \ main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpi84wd74d.rs:49:1\n\
    \   |\n49 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_next = 0;\n    let mut paren_levels_stack_ptr_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next_next = 0;\n   \
    \ let mut paren_levels_stack_ptr_next_next_next_next_next_next = 0;\n    let mut\
    \ paren_levels_stack_ptr_next_next_next_next_next_next_next = 0;\n    let mut\
    \ paren_levels_stack_ptr_next_next_next_next_next_next_next_next = 0;\n    let\
    \ mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next = 0;\n\
    \    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_\n}\n\nfn main() {\n    let\
    \ candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()())\
    \ ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp08vrrpwi.rs:31:46\n   |\n\
    31 |     let mut paren_levels_stack_ptr_next_next_\n   |                     \
    \                         ^ help: add `;` here\n32 | }\n   | - unexpected token\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp08vrrpwi.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_2akhuc1.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_2akhuc1.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsdfxszgj.rs:38:51\n   |\n\
    38 |     let mut paren_nesting_nesting_nesting_nesting_\n   |                \
    \                                   ^ help: add `;` here\n39 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpsdfxszgj.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_char: char;\n\
    \    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_chars: Vec<char>;\n    let mut paren_level_char_index\
    \ = 0;\n    let mut paren_level_chars: Vec<char>;\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfjyv867c.rs:4:49\n  |\n4 |\
    \ fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = Vec::new();\n    let mut paren_level_char\
    \ = 0;\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_level_char.len();\n    let mut paren_level_char_pos = 0;\n    let mut\
    \ paren_level_char_len = paren_level_char.len();\n    let mut paren_level_char_pos\
    \ = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n    let mut\
    \ paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n}\n\nfn main() {\n    let candidate =\
    \ parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0689]: can't call method `len` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp55kkb1b1.rs:12:53\n   |\n12 |     let mut paren_level_char_len\
    \ = paren_level_char.len();\n   |                                            \
    \         ^^^\n   |\nhelp: you must specify a type for this binding, like `i32`\n\
    \   |\n10 |     let mut paren_level_char: i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0689]: can't call method `len` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp55kkb1b1.rs:14:53\n   |\n14 |     let mut paren_level_char_len\
    \ = paren_level_char.len();\n   |                                            \
    \         ^^^\n   |\nhelp: you must specify a type for this binding, like `i32`\n\
    \   |\n10 |     let mut paren_level_char: i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0689]: can't call method `len` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp55kkb1b1.rs:16:53\n   |\n16 |     let mut paren_level_char_len\
    \ = paren_level_char.len();\n   |                                            \
    \         ^^^\n   |\nhelp: you must specify a type for this binding, like `i32`\n\
    \   |\n10 |     let mut paren_level_char: i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0689]: can't call method `len` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp55kkb1b1.rs:18:53\n   |\n18 |     let mut paren_level_char_len\
    \ = paren_level_char.len();\n   |                                            \
    \         ^^^\n   |\nhelp: you must specify a type for this binding, like `i32`\n\
    \   |\n10 |     let mut paren_level_char: i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0689]: can't call method `len` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp55kkb1b1.rs:20:53\n   |\n20 |     let mut paren_level_char_len\
    \ = paren_level_char.len();\n   |                                            \
    \         ^^^\n   |\nhelp: you must specify a type for this binding, like `i32`\n\
    \   |\n10 |     let mut paren_level_char: i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0689]: can't call method `len` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp55k"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_len;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_len;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_len;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_len;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_len;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_len;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_len;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_len;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_len;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_len;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_len;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_len;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_len;\n\
    \    let mut paren_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpy9gknk_s.rs:37:19\n   |\n\
    37 |     let mut paren_\n   |                   ^ help: add `;` here\n38 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpy9gknk_s.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 101
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    for c in paren_string.chars() {\n\
    \        if c == '(' {\n            paren_level += 1;\n            paren_nesting\
    \ += 1;\n        } else if c == ')' {\n            paren_level -= 1;\n       \
    \     paren_nesting -= 1;\n            if paren_level == 0 {\n               \
    \ paren_levels.push(paren_nesting);\n            }\n        }\n    }\n    paren_levels\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0]`,\n right: `[2, 3, 1, 3]`', /tmp/tmp9z8qkb4w.rs:25:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_2akhuc1.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_2akhuc1.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nest\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprjp1jeym.rs:38:47\n   |\n\
    38 |     let mut paren_nesting_nesting_nesting_nest\n   |                    \
    \                           ^ help: add `;` here\n39 | }\n   | - unexpected token\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmprjp1jeym.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_chars = paren_string.chars();\n\
    \    let mut paren_level_chars_iter = paren_level_chars.iter();\n    let mut paren_level_chars_iter_next\
    \ = paren_level_chars_iter.next();\n    while let Some(paren_level_char) = paren_level_chars_iter_next\
    \ {\n        if paren_level_char == ')' {\n            paren_levels.push(paren_level);\n\
    \            paren_level = 0;\n            paren_level_index += 1;\n         \
    \   paren_level_chars_iter_next = paren_level_chars_iter.next();\n        } else\
    \ {\n            paren_level += 1;\n            paren_level_chars_iter_next =\
    \ paren_level_chars_iter.next();\n        }\n    }\n    paren_levels.push(paren_level);\n\
    \    paren_levels\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for struct `Chars` in the current\
    \ scope\n --> /tmp/tmpyj4s3ufl.rs:9:56\n  |\n9 |     let mut paren_level_chars_iter\
    \ = paren_level_chars.iter();\n  |                                           \
    \             ^^^^ private field, not a method\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = Vec::new();\n    let mut paren_level_char_pos\
    \ = 0;\n    let mut paren_level_char_pos_count = 0;\n    let mut paren_level_char_pos_char_count\
    \ = 0;\n    let mut paren_level_char_pos_chars = Vec::new();\n    let mut paren_level_char_pos_char_pos\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_count = 0;\n    let mut paren_level_char_pos_char_pos_char_count\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_chars = Vec::new();\n    let\
    \ mut paren_level_char_pos_char_pos_char_pos = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_count\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_count = 0;\n \
    \   let mut paren_level_char_pos_char_pos_char_pos_chars = Vec::new();\n    let\
    \ mut paren_level_char_pos_char_pos_char_pos_char_pos = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_count\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_count\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_chars = Vec::new();\n\
    \    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos = 0;\n \
    \   let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_count = 0;\n\
    \    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_char_count\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_count\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_count\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_count\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_count\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos\
    \ = 0;\n    let mut \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpuqcbwa9h.rs:37:1\n\
    \   |\n37 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_2akhuc1.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_2akhuc1.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_levels_index = 0;\n\
    \    let mut paren_levels_index2 = 0;\n    let mut paren_levels_index3 = 0;\n\
    \    let mut paren_levels_index4 = 0;\n    let mut paren_levels_index5 = 0;\n\
    \    let mut paren_levels_index6 = 0;\n    let mut paren_levels_index7 = 0;\n\
    \    let mut paren_levels_index8 = 0;\n    let mut paren_levels_index9 = 0;\n\
    \    let mut paren_levels_index10 = 0;\n    let mut paren_levels_index11 = 0;\n\
    \    let mut paren_levels_index12 = 0;\n    let mut paren_levels_index13 = 0;\n\
    \    let mut paren_levels_index14 = 0;\n    let mut paren_levels_index15 = 0;\n\
    \    let mut paren_levels_index16 = 0;\n    let mut paren_levels_index17 = 0;\n\
    \    let mut paren_levels_index18 = 0;\n    let mut paren_levels_index19 = 0;\n\
    \    let mut paren_levels_index20 = 0;\n    let mut paren_levels_index21 = 0;\n\
    \    let mut paren_levels_index22 = 0;\n    let mut paren_levels_index23 = 0;\n\
    \    let mut paren_levels_index24 = 0;\n    let mut paren_levels_index25 = 0;\n\
    \    let mut paren_levels_index26 = 0;\n    let mut paren_levels_index27 = 0;\n\
    \    let mut paren_levels_index28 = 0;\n    let mut paren_levels_index29 = 0;\n\
    \    let mut paren_levels_index30 = 0;\n    let mut paren_levels_index31 = 0;\n\
    \    let mut paren_levels_index32 = 0;\n    let mut paren_levels_index33 = 0;\n\
    \    let mut paren_levels_index34 = 0;\n    let mut paren_levels_index35 = 0;\n\
    \    let mut paren_levels_index36 = 0;\n    let mut paren_levels_index37 = 0;\n\
    \    let mut paren_levels_index38 = 0;\n    let mut paren_levels_index39 = 0;\n\
    \    let mut paren_levels_index40 = 0;\n    let mut paren_levels_index41 = 0;\n\
    \    let mut paren_levels_index42 = 0;\n    let mut paren_levels_index43 = 0;\n\
    \    let mut paren_levels_index44 = 0;\n    let mut paren\n}\n\nfn main() {\n\
    \    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpuq2tph21.rs:52:18\n   |\n\
    52 |     let mut paren\n   |                  ^ help: add `;` here\n53 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpuq2tph21.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsl7kl8my.rs:36:18\n   |\n\
    36 |     let mut paren\n   |                  ^ help: add `;` here\n37 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpsl7kl8my.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpeypmw6p1.rs:35:52\n   |\n\
    35 |     let mut paren_levels_stack_bottom = paren_level\n   |               \
    \                                     ^ help: add `;` here\n36 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpeypmw6p1.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels = Vec::new();\n\
    \    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr = Vec::new();\n    let mut paren_levels_ptr_end\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_end_ptr_end = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end = Vec::new();\n\
    \    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_end_ptr_end_ptr_end_ptr_end = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmppbzz8clg.rs:26:74\n   |\n\
    26 |     let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_\n\
    \   |                                                                        \
    \  ^ help: add `;` here\n27 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmppbzz8clg.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels = Vec::new();\n\
    \    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_size\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.as_mut_ptr();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(\n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmpuipdzlvs.rs:26:1\n   |\n26 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmpuipdzlvs.rs:25:71\n   |\n4  | fn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n   |                                                      \
    \      - closing delimiter possibly meant for this\n...\n25 |     let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack_ptr.offset(\n   |                                     \
    \                                  ^ unclosed delimiter\n26 | }\n   | ^ mismatched\
    \ closing delimiter\n\nwarning: type annotations needed\n  --> /tmp/tmpuipdzlvs.rs:10:65\n\
    \   |\n10 |     let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \   |                                                                 ^^^^^^\n\
    \   |\n   = note: `#[warn(tyvar_behind_raw_pointer)]` on by default\n   = warning:\
    \ this is accepted in the current edition (Rust 2015) but is a hard error in Rust\
    \ 2018!\n   = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpuipdzlvs.rs:10:72\n   |\n10 |\
    \     let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n\
    \   |                                                                        ^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack_ptr.offset(paren_levels_stack_size.try_into().unwrap());\n\
    \   |                                                                        \
    \                       ++++++++++++++++++++\n\nwarning: type annotations needed\n\
    \  --> /tmp/tmpuipdzlvs.rs:11:65\n   |\n11 |     let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack_ptr.offset(paren_levels_stack_size);\n   |            \
    \                                                  "
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_start = paren_string.len();\n\
    \    let mut paren_level_end = paren_level_start;\n    let mut paren_level_end_pos\
    \ = 0;\n    let mut paren_level_end_pos = paren_level_start;\n    let mut paren_level_end_pos\
    \ = paren_level_start;\n    let mut paren_level_end_pos = paren_level_start;\n\
    \    let mut paren_level_end_pos = paren_level_start;\n    let mut paren_level_end_pos\
    \ = paren_level_start;\n    let mut paren_level_end_pos = paren_level_start;\n\
    \    let mut paren_level_end_pos = paren_level_start;\n    let mut paren_level_end_pos\
    \ = paren_level_start;\n    let mut paren_level_end_pos = paren_level_start;\n\
    \    let mut paren_level_end_pos = paren_level_start;\n    let mut paren_level_end_pos\
    \ = paren_level_start;\n    let mut paren_level_end_pos = paren_level_start;\n\
    \    let mut paren_level_end_pos = paren_level_start;\n    let mut paren_level_end_pos\
    \ = paren_level_start;\n    let mut paren_level_end_pos = paren_level_start;\n\
    \    let mut paren_level_end_pos = paren_level_start;\n    let mut paren_level_end_pos\
    \ = paren_level_start;\n    let mut paren_level_end_pos = paren_level_start;\n\
    \    let mut paren_level_end_pos = paren_level_start;\n    let mut paren_level_end_pos\
    \ = paren_level_start;\n    let mut paren_level_end_pos = paren_level_start;\n\
    \    let mut paren_level_end_pos = paren_level_start;\n    let mut paren_level_end_pos\
    \ = paren_level_start;\n    let mut paren_level_end_pos = paren_level_start;\n\
    \    let mut paren_level_end_pos = paren_level_start;\n    let mut paren_level_end_pos\
    \ = paren_level_start;\n    let mut paren_level_end_pos = paren_level_start;\n\
    \    let mut paren_level_end_pos = paren_level_start;\n    let mut paren_level_end_pos\
    \ = paren_level_start;\n    let mut paren_level_end_pos = paren_level_start;\n\
    \    let mut paren_level_end_pos = paren_level_start;\n    let mut paren_level_end_pos\
    \ = paren_level_start;\n    let mut paren_level_end_pos = paren_level_start;\n\
    \    let mut paren_level_end_pos = paren_level_start;\n    let mut paren_level_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgdizwdk7.rs:45:25\n   |\n\
    45 |     let mut paren_level_\n   |                         ^ help: add `;` here\n\
    46 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpgdizwdk7.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = &mut paren_levels_stack;\n    let mut paren_levels_stack_ptr_end = &mut paren_levels_stack;\n\
    \    let mut paren_levels_stack_ptr_end_ptr = &mut paren_levels_stack_ptr;\n \
    \   let mut paren_levels_stack_ptr_end_ptr_end = &mut paren_levels_stack_ptr_end;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr = &mut paren_levels_stack_ptr_end_ptr;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end = &mut paren_levels_stack_ptr_end_ptr_end;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr = &mut paren_levels_stack_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end = &mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr = &mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr = &mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end = &mut\
    \ paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = &mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n    let\
    \ mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end = &mut\
    \ paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n    let mut\
    \ paren_levels_stack_ptr_end_ptr_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp157liu6x.rs:21:44\n   |\n\
    21 |     let mut paren_levels_stack_ptr_end_ptr_\n   |                       \
    \                     ^ help: add `;` here\n22 | }\n   | - unexpected token\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmp157liu6x.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_start = paren_string.find('(');\n\
    \    let mut paren_level_end = paren_string.find(')');\n    while paren_level_start\
    \ != paren_level_end {\n        paren_levels.push(paren_level);\n        paren_level_count\
    \ = paren_level_count;\n        paren_level_start = paren_string.find('(', paren_level_start\
    \ + 1);\n        paren_level_end = paren_string.find(')', paren_level_start +\
    \ 1);\n        paren_level += 1;\n    }\n    paren_levels.push(paren_level);\n\
    \    paren_level_count\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `{integer}` to `Option<usize>`\n  --> /tmp/tmpz57zcjkt.rs:13:70\n\
    \   |\n13 |         paren_level_start = paren_string.find('(', paren_level_start\
    \ + 1);\n   |                                                    -----------------\
    \ ^ - {integer}\n   |                                                    |\n \
    \  |                                                    Option<usize>\n\nerror[E0061]:\
    \ this function takes 1 argument but 2 arguments were supplied\n    --> /tmp/tmpz57zcjkt.rs:13:42\n\
    \     |\n13   |         paren_level_start = paren_string.find('(', paren_level_start\
    \ + 1);\n     |                                          ^^^^ ---  ---------------------\
    \ supplied 2 arguments\n     |                                          |\n  \
    \   |                                          expected 1 argument\n     |\nnote:\
    \ associated function defined here\n\nerror[E0369]: cannot add `{integer}` to\
    \ `Option<usize>`\n  --> /tmp/tmpz57zcjkt.rs:14:68\n   |\n14 |         paren_level_end\
    \ = paren_string.find(')', paren_level_start + 1);\n   |                     \
    \                             ----------------- ^ - {integer}\n   |          \
    \                                        |\n   |                             \
    \                     Option<usize>\n\nerror[E0061]: this function takes 1 argument\
    \ but 2 arguments were supplied\n    --> /tmp/tmpz57zcjkt.rs:14:40\n     |\n14\
    \   |         paren_level_end = paren_string.find(')', paren_level_start + 1);\n\
    \     |                                        ^^^^ ---  ---------------------\
    \ supplied 2 arguments\n     |                                        |\n    \
    \ |                                        expected 1 argument\n     |\nnote:\
    \ associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz57zcjkt.rs:18:5\n\
    \   |\n4  | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n   |\
    \                                                 ---------- expected `Vec<isize>`\
    \ because of return type\n...\n18 |     paren_level_count\n   |     ^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found integer\n   |\n   = note: exp"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting = 0;\n\
    \    let mut paren_nesting_level = 0;\n    let mut paren_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpi1elaq8z.rs:36:35\n   |\n\
    36 |     let mut paren_nesting_nesting_\n   |                                \
    \   ^ help: add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpi1elaq8z.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_char = 0;\n    let mut paren_level_char_pos =\
    \ 0;\n    let mut paren_level_char_pos_count = 0;\n    let mut paren_level_char_pos_char\
    \ = 0;\n    let mut paren_level_char_pos_char_pos = 0;\n    let mut paren_level_char_pos_char_pos_count\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char = 0;\n    let mut paren_level_char_pos_char_pos_char_pos\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_count = 0;\n    let\
    \ mut paren_level_char_pos_char_pos_char_pos_char = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_count = 0;\n\
    \    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char = 0;\n    let\
    \ mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos = 0;\n    let mut\
    \ paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_count = 0;\n    let\
    \ mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_char = 0;\n   \
    \ let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos =\
    \ 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_count\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_count\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_count\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_count\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char_pos_char\
    \ = 0;\n    let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_char_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpi3rjuylp.rs:34:75\n   |\n\
    34 |     let mut paren_level_char_pos_char_pos_char_pos_char_pos_char_pos_char_\n\
    \   |                                                                        \
    \   ^ help: add `;` here\n35 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpi3rjuylp.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsdfxszgj.rs:38:51\n   |\n\
    38 |     let mut paren_nesting_nesting_nesting_nesting_\n   |                \
    \                                   ^ help: add `;` here\n39 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpsdfxszgj.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = Vec::new();\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_string.len();\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_string.len();\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_string.len();\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_string.len();\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_string.len();\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_string.len();\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_string.len();\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_string.len();\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_string.len();\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_string.len();\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_string.len();\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_string.len();\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_string.len();\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_string.len();\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_string.len();\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_string.len();\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_string.len();\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_string.len();\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpe83_a9ll.rs:48:30\n   |\n\
    48 |     let mut paren_level_char_\n   |                              ^ help:\
    \ add `;` here\n49 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpe83_a9ll.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_iter = paren_string.char_indices();\n    let\
    \ mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let \n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpfs1wuxzn.rs:37:1\n  \
    \ |\n37 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n  \
    \  assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpdbxjl4na.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpdbxjl4na.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    while paren_level_count <\
    \ MAX_NESTING {\n        let mut paren_level_string = paren_string;\n        let\
    \ mut paren_level_string = paren_string;\n        let mut paren_level_string =\
    \ paren_string;\n        let mut paren_level_string = paren_string;\n        let\
    \ mut paren_level_string = paren_string;\n        let mut paren_level_string =\
    \ paren_string;\n        let mut paren_level_string = paren_string;\n        let\
    \ mut paren_level_string = paren_string;\n        let mut paren_level_string =\
    \ paren_string;\n        let mut paren_level_string = paren_string;\n        let\
    \ mut paren_level_string = paren_string;\n        let mut paren_level_string =\
    \ paren_string;\n        let mut paren_level_string = paren_string;\n        let\
    \ mut paren_level_string = paren_string;\n        let mut paren_level_string =\
    \ paren_string;\n        let mut paren_level_string = paren_string;\n        let\
    \ mut paren_level_string = paren_string;\n        let mut paren_level_string =\
    \ paren_string;\n        let mut paren_level_string = paren_string;\n        let\
    \ mut paren_level_string = paren_string;\n        let mut paren_level_string =\
    \ paren_string;\n        let mut paren_level_string = paren_string;\n        let\
    \ mut paren_level_string = paren_string;\n        let mut paren_level_string =\
    \ paren_string;\n        let mut paren_level_string = paren_string;\n        let\
    \ mut paren_level_string = paren_string;\n        let mut paren_level_string =\
    \ paren_string;\n        let mut paren_level_string = paren_string;\n        let\
    \ mut paren_level_string = paren_string;\n        let mut paren_level_string =\
    \ paren_string;\n        let mut paren_level_string = paren_string;\n        let\
    \ mut paren_level_string = paren_string;\n        let mut paren_level_string =\
    \ paren_string;\n        let mut paren_level_string = paren_string;\n        let\
    \ mut paren_level_string = paren_string;\n        let mut paren_level_string =\
    \ paren_string;\n        let mut paren_level_string = paren_string;\n        let\
    \ mut \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp615qe6h7.rs:56:3\n\
    \   |\n4  | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n10 |     while paren_level_count < MAX_NESTING {\n   |                  \
    \                         - this delimiter might not be properly closed...\n...\n\
    49 | }\n   | - ...as it matches this but it has different indentation\n...\n56\
    \ | }\n   |   ^\n\nerror: expected identifier, found `}`\n  --> /tmp/tmp615qe6h7.rs:49:1\n\
    \   |\n49 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `MAX_NESTING`\
    \ in this scope\n  --> /tmp/tmp615qe6h7.rs:10:31\n   |\n10 |     while paren_level_count\
    \ < MAX_NESTING {\n   |                               ^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp615qe6h7.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp23u0z2tx.rs:35:52\n   |\n\
    35 |     let mut paren_levels_stack_bottom = paren_level\n   |               \
    \                                     ^ help: add `;` here\n36 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp23u0z2tx.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n \
    \   let mut paren_levels_stack_ptr_end_ptr = paren_levels_stack_ptr_end;\n   \
    \ let mut paren_levels_stack_ptr_end_ptr_end = paren_levels_stack_ptr_end_ptr;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr = paren_levels_stack_ptr_end_ptr_end;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end = paren_levels_stack_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr =\
    \ paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n    let\
    \ mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr =\
    \ paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n  \
    \  let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_\n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpt9e_e0x8.rs:21:72\n   |\n\
    21 |     let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_\n\
    \   |                                                                        ^\
    \ help: add `;` here\n22 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr` in this scope\n\
    \  --> /tmp/tmpt9e_e0x8.rs:14:62\n   |\n14 |     let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr;\n   |                    \
    \                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_end_ptr_end_ptr_end`\n\
    \nerror[E0425]: cannot find value `paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end`\
    \ in this scope\n  --> /tmp/tmpt9e_e0x8.rs:15:66\n   |\n15 |     let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end;\n   |                \
    \                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr`\n\
    \nerror[E0425]: cannot find value `paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr`\
    \ in this scope\n  --> /tmp/tmpt9e_e0x8.rs:16:70\n   |\n16 |     let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n   |            \
    \                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end`\n\
    \nerror[E0425]: cannot find value `paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end`\
    \ in this scope\n  --> /tmp/tmpt9e_e0x8.rs:17:74\n   |\n17 |     let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n   |        \
    \                                        "
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_pos = 0;\n    let\
    \ mut paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_max_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_pos = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_len = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_max_pos = paren_levels_stack.len();\n    let mut paren_levels_stack_max_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_pos = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_len = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_max_pos = paren_levels_stack.len();\n    let mut paren_levels_stack_max_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_pos = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_len = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_max_pos = paren_levels_stack.len();\n    let mut paren_levels_stack_max_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_pos = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_len = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_max_pos = paren_levels_stack.len();\n    let mut paren_levels_stack_max_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_pos = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_len = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_max_pos = paren_levels_stack.len();\n    let mut paren_levels_stack_max_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_pos = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_len = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_max_pos = paren_levels_stack.len();\n    let \n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp_tdzxfjl.rs:36:1\n  \
    \ |\n36 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr = Vec::new();\n    let mut paren_levels_ptr_next\
    \ = Vec::new();\n    let mut paren_levels_ptr_next_ptr = Vec::new();\n    let\
    \ mut paren_levels_ptr_next_ptr_next = Vec::new();\n    let mut paren_levels_ptr_next_ptr_next_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_next_ptr_next_ptr_next = Vec::new();\n\
    \    let mut paren_levels_ptr_next_ptr_next_ptr_next_ptr = Vec::new();\n    let\
    \ mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next = Vec::new();\n    let\
    \ mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr = Vec::new();\n   \
    \ let mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next = Vec::new();\n\
    \    let mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr = Vec::new();\n\
    \    let mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next\
    \ = Vec::new();\n    let mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr\
    \ = Vec::new();\n    let mut paren_level\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgelawkp9.rs:26:24\n   |\n\
    26 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    27 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpgelawkp9.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp23u0z2tx.rs:35:52\n   |\n\
    35 |     let mut paren_levels_stack_bottom = paren_level\n   |               \
    \                                     ^ help: add `;` here\n36 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp23u0z2tx.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels = Vec::new();\n\
    \    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_size\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpmd9mklmo.rs:28:19\n   |\n\
    28 |     let mut paren_\n   |                   ^ help: add `;` here\n29 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpmd9mklmo.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting = 0;\n\
    \    let mut paren_nesting_level = 0;\n    let mut paren_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_\n}\n\
    \nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpim93rpdc.rs:37:19\n   |\n\
    37 |     let mut paren_\n   |                   ^ help: add `;` here\n38 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpim93rpdc.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string_index = 0;\n    let mut paren_level_string_len\
    \ = 0;\n    while paren_level_string_index < paren_string.len() {\n        let\
    \ mut paren_level_string = paren_string;\n        let mut paren_level_string_len\
    \ = 0;\n        while paren_level_string_len < paren_level_string.len() {\n  \
    \          let mut paren_level_string = paren_string;\n            let mut paren_level_string_len\
    \ = 0;\n            while paren_level_string_len < paren_level_string.len() {\n\
    \                let mut paren_level_string = paren_string;\n                let\
    \ mut paren_level_string_len = 0;\n                while paren_level_string_len\
    \ < paren_level_string.len() {\n                    let mut paren_level_string\
    \ = paren_string;\n                    let mut paren_level_string_len = 0;\n \
    \                   while paren_level_string_len < paren_level_string.len() {\n\
    \                        let mut paren_level_string = paren_string;\n        \
    \                let mut paren_level_string_len = 0;\n                       \
    \ while paren_level_string_len < paren_level_string.len() {\n                \
    \            let mut paren_level_string = paren_string;\n                    \
    \        let mut paren_level_string_len = 0;\n                            while\
    \ paren_level_string_len < paren_level_string.len() {\n                      \
    \          let mut paren_level_string = paren_string;\n                      \
    \          let mut paren_level_string_len = 0;\n                             \
    \   while paren_level_string_len < paren_level_string.len() {\n              \
    \                      let mut paren_level_string = paren_string;\n          \
    \                          let mut paren_level_string_len = 0;\n             \
    \                       while paren_level_string_len < paren_level_string.len()\
    \ {\n                                        let mut paren_level_string = paren_string;\n\
    \                                        let mut paren_level_string_len = 0;\n\
    \                                        while paren_level_string_len < paren_level_string.len()\
    \ {\n                                            let mut paren_level_string =\
    \ paren_string;\n                                            let mut paren_level_string_len\
    \ = 0;\n                                            while paren_level_string_len\
    \ < paren_level_string.len() {\n                                             \
    \   let mut paren_level_string = paren_string;\n                             \
    \                   let mut paren_level_string_len = 0;\n                    \
    \                            while paren_level_string_len < paren_level_string.len()\
    \ {\n                                                    let mut paren\n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpozymbqsl.rs:53:3\n\
    \   |\n4  | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n11 |     while paren_level_string_index < paren_string.len() {\n   |    \
    \                                                     - unclosed delimiter\n...\n\
    14 |         while paren_level_string_len < paren_level_string.len() {\n   | \
    \                                                                - unclosed delimiter\n\
    ...\n17 |             while paren_level_string_len < paren_level_string.len()\
    \ {\n   |                                                                    \
    \ - unclosed delimiter\n...\n20 |                 while paren_level_string_len\
    \ < paren_level_string.len() {\n   |                                         \
    \                                - unclosed delimiter\n...\n23 |             \
    \        while paren_level_string_len < paren_level_string.len() {\n   |     \
    \                                                                        - unclosed\
    \ delimiter\n...\n26 |                         while paren_level_string_len <\
    \ paren_level_string.len() {\n   |                                           \
    \                                      - unclosed delimiter\n...\n29 |       \
    \                      while paren_level_string_len < paren_level_string.len()\
    \ {\n   |                                                                    \
    \                 - unclosed delimiter\n...\n32 |                            \
    \     while paren_level_string_len < paren_level_string.len() {\n   |        \
    \                                                                            \
    \     - unclosed delimiter\n...\n35 |                                     while\
    \ paren_level_string_len < paren_level_string.len() {\n   |                  \
    \                                                                           -\
    \ unclosed delimiter\n...\n38 |                                         while\
    \ paren_level_string_len < paren_level_string.len() {\n   |         "
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mu\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpbcfxwob7.rs:36:11\n   |\n\
    36 |     let mu\n   |           ^ help: add `;` here\n37 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpbcfxwob7.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_char = 0;\n\
    \    let mut paren_level_char_next = 0;\n    let mut paren_level_char_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next = 0;\n    let mut paren_level_char_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next = 0;\n    let mut\
    \ paren_level_char_next_next_next_next_next_next = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next =\
    \ 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpxm0gdn0v.rs:33:95\n   |\n\
    33 |     let mut paren_level_char_next_next_next_next_next_next_next_next_next_next_next_next_next_\n\
    \   |                                                                        \
    \                       ^ help: add `;` here\n34 | }\n   | - unexpected token\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpxm0gdn0v.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_ptr = paren_levels_stack_len;\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpmtfiy8fx.rs:35:51\n   |\n\
    35 |     let mut paren_levels_stack_top = paren_levels_\n   |                \
    \                                   ^ help: add `;` here\n36 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `paren_levels_` in this scope\n  -->\
    \ /tmp/tmpmtfiy8fx.rs:35:38\n   |\n35 |     let mut paren_levels_stack_top = paren_levels_\n\
    \   |                                      ^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `paren_levels`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpmtfiy8fx.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_start = paren_string.chars().nth(0).unwrap();\n\
    \    let mut paren_level_end = paren_string.chars().nth(1).unwrap();\n    let\
    \ mut paren_level_end = paren_level_end.chars().nth(1).unwrap();\n    let mut\
    \ paren_level_end = paren_level_end.chars().nth(1).unwrap();\n    let mut paren_level_end\
    \ = paren_level_end.chars().nth(1).unwrap();\n    let mut paren_level_end = paren_level_end.chars().nth(1).unwrap();\n\
    \    let mut paren_level_end = paren_level_end.chars().nth(1).unwrap();\n    let\
    \ mut paren_level_end = paren_level_end.chars().nth(1).unwrap();\n    let mut\
    \ paren_level_end = paren_level_end.chars().nth(1).unwrap();\n    let mut paren_level_end\
    \ = paren_level_end.chars().nth(1).unwrap();\n    let mut paren_level_end = paren_level_end.chars().nth(1).unwrap();\n\
    \    let mut paren_level_end = paren_level_end.chars().nth(1).unwrap();\n    let\
    \ mut paren_level_end = paren_level_end.chars().nth(1).unwrap();\n    let mut\
    \ paren_level_end = paren_level_end.chars().nth(1).unwrap();\n    let mut paren_level_end\
    \ = paren_level_end.chars().nth(1).unwrap();\n    let mut paren_level_end = paren_level_end.chars().nth(1).unwrap();\n\
    \    let mut paren_level_end = paren_level_end.chars().nth(1).unwrap();\n    let\
    \ mut paren_level_end = paren_level_end.chars().nth(1).unwrap();\n    let mut\
    \ paren_level_end = paren_level_end.chars().nth(1).unwrap();\n    let mut paren_level_end\
    \ = paren_level_end.chars().nth(1).unwrap();\n    let mut paren_level_end = paren_level_end.chars().nth(1).unwrap();\n\
    \    let mut paren_level_end = paren_level_end.chars().nth(1).unwrap();\n    let\
    \ mut paren_level_end = paren_level_end.chars().nth(1).unwrap();\n    let mut\
    \ paren_level_end = paren_level_end.chars().nth(1).unwrap();\n    let mut paren_level_end\
    \ = paren_level_end.chars().nth(1).unwrap();\n    let mut paren_level_end = paren_level_end.\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpwli3exsa.rs:34:1\n   |\n34\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpwli3exsa.rs:33:47\n\
    \   |\n33 |     let mut paren_level_end = paren_level_end.\n   |             \
    \                                  ^ help: add `;` here\n34 | }\n   | - unexpected\
    \ token\n\nerror[E0599]: no method named `chars` found for type `char` in the\
    \ current scope\n  --> /tmp/tmpwli3exsa.rs:10:47\n   |\n10 |     let mut paren_level_end\
    \ = paren_level_end.chars().nth(1).unwrap();\n   |                           \
    \                    ^^^^^ method not found in `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpwli3exsa.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n  \
    \  assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpdbxjl4na.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpdbxjl4na.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpwxeoj1eo.rs:35:59\n   |\n\
    35 |     let mut paren_levels_stack_bottom = paren_levels_stack\n   |        \
    \                                                   ^ help: add `;` here\n36 |\
    \ }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpwxeoj1eo.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsdfxszgj.rs:38:51\n   |\n\
    38 |     let mut paren_nesting_nesting_nesting_nesting_\n   |                \
    \                                   ^ help: add `;` here\n39 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpsdfxszgj.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpq3np02ep.rs:36:1\n   |\n36\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpq3np02ep.rs:35:60\n\
    \   |\n35 |     let mut paren_levels_stack_bottom = paren_levels_stack.\n   |\
    \                                                            ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpq3np02ep.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_len = paren_string.len();\n    let mut paren_levels_index\
    \ = 0;\n    let mut paren_levels_index2 = 0;\n    let mut paren_levels_index3\
    \ = 0;\n    let mut paren_levels_index4 = 0;\n    let mut paren_levels_index5\
    \ = 0;\n    let mut paren_levels_index6 = 0;\n    let mut paren_levels_index7\
    \ = 0;\n    let mut paren_levels_index8 = 0;\n    let mut paren_levels_index9\
    \ = 0;\n    let mut paren_levels_index10 = 0;\n    let mut paren_levels_index11\
    \ = 0;\n    let mut paren_levels_index12 = 0;\n    let mut paren_levels_index13\
    \ = 0;\n    let mut paren_levels_index14 = 0;\n    let mut paren_levels_index15\
    \ = 0;\n    let mut paren_levels_index16 = 0;\n    let mut paren_levels_index17\
    \ = 0;\n    let mut paren_levels_index18 = 0;\n    let mut paren_levels_index19\
    \ = 0;\n    let mut paren_levels_index20 = 0;\n    let mut paren_levels_index21\
    \ = 0;\n    let mut paren_levels_index22 = 0;\n    let mut paren_levels_index23\
    \ = 0;\n    let mut paren_levels_index24 = 0;\n    let mut paren_levels_index25\
    \ = 0;\n    let mut paren_levels_index26 = 0;\n    let mut paren_levels_index27\
    \ = 0;\n    let mut paren_levels_index28 = 0;\n    let mut paren_levels_index29\
    \ = 0;\n    let mut paren_levels_index30 = 0;\n    let mut paren_levels_index31\
    \ = 0;\n    let mut paren_levels_index32 = 0;\n    let mut paren_levels_index33\
    \ = 0;\n    let mut paren_levels_index34 = 0;\n    let mut paren_levels_index35\
    \ = 0;\n    let mut paren_levels_index36 = 0;\n    let mut paren_levels_index37\
    \ = 0;\n    let mut paren_levels_index38 = 0;\n    let mut paren_levels_index39\
    \ = 0;\n    let mut paren_levels_index40 = 0;\n    let mut paren_levels_index41\
    \ = 0;\n    let mut paren_levels_index42 = 0;\n    let mut paren_levels_index43\
    \ = 0;\n    let mut paren_levels_index44 = 0;\n\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe8h3mqg7.rs:4:49\n  |\n4 |\
    \ fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsdfxszgj.rs:38:51\n   |\n\
    38 |     let mut paren_nesting_nesting_nesting_nesting_\n   |                \
    \                                   ^ help: add `;` here\n39 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpsdfxszgj.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_indexes: Vec<isize>\
    \ = Vec::new();\n    let mut paren_level_indexes_len = 0;\n    let mut paren_level_indexes_len_index\
    \ = 0;\n    let mut paren_level_indexes_len_indexes = 0;\n    let mut paren_level_indexes_len_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_index = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_index\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp2zlhlfp6.rs:40:42\n   |\n\
    40 |     let mut paren_level_indexes_len_index\n   |                         \
    \                 ^ help: add `;` here\n41 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp2zlhlfp6.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string.clone();\n    let mut paren_level_string\
    \ = paren_string.clone();\n    let mut paren_level_string = paren_string.clone();\n\
    \    let mut paren_level_string = paren_string.clone();\n    let mut paren_level_string\
    \ = paren_string.clone();\n    let mut paren_level_string = paren_string.clone();\n\
    \    let mut paren_level_string = paren_string.clone();\n    let mut paren_level_string\
    \ = paren_string.clone();\n    let mut paren_level_string = paren_string.clone();\n\
    \    let mut paren_level_string = paren_string.clone();\n    let mut paren_level_string\
    \ = paren_string.clone();\n    let mut paren_level_string = paren_string.clone();\n\
    \    let mut paren_level_string = paren_string.clone();\n    let mut paren_level_string\
    \ = paren_string.clone();\n    let mut paren_level_string = paren_string.clone();\n\
    \    let mut paren_level_string = paren_string.clone();\n    let mut paren_level_string\
    \ = paren_string.clone();\n    let mut paren_level_string = paren_string.clone();\n\
    \    let mut paren_level_string = paren_string.clone();\n    let mut paren_level_string\
    \ = paren_string.clone();\n    let mut paren_level_string = paren_string.clone();\n\
    \    let mut paren_level_string = paren_string.clone();\n    let mut paren_level_string\
    \ = paren_string.clone();\n    let mut paren_level_string = paren_string.clone();\n\
    \    let mut paren_level_string = paren_string.clone();\n    let mut paren_level_string\
    \ = paren_string.clone();\n    let mut paren_level_string = paren_string.clone();\n\
    \    let mut paren_level_string = paren_string.clone();\n    let mut paren_level_string\
    \ = paren_string.clone();\n    let mut paren_level_string = paren_string.clone();\n\
    \    let mut paren_level_string = paren_string.clone();\n    let mut paren_level_string\
    \ = paren_string.clone();\n    let mut paren_level_string = paren_string.clone();\n\
    \    let mut paren_level_string = paren_string.clone();\n    let mut paren_level_string\
    \ = paren_string.clone();\n    let mut paren_level_string = paren_string.clone();\n\
    \    let mut \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n  \
    \  assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpwfvi4iy2.rs:46:1\n\
    \   |\n46 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = Vec::new();\n    let mut paren_level_char:\
    \ char;\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_string.len();\n    let mut paren_level_char_len = paren_level_char_len.saturating_sub(1);\n\
    \    while paren_level_char_pos < paren_level_char_len {\n        paren_level_char\
    \ = paren_string[paren_level_char_pos];\n        if paren_level_char == '(' {\n\
    \            paren_level_char_count++;\n            paren_level_chars.push(paren_level_char);\n\
    \            paren_level_count = paren_level_count + 1;\n            paren_levels.push(paren_level_count);\n\
    \            paren_level_char_pos = paren_level_char_pos + 1;\n        } else\
    \ if paren_level_char == ')' {\n            paren_level_char_count--;\n      \
    \      if paren_level_char_count == 0 {\n                paren_level_chars.pop();\n\
    \                paren_levels.pop();\n                paren_level_char_pos = paren_level_char_pos\
    \ - 1;\n            }\n        }\n        paren_level_char_pos = paren_level_char_pos\
    \ + 1;\n    }\n    paren_levels\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpdq6f8kfj.rs:17:35\n\
    \   |\n17 |             paren_level_char_count++;\n   |                      \
    \             ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n\
    \   |\n17 |             { let tmp = paren_level_char_count; paren_level_char_count\
    \ += 1; tmp };\n   |             +++++++++++                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    17 -             paren_level_char_count++;\n17 +             paren_level_char_count\
    \ += 1;\n   | \n\nerror: expected expression, found `;`\n  --> /tmp/tmpdq6f8kfj.rs:23:37\n\
    \   |\n23 |             paren_level_char_count--;\n   |                      \
    \               ^ expected expression\n\nerror[E0277]: the type `String` cannot\
    \ be indexed by `usize`\n  --> /tmp/tmpdq6f8kfj.rs:15:28\n   |\n15 |         paren_level_char\
    \ = paren_string[paren_level_char_pos];\n   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpi5f8k1j7.rs:36:32\n   |\n\
    36 |     let mut paren_levels_stack_\n   |                                ^ help:\
    \ add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpi5f8k1j7.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_2akhuc1.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_2akhuc1.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let \n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp_jubc061.rs:53:1\n  \
    \ |\n53 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 101
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    for paren in paren_string.chars()\
    \ {\n        if paren == '(' {\n            paren_level += 1;\n            paren_nesting\
    \ += 1;\n        } else if paren == ')' {\n            paren_level -= 1;\n   \
    \         paren_nesting -= 1;\n            if paren_level == 0 {\n           \
    \     paren_levels.push(paren_nesting);\n            }\n        }\n    }\n   \
    \ paren_levels\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n \
    \   assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0]`,\n right: `[2, 3, 1, 3]`', /tmp/tmp1vhgfu74.rs:25:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n \
    \   let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = \n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp4hz49o0f.rs:34:1\n\
    \   |\n34 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n \
    \   let mut paren_levels_stack_ptr_start = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_start\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_start = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_start\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_start = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_start\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_start = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_start\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_start = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_start\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_start = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_start\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end = \n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp63rtjwod.rs:34:1\n\
    \   |\n34 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_chars_index = 0;\n    let mut paren_level_chars_index2\
    \ = 0;\n    let mut paren_level_chars_index3 = 0;\n    let mut paren_level_chars_index4\
    \ = 0;\n    let mut paren_level_chars_index5 = 0;\n    let mut paren_level_chars_index6\
    \ = 0;\n    let mut paren_level_chars_index7 = 0;\n    let mut paren_level_chars_index8\
    \ = 0;\n    let mut paren_level_chars_index9 = 0;\n    let mut paren_level_chars_index10\
    \ = 0;\n    let mut paren_level_chars_index11 = 0;\n    let mut paren_level_chars_index12\
    \ = 0;\n    let mut paren_level_chars_index13 = 0;\n    let mut paren_level_chars_index14\
    \ = 0;\n    let mut paren_level_chars_index15 = 0;\n    let mut paren_level_chars_index16\
    \ = 0;\n    let mut paren_level_chars_index17 = 0;\n    let mut paren_level_chars_index18\
    \ = 0;\n    let mut paren_level_chars_index19 = 0;\n    let mut paren_level_chars_index20\
    \ = 0;\n    let mut paren_level_chars_index21 = 0;\n    let mut paren_level_chars_index22\
    \ = 0;\n    let mut paren_level_chars_index23 = 0;\n    let mut paren_level_chars_index24\
    \ = 0;\n    let mut paren_level_chars_index25 = 0;\n    let mut paren_level_chars_index26\
    \ = 0;\n    let mut paren_level_chars_index27 = 0;\n    let mut paren_level_chars_index28\
    \ = 0;\n    let mut paren_level_chars_index29 = 0;\n    let mut paren_level_chars_index30\
    \ = 0;\n    let mut paren_level_chars_index31 = 0;\n    let mut paren_level_chars_index32\
    \ = 0;\n    let mut paren_level_chars_index33 = 0;\n    let mut paren_level_chars_index34\
    \ = 0;\n    let mut paren_level_chars_index35 = 0;\n    let mut paren_level_chars_index36\
    \ = 0;\n    let mut paren_level_chars_index37 = 0;\n    let mut paren_level_chars_index38\
    \ = 0;\n    let mut paren_level_chars_index39 = 0;\n    let mut paren_level_chars_index40\
    \ = 0;\n    let mut paren_level_chars_index41 = 1;\n    let mut paren_level_chars_index42\
    \ = 1;\n    let mut paren_level_chars_index43 = 1;\n    let mut \n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpygpxv861.rs:53:1\n\
    \   |\n53 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_char = 0;\n    let mut paren_level_chars = Vec::new();\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_char_length\
    \ = 0;\n    let mut paren_level_char_lengths = Vec::new();\n    let mut paren_level_char_length_index\
    \ = 0;\n    let mut paren_level_char_lengths_index = 0;\n    let mut paren_level_char_lengths_index2\
    \ = 0;\n    let mut paren_level_char_lengths_index3 = 0;\n    let mut paren_level_char_lengths_index4\
    \ = 0;\n    let mut paren_level_char_lengths_index5 = 0;\n    let mut paren_level_char_lengths_index6\
    \ = 0;\n    let mut paren_level_char_lengths_index7 = 0;\n    let mut paren_level_char_lengths_index8\
    \ = 0;\n    let mut paren_level_char_lengths_index9 = 0;\n    let mut paren_level_char_lengths_index10\
    \ = 0;\n    let mut paren_level_char_lengths_index11 = 0;\n    let mut paren_level_char_lengths_index12\
    \ = 0;\n    let mut paren_level_char_lengths_index13 = 0;\n    let mut paren_level_char_lengths_index14\
    \ = 0;\n    let mut paren_level_char_lengths_index15 = 0;\n    let mut paren_level_char_lengths_index16\
    \ = 0;\n    let mut paren_level_char_lengths_index17 = 0;\n    let mut paren_level_char_lengths_index18\
    \ = 0;\n    let mut paren_level_char_lengths_index19 = 0;\n    let mut paren_level_char_lengths_index20\
    \ = 0;\n    let mut paren_level_char_lengths_index21 = 0;\n    let mut paren_level_char_lengths_index22\
    \ = 0;\n    let mut paren_level_char_lengths_index23 = 0;\n    let mut paren_level_char_lengths_index24\
    \ = 0;\n    let mut paren_level_char_lengths_index25 = 0;\n    let mut paren_level_char_lengths_index26\
    \ = 0;\n    let mut paren_level_char_lengths_index27 = 0;\n    let mut paren_level_char_lengths_index28\
    \ = 0;\n    let mut paren_level_char_lengths_index29 = 0;\n    let mut paren_level_char_lengths_index30\
    \ = 0;\n    let mut paren_level_char_lengths_index31 = 0;\n    let mut paren_level_char_length\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpva270sl1.rs:46:36\n   |\n\
    46 |     let mut paren_level_char_length\n   |                               \
    \     ^ help: add `;` here\n47 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpva270sl1.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut \n}\n\nfn main() {\n    let\
    \ candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()())\
    \ ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmps2f4cb8l.rs:49:1\n\
    \   |\n49 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels = Vec::new();\n\
    \    let mut paren_levels_size = paren_levels.size();\n    let mut paren_levels_ptr\
    \ = paren_levels.as_mut_ptr();\n    let mut paren_levels_end = paren_levels_ptr.offset(paren_levels_size);\n\
    \    let mut paren_levels_ptr_end = paren_levels_end;\n    let mut paren_levels_ptr_end\
    \ = paren_levels_end;\n    let mut paren_levels_ptr_end = paren_levels_end;\n\
    \    let mut paren_levels_ptr_end = paren_levels_end;\n    let mut paren_levels_ptr_end\
    \ = paren_levels_end;\n    let mut paren_levels_ptr_end = paren_levels_end;\n\
    \    let mut paren_levels_ptr_end = paren_levels_end;\n    let mut paren_levels_ptr_end\
    \ = paren_levels_end;\n    let mut paren_levels_ptr_end = paren_levels_end;\n\
    \    let mut paren_levels_ptr_end = paren_levels_end;\n    let mut paren_levels_ptr_end\
    \ = paren_levels_end;\n    let mut paren_levels_ptr_end = paren_levels_end;\n\
    \    let mut paren_levels_ptr_end = paren_levels_end;\n    let mut paren_levels_ptr_end\
    \ = paren_levels_end;\n    let mut paren_levels_ptr_end = paren_levels_end;\n\
    \    let mut paren_levels_ptr_end = paren_levels_end;\n    let mut paren_levels_ptr_end\
    \ = paren_levels_end;\n    let mut paren_levels_ptr_end = paren_levels_end;\n\
    \    let mut paren_levels_ptr_end = paren_levels_end;\n    let mut paren_levels_ptr_end\
    \ = paren_levels_end;\n    let mut paren_levels_ptr_end = paren_levels_end;\n\
    \    let mut paren_levels_ptr_end = paren_levels_end;\n    let mut paren_levels_ptr_end\
    \ = paren_levels_end;\n    let mut paren_levels_ptr_end = paren_levels_end;\n\
    \    let mut paren_levels_ptr_end = paren_levels_end;\n    let mut paren_levels_ptr_end\
    \ = paren_levels_end;\n    let mut paren_levels_ptr_end = paren_levels_end;\n\
    \    let mut paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf7n6j_fj.rs:37:24\n   |\n\
    37 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `size` found\
    \ for struct `Vec<_>` in the current scope\n --> /tmp/tmpf7n6j_fj.rs:7:46\n  |\n\
    7 |     let mut paren_levels_size = paren_levels.size();\n  |                \
    \                              ^^^^ help: there is an associated function with\
    \ a similar name: `resize`\n\nwarning: type annotations needed\n --> /tmp/tmpf7n6j_fj.rs:9:49\n\
    \  |\n9 |     let mut paren_levels_end = paren_levels_ptr.offset(paren_levels_size);\n\
    \  |                                                 ^^^^^^\n  |\n  = note: `#[warn(tyvar_behind_raw_pointer)]`\
    \ on by default\n  = warning: this is accepted in the current edition (Rust 2015)\
    \ but is a hard error in Rust 2018!\n  = note: for more information, see issue\
    \ #46906 <https://github.com/rust-lang/rust/issues/46906>\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpf7n6j_fj.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 3 previous errors; 1 warning emitted\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsdfxszgj.rs:38:51\n   |\n\
    38 |     let mut paren_nesting_nesting_nesting_nesting_\n   |                \
    \                                   ^ help: add `;` here\n39 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpsdfxszgj.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n \
    \   let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = \n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp4hz49o0f.rs:34:1\n\
    \   |\n34 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpw1cyazze.rs:35:32\n   |\n\
    35 |     let mut paren_levels_stack_\n   |                                ^ help:\
    \ add `;` here\n36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpw1cyazze.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n \
    \   let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = \n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp4hz49o0f.rs:34:1\n\
    \   |\n34 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_2akhuc1.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_2akhuc1.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = 0;\n    let\
    \ mut paren_levels_stack_ptr_len = paren_levels_stack_ptr.len();\n    let mut\
    \ paren_levels_stack_ptr_pos = 0;\n    let mut paren_levels_stack_ptr_pos_len\
    \ = paren_levels_stack_ptr_pos.len();\n    let mut paren_levels_stack_ptr_pos_ptr\
    \ = paren_levels_stack_ptr_pos.as_ptr();\n    let mut paren_levels_stack_ptr_pos_ptr_len\
    \ = paren_levels_stack_ptr_pos_ptr.len();\n    let mut paren_levels_stack_ptr_pos_ptr_pos\
    \ = 0;\n    let mut paren_levels_stack_ptr_pos_ptr_pos_len = paren_levels_stack_ptr_pos_ptr_pos.len();\n\
    \    let mut paren_levels_stack_ptr_pos_ptr_pos_ptr = paren_levels_stack_ptr_pos_ptr_pos.as_ptr();\n\
    \    let mut paren_levels_stack_ptr_pos_ptr_pos_ptr_len = paren_levels_stack_ptr_pos_ptr_pos_ptr.len();\n\
    \    let mut paren_levels_stack_ptr_pos_ptr_pos_ptr_pos = 0;\n    let mut paren_levels_stack_ptr_pos_ptr_pos_ptr_pos_len\
    \ = paren_levels_stack_ptr_pos_ptr_pos_ptr_pos.len();\n    let mut paren_levels_stack_ptr_pos_ptr_pos_ptr_pos_ptr\
    \ = paren_levels_stack_ptr_pos_ptr_pos_ptr_pos_ptr.as_ptr();\n    let mut paren_levels_stack_ptr_pos_ptr_pos_ptr_pos_ptr_len\
    \ = paren_levels_stack_ptr_pos_ptr_pos_ptr_pos_ptr.len();\n    let mut paren_levels_stack_ptr_pos_ptr_pos_ptr_pos_ptr_pos\
    \ = 0;\n    let mut paren_levels_stack_ptr_pos_ptr_pos_ptr_pos_ptr_pos_len = paren_levels_stack_ptr_pos_ptr_pos_ptr_pos_ptr_pos.len();\n\
    \    let mut paren_levels_stack_ptr_pos_ptr_pos_ptr_pos_ptr_pos_ptr = paren_levels_stack_ptr_pos_ptr_pos_ptr_pos_ptr_pos_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpe0v2vnmj.rs:25:121\n   |\n\
    25 |     let mut paren_levels_stack_ptr_pos_ptr_pos_ptr_pos_ptr_pos_ptr = paren_levels_stack_ptr_pos_ptr_pos_ptr_pos_ptr_pos_\n\
    \   |                                                                        \
    \                                                 ^ help: add `;` here\n26 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `paren_levels_stack_ptr_pos_ptr_pos_ptr_pos_ptr`\
    \ in this scope\n  --> /tmp/tmpe0v2vnmj.rs:21:62\n   |\n21 |     let mut paren_levels_stack_ptr_pos_ptr_pos_ptr_pos_ptr\
    \ = paren_levels_stack_ptr_pos_ptr_pos_ptr_pos_ptr.as_ptr();\n   |           \
    \                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_pos_ptr_pos_ptr_pos_len`\n\
    \nerror[E0425]: cannot find value `paren_levels_stack_ptr_pos_ptr_pos_ptr_pos_ptr_pos_`\
    \ in this scope\n  --> /tmp/tmpe0v2vnmj.rs:25:70\n   |\n25 |     let mut paren_levels_stack_ptr_pos_ptr_pos_ptr_pos_ptr_pos_ptr\
    \ = paren_levels_stack_ptr_pos_ptr_pos_ptr_pos_ptr_pos_\n   |                \
    \                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_pos_ptr_pos_ptr_pos_ptr_pos`\n\
    \nerror[E0689]: can't call method `len` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpe0v2vnmj.rs:10:65\n   |\n10 |     let mut paren_levels_stack_ptr_len\
    \ = paren_levels_stack_ptr.len();\n   |                                      \
    \                           ^^^\n   |\nhelp: you must specify a type for this\
    \ binding, like `i32`\n   |\n9  |     let mut paren_levels_stack_ptr: i32 = 0;\n\
    \   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0689]: can't call method\
    \ `len` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpe0v2vnmj.rs:12:73\n\
    \   |\n12 |     let mut paren_levels_stack_ptr_pos_len = paren_levels_stack_ptr_pos.len();\n\
    \   |                                                                        \
    \ ^^^\n   |\nhe"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsdfxszgj.rs:38:51\n   |\n\
    38 |     let mut paren_nesting_nesting_nesting_nesting_\n   |                \
    \                                   ^ help: add `;` here\n39 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpsdfxszgj.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nest\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprjp1jeym.rs:38:47\n   |\n\
    38 |     let mut paren_nesting_nesting_nesting_nest\n   |                    \
    \                           ^ help: add `;` here\n39 | }\n   | - unexpected token\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmprjp1jeym.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nest\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprjp1jeym.rs:38:47\n   |\n\
    38 |     let mut paren_nesting_nesting_nesting_nest\n   |                    \
    \                           ^ help: add `;` here\n39 | }\n   | - unexpected token\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmprjp1jeym.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_iter = paren_string.char_indices();\n    let\
    \ mut paren_levels_iter = paren_levels_iter.filter_map(|(_, char)| {\n       \
    \ if char == '(' {\n            paren_level += 1;\n            Some(paren_level)\n\
    \        } else {\n            Some(paren_level)\n        }\n    });\n    let\
    \ mut paren_levels_iter = paren_levels_iter.filter_map(|level| {\n        if level\
    \ == paren_level {\n            Some(level)\n        } else {\n            None\n\
    \        }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|level|\
    \ {\n        if level == paren_level {\n            Some(level)\n        } else\
    \ {\n            None\n        }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|level|\
    \ {\n        if level == paren_level {\n            Some(level)\n        } else\
    \ {\n            None\n        }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|level|\
    \ {\n        if level == paren_level {\n            Some(level)\n        } else\
    \ {\n            None\n        }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|level|\
    \ {\n        if level == paren_level {\n            Some(level)\n        } else\
    \ {\n            None\n        }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|level|\
    \ {\n        if level == paren_level {\n            Some(level)\n        } else\
    \ {\n            None\n        }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|level|\
    \ {\n        if level == paren_level {\n            Some(level)\n        } else\
    \ {\n            None\n        }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|level|\
    \ {\n        if level == paren_level {\n            Some(level)\n        } else\
    \ {\n            None\n        }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|level|\
    \ {\n        if level == paren_level {\n            Some(level)\n        } else\
    \ {\n            None\n        }\n    });\n    let mut paren_levels_iter = paren_levels_iter.filter_map(|level|\
    \ {\n        if level == paren_level {\n            Some(level)\n        } else\
    \ {\n            None\n        }\n    });\n    let mut paren_levels_iter = paren_levels_iter.\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpc09zs7ni.rs:87:1\n   |\n87\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpc09zs7ni.rs:86:51\n\
    \   |\n86 |     let mut paren_levels_iter = paren_levels_iter.\n   |         \
    \                                          ^ help: add `;` here\n87 | }\n   |\
    \ - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpc09zs7ni.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpixd35di0.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpixd35di0.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpnimb_z_r.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpnimb_z_r.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 101
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    for paren in paren_string.chars()\
    \ {\n        if paren == '(' {\n            paren_level += 1;\n            paren_nesting\
    \ += 1;\n        } else if paren == ')' {\n            paren_level -= 1;\n   \
    \         paren_nesting -= 1;\n            if paren_nesting == 0 {\n         \
    \       paren_levels.push(paren_level);\n            }\n        }\n    }\n   \
    \ paren_levels\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n \
    \   assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0]`,\n right: `[2, 3, 1, 3]`', /tmp/tmpcn7eyaca.rs:25:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_pos = 0;\n    let\
    \ mut paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_len =\
    \ paren_levels_stack.len();\n    let mut paren_levels_stack_pos = 0;\n    let\
    \ mut paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_len =\
    \ paren_levels_stack.len();\n    let mut paren_levels_stack_pos = 0;\n    let\
    \ mut paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_len =\
    \ paren_levels_stack.len();\n    let mut paren_levels_stack_pos = 0;\n    let\
    \ mut paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_len =\
    \ paren_levels_stack.len();\n    let mut paren_levels_stack_pos = 0;\n    let\
    \ mut paren\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpdgn_gmv4.rs:42:18\n   |\n\
    42 |     let mut paren\n   |                  ^ help: add `;` here\n43 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpdgn_gmv4.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_next = 0;\n    let mut paren_levels_ptr\
    \ = paren_levels_stack.as_mut_ptr();\n    let mut paren_levels_ptr_next = paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_next = paren_levels_ptr;\n    let mut paren_levels_ptr_next\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_next = paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_next = paren_levels_ptr;\n    let mut paren_levels_ptr_next\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_next = paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_next = paren_levels_ptr;\n    let mut paren_levels_ptr_next\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_next = paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_next = paren_levels_ptr;\n    let mut paren_levels_ptr_next\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_next = paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_next = paren_levels_ptr;\n    let mut paren_levels_ptr_next\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_next = paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_next = paren_levels_ptr;\n    let mut paren_levels_ptr_next\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_next = paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_next = paren_levels_ptr;\n    let mut paren_levels_ptr_next\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_next = paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_next = paren_levels_ptr;\n    let mut paren_levels_ptr_next\
    \ = paren_levels_ptr;\n    let mut paren_levels_ptr_next = paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_omcilcf.rs:36:30\n   |\n\
    36 |     let mut paren_levels_ptr_\n   |                              ^ help:\
    \ add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp_omcilcf.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_iter = paren_string.char_indices();\n    for\
    \ paren_level in paren_levels_iter {\n        if paren_level == paren_string.len()\
    \ {\n            break;\n        }\n        let mut paren_levels_iter = paren_string.char_indices();\n\
    \        let mut paren_levels_iter_next = paren_levels_iter.next();\n        let\
    \ mut paren_levels_iter_next_next = paren_levels_iter_next.next();\n        let\
    \ mut paren_levels_iter_next_next_next = paren_levels_iter_next_next.next();\n\
    \        let mut paren_levels_iter_next_next_next_next = paren_levels_iter_next_next_next.next();\n\
    \        let mut paren_levels_iter_next_next_next_next_next = paren_levels_iter_next_next_next_next.next();\n\
    \        let mut paren_levels_iter_next_next_next_next_next_next = paren_levels_iter_next_next_next_next_next.next();\n\
    \        let mut paren_levels_iter_next_next_next_next_next_next_next = paren_levels_iter_next_next_next_next_next_next.next();\n\
    \        let mut paren_levels_iter_next_next_next_next_next_next_next_next = paren_levels_iter_next_next_next_next_next_next_next.next();\n\
    \        let mut paren_levels_iter_next_next_next_next_next_next_next_next_next\
    \ = paren_levels_iter_next_next_next_next_next_next_next_next.next();\n      \
    \  let mut paren_levels_iter_next_next_next_next_next_next_next_next_next_next\
    \ = paren_levels_iter_next_next_next_next_next_next_next_next_next.next();\n \
    \       let mut paren_levels_iter_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_levels_iter_next_next_next_next_next_next_next_next_next_next.next();\n\
    \        let mut paren_levels_iter_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_levels_iter_next_next_next_next_next_next_next_next_next_next_next_next.next();\n\
    \        let mut paren_levels_iter_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_levels_iter_next_next_next_next_next_next_next_next_next_next_next_next_next.next();\n\
    \        let mut paren_levels_iter_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_levels_iter_next_next_next_next_next_next_next_next_next_next_next_next_next.next();\n\
    \        let mut paren_levels_iter_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_levels_iter_next_next_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpnh2j3ha7.rs:35:3\n\
    \   |\n4  | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n8  |     for paren_level in paren_levels_iter {\n   |                   \
    \                       - this delimiter might not be properly closed...\n...\n\
    28 | }\n   | - ...as it matches this but it has different indentation\n...\n35\
    \ | }\n   |   ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpnh2j3ha7.rs:27:135\n\
    \   |\n27 |         let mut paren_levels_iter_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = paren_levels_iter_next_next_\n   |                                       \
    \                                                                            \
    \                    ^ help: add `;` here\n28 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `paren_levels_iter_next_next_next_next_next_next_next_next_next_next_next_next`\
    \ in this scope\n  --> /tmp/tmpnh2j3ha7.rs:24:97\n   |\n24 | ..._next_next_next_next\
    \ = paren_levels_iter_next_next_next_next_next_next_next_next_next_next_next_next.next();\n\
    \   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_iter_next_next_next_next_next_next_next_next_next_next_next`\n\
    \nerror[E0425]: cannot find value `paren_levels_iter_next_next_next_next_next_next_next_next_next_next_next_next_next`\
    \ in this scope\n  --> /tmp/tmpnh2j3ha7.rs:25:102\n   |\n25 | ...ext_next_next_next\
    \ = paren_levels_iter_next_next_next_next_next_next_next_next_next_next_next_next_next.next();\n\
    \   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_iter_next_next_next_next_next_next_next_next_next_next_next_next`\n\
    \nerror[E0425]: cannot find value `paren_levels_iter_next_next_` in this scope\n\
    \  --> /tmp/tmpnh2j3ha7.rs:27:107\n   |\n27 |   "
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_ptr = paren_levels_stack;\n    let mut paren_levels_stack_ptr_pos\
    \ = 0;\n    let mut paren_levels_stack_ptr_size = paren_levels_stack_ptr.len();\n\
    \    let mut paren_levels_stack_ptr_ptr = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_ptr_ptr_pos = 0;\n    let mut paren_levels_stack_ptr_ptr_size\
    \ = paren_levels_stack_ptr_ptr.len();\n    let mut paren_levels_stack_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr;\n    let mut paren_levels_stack_ptr_ptr_ptr_pos\
    \ = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_size = paren_levels_stack_ptr_ptr_ptr.len();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr = paren_levels_stack_ptr_ptr_ptr;\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_pos = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_size\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr.len();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_pos\
    \ = 0;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_size = paren_levels_stack_ptr_ptr_ptr_ptr_ptr.len();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_pos = 0;\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_size = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr.len();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_pos = 0;\n    let\
    \ mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_size = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr.len();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_pos = 0;\n    let\
    \ mut paren\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsljhyk3h.rs:31:18\n   |\n\
    31 |     let mut paren\n   |                  ^ help: add `;` here\n32 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr`\
    \ in this scope\n  --> /tmp/tmpsljhyk3h.rs:25:58\n   |\n25 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr;\n   |                        \
    \                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_pos`\n\
    \nerror[E0425]: cannot find value `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr`\
    \ in this scope\n  --> /tmp/tmpsljhyk3h.rs:29:67\n   |\n29 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_size\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr.len();\n   |              \
    \                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_pos`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpsljhyk3h.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = &mut paren_levels_stack;\n    let mut paren_levels_ptr = &mut paren_levels;\n\
    \    let mut paren_levels_ptr_next = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_next\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next = &mut\
    \ paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next_next = &mut paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_next_next_next_next_next = &mut paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_next_next_next_next_next_next = &mut paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_next_next_next_next_next_next_next = &mut paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_next_next_next_next_next_next_next_next = &mut paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next = &mut\
    \ paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp4hqto3sp.rs:26:35\n   |\n\
    26 |     let mut paren_levels_ptr_next_\n   |                                \
    \   ^ help: add `;` here\n27 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp4hqto3sp.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n \
    \   let mut paren_levels_stack_ptr_end_ptr = paren_levels_stack_ptr;\n    let\
    \ mut paren_levels_stack_ptr_end_ptr_end = paren_levels_stack_ptr_end_ptr;\n \
    \   let mut paren_levels_stack_ptr_end_ptr_end_ptr = paren_levels_stack_ptr_end_ptr;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end = paren_levels_stack_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr = paren_levels_stack_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr =\
    \ paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n    let mut\
    \ paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpd69g4lg6.rs:21:149\n   |\n\
    21 |     let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_\n   |    \
    \                                                                            \
    \                                                                     ^ help:\
    \ add `;` here\n22 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr` in this scope\n\
    \  --> /tmp/tmpd69g4lg6.rs:19:78\n   |\n19 |     let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n   |    \
    \                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end`\n\
    \nerror[E0425]: cannot find value `paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end`\
    \ in this scope\n  --> /tmp/tmpd69g4lg6.rs:20:82\n   |\n20 | ..._ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n   |\
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr`\n\
    \nerror[E0425]: cannot find value `paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_`\
    \ in this scope\n  --> /tmp/tmpd69g4lg6.rs:21:86\n   |\n21 | ...tr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_\n   |    \
    \                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpd69g4lg6.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isiz"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_curr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_curr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_curr = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_curr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_curr = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_curr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_curr = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_curr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_curr = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_curr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_curr = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_curr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_curr = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp68o_v7t9.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp68o_v7t9.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = &mut paren_levels_stack;\n    let mut paren_levels_ptr = &mut paren_levels;\n\
    \    let mut paren_levels_ptr_end = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_end\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_end_ptr = &mut paren_levels_ptr_end;\n\
    \    let mut paren_levels_ptr_end_ptr = &mut paren_levels_ptr_end;\n    let mut\
    \ paren_levels_ptr_end_ptr = &mut paren_levels_ptr_end;\n    let mut paren_levels_ptr_end_ptr\
    \ = &mut paren_levels_ptr_end;\n    let mut paren_levels_ptr_end_ptr = &mut paren_levels_ptr_end;\n\
    \    let mut paren_levels_ptr_end_ptr = &mut paren_levels_ptr_end;\n    let mut\
    \ paren_levels_ptr_end_ptr = &mut paren_levels_ptr_end;\n    let mut paren_levels_ptr_end_ptr\
    \ = &mut paren_levels_ptr_end;\n    let mut paren_levels_ptr_end_ptr = &mut paren_levels_ptr_end;\n\
    \    let mut paren_levels_ptr_end_ptr = &mut paren_levels_ptr_end;\n    let mut\
    \ paren_levels_ptr_end_ptr = &mut paren_levels_ptr_end;\n    let mut paren_levels_ptr_end_ptr\
    \ = &mut paren_levels_ptr_end;\n    let mut paren_levels_ptr_end_ptr = &mut paren_levels_ptr_end;\n\
    \    let mut paren_levels_ptr_end_ptr = &mut paren_levels_ptr_end;\n    let mut\
    \ paren_levels_ptr_end_ptr = &mut paren_levels_ptr_end;\n    let mut paren_levels_ptr_end_ptr\
    \ = &mut paren_levels_ptr_end;\n    let mut paren_levels_ptr_end_ptr = &mut paren_levels_ptr_end;\n\
    \    let mut paren_levels_ptr_end_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp4sgyhlz7.rs:29:34\n   |\n\
    29 |     let mut paren_levels_ptr_end_\n   |                                 \
    \ ^ help: add `;` here\n30 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp4sgyhlz7.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack_len;\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_len;\n    let mut\
    \ paren_levels_stack_ptr_end_ptr = paren_levels_stack_ptr_end;\n    let mut paren_levels_stack_ptr_end_ptr_end\
    \ = paren_levels_stack_ptr_end;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr_end_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack_ptr_end_ptr_end;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr_end_ptr_end_ptr_end;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n    let mut\
    \ paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_\n}\n\nfn\
    \ main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp2zc3o70o.rs:22:68\n   |\n\
    22 |     let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_\n   |\
    \                                                                    ^ help: add\
    \ `;` here\n23 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp2zc3o70o.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = &mut paren_levels_stack;\n    let mut paren_levels_ptr = &mut paren_levels;\n\
    \    let mut paren_levels_ptr_end = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_end_ptr\
    \ = &mut paren_levels_ptr_end;\n    let mut paren_levels_ptr_end_ptr_ptr = &mut\
    \ paren_levels_ptr_end_ptr;\n    let mut paren_levels_ptr_end_ptr_ptr_ptr = &mut\
    \ paren_levels_ptr_end_ptr_ptr;\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr;\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr;\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr;\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n    let mut\
    \ paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpe7nitpiw.rs:22:121\n   |\n\
    22 |     let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr\n   |                                      \
    \                                                                            \
    \       ^ help: add `;` here\n23 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `paren_levels_ptr_end_ptr_ptr_ptr_ptr` in this scope\n  -->\
    \ /tmp/tmpe7nitpiw.rs:14:57\n   |\n14 |     let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr;\n   |                         \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a\
    \ local variable with a similar name exists: `paren_levels_ptr_end_ptr_ptr_ptr`\n\
    \nerror[E0425]: cannot find value `paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr` in\
    \ this scope\n  --> /tmp/tmpe7nitpiw.rs:15:61\n   |\n15 |     let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr;\n   |                     \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_ptr_end_ptr_ptr_ptr_ptr`\n\
    \nerror[E0425]: cannot find value `paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr`\
    \ in this scope\n  --> /tmp/tmpe7nitpiw.rs:16:65\n   |\n16 |     let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr;\n   |                 \
    \                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr`\n\
    \nerror[E0425]: cannot find value `paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr`\
    \ in this scope\n  --> /tmp/tmpe7nitpiw.rs:17:69\n   |\n17 |     let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n   |             \
    \                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: "
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_levels_index = 0;\n\
    \    let mut paren_levels_index2 = 0;\n    let mut paren_levels_index3 = 0;\n\
    \    let mut paren_levels_index4 = 0;\n    let mut paren_levels_index5 = 0;\n\
    \    let mut paren_levels_index6 = 0;\n    let mut paren_levels_index7 = 0;\n\
    \    let mut paren_levels_index8 = 0;\n    let mut paren_levels_index9 = 0;\n\
    \    let mut paren_levels_index10 = 0;\n    let mut paren_levels_index11 = 0;\n\
    \    let mut paren_levels_index12 = 0;\n    let mut paren_levels_index13 = 0;\n\
    \    let mut paren_levels_index14 = 0;\n    let mut paren_levels_index15 = 0;\n\
    \    let mut paren_levels_index16 = 0;\n    let mut paren_levels_index17 = 0;\n\
    \    let mut paren_levels_index18 = 0;\n    let mut paren_levels_index19 = 0;\n\
    \    let mut paren_levels_index20 = 0;\n    let mut paren_levels_index21 = 0;\n\
    \    let mut paren_levels_index22 = 0;\n    let mut paren_levels_index23 = 0;\n\
    \    let mut paren_levels_index24 = 0;\n    let mut paren_levels_index25 = 0;\n\
    \    let mut paren_levels_index26 = 0;\n    let mut paren_levels_index27 = 0;\n\
    \    let mut paren_levels_index28 = 0;\n    let mut paren_levels_index29 = 0;\n\
    \    let mut paren_levels_index30 = 0;\n    let mut paren_levels_index31 = 0;\n\
    \    let mut paren_levels_index32 = 0;\n    let mut paren_levels_index33 = 0;\n\
    \    let mut paren_levels_index34 = 0;\n    let mut paren_levels_index35 = 0;\n\
    \    let mut paren_levels_index36 = 0;\n    let mut paren_levels_index37 = 0;\n\
    \    let mut paren_levels_index38 = 0;\n    let mut paren_levels_index39 = 0;\n\
    \    let mut paren_levels_index40 = 0;\n    let mut paren_levels_index41 = 0;\n\
    \    let mut paren_levels_index42 = 0;\n    let mut paren_levels_index43 = 0;\n\
    \    let mut paren_levels_index44 = 0;\n    let mut paren\n}\n\nfn main() {\n\
    \    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpuq2tph21.rs:52:18\n   |\n\
    52 |     let mut paren\n   |                  ^ help: add `;` here\n53 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpuq2tph21.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_cur = paren_levels_stack_ptr;\n    let mut paren_levels_stack_next\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_next = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_next = paren_levels_stack_ptr;\n    let mut paren_levels_stack_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack_ptr;\n    let mut paren_levels_stack_next\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_next = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_next = paren_levels_stack_ptr;\n    let mut paren_levels_stack_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack_ptr;\n    let mut paren_levels_stack_next\
    \ = paren_levels_stack_ptr;\n    let \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpi_iwxlbl.rs:37:1\n  \
    \ |\n37 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = vec![];\n    let mut paren_level_char\
    \ = 0;\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_level_char.len();\n    let mut paren_level_char_pos = 0;\n    let mut\
    \ paren_level_char_len = paren_level_char.len();\n    let mut paren_level_char_pos\
    \ = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n    let mut\
    \ paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let \n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp0mkui_2r.rs:47:1\n  \
    \ |\n47 | }\n   | ^ expected pattern\n\nerror[E0689]: can't call method `len`\
    \ on ambiguous numeric type `{integer}`\n  --> /tmp/tmp0mkui_2r.rs:12:53\n   |\n\
    12 |     let mut paren_level_char_len = paren_level_char.len();\n   |        \
    \                                             ^^^\n   |\nhelp: you must specify\
    \ a type for this binding, like `i32`\n   |\n10 |     let mut paren_level_char:\
    \ i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0689]: can't call\
    \ method `len` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp0mkui_2r.rs:14:53\n\
    \   |\n14 |     let mut paren_level_char_len = paren_level_char.len();\n   | \
    \                                                    ^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `i32`\n   |\n10 |     let mut paren_level_char:\
    \ i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0689]: can't call\
    \ method `len` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp0mkui_2r.rs:16:53\n\
    \   |\n16 |     let mut paren_level_char_len = paren_level_char.len();\n   | \
    \                                                    ^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `i32`\n   |\n10 |     let mut paren_level_char:\
    \ i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0689]: can't call\
    \ method `len` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp0mkui_2r.rs:18:53\n\
    \   |\n18 |     let mut paren_level_char_len = paren_level_char.len();\n   | \
    \                                                    ^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `i32`\n   |\n10 |     let mut paren_level_char:\
    \ i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0689]: can't call\
    \ method `len` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp0mkui_2r.rs:20:53\n\
    \   |\n20 |     let mut paren_level_char_len = paren_level_char.len();\n   | \
    \                                                    ^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `i32`\n   |\n10 |     let mut paren_level_char:\
    \ i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n    let mut paren_levels_stack_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n    let mut paren_levels_stack_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpkjrkorsf.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpkjrkorsf.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_ptr_end_ptr = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack_ptr;\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4tdty1oe.rs:4:49\n  |\n4 |\
    \ fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels = Vec::new();\n\
    \    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr = Vec::new();\n    let mut paren_levels_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpoa772gmf.rs:28:101\n   |\n\
    28 |     let mut paren_levels_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    \   |                                                                        \
    \                             ^ help: add `;` here\n29 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpoa772gmf.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_pos = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpfj3rghhl.rs:35:26\n   |\n\
    35 |     let mut paren_levels_\n   |                          ^ help: add `;`\
    \ here\n36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpfj3rghhl.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n  |    -------------------                          ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsdfxszgj.rs:38:51\n   |\n\
    38 |     let mut paren_nesting_nesting_nesting_nesting_\n   |                \
    \                                   ^ help: add `;` here\n39 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpsdfxszgj.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_iter = paren_string.char_indices();\n    let\
    \ mut paren_levels_end = paren_levels_iter.end();\n    let mut paren_levels_iter\
    \ = paren_string.char_indices();\n    let mut paren_levels_end = paren_levels_iter.end();\n\
    \    let mut paren_levels_iter = paren_string.char_indices();\n    let mut paren_levels_end\
    \ = paren_levels_iter.end();\n    let mut paren_levels_iter = paren_string.char_indices();\n\
    \    let mut paren_levels_end = paren_levels_iter.end();\n    let mut paren_levels_iter\
    \ = paren_string.char_indices();\n    let mut paren_levels_end = paren_levels_iter.end();\n\
    \    let mut paren_levels_iter = paren_string.char_indices();\n    let mut paren_levels_end\
    \ = paren_levels_iter.end();\n    let mut paren_levels_iter = paren_string.char_indices();\n\
    \    let mut paren_levels_end = paren_levels_iter.end();\n    let mut paren_levels_iter\
    \ = paren_string.char_indices();\n    let mut paren_levels_end = paren_levels_iter.end();\n\
    \    let mut paren_levels_iter = paren_string.char_indices();\n    let mut paren_levels_end\
    \ = paren_levels_iter.end();\n    let mut paren_levels_iter = paren_string.char_indices();\n\
    \    let mut paren_levels_end = paren_levels_iter.end();\n    let mut paren_levels_iter\
    \ = paren_string.char_indices();\n    let mut paren_levels_end = paren_levels_iter.end();\n\
    \    let mut paren_levels_iter = paren_string.char_indices();\n    let mut paren_levels_end\
    \ = paren_levels_iter.end();\n    let mut paren_levels_iter = paren_string.char_indices();\n\
    \    let mut paren_levels_end = paren_levels_iter.end();\n    let mut paren_levels_iter\
    \ = paren_string.char_indices();\n    let mut paren_levels_end = paren_levels_iter.end();\n\
    \    let mut paren_levels_iter = paren_string.char_indices();\n    let mut paren_levels_end\
    \ = paren_levels_iter.end();\n    let mut paren_levels_iter = paren_string.char_indices();\n\
    \    let mut paren_levels_end = paren_levels_iter.end();\n    let mut paren_levels_iter\
    \ = paren_string.char_indices\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpb5j_yde8.rs:39:58\n   |\n\
    39 |     let mut paren_levels_iter = paren_string.char_indices\n   |         \
    \                                                 ^ help: add `;` here\n40 | }\n\
    \   | - unexpected token\n\nerror[E0599]: no method named `end` found for struct\
    \ `CharIndices` in the current scope\n --> /tmp/tmpb5j_yde8.rs:8:50\n  |\n8 |\
    \     let mut paren_levels_end = paren_levels_iter.end();\n  |               \
    \                                   ^^^ method not found in `CharIndices<'_>`\n\
    \nerror[E0599]: no method named `end` found for struct `CharIndices` in the current\
    \ scope\n  --> /tmp/tmpb5j_yde8.rs:10:50\n   |\n10 |     let mut paren_levels_end\
    \ = paren_levels_iter.end();\n   |                                           \
    \       ^^^ method not found in `CharIndices<'_>`\n\nerror[E0599]: no method named\
    \ `end` found for struct `CharIndices` in the current scope\n  --> /tmp/tmpb5j_yde8.rs:12:50\n\
    \   |\n12 |     let mut paren_levels_end = paren_levels_iter.end();\n   |    \
    \                                              ^^^ method not found in `CharIndices<'_>`\n\
    \nerror[E0599]: no method named `end` found for struct `CharIndices` in the current\
    \ scope\n  --> /tmp/tmpb5j_yde8.rs:14:50\n   |\n14 |     let mut paren_levels_end\
    \ = paren_levels_iter.end();\n   |                                           \
    \       ^^^ method not found in `CharIndices<'_>`\n\nerror[E0599]: no method named\
    \ `end` found for struct `CharIndices` in the current scope\n  --> /tmp/tmpb5j_yde8.rs:16:50\n\
    \   |\n16 |     let mut paren_levels_end = paren_levels_iter.end();\n   |    \
    \                                              ^^^ method not found in `CharIndices<'_>`\n\
    \nerror[E0599]: no method named `end` found for struct `CharIndices` in the current\
    \ scope\n  --> /tmp/tmpb5j_yde8.rs:18:50\n   |\n18 |     let mut paren_levels_end\
    \ = paren_levels_iter.end();\n   |                                           \
    \       ^^^ method not found in `CharIndices<'_>`\n\nerror[E0599]: no method named\
    \ `end` found for struct `CharIndices` in the current scope\n  --> /tmp/tmpb5j_yde"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting = 0;\n\
    \    let mut paren_levels = Vec::new();\n    let mut paren_nestings = Vec::new();\n\
    \    let mut paren_levels_iter = paren_string.char_indices().rev();\n    let mut\
    \ paren_nestings_iter = paren_string.char_indices().rev();\n    let mut paren_levels_iter\
    \ = paren_string.char_indices().rev();\n    let mut paren_nestings_iter = paren_string.char_indices().rev();\n\
    \    let mut paren_levels_iter = paren_string.char_indices().rev();\n    let mut\
    \ paren_nestings_iter = paren_string.char_indices().rev();\n    let mut paren_levels_iter\
    \ = paren_string.char_indices().rev();\n    let mut paren_nestings_iter = paren_string.char_indices().rev();\n\
    \    let mut paren_levels_iter = paren_string.char_indices().rev();\n    let mut\
    \ paren_nestings_iter = paren_string.char_indices().rev();\n    let mut paren_levels_iter\
    \ = paren_string.char_indices().rev();\n    let mut paren_nestings_iter = paren_string.char_indices().rev();\n\
    \    let mut paren_levels_iter = paren_string.char_indices().rev();\n    let mut\
    \ paren_nestings_iter = paren_string.char_indices().rev();\n    let mut paren_levels_iter\
    \ = paren_string.char_indices().rev();\n    let mut paren_nestings_iter = paren_string.char_indices().rev();\n\
    \    let mut paren_levels_iter = paren_string.char_indices().rev();\n    let mut\
    \ paren_nestings_iter = paren_string.char_indices().rev();\n    let mut paren_levels_iter\
    \ = paren_string.char_indices().rev();\n    let mut paren_nestings_iter = paren_string.char_indices().rev();\n\
    \    let mut paren_levels_iter = paren_string.char_indices().rev();\n    let mut\
    \ paren_nestings_iter = paren_string.char_indices().rev();\n    let mut paren_levels_iter\
    \ = paren_string.char_indices().rev();\n    let mut paren_nestings_iter = paren_string.char_indices().rev();\n\
    \    let mut paren_levels_iter = paren_string.char_indices().rev();\n    let mut\
    \ paren_nestings_iter = paren_string.char_indices().rev();\n    let mut paren_levels_iter\
    \ = paren_string.char_indices().rev\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpe5jzm9kd.rs:35:64\n   |\n\
    35 |     let mut paren_levels_iter = paren_string.char_indices().rev\n   |   \
    \                                                             ^ help: add `;`\
    \ here\n36 | }\n   | - unexpected token\n\nerror[E0615]: attempted to take value\
    \ of method `rev` on type `CharIndices<'_>`\n  --> /tmp/tmpe5jzm9kd.rs:35:61\n\
    \   |\n35 |     let mut paren_levels_iter = paren_string.char_indices().rev\n\
    \   |                                                             ^^^ method,\
    \ not a field\n   |\nhelp: use parentheses to call the method\n   |\n35 |    \
    \ let mut paren_levels_iter = paren_string.char_indices().rev()\n   |        \
    \                                                        ++\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpe5jzm9kd.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0615.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_2akhuc1.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_2akhuc1.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp23u0z2tx.rs:35:52\n   |\n\
    35 |     let mut paren_levels_stack_bottom = paren_level\n   |               \
    \                                     ^ help: add `;` here\n36 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp23u0z2tx.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_2akhuc1.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_2akhuc1.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_chars_index = 0;\n    let mut paren_level_chars_index2\
    \ = 0;\n    let mut paren_level_chars_index3 = 0;\n    let mut paren_level_chars_index4\
    \ = 0;\n    let mut paren_level_chars_index5 = 0;\n    let mut paren_level_chars_index6\
    \ = 0;\n    let mut paren_level_chars_index7 = 0;\n    let mut paren_level_chars_index8\
    \ = 0;\n    let mut paren_level_chars_index9 = 0;\n    let mut paren_level_chars_index10\
    \ = 0;\n    let mut paren_level_chars_index11 = 0;\n    let mut paren_level_chars_index12\
    \ = 0;\n    let mut paren_level_chars_index13 = 0;\n    let mut paren_level_chars_index14\
    \ = 0;\n    let mut paren_level_chars_index15 = 0;\n    let mut paren_level_chars_index16\
    \ = 0;\n    let mut paren_level_chars_index17 = 0;\n    let mut paren_level_chars_index18\
    \ = 0;\n    let mut paren_level_chars_index19 = 0;\n    let mut paren_level_chars_index20\
    \ = 0;\n    let mut paren_level_chars_index21 = 0;\n    let mut paren_level_chars_index22\
    \ = 0;\n    let mut paren_level_chars_index23 = 0;\n    let mut paren_level_chars_index24\
    \ = 0;\n    let mut paren_level_chars_index25 = 0;\n    let mut paren_level_chars_index26\
    \ = 0;\n    let mut paren_level_chars_index27 = 0;\n    let mut paren_level_chars_index28\
    \ = 0;\n    let mut paren_level_chars_index29 = 0;\n    let mut paren_level_chars_index30\
    \ = 0;\n    let mut paren_level_chars_index31 = 0;\n    let mut paren_level_chars_index32\
    \ = 0;\n    let mut paren_level_chars_index33 = 0;\n    let mut paren_level_chars_index34\
    \ = 0;\n    let mut paren_level_chars_index35 = 0;\n    let mut paren_level_chars_index36\
    \ = 0;\n    let mut paren_level_chars_index37 = 0;\n    let mut paren_level_chars_index38\
    \ = 0;\n    let mut paren_level_chars_index39 = 0;\n    let mut paren_level_chars_index40\
    \ = 0;\n    let mut paren_level_chars_index41 = 0;\n    let mut paren_level_chars_index42\
    \ = 0;\n    let mut paren_level_chars_index43 = 0;\n    let mut paren\n}\n\nfn\
    \ main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphfwd5iwj.rs:52:18\n   |\n\
    52 |     let mut paren\n   |                  ^ help: add `;` here\n53 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmphfwd5iwj.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n \
    \   let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_end = \n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp4hz49o0f.rs:34:1\n\
    \   |\n34 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp23u0z2tx.rs:35:52\n   |\n\
    35 |     let mut paren_levels_stack_bottom = paren_level\n   |               \
    \                                     ^ help: add `;` here\n36 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp23u0z2tx.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_iter = paren_string.char_indices();\n    let\
    \ mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mu\n}\n\
    \nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpglr9w2ib.rs:36:11\n   |\n\
    36 |     let mu\n   |           ^ help: add `;` here\n37 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpglr9w2ib.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_char = 0;\n    let mut paren_level_char_pos =\
    \ 0;\n    let mut paren_level_char_len = paren_string.len();\n    let mut paren_level_char_end\
    \ = paren_level_char_len;\n    let mut paren_level_char_end_pos = paren_level_char_len;\n\
    \    let mut paren_level_char_end_len = paren_level_char_len;\n    let mut paren_level_char_end_char\
    \ = paren_level_char_len;\n    let mut paren_level_char_end_char_pos = paren_level_char_len;\n\
    \    let mut paren_level_char_end_char_len = paren_level_char_len;\n    let mut\
    \ paren_level_char_end_char_char = paren_level_char_len;\n    let mut paren_level_char_end_char_char_pos\
    \ = paren_level_char_len;\n    let mut paren_level_char_end_char_char_len = paren_level_char_len;\n\
    \    let mut paren_level_char_end_char_char_char = paren_level_char_len;\n   \
    \ let mut paren_level_char_end_char_char_char_pos = paren_level_char_len;\n  \
    \  let mut paren_level_char_end_char_char_char_len = paren_level_char_len;\n \
    \   let mut paren_level_char_end_char_char_char_char = paren_level_char_len;\n\
    \    let mut paren_level_char_end_char_char_char_char_pos = paren_level_char_len;\n\
    \    let mut paren_level_char_end_char_char_char_char_len = paren_level_char_len;\n\
    \    let mut paren_level_char_end_char_char_char_char_char = paren_level_char_len;\n\
    \    let mut paren_level_char_end_char_char_char_char_char_pos = paren_level_char_len;\n\
    \    let mut paren_level_char_end_char_char_char_char_char_len = paren_level_char_len;\n\
    \    let mut paren_level_char_end_char_char_char_char_char_char = paren_level_char_len;\n\
    \    let mut paren_level_char_end_char_char_char_char_char_char_pos = paren_level_char_len;\n\
    \    let mut paren_level_char_end_char_char_char_char_char_char_len = paren_level_char_len;\n\
    \    let mut paren_level_char_end_char_char_char_char_char_char_char = paren_level_char_len;\n\
    \    let mut paren_level_char_end_char_char_char_char_char_char_char_pos = paren_level_char_len;\n\
    \    let mut paren_level_char_end_char_char_char_char_char_char_char_len = paren_level_char_len;\n\
    \    let mut paren\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqegb5ne5.rs:36:18\n   |\n\
    36 |     let mut paren\n   |                  ^ help: add `;` here\n37 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpqegb5ne5.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_ptr = paren_levels_stack.as_mut_ptr();\n    let\
    \ mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpouhhhee3.rs:27:19\n   |\n\
    27 |     let mut paren_\n   |                   ^ help: add `;` here\n28 | }\n\
    \   | - unexpected token\n\nwarning: type annotations needed\n  --> /tmp/tmpouhhhee3.rs:10:53\n\
    \   |\n10 |     let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \   |                                                     ^^^^^^\n   |\n   = note:\
    \ `#[warn(tyvar_behind_raw_pointer)]` on by default\n   = warning: this is accepted\
    \ in the current edition (Rust 2015) but is a hard error in Rust 2018!\n   = note:\
    \ for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpouhhhee3.rs:10:60\n   |\n10 |\
    \     let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \   |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     let mut\
    \ paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len().try_into().unwrap());\n\
    \   |                                                                        \
    \            ++++++++++++++++++++\n\nwarning: type annotations needed\n  --> /tmp/tmpouhhhee3.rs:11:53\n\
    \   |\n11 |     let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \   |                                                     ^^^^^^\n   |\n   = warning:\
    \ this is accepted in the current edition (Rust 2015) but is a hard error in Rust\
    \ 2018!\n   = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpouhhhee3.rs:11:60\n   |\n11 |\
    \     let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \   |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string;\n    let mut paren_level_string\
    \ = paren_string;\n    let mut paren_level_string = paren_string;\n    let mut\
    \ paren_level_string = paren_string;\n    let mut paren\n}\n\nfn main() {\n  \
    \  let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx2_sgjya.rs:48:18\n   |\n\
    48 |     let mut paren\n   |                  ^ help: add `;` here\n49 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpx2_sgjya.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting = 0;\n\
    \    let mut paren_nesting_level = 0;\n    let mut paren_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpi1elaq8z.rs:36:35\n   |\n\
    36 |     let mut paren_nesting_nesting_\n   |                                \
    \   ^ help: add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpi1elaq8z.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_ptr = paren_levels_stack.as_mut_ptr();\n    let\
    \ mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpouhhhee3.rs:27:19\n   |\n\
    27 |     let mut paren_\n   |                   ^ help: add `;` here\n28 | }\n\
    \   | - unexpected token\n\nwarning: type annotations needed\n  --> /tmp/tmpouhhhee3.rs:10:53\n\
    \   |\n10 |     let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \   |                                                     ^^^^^^\n   |\n   = note:\
    \ `#[warn(tyvar_behind_raw_pointer)]` on by default\n   = warning: this is accepted\
    \ in the current edition (Rust 2015) but is a hard error in Rust 2018!\n   = note:\
    \ for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpouhhhee3.rs:10:60\n   |\n10 |\
    \     let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \   |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     let mut\
    \ paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len().try_into().unwrap());\n\
    \   |                                                                        \
    \            ++++++++++++++++++++\n\nwarning: type annotations needed\n  --> /tmp/tmpouhhhee3.rs:11:53\n\
    \   |\n11 |     let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \   |                                                     ^^^^^^\n   |\n   = warning:\
    \ this is accepted in the current edition (Rust 2015) but is a hard error in Rust\
    \ 2018!\n   = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpouhhhee3.rs:11:60\n   |\n11 |\
    \     let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \   |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = &mut paren_levels_stack;\n    let mut paren_levels_ptr = &mut paren_levels;\n\
    \    let mut paren_levels_ptr_next = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_next\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next = &mut\
    \ paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next_next = &mut paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_next_next_next_next_next = &mut paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_next_next_next_next_next_next = &mut paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_next_next_next_next_next_next_next = &mut paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_next_next_next_next_next_next_next_next = &mut paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next = &mut\
    \ paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp4hqto3sp.rs:26:35\n   |\n\
    26 |     let mut paren_levels_ptr_next_\n   |                                \
    \   ^ help: add `;` here\n27 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp4hqto3sp.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mu\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpbcfxwob7.rs:36:11\n   |\n\
    36 |     let mu\n   |           ^ help: add `;` here\n37 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpbcfxwob7.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_2akhuc1.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_2akhuc1.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = &mut paren_levels_stack;\n    let mut paren_levels_ptr = &mut paren_levels;\n\
    \    let mut paren_levels_ptr_next = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_ptr\
    \ = &mut paren_levels_ptr_next;\n    let mut paren_levels_ptr_next_ptr_next =\
    \ &mut paren_levels_ptr_next_ptr;\n    let mut paren_levels_ptr_next_ptr_next_ptr\
    \ = &mut paren_levels_ptr_next_ptr_next;\n    let mut paren_levels_ptr_next_ptr_next_ptr_next\
    \ = &mut paren_levels_ptr_next_ptr_next_ptr;\n    let mut paren_levels_ptr_next_ptr_next_ptr_next_ptr\
    \ = &mut paren_levels_ptr_next_ptr_next_ptr_next;\n    let mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next\
    \ = &mut paren_levels_ptr_next_ptr_next_ptr_next_ptr;\n    let mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr\
    \ = &mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next;\n    let mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next\
    \ = &mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr;\n    let mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next\
    \ = &mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr;\n    let\
    \ mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr =\
    \ &mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next;\n \
    \   let mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next\
    \ = &mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpbjtl1kxy.rs:21:154\n   |\n\
    21 |     let mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next\
    \ = &mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_\n   |    \
    \                                                                            \
    \                                                                          ^ help:\
    \ add `;` here\n22 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr` in this scope\n\
    \  --> /tmp/tmpbjtl1kxy.rs:19:87\n   |\n19 | ...ext_ptr_next_ptr_next = &mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_ptr;\n\
    \   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next`\n\
    \nerror[E0425]: cannot find value `paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_`\
    \ in this scope\n  --> /tmp/tmpbjtl1kxy.rs:21:96\n   |\n21 | ..._next_ptr_next_ptr_next\
    \ = &mut paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next_\n   |    \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_ptr_next_ptr_next_ptr_next_ptr_next_ptr_next`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpbjtl1kxy.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting = 0;\n\
    \    let mut paren_nesting_level = 0;\n    let mut paren_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpi1elaq8z.rs:36:35\n   |\n\
    36 |     let mut paren_nesting_nesting_\n   |                                \
    \   ^ help: add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpi1elaq8z.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_string = paren_string.clone();\n    let mut paren_level_string\
    \ = paren_string.clone();\n    let mut paren_level_string = paren_string.clone();\n\
    \    let mut paren_level_string = paren_string.clone();\n    let mut paren_level_string\
    \ = paren_string.clone();\n    let mut paren_level_string = paren_string.clone();\n\
    \    let mut paren_level_string = paren_string.clone();\n    let mut paren_level_string\
    \ = paren_string.clone();\n    let mut paren_level_string = paren_string.clone();\n\
    \    let mut paren_level_string = paren_string.clone();\n    let mut paren_level_string\
    \ = paren_string.clone();\n    let mut paren_level_string = paren_string.clone();\n\
    \    let mut paren_level_string = paren_string.clone();\n    let mut paren_level_string\
    \ = paren_string.clone();\n    let mut paren_level_string = paren_string.clone();\n\
    \    let mut paren_level_string = paren_string.clone();\n    let mut paren_level_string\
    \ = paren_string.clone();\n    let mut paren_level_string = paren_string.clone();\n\
    \    let mut paren_level_string = paren_string.clone();\n    let mut paren_level_string\
    \ = paren_string.clone();\n    let mut paren_level_string = paren_string.clone();\n\
    \    let mut paren_level_string = paren_string.clone();\n    let mut paren_level_string\
    \ = paren_string.clone();\n    let mut paren_level_string = paren_string.clone();\n\
    \    let mut paren_level_string = paren_string.clone();\n    let mut paren_level_string\
    \ = paren_string.clone();\n    let mut paren_level_string = paren_string.clone();\n\
    \    let mut paren_level_string = paren_string.clone();\n    let mut paren_level_string\
    \ = paren_string.clone();\n    let mut paren_level_string = paren_string.clone();\n\
    \    let mut paren_level_string = paren_string.clone();\n    let mut paren_level_string\
    \ = paren_string.clone();\n    let mut paren_level_string = paren_string.clone();\n\
    \    let mut paren_level_string = paren_string.clone();\n    let mut paren_level_string\
    \ = paren_string.clone();\n    let mut paren_level_string = paren_string.clone();\n\
    \    let mut \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n  \
    \  assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpwfvi4iy2.rs:46:1\n\
    \   |\n46 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_start = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_start_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_start_end_ptr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_start_end_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_start_end_ptr_end_ptr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_start_end_ptr_end_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_start_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_start_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_start_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_start_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_start_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_start_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_start_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_start_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr_start_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpxqopwpri.rs:25:81\n   |\n\
    25 |     let mut paren_levels_stack_ptr_start_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\n\
    \   |                                                                        \
    \         ^ help: add `;` here\n26 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpxqopwpri.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let \n}\n\
    \nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp60sgh1h6.rs:36:1\n  \
    \ |\n36 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n  \
    \  assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpdbxjl4na.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpdbxjl4na.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_chars = Vec::new();\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_char: char;\n\
    \    let mut paren_level_chars: Vec<char> = paren_string.chars().collect();\n\
    \    while paren_level_char_index < paren_level_chars.len() {\n        paren_level_char\
    \ = paren_level_chars[paren_level_char_index];\n        if paren_level_char ==\
    \ ')' {\n            paren_levels.push(paren_level);\n            paren_level\
    \ = 0;\n            paren_level_index += 1;\n            paren_level_char_index\
    \ += 1;\n        } else if paren_level_char == '(' {\n            paren_level\
    \ += 1;\n            paren_level_index += 1;\n        } else {\n            paren_level_char_index\
    \ += 1;\n        }\n    }\n    paren_levels.push(paren_level);\n    paren_levels\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed for `Vec<T>`\n --> /tmp/tmpk81oxr1t.rs:8:33\n\
    \  |\n8 |     let mut paren_level_chars = Vec::new();\n  |         ---------------------\
    \   ^^^^^^^^ cannot infer type for type parameter `T`\n  |         |\n  |    \
    \     consider giving `paren_level_chars` the explicit type `Vec<T>`, where the\
    \ type parameter `T` is specified\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp23u0z2tx.rs:35:52\n   |\n\
    35 |     let mut paren_levels_stack_bottom = paren_level\n   |               \
    \                                     ^ help: add `;` here\n36 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp23u0z2tx.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n \
    \   let mut paren_levels_stack_ptr_end_ptr = paren_levels_stack_ptr_end;\n   \
    \ let mut paren_levels_stack_ptr_end_ptr_end = paren_levels_stack_ptr_end;\n \
    \   let mut paren_levels_stack_ptr_end_ptr_end_ptr = paren_levels_stack_ptr_end_ptr_end;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end = paren_levels_stack_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr =\
    \ paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n    let mut\
    \ paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpfx5b9izk.rs:21:96\n   |\n\
    21 |     let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_\n   |                                                             \
    \                                   ^ help: add `;` here\n22 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr`\
    \ in this scope\n  --> /tmp/tmpfx5b9izk.rs:14:62\n   |\n14 |     let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr;\n   |                    \
    \                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_end_ptr_end_ptr_end`\n\
    \nerror[E0425]: cannot find value `paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end`\
    \ in this scope\n  --> /tmp/tmpfx5b9izk.rs:15:66\n   |\n15 |     let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end;\n   |                \
    \                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr`\n\
    \nerror[E0425]: cannot find value `paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr`\
    \ in this scope\n  --> /tmp/tmpfx5b9izk.rs:16:70\n   |\n16 |     let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n   |            \
    \                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end`\n\
    \nerror[E0425]: cannot find value `paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end`\
    \ in this scope\n  --> /tmp/tmpfx5b9izk.rs:17:74\n   |\n17 |     let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n   |"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = &mut paren_levels_stack;\n    let mut paren_levels_ptr = &mut paren_levels;\n\
    \    let mut paren_levels_ptr_next = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_next\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next = &mut\
    \ paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next_next = &mut paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_next_next_next_next_next = &mut paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_next_next_next_next_next_next = &mut paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_next_next_next_next_next_next_next = &mut paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_next_next_next_next_next_next_next_next = &mut paren_levels_ptr;\n\
    \    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next = &mut\
    \ paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_next_\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp4hqto3sp.rs:26:35\n   |\n\
    26 |     let mut paren_levels_ptr_next_\n   |                                \
    \   ^ help: add `;` here\n27 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp4hqto3sp.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_index = 0;\n    let mut paren_levels_stack_size\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack;\n\
    \    let mut paren_levels_stack_ptr_ptr = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr = paren_levels_stack_ptr_ptr;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr_ptr;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr_ptr;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr =\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n    let\
    \ mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf0qpl5uj.rs:25:75\n   |\n\
    25 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    \   |                                                                        \
    \   ^ help: add `;` here\n26 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr` in this scope\n\
    \  --> /tmp/tmpf0qpl5uj.rs:17:62\n   |\n17 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n   |                    \
    \                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr`\n\
    \nerror[E0425]: cannot find value `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr`\
    \ in this scope\n  --> /tmp/tmpf0qpl5uj.rs:24:90\n   |\n24 | ...tr_ptr_ptr_ptr_ptr_ptr\
    \ = paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpf0qpl5uj.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_levels_size = paren_string.len();\n\
    \    let mut paren_levels_index = 0;\n    let mut paren_levels_size_index = 0;\n\
    \    let mut paren_levels_size_minus_1 = paren_levels_size;\n    let mut paren_levels_size_minus_2\
    \ = paren_levels_size;\n    let mut paren_levels_size_minus_3 = paren_levels_size;\n\
    \    let mut paren_levels_size_minus_4 = paren_levels_size;\n    let mut paren_levels_size_minus_5\
    \ = paren_levels_size;\n    let mut paren_levels_size_minus_6 = paren_levels_size;\n\
    \    let mut paren_levels_size_minus_7 = paren_levels_size;\n    let mut paren_levels_size_minus_8\
    \ = paren_levels_size;\n    let mut paren_levels_size_minus_9 = paren_levels_size;\n\
    \    let mut paren_levels_size_minus_10 = paren_levels_size;\n    let mut paren_levels_size_minus_11\
    \ = paren_levels_size;\n    let mut paren_levels_size_minus_12 = paren_levels_size;\n\
    \    let mut paren_levels_size_minus_13 = paren_levels_size;\n    let mut paren_levels_size_minus_14\
    \ = paren_levels_size;\n    let mut paren_levels_size_minus_15 = paren_levels_size;\n\
    \    let mut paren_levels_size_minus_16 = paren_levels_size;\n    let mut paren_levels_size_minus_17\
    \ = paren_levels_size;\n    let mut paren_levels_size_minus_18 = paren_levels_size;\n\
    \    let mut paren_levels_size_minus_19 = paren_levels_size;\n    let mut paren_levels_size_minus_20\
    \ = paren_levels_size;\n    let mut paren_levels_size_minus_21 = paren_levels_size;\n\
    \    let mut paren_levels_size_minus_22 = paren_levels_size;\n    let mut paren_levels_size_minus_23\
    \ = paren_levels_size;\n    let mut paren_levels_size_minus_24 = paren_levels_size;\n\
    \    let mut paren_levels_size_minus_25 = paren_levels_size;\n    let mut paren_levels_size_minus_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp7b4bphj8.rs:36:37\n   |\n\
    36 |     let mut paren_levels_size_minus_\n   |                              \
    \       ^ help: add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp7b4bphj8.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels: Vec<isize>\
    \ = vec![];\n    let mut paren_levels_stack: Vec<isize> = vec![];\n    let mut\
    \ paren_levels_stack_top: isize = 0;\n    let mut paren_levels_stack_end: isize\
    \ = 0;\n    let mut paren_levels_stack_level: isize = 0;\n    let mut paren_levels_stack_levels:\
    \ Vec<isize> = vec![];\n    let mut paren_levels_stack_levels_end: isize = 0;\n\
    \    let mut paren_levels_stack_levels_start: isize = 0;\n    let mut paren_levels_stack_levels_level:\
    \ isize = 0;\n    let mut paren_levels_stack_levels_levels: Vec<isize> = vec![];\n\
    \    let mut paren_levels_stack_levels_levels_end: isize = 0;\n    let mut paren_levels_stack_levels_levels_start:\
    \ isize = 0;\n    let mut paren_levels_stack_levels_levels_level: isize = 0;\n\
    \    let mut paren_levels_stack_levels_levels_levels: Vec<isize> = vec![];\n \
    \   let mut paren_levels_stack_levels_levels_levels_end: isize = 0;\n    let mut\
    \ paren_levels_stack_levels_levels_levels_start: isize = 0;\n    let mut paren_levels_stack_levels_levels_levels_level:\
    \ isize = 0;\n    let mut paren_levels_stack_levels_levels_levels_levels: Vec<isize>\
    \ = vec![];\n    let mut paren_levels_stack_levels_levels_levels_levels_end: isize\
    \ = 0;\n    let mut paren_levels_stack_levels_levels_levels_levels_start: isize\
    \ = 0;\n    let mut paren_levels_stack_levels_levels_levels_levels_level: isize\
    \ = 0;\n    let mut paren_levels_stack_levels_levels_levels_levels_levels: Vec<isize>\
    \ = vec![];\n    let mut paren_levels_stack_levels_levels_levels_levels_levels_end:\
    \ isize = 0;\n    let mut paren_levels_stack_levels_levels_levels_levels_levels_start:\
    \ isize = 0;\n    let mut paren_levels_stack_levels_levels_levels_levels_levels_level:\
    \ isize = 0;\n    let mut paren_levels_stack_levels_levels_levels_levels_levels_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp79qwye4l.rs:31:67\n   |\n\
    31 |     let mut paren_levels_stack_levels_levels_levels_levels_levels_\n   |\
    \                                                                   ^ help: add\
    \ `;` here\n32 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp79qwye4l.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpixd35di0.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpixd35di0.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_len = paren\n}\n\
    \nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmph54wb144.rs:36:43\n   |\n\
    36 |     let mut paren_levels_stack_len = paren\n   |                        \
    \                   ^ help: add `;` here\n37 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `paren` in this scope\n  --> /tmp/tmph54wb144.rs:36:38\n\
    \   |\n36 |     let mut paren_levels_stack_len = paren\n   |                 \
    \                     ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmph54wb144.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_pos = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1pk8kx8n.rs:35:38\n   |\n\
    35 |     let mut paren_levels_stack_bottom\n   |                             \
    \         ^ help: add `;` here\n36 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp1pk8kx8n.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_indexes: Vec<isize>\
    \ = Vec::new();\n    let mut paren_level_indexes_len = 0;\n    let mut paren_level_indexes_len_index\
    \ = 0;\n    let mut paren_level_indexes_len_indexes = 0;\n    let mut paren_level_indexes_len_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_index = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_indexe_indexe\
    \ = 0;\n    let mut paren_level_indexes_len_indexe_indexe = 0;\n    let mut paren_level_indexes_len_index\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp2zlhlfp6.rs:40:42\n   |\n\
    40 |     let mut paren_level_indexes_len_index\n   |                         \
    \                 ^ help: add `;` here\n41 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp2zlhlfp6.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting = 0;\n\
    \    let mut paren_nesting_level = 0;\n    let mut paren_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpi1elaq8z.rs:36:35\n   |\n\
    36 |     let mut paren_nesting_nesting_\n   |                                \
    \   ^ help: add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpi1elaq8z.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n \
    \   let mut paren_levels_stack_ptr_end_ptr = paren_levels_stack_ptr;\n    let\
    \ mut paren_levels_stack_ptr_end_ptr_end = paren_levels_stack_ptr_end_ptr;\n \
    \   let mut paren_levels_stack_ptr_end_ptr_end_ptr = paren_levels_stack_ptr_end_ptr;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end = paren_levels_stack_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr = paren_levels_stack_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr =\
    \ paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n    let mut\
    \ paren_levels_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpr4jjegzj.rs:22:26\n   |\n\
    22 |     let mut paren_levels_\n   |                          ^ help: add `;`\
    \ here\n23 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpr4jjegzj.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n  |    -------------------                          ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_iter = paren_string.char_indices();\n    let\
    \ mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mu\n}\n\
    \nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpglr9w2ib.rs:36:11\n   |\n\
    36 |     let mu\n   |           ^ help: add `;` here\n37 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpglr9w2ib.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_string = paren_string;\n\
    \    let mut paren_level_chars = paren_string.chars();\n    let mut paren_level_chars_iter\
    \ = paren_level_chars.iter();\n    let mut paren_level_chars_next = paren_level_chars.next();\n\
    \    while paren_level_chars_next.is_some() {\n        paren_level_chars_next\
    \ = paren_level_chars.next();\n        if paren_level_chars_next.is_none() {\n\
    \            break;\n        }\n        let paren_level_char = paren_level_chars_next.unwrap();\n\
    \        if paren_level_char == ')' {\n            paren_level_count = paren_level_count;\n\
    \            paren_level_string = paren_level_string.trim_end(')');\n        \
    \    paren_level_string = paren_level_string.trim_start('(');\n            paren_levels.push(paren_level);\n\
    \            paren_level = 0;\n        } else {\n            paren_level += 1;\n\
    \        }\n    }\n    paren_levels.push(paren_level);\n    paren_levels\n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for struct `Chars` in the current\
    \ scope\n  --> /tmp/tmplxcdqs3_.rs:10:56\n   |\n10 |     let mut paren_level_chars_iter\
    \ = paren_level_chars.iter();\n   |                                          \
    \              ^^^^ private field, not a method\n\nerror[E0061]: this function\
    \ takes 0 arguments but 1 argument was supplied\n    --> /tmp/tmplxcdqs3_.rs:20:53\n\
    \     |\n20   |             paren_level_string = paren_level_string.trim_end(')');\n\
    \     |                                                     ^^^^^^^^ --- supplied\
    \ 1 argument\n     |                                                     |\n \
    \    |                                                     expected 0 arguments\n\
    \     |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmplxcdqs3_.rs:20:34\n   |\n8  |     let mut paren_level_string =\
    \ paren_string;\n   |                                  ------------ expected due\
    \ to this value\n...\n20 |             paren_level_string = paren_level_string.trim_end(')');\n\
    \   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \          |\n   |                                  expected struct `String`,\
    \ found `&str`\n\nerror[E0061]: this function takes 0 arguments but 1 argument\
    \ was supplied\n    --> /tmp/tmplxcdqs3_.rs:21:53\n     |\n21   |            \
    \ paren_level_string = paren_level_string.trim_start('(');\n     |           \
    \                                          ^^^^^^^^^^ --- supplied 1 argument\n\
    \     |                                                     |\n     |        \
    \                                             expected 0 arguments\n     |\nnote:\
    \ associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplxcdqs3_.rs:21:34\n\
    \   |\n8  |     let mut paren_level_string = paren_string;\n   |             \
    \                     ------------ expected due to this value\n...\n21 |     \
    \        paren_level_string = paren_level_string.trim_start('(');\n   |      \
    \                      "
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_2akhuc1.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_2akhuc1.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n \
    \   let mut paren_levels_stack_ptr_end = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_ptr_end_ptr = paren_levels_stack_ptr_end;\n    let mut paren_levels_stack_ptr_end_ptr\
    \ = paren_levels_stack_ptr_end;\n    let mut paren_levels_stack_ptr_end_ptr =\
    \ paren_levels_stack_ptr_end;\n    let mut paren_levels_stack_ptr_end_ptr = paren_levels_stack_ptr_end;\n\
    \    let mut paren_levels_stack_ptr_end_ptr = paren_levels_stack_ptr_end;\n  \
    \  let mut paren_levels_stack_ptr_end_ptr = paren_levels_stack_ptr_end;\n    let\
    \ mut paren_levels_stack_ptr_end_ptr = paren_levels_stack_ptr_end;\n    let mut\
    \ paren_levels_stack_ptr_end_ptr = paren_levels_stack_ptr_end;\n    let mut paren_levels_stack_ptr_end_ptr\
    \ = paren_levels_stack_ptr_end;\n    let mut paren_levels_stack_ptr_end_ptr =\
    \ paren_levels_stack_ptr_end;\n    let mut paren_levels_stack_ptr_end_ptr = paren_levels_stack_ptr_end;\n\
    \    let mut paren_levels_stack_ptr_end_ptr = paren_levels_stack_ptr_end;\n  \
    \  let mut paren_levels_stack_ptr_end_ptr = paren_levels_stack_ptr_end;\n    let\
    \ mut paren_levels_stack_ptr_end_ptr = paren_levels_stack_ptr_end;\n    let mut\
    \ paren_levels_stack_ptr_end_ptr = paren_levels_stack_ptr_end;\n    let mut paren_levels_stack_ptr_end_ptr\
    \ = paren_levels_stack_ptr_end;\n    let mut paren_levels_stack_ptr_end_ptr =\
    \ paren_levels_stack_ptr_end;\n    let mut paren_levels_stack_ptr_end_ptr = paren_levels_stack_ptr_end;\n\
    \    let mut paren_levels_stack_ptr_end_ptr = paren_levels_stack_ptr_end;\n  \
    \  let mut paren_levels_stack_ptr_end_\n}\n\nfn main() {\n    let candidate =\
    \ parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpwktt0hkh.rs:30:40\n   |\n\
    30 |     let mut paren_levels_stack_ptr_end_\n   |                           \
    \             ^ help: add `;` here\n31 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpwktt0hkh.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels = Vec::new();\n\
    \    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n  \
    \  assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzxi3thdo.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpzxi3thdo.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = Vec::new();\n    let mut paren_level_char\
    \ = 0;\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_level_char.len();\n    let mut paren_level_char_pos = 0;\n    let mut\
    \ paren_level_char_len = paren_level_char.len();\n    let mut paren_level_char_pos\
    \ = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n    let mut\
    \ paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_char.len();\n\
    \    let mut paren_level_char_pos = 0;\n}\n\nfn main() {\n    let candidate =\
    \ parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0689]: can't call method `len` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp55kkb1b1.rs:12:53\n   |\n12 |     let mut paren_level_char_len\
    \ = paren_level_char.len();\n   |                                            \
    \         ^^^\n   |\nhelp: you must specify a type for this binding, like `i32`\n\
    \   |\n10 |     let mut paren_level_char: i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0689]: can't call method `len` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp55kkb1b1.rs:14:53\n   |\n14 |     let mut paren_level_char_len\
    \ = paren_level_char.len();\n   |                                            \
    \         ^^^\n   |\nhelp: you must specify a type for this binding, like `i32`\n\
    \   |\n10 |     let mut paren_level_char: i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0689]: can't call method `len` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp55kkb1b1.rs:16:53\n   |\n16 |     let mut paren_level_char_len\
    \ = paren_level_char.len();\n   |                                            \
    \         ^^^\n   |\nhelp: you must specify a type for this binding, like `i32`\n\
    \   |\n10 |     let mut paren_level_char: i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0689]: can't call method `len` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp55kkb1b1.rs:18:53\n   |\n18 |     let mut paren_level_char_len\
    \ = paren_level_char.len();\n   |                                            \
    \         ^^^\n   |\nhelp: you must specify a type for this binding, like `i32`\n\
    \   |\n10 |     let mut paren_level_char: i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0689]: can't call method `len` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp55kkb1b1.rs:20:53\n   |\n20 |     let mut paren_level_char_len\
    \ = paren_level_char.len();\n   |                                            \
    \         ^^^\n   |\nhelp: you must specify a type for this binding, like `i32`\n\
    \   |\n10 |     let mut paren_level_char: i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0689]: can't call method `len` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp55k"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_2akhuc1.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_2akhuc1.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_ptr = paren_levels_stack.as_mut_ptr();\n    let\
    \ mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \    let mut paren_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpouhhhee3.rs:27:19\n   |\n\
    27 |     let mut paren_\n   |                   ^ help: add `;` here\n28 | }\n\
    \   | - unexpected token\n\nwarning: type annotations needed\n  --> /tmp/tmpouhhhee3.rs:10:53\n\
    \   |\n10 |     let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \   |                                                     ^^^^^^\n   |\n   = note:\
    \ `#[warn(tyvar_behind_raw_pointer)]` on by default\n   = warning: this is accepted\
    \ in the current edition (Rust 2015) but is a hard error in Rust 2018!\n   = note:\
    \ for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpouhhhee3.rs:10:60\n   |\n10 |\
    \     let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \   |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     let mut\
    \ paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len().try_into().unwrap());\n\
    \   |                                                                        \
    \            ++++++++++++++++++++\n\nwarning: type annotations needed\n  --> /tmp/tmpouhhhee3.rs:11:53\n\
    \   |\n11 |     let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \   |                                                     ^^^^^^\n   |\n   = warning:\
    \ this is accepted in the current edition (Rust 2015) but is a hard error in Rust\
    \ 2018!\n   = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpouhhhee3.rs:11:60\n   |\n11 |\
    \     let mut paren_levels_ptr_end = paren_levels_ptr.offset(paren_levels_stack.len());\n\
    \   |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_stack_ptr_next = 0;\n    let mut paren_levels_stack_ptr_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next_next = 0;\n   \
    \ let mut paren_levels_stack_ptr_next_next_next_next_next_next = 0;\n    let mut\
    \ paren_levels_stack_ptr_next_next_next_next_next_next_next = 0;\n    let mut\
    \ paren_levels_stack_ptr_next_next_next_next_next_next_next_next = 0;\n    let\
    \ mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next = 0;\n  \
    \  let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_levels_stack_ptr_next_next_\n}\n\nfn main() {\n    let\
    \ candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()())\
    \ ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp0_tzka60.rs:32:46\n   |\n\
    32 |     let mut paren_levels_stack_ptr_next_next_\n   |                     \
    \                         ^ help: add `;` here\n33 | }\n   | - unexpected token\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp0_tzka60.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_ptr = paren_levels_stack;\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_pos = 0;\n    let\
    \ mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n   \
    \ let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_bottom =\
    \ paren_levels_stack_size;\n    let mut paren_levels_stack_pos = 0;\n    let mut\
    \ paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n   \
    \ let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_bottom =\
    \ paren_levels_stack_size;\n    let mut paren_levels_stack_pos = 0;\n    let mut\
    \ paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n   \
    \ let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_bottom =\
    \ paren_levels_stack_size;\n    let mut paren_levels_stack_pos = 0;\n    let mut\
    \ paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n   \
    \ let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_bottom =\
    \ paren_levels_stack_size;\n    let mut paren_levels_stack_pos = 0;\n    let mut\
    \ paren_levels_stack_bottom = \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpjq24lku9.rs:41:1\n\
    \   |\n41 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_indexes: Vec<isize>\
    \ = vec![];\n    let mut paren_level_indexes_len = 0;\n    let mut paren_level_indexes_len_index\
    \ = 0;\n    let mut paren_level_indexes_len_indexes: Vec<isize> = vec![];\n  \
    \  let mut paren_level_indexes_len_indexes_len = 0;\n    let mut paren_level_indexes_len_indexes_len_index\
    \ = 0;\n    let mut paren_level_indexes_len_indexes_len_indexes: Vec<isize> =\
    \ vec![];\n    let mut paren_level_indexes_len_indexes_len_indexes_len = 0;\n\
    \    let mut paren_level_indexes_len_indexes_len_indexes_len_index = 0;\n    let\
    \ mut paren_level_indexes_len_indexes_len_indexes_len_indexes: Vec<isize> = vec![];\n\
    \    let mut paren_level_indexes_len_indexes_len_indexes_len_index = 0;\n    let\
    \ mut paren_level_indexes_len_indexes_len_indexes_len_indexes: Vec<isize> = vec![];\n\
    \    let mut paren_level_indexes_len_indexes_len_indexes_len_index = 0;\n    let\
    \ mut paren_level_indexes_len_indexes_len_indexes_len_indexes: Vec<isize> = vec![];\n\
    \    let mut paren_level_indexes_len_indexes_len_indexes_len_index = 0;\n    let\
    \ mut paren_level_indexes_len_indexes_len_indexes_len_indexes: Vec<isize> = vec![];\n\
    \    let mut paren_level_indexes_len_indexes_len_indexes_len_index = 0;\n    let\
    \ mut paren_level_indexes_len_indexes_len_indexes_len_indexes: Vec<isize> = vec![];\n\
    \    let mut paren_level_indexes_len_indexes_len_indexes_len_index = 0;\n    let\
    \ mut paren_level_indexes_len_indexes_len_indexes_len_indexes: Vec<isize> = vec![];\n\
    \    let mut paren_level_indexes_len_indexes_len_indexes_len_index = 0;\n    let\
    \ mut paren_level_indexes_len_indexes_len_indexes_len_indexes: Vec<isize> = vec![];\n\
    \    let mut paren_level_indexes_len_indexes_len_indexes_len_index = 0;\n    let\
    \ mut paren_level_indexes_len\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpplv87ju_.rs:31:36\n   |\n\
    31 |     let mut paren_level_indexes_len\n   |                               \
    \     ^ help: add `;` here\n32 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpplv87ju_.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 101
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    for paren in paren_string.chars()\
    \ {\n        if paren == '(' {\n            paren_level += 1;\n            paren_level_count\
    \ += 1;\n        } else if paren == ')' {\n            paren_level -= 1;\n   \
    \         paren_level_count += 1;\n            if paren_level == 0 {\n       \
    \         paren_levels.push(paren_level_count);\n            }\n        }\n  \
    \  }\n    paren_levels\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 12, 14, 24]`,\n right: `[2, 3, 1, 3]`', /tmp/tmpoxeiludo.rs:25:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nest\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprjp1jeym.rs:38:47\n   |\n\
    38 |     let mut paren_nesting_nesting_nesting_nest\n   |                    \
    \                           ^ help: add `;` here\n39 | }\n   | - unexpected token\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmprjp1jeym.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_levels_iter = paren_string.char_indices().peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpoozmcy2e.rs:36:24\n   |\n\
    36 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    37 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpoozmcy2e.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_char: char\
    \ = '(';\n    let mut paren_level_char_index = 0;\n    let mut paren_level_char_length\
    \ = 0;\n    let mut paren_level_char_length_index = 0;\n    let mut paren_level_char_length_value\
    \ = 0;\n    let mut paren_level_char_length_next = 0;\n    let mut paren_level_char_length_next_index\
    \ = 0;\n    let mut paren_level_char_length_next_value = 0;\n    let mut paren_level_char_length_next_next\
    \ = 0;\n    let mut paren_level_char_length_next_next_index = 0;\n    let mut\
    \ paren_level_char_length_next_next_value = 0;\n    let mut paren_level_char_length_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_next_next_index = 0;\n    let mut\
    \ paren_level_char_length_next_next_value = 0;\n    let mut paren_level_char_length_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_next_next_index = 0;\n    let mut\
    \ paren_level_char_length_next_next_value = 0;\n    let mut paren_level_char_length_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_next_next_index = 0;\n    let mut\
    \ paren_level_char_length_next_next_value = 0;\n    let mut paren_level_char_length_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_next_next_index = 0;\n    let mut\
    \ paren_level_char_length_next_next_value = 0;\n    let mut paren_level_char_length_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_next_next_index = 0;\n    let mut\
    \ paren_level_char_length_next_next_value = 0;\n    let mut paren_level_char_length_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_next_next_index = 0;\n    let mut\
    \ paren_level_char_length_next_next_value = 0;\n    let mut paren_level_char_length_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_next_next_index = 0;\n    let mut\
    \ paren_level_char_length_next_next_value = 0;\n    let mut paren_level_char_length_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_next_next_index = 0;\n    let mut\
    \ paren_level_char_length_next_next_value = 0;\n    let mut paren_level_char_length_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_next_next_index = 0;\n    let mut\
    \ paren_level_char_length_next_next_value = 0;\n    let mut paren\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpabrie9p1.rs:46:18\n   |\n\
    46 |     let mut paren\n   |                  ^ help: add `;` here\n47 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpabrie9p1.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let mut paren_level_char_pos_end\
    \ = 0;\n    let mut paren_level_char_pos_start = 0;\n    let \n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp_jubc061.rs:53:1\n  \
    \ |\n53 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_iter = paren_string.char_indices();\n    let\
    \ mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let \n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpfs1wuxzn.rs:37:1\n  \
    \ |\n37 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpixd35di0.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpixd35di0.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_curr = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_curr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_curr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_curr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_curr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_curr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_curr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_curr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_curr = paren_levels_stack.len();\n\
    \    let \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpzzw0fphm.rs:36:1\n  \
    \ |\n36 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpeypmw6p1.rs:35:52\n   |\n\
    35 |     let mut paren_levels_stack_bottom = paren_level\n   |               \
    \                                     ^ help: add `;` here\n36 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpeypmw6p1.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nest\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprjp1jeym.rs:38:47\n   |\n\
    38 |     let mut paren_nesting_nesting_nesting_nest\n   |                    \
    \                           ^ help: add `;` here\n39 | }\n   | - unexpected token\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmprjp1jeym.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = Vec::new();\n    let mut paren_level_char\
    \ = 0;\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_level_chars.len();\n    let mut paren_level_char_pos = 0;\n    let mut\
    \ paren_level_char_len = paren_level_chars.len();\n    let mut paren_level_char_pos\
    \ = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n    let mut\
    \ paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len = paren_level_chars.len();\n\
    \    let mut paren_level_char_pos = 0;\n}\n\nfn main() {\n    let candidate =\
    \ parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqc7csjmt.rs:4:49\n  |\n4 |\
    \ fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_2akhuc1.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_2akhuc1.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_cur\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpixd35di0.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpixd35di0.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_max\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_cur = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_max_max = paren_levels_stack.len();\n    let mut paren_levels_stack_max_max_ptr\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_max_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_max_max = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_max_max_max_ptr = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_max_max_max_cur = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_max_max_max_max = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_max_max_max_max_ptr = paren_levels_stack.len();\n   \
    \ let mut paren_levels_stack_max_max_max_max_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_max_max_max_max = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_max_max_max_max_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_max_max_max_max_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_max_max_max_max_max = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_max_max_max_max_max_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_max_max_max_max_max_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_max_max_max_max_max_max = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_max_max_max_max_max_max_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp8z1dlnyz.rs:31:36\n   |\n\
    31 |     let mut paren_levels_stack_max_\n   |                               \
    \     ^ help: add `;` here\n32 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp8z1dlnyz.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_indexes: Vec<isize>\
    \ = Vec::new();\n    let mut paren_level_indexes_len = 0;\n    let mut paren_level_indexes_len_index\
    \ = 0;\n    let mut paren_level_indexes_len_indexes: Vec<isize> = Vec::new();\n\
    \    let mut paren_level_indexes_len_indexes_len = 0;\n    let mut paren_level_indexes_len_indexes_len_index\
    \ = 0;\n    let mut paren_level_indexes_len_indexes_len_indexes: Vec<isize> =\
    \ Vec::new();\n    let mut paren_level_indexes_len_indexes_len_indexes_len = 0;\n\
    \    let mut paren_level_indexes_len_indexes_len_indexes_len_index = 0;\n    let\
    \ mut paren_level_indexes_len_indexes_len_indexes_len_indexes: Vec<isize> = Vec::new();\n\
    \    let mut paren_level_indexes_len_indexes_len_indexes_len_indexes_len = 0;\n\
    \    let mut paren_level_indexes_len_indexes_len_indexes_len_indexes_len_index\
    \ = 0;\n    let mut paren_level_indexes_len_indexes_len_indexes_len_indexes_len_indexes:\
    \ Vec<isize> = Vec::new();\n    let mut paren_level_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len\
    \ = 0;\n    let mut paren_level_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_index\
    \ = 0;\n    let mut paren_level_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_indexes:\
    \ Vec<isize> = Vec::new();\n    let mut paren_level_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len\
    \ = 0;\n    let mut paren_level_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_index\
    \ = 0;\n    let mut paren_level_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_indexes:\
    \ Vec<isize> = Vec::new();\n    let mut paren_level_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len\
    \ = 0;\n    let mut paren_level_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_indexes_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpy9a4yg6h.rs:28:93\n   |\n\
    28 |     let mut paren_level_indexes_len_indexes_len_indexes_len_indexes_len_indexes_len_indexes_\n\
    \   |                                                                        \
    \                     ^ help: add `;` here\n29 | }\n   | - unexpected token\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpy9a4yg6h.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n  \
    \  assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpdbxjl4na.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpdbxjl4na.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nest\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprjp1jeym.rs:38:47\n   |\n\
    38 |     let mut paren_nesting_nesting_nesting_nest\n   |                    \
    \                           ^ help: add `;` here\n39 | }\n   | - unexpected token\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmprjp1jeym.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_stack = Vec::new();\n\
    \    let mut paren_level_stack_len = paren_level_stack.len();\n    let mut paren_level_stack_pos\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_top = paren_level_stack_len;\n\
    \    let mut paren_level_stack_bottom = paren_level_stack_len;\n    let mut paren_level_stack_top\
    \ = paren_level_stack_len;\n    let mut paren_level_stack_bottom = paren_level_stack_len;\n\
    \    let mut paren_level_stack_top = paren_level_stack_len;\n    let mut paren_level_stack_bottom\
    \ = paren_level_stack_len;\n    let mut paren_level_\n}\n\nfn main() {\n    let\
    \ candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()())\
    \ ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpjzuovggy.rs:41:25\n   |\n\
    41 |     let mut paren_level_\n   |                         ^ help: add `;` here\n\
    42 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjzuovggy.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_char = 0;\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_char_length\
    \ = 0;\n    let mut paren_level_char_length_index = 0;\n    let mut paren_level_char_length_value\
    \ = 0;\n    let mut paren_level_char_length_value_next = 0;\n    let mut paren_level_char_length_value_next_next\
    \ = 0;\n    let mut paren_level_char_length_value_next_next_next = 0;\n    let\
    \ mut paren_level_char_length_value_next_next_next_next = 0;\n    let mut paren_level_char_length_value_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_value_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_value_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_value_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_value_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_value_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_value_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_value_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_value_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_value_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_value_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut paren_level_char_length_value_next_next_next_next_next_next_next_next_next_\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpfgznh54n.rs:34:88\n   |\n\
    34 |     let mut paren_level_char_length_value_next_next_next_next_next_next_next_next_next_\n\
    \   |                                                                        \
    \                ^ help: add `;` here\n35 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpfgznh54n.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_len\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_ptr_end = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_ptr_end_ptr = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptjcl34s7.rs:24:116\n   |\n\
    24 |     let mut paren_levels_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_levels_stack\n   |                                                 \
    \                                                                   ^ help: add\
    \ `;` here\n25 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmptjcl34s7.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 101
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_level_char: char;\n\
    \    let mut paren_level_chars: Vec<char> = paren_string.chars().collect();\n\
    \    while paren_level_chars.len() > 0 {\n        paren_level_char = paren_level_chars.remove(0);\n\
    \        if paren_level_char == '(' {\n            paren_level += 1;\n       \
    \     paren_levels.push(paren_level);\n            paren_level_index += 1;\n \
    \       } else if paren_level_char == ')' {\n            paren_level -= 1;\n \
    \           if paren_level == 0 {\n                paren_level_index -= 1;\n \
    \           }\n        }\n    }\n    paren_levels\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 2, 1, 2, 3, 1, 1, 2, 3, 2, 2]`,\n right: `[2, 3, 1, 3]`', /tmp/tmpryjsk1bz.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nest\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprjp1jeym.rs:38:47\n   |\n\
    38 |     let mut paren_nesting_nesting_nesting_nest\n   |                    \
    \                           ^ help: add `;` here\n39 | }\n   | - unexpected token\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmprjp1jeym.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_pos = 0;\n    let\
    \ mut paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_len =\
    \ paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_ptr = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_pos = 0;\n    let\
    \ mut paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_len =\
    \ paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_ptr = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_pos = 0;\n    let\
    \ mut paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_pos = 0;\n    let mut paren_levels_stack_len =\
    \ \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp1npao87_.rs:39:1\n\
    \   |\n39 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `paren_levels_stack_ptr`\
    \ in this scope\n  --> /tmp/tmp1npao87_.rs:11:38\n   |\n11 |     let mut paren_levels_stack_ptr\
    \ = paren_levels_stack_ptr;\n   |                                      ^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_stack_pos`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_2akhuc1.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_2akhuc1.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nest\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprjp1jeym.rs:38:47\n   |\n\
    38 |     let mut paren_nesting_nesting_nesting_nest\n   |                    \
    \                           ^ help: add `;` here\n39 | }\n   | - unexpected token\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmprjp1jeym.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_max = paren_levels_stack_size;\n    let mut paren_levels_stack_max_pos\
    \ = 0;\n    let mut paren_levels_stack_max_size = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_max_pos = 0;\n    let mut paren_levels_stack_max_max_size\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_max_max_pos\
    \ = 0;\n    let mut paren_levels_stack_max_max_max_size = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_max_max_max_pos = 0;\n    let mut paren_levels_stack_max_max_max_max_size\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_max_max_max_pos\
    \ = 0;\n    let mut paren_levels_stack_max_max_max_max_size = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_max_max_max_max_pos = 0;\n    let mut paren_levels_stack_max_max_max_max_max_size\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_max_max_max_max_pos\
    \ = 0;\n    let mut paren_levels_stack_max_max_max_max_max_size = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_max_max_max_max_pos = 0;\n    let mut paren_levels_stack_max_max_max_max_max_size\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_max_max_max_max_pos\
    \ = 0;\n    let mut paren_levels_stack_max_max_max_max_max_size = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_max_max_max_max_pos = 0;\n    let mut paren_levels_stack_max_max_max_max_max_size\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_max_max_max_max_max_pos\
    \ = 0;\n    let mut paren_levels_stack_max_max_max_max_max_size = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_max_max_max_max_max_pos = 0;\n    let mut paren_levels_stack_max_max_max_max_max_size\
    \ = paren_levels_stack.len();\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqr8iyor8.rs:4:49\n  |\n4 |\
    \ fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nest\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprjp1jeym.rs:38:47\n   |\n\
    38 |     let mut paren_nesting_nesting_nesting_nest\n   |                    \
    \                           ^ help: add `;` here\n39 | }\n   | - unexpected token\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmprjp1jeym.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_char = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut \n}\n\nfn main() {\n   \
    \ let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmphjbaz_zt.rs:53:1\n\
    \   |\n53 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_2akhuc1.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_2akhuc1.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_iter = paren_string.char_indices();\n    let\
    \ mut paren_levels_end = paren_levels_iter.end();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.clone();\n    let mut paren_levels_end = paren_levels_iter.end();\n\
    \    let mut paren_levels_iter = paren_levels_iter.clone();\n    let mut paren_levels_end\
    \ = paren_levels_iter.end();\n    let mut paren_levels_iter = paren_levels_iter.clone();\n\
    \    let mut paren_levels_end = paren_levels_iter.end();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.clone();\n    let mut paren_levels_end = paren_levels_iter.end();\n\
    \    let mut paren_levels_iter = paren_levels_iter.clone();\n    let mut paren_levels_end\
    \ = paren_levels_iter.end();\n    let mut paren_levels_iter = paren_levels_iter.clone();\n\
    \    let mut paren_levels_end = paren_levels_iter.end();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.clone();\n    let mut paren_levels_end = paren_levels_iter.end();\n\
    \    let mut paren_levels_iter = paren_levels_iter.clone();\n    let mut paren_levels_end\
    \ = paren_levels_iter.end();\n    let mut paren_levels_iter = paren_levels_iter.clone();\n\
    \    let mut paren_levels_end = paren_levels_iter.end();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.clone();\n    let mut paren_levels_end = paren_levels_iter.end();\n\
    \    let mut paren_levels_iter = paren_levels_iter.clone();\n    let mut paren_levels_end\
    \ = paren_levels_iter.end();\n    let mut paren_levels_iter = paren_levels_iter.clone();\n\
    \    let mut paren_levels_end = paren_levels_iter.end();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.clone();\n    let mut paren_levels_end = paren_levels_iter.end();\n\
    \    let mut paren_levels_iter = paren_levels_iter.clone();\n    let mut paren_levels_end\
    \ = paren_levels_iter.end();\n    let mut paren_levels_iter = paren_levels_iter.clone();\n\
    \    let mut paren_levels_end = paren_levels_iter.end();\n    let mut paren_levels_iter\
    \ = paren_levels_\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsd7amoxd.rs:39:46\n   |\n\
    39 |     let mut paren_levels_iter = paren_levels_\n   |                     \
    \                         ^ help: add `;` here\n40 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `paren_levels_` in this scope\n  --> /tmp/tmpsd7amoxd.rs:39:33\n\
    \   |\n39 |     let mut paren_levels_iter = paren_levels_\n   |              \
    \                   ^^^^^^^^^^^^^ help: a local variable with a similar name exists:\
    \ `paren_levels`\n\nerror[E0599]: no method named `end` found for struct `CharIndices`\
    \ in the current scope\n --> /tmp/tmpsd7amoxd.rs:8:50\n  |\n8 |     let mut paren_levels_end\
    \ = paren_levels_iter.end();\n  |                                            \
    \      ^^^ method not found in `CharIndices<'_>`\n\nerror[E0599]: no method named\
    \ `end` found for struct `CharIndices` in the current scope\n  --> /tmp/tmpsd7amoxd.rs:10:50\n\
    \   |\n10 |     let mut paren_levels_end = paren_levels_iter.end();\n   |    \
    \                                              ^^^ method not found in `CharIndices<'_>`\n\
    \nerror[E0599]: no method named `end` found for struct `CharIndices` in the current\
    \ scope\n  --> /tmp/tmpsd7amoxd.rs:12:50\n   |\n12 |     let mut paren_levels_end\
    \ = paren_levels_iter.end();\n   |                                           \
    \       ^^^ method not found in `CharIndices<'_>`\n\nerror[E0599]: no method named\
    \ `end` found for struct `CharIndices` in the current scope\n  --> /tmp/tmpsd7amoxd.rs:14:50\n\
    \   |\n14 |     let mut paren_levels_end = paren_levels_iter.end();\n   |    \
    \                                              ^^^ method not found in `CharIndices<'_>`\n\
    \nerror[E0599]: no method named `end` found for struct `CharIndices` in the current\
    \ scope\n  --> /tmp/tmpsd7amoxd.rs:16:50\n   |\n16 |     let mut paren_levels_end\
    \ = paren_levels_iter.end();\n   |                                           \
    \       ^^^ method not found in `CharIndices<'_>`\n\nerror[E0599]: no method named\
    \ `end` found for struct `CharIndices` in the current scope\n  --> /tmp/tmpsd7amoxd.rs:18:50\n\
    \   |\n18 |     let mut paren_"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = 0;\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_bottom = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack.len();\n\n}\n\nfn main() {\n\
    \    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpo1rwt0ma.rs:4:49\n  |\n4 |\
    \ fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = &mut paren_levels_stack;\n    let mut paren_levels_ptr = &mut paren_levels;\n\
    \    let mut paren_level_ptr = &mut paren_level;\n    let mut paren_levels_ptr\
    \ = &mut paren_levels;\n    let mut paren_level_ptr = &mut paren_level;\n    let\
    \ mut paren_levels_ptr = &mut paren_levels;\n    let mut paren_level_ptr = &mut\
    \ paren_level;\n    let mut paren_levels_ptr = &mut paren_levels;\n    let mut\
    \ paren_level_ptr = &mut paren_level;\n    let mut paren_levels_ptr = &mut paren_levels;\n\
    \    let mut paren_level_ptr = &mut paren_level;\n    let mut paren_levels_ptr\
    \ = &mut paren_levels;\n    let mut paren_level_ptr = &mut paren_level;\n    let\
    \ mut paren_levels_ptr = &mut paren_levels;\n    let mut paren_level_ptr = &mut\
    \ paren_level;\n    let mut paren_levels_ptr = &mut paren_levels;\n    let mut\
    \ paren_level_ptr = &mut paren_level;\n    let mut paren_levels_ptr = &mut paren_levels;\n\
    \    let mut paren_level_ptr = &mut paren_level;\n    let mut paren_levels_ptr\
    \ = &mut paren_levels;\n    let mut paren_level_ptr = &mut paren_level;\n    let\
    \ mut paren_levels_ptr = &mut paren_levels;\n    let mut paren_level_ptr = &mut\
    \ paren_level;\n    let mut paren_levels_ptr = &mut paren_levels;\n    let mut\
    \ paren_level_ptr = &mut paren_level;\n    let mut paren_levels_ptr = &mut paren_levels;\n\
    \    let mut paren_level_ptr = &mut paren_level;\n    let mut paren_levels_ptr\
    \ = &mut paren_levels;\n    let mut paren_level_ptr = &mut paren\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpo298hza7.rs:36:41\n   |\n\
    36 |     let mut paren_level_ptr = &mut paren\n   |                          \
    \               ^ help: add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `paren` in this scope\n  --> /tmp/tmpo298hza7.rs:36:36\n \
    \  |\n36 |     let mut paren_level_ptr = &mut paren\n   |                    \
    \                ^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpo298hza7.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_2akhuc1.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_2akhuc1.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = Vec::new();\n    let mut paren_level_chars_count\
    \ = 0;\n    let mut paren_level_chars_index = Vec::new();\n    let mut paren_level_chars_index\
    \ = 0;\n    let mut paren_level_chars_index_count = 0;\n    let mut paren_level_chars_index_char_count\
    \ = 0;\n    let mut paren_level_chars_index_char_pos = 0;\n    let mut paren_level_chars_index_char_pos\
    \ = 0;\n    let mut paren_level_chars_index_char_pos = 0;\n    let mut paren_level_chars_index_char_pos\
    \ = 0;\n    let mut paren_level_chars_index_char_pos = 0;\n    let mut paren_level_chars_index_char_pos\
    \ = 0;\n    let mut paren_level_chars_index_char_pos = 0;\n    let mut paren_level_chars_index_char_pos\
    \ = 0;\n    let mut paren_level_chars_index_char_pos = 0;\n    let mut paren_level_chars_index_char_pos\
    \ = 0;\n    let mut paren_level_chars_index_char_pos = 0;\n    let mut paren_level_chars_index_char_pos\
    \ = 0;\n    let mut paren_level_chars_index_char_pos = 0;\n    let mut paren_level_chars_index_char_pos\
    \ = 0;\n    let mut paren_level_chars_index_char_pos = 0;\n    let mut paren_level_chars_index_char_pos\
    \ = 0;\n    let mut paren_level_chars_index_char_pos = 0;\n    let mut paren_level_chars_index_char_pos\
    \ = 0;\n    let mut paren_level_chars_index_char_pos = 0;\n    let mut paren_level_chars_index_char_pos\
    \ = 0;\n    let mut paren_level_chars_index_char_pos = 0;\n    let mut paren_level_chars_index_char_pos\
    \ = 0;\n    let mut paren_level_chars_index_char_pos = 0;\n    let mut paren_level_chars_index_char_pos\
    \ = 0;\n    let mut paren_level_chars_index_char_pos = 0;\n    let mut paren_level_chars_index_char_pos\
    \ = 0;\n    let mut paren_level_chars_index_char_pos = 0;\n    let mut paren_level_chars_index_char_pos\
    \ = 0;\n    let mut paren_level_chars_index_char_pos = 0;\n    let mut paren_level_chars_index_char_pos\
    \ = 0;\n    let mut paren_level_chars_index_char_pos = 0;\n    let mut paren_level_chars_index_char_pos\
    \ = 0;\n    let mut paren_level_chars_index_char_pos = 0;\n    let mut paren_level_chars_index_char_pos\
    \ = \n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpkldrx_3_.rs:49:1\n\
    \   |\n49 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_nesting = 0;\n\
    \    let mut paren_nesting_level = 0;\n    let mut paren_nesting_nesting = 0;\n\
    \    let mut paren_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpi1elaq8z.rs:36:35\n   |\n\
    36 |     let mut paren_nesting_nesting_\n   |                                \
    \   ^ help: add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpi1elaq8z.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    let mut paren_nesting_level = 0;\n\
    \    let mut paren_nesting_nesting = 0;\n    let mut paren_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let mut paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0;\n    let mut paren_nesting_nesting_nesting_nesting_level = 0;\n    let\
    \ mut paren_nesting_nesting_nesting_nesting_nesting = 0;\n    let mut paren_nesting_nesting_nesting_nest\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprjp1jeym.rs:38:47\n   |\n\
    38 |     let mut paren_nesting_nesting_nesting_nest\n   |                    \
    \                           ^ help: add `;` here\n39 | }\n   | - unexpected token\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmprjp1jeym.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_level = 0;\n    let mut paren_levels = Vec::new();\n\
    \    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_size\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsma7jzdf.rs:28:59\n   |\n\
    28 |     let mut paren_levels_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n   |        \
    \                                                   ^ help: add `;` here\n29 |\
    \ }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpsma7jzdf.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_chars = Vec::new();\n    let mut paren_level_char\
    \ = 0;\n    let mut paren_level_char_pos = 0;\n    let mut paren_level_char_len\
    \ = paren_string.len();\n    let mut paren_level_char_end = paren_level_char_len;\n\
    \    let mut paren_level_char_end_pos = paren_level_char_len;\n    let mut paren_level_char_end_len\
    \ = paren_level_char_len;\n    let mut paren_level_char_end_char = paren_level_char_len;\n\
    \    let mut paren_level_char_end_char_pos = paren_level_char_len;\n    let mut\
    \ paren_level_char_end_char_len = paren_level_char_len;\n    let mut paren_level_char_end_char_char\
    \ = paren_level_char_len;\n    let mut paren_level_char_end_char_pos = paren_level_char_len;\n\
    \    let mut paren_level_char_end_char_len = paren_level_char_len;\n    let mut\
    \ paren_level_char_end_char_char = paren_level_char_len;\n    let mut paren_level_char_end_char_pos\
    \ = paren_level_char_len;\n    let mut paren_level_char_end_char_len = paren_level_char_len;\n\
    \    let mut paren_level_char_end_char_char = paren_level_char_len;\n    let mut\
    \ paren_level_char_end_char_pos = paren_level_char_len;\n    let mut paren_level_char_end_char_len\
    \ = paren_level_char_len;\n    let mut paren_level_char_end_char_char = paren_level_char_len;\n\
    \    let mut paren_level_char_end_char_pos = paren_level_char_len;\n    let mut\
    \ paren_level_char_end_char_len = paren_level_char_len;\n    let mut paren_level_char_end_char_char\
    \ = paren_level_char_len;\n    let mut paren_level_char_end_char_pos = paren_level_char_len;\n\
    \    let mut paren_level_char_end_char_len = paren_level_char_len;\n    let mut\
    \ paren_level_char_end_char_char = paren_level_char_len;\n    let mut paren_level_char_end_char_pos\
    \ = paren_level_char_len;\n    let mut paren_level_char_end_char_len = paren_level_char_len;\n\
    \    let mut paren_level_char_end_char_char = paren_level_char_len;\n    let mut\
    \ paren_level_char_end_char_pos = paren_level_char_len;\n    let mut paren_level_char_end_char_len\
    \ = paren_level_char_len;\n\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp231a522o.rs:4:49\n  |\n4 |\
    \ fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 101
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_nesting = 0;\n    for paren in paren_string.chars()\
    \ {\n        if paren == '(' {\n            paren_level += 1;\n            paren_nesting\
    \ += 1;\n        } else if paren == ')' {\n            paren_level -= 1;\n   \
    \         paren_nesting -= 1;\n            if paren_nesting == 0 {\n         \
    \       paren_levels.push(paren_level);\n            }\n        }\n    }\n   \
    \ paren_levels\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n \
    \   assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0]`,\n right: `[2, 3, 1, 3]`', /tmp/tmp6972l3fx.rs:25:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976095
