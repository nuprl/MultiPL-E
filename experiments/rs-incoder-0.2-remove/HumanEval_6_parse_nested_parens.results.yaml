language: rs
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack = Vec::new();\n\
    \    let mut paren_levels_stack_count = 0;\n    let mut paren_levels_stack\n}\n\
    \nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmplw3b4c6v.rs:46:31\n   |\n\
    46 |     let mut paren_levels_stack\n   |                               ^ help:\
    \ add `;` here\n47 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmplw3b4c6v.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = vec![];\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_ptr = paren_levels_stack_len;\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack_ptr;\n    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_ptr;\n    let mut\
    \ paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr\
    \ = paren_levels_stack_len;\n    let mut paren_levels_stack_top = paren_levels_stack_ptr;\n\
    \    let mut paren\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpodk0sqg7.rs:36:18\n   |\n\
    36 |     let mut paren\n   |                  ^ help: add `;` here\n37 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpodk0sqg7.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = &mut paren_levels_stack;\n    let mut paren_levels_ptr = &mut paren_levels;\n\
    \    let mut paren_levels_ptr_end = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_end_ptr\
    \ = &mut paren_levels_ptr_end;\n    let mut paren_levels_ptr_end_ptr_end = &mut\
    \ paren_levels_ptr_end_ptr;\n    let mut paren_levels_ptr_end_ptr_end_ptr = &mut\
    \ paren_levels_ptr_end_ptr_end;\n    let mut paren_levels_ptr_end_ptr_end_ptr_end\
    \ = &mut paren_levels_ptr_end_ptr_end_ptr;\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr\
    \ = &mut paren_levels_ptr_end_ptr_end_ptr_end_ptr;\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end;\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n    let mut\
    \ paren_levels_ptr_end_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr = &mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr = &mut\
    \ paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_\n}\n\nfn main() {\n   \
    \ let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp64x9sc8g.rs:21:130\n   |\n\
    21 |     let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_\n   |                 \
    \                                                                            \
    \                                     ^ help: add `;` here\n22 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `paren_levels_ptr_end_ptr_end_ptr_end_ptr`\
    \ in this scope\n  --> /tmp/tmp64x9sc8g.rs:15:61\n   |\n15 |     let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr\
    \ = &mut paren_levels_ptr_end_ptr_end_ptr_end_ptr;\n   |                     \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_ptr_end_ptr_end_ptr_end`\n\
    \nerror[E0425]: cannot find value `paren_levels_ptr_end_ptr_end_ptr_end_ptr_end`\
    \ in this scope\n  --> /tmp/tmp64x9sc8g.rs:16:65\n   |\n16 |     let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end;\n   |                 \
    \                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_ptr_end_ptr_end_ptr_end_ptr`\n\
    \nerror[E0425]: cannot find value `paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr`\
    \ in this scope\n  --> /tmp/tmp64x9sc8g.rs:17:69\n   |\n17 |     let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n   |             \
    \                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_ptr_end_ptr_end_ptr_end_ptr_ptr`\n\
    \nerror[E0425]: cannot find value `paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr`\
    \ in this scope\n  --> /tmp/tmp64x9sc8g.rs:18:73\n   |\n18 |     let mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n   |     \
    \         "
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_size;\n    let mut paren_levels_stack_top = paren_levels_stack_size;\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack_size;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_size;\n    let mut paren_levels_stack_bottom\
    \ = paren_level\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n\
    \    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2,\
    \ 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\"\
    )), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\"\
    )), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp23u0z2tx.rs:35:52\n   |\n\
    35 |     let mut paren_levels_stack_bottom = paren_level\n   |               \
    \                                     ^ help: add `;` here\n36 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp23u0z2tx.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = vec![];\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_level_char_count\
    \ = 0;\n    let mut paren_level_char = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut paren_level_chars = vec![];\n\
    \    let mut paren_level_char_index = 0;\n    let mut \n}\n\nfn main() {\n   \
    \ let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmphjbaz_zt.rs:53:1\n\
    \   |\n53 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_next = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_next = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_next = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_next = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_next = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_next = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_len = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_cur = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_next = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_len = paren_level\n}\n\nfn main() {\n    let candidate =\
    \ parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphlcrii_5.rs:35:49\n   |\n\
    35 |     let mut paren_levels_stack_len = paren_level\n   |                  \
    \                               ^ help: add `;` here\n36 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmphlcrii_5.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_2akhuc1.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_2akhuc1.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = &mut paren_levels_stack;\n    let mut paren_levels_ptr = &mut paren_levels;\n\
    \    let mut paren_levels_ptr_end = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_end_ptr\
    \ = &mut paren_levels_ptr_end;\n    let mut paren_levels_ptr_end_ptr_ptr = &mut\
    \ paren_levels_ptr_end_ptr;\n    let mut paren_levels_ptr_end_ptr_ptr_ptr = &mut\
    \ paren_levels_ptr_end_ptr_ptr;\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr;\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr;\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n    let mut\
    \ paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `paren_levels_ptr_end_ptr_ptr_ptr_ptr`\
    \ in this scope\n  --> /tmp/tmpv7teo8g7.rs:14:57\n   |\n14 |     let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr;\n   |                         \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a\
    \ local variable with a similar name exists: `paren_levels_ptr_end_ptr_ptr_ptr`\n\
    \nerror[E0425]: cannot find value `paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr` in\
    \ this scope\n  --> /tmp/tmpv7teo8g7.rs:15:61\n   |\n15 |     let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr;\n   |                     \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_ptr_end_ptr_ptr_ptr_ptr`\n\
    \nerror[E0425]: cannot find value `paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr`\
    \ in this scope\n  --> /tmp/tmpv7teo8g7.rs:16:69\n   |\n16 |     let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n   |             \
    \                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr`\n\
    \nerror[E0425]: cannot find value `paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr`\
    \ in this scope\n  --> /tmp/tmpv7teo8g7.rs:17:77\n   |\n17 |     let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n   |     \
    \                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr`\n\
    \nerror[E0425]: cannot find value `paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr`\
    \ in this scope\n  --> /tmp/tmpv7teo8g7.rs:18:85\n   |\n18 | ...r_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpb203r7bj.rs:35:43\n   |\n\
    35 |     let mut paren_levels_stack_top = paren\n   |                        \
    \                   ^ help: add `;` here\n36 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `paren` in this scope\n  --> /tmp/tmpb203r7bj.rs:35:38\n\
    \   |\n35 |     let mut paren_levels_stack_top = paren\n   |                 \
    \                     ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpb203r7bj.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_2akhuc1.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_2akhuc1.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_size = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_\n}\n\nfn main()\
    \ {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpe4zlsk32.rs:36:32\n   |\n\
    36 |     let mut paren_levels_stack_\n   |                                ^ help:\
    \ add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpe4zlsk32.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_ptr = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_end = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren\n}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpb203r7bj.rs:35:43\n   |\n\
    35 |     let mut paren_levels_stack_top = paren\n   |                        \
    \                   ^ help: add `;` here\n36 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `paren` in this scope\n  --> /tmp/tmpb203r7bj.rs:35:38\n\
    \   |\n35 |     let mut paren_levels_stack_top = paren\n   |                 \
    \                     ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpb203r7bj.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr = Vec::new();\n    let mut paren_levels_ptr_end\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_end_ptr_end = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_ptr = Vec::new();\n\
    \    let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpv7tz7l19.rs:27:85\n   |\n\
    27 |     let mut paren_levels_ptr_end_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\n\
    \   |                                                                        \
    \             ^ help: add `;` here\n28 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpv7tz7l19.rs:4:49\n  |\n4 | fn parse_nested_parens(paren_string:\
    \ String) -> Vec<isize> {\n  |    -------------------                        \
    \  ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_pos\
    \ = 0;\n    let mut paren_levels_stack_len = paren_levels_stack.len();\n    let\
    \ mut paren_levels_stack_top = paren_levels_stack_len - 1;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len - 1;\n    let mut paren_levels_stack_top = paren_levels_stack_len\
    \ - 1;\n    let mut paren_levels_stack_bottom = paren_levels_stack_len - 1;\n\
    \    let mut paren_levels_stack_top = paren_levels_stack_len - 1;\n    let mut\
    \ paren_levels_stack_bottom = paren_levels_stack_len - 1;\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack_len - 1;\n    let mut paren_levels_stack_bottom = paren_levels_stack_len\
    \ - 1;\n    let mut paren_levels_stack_top = paren_levels_stack_len - 1;\n   \
    \ let mut paren_levels_stack_bottom = paren_levels_stack_len - 1;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len - 1;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len - 1;\n    let mut paren_levels_stack_top = paren_levels_stack_len\
    \ - 1;\n    let mut paren_levels_stack_bottom = paren_levels_stack_len - 1;\n\
    \    let mut paren_levels_stack_top = paren_levels_stack_len - 1;\n    let mut\
    \ paren_levels_stack_bottom = paren_levels_stack_len - 1;\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack_len - 1;\n    let mut paren_levels_stack_bottom = paren_levels_stack_len\
    \ - 1;\n    let mut paren_levels_stack_top = paren_levels_stack_len - 1;\n   \
    \ let mut paren_levels_stack_bottom = paren_levels_stack_len - 1;\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack_len - 1;\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack_len - 1;\n    let mut paren_levels_stack_top = paren_levels_stack_len\
    \ - 1;\n    let mut paren_levels_stack_bottom = paren_levels_stack_len - 1;\n\
    \    let mut paren_levels_stack_top = paren_levels_stack_len - 1;\n    let mut\
    \ paren_levels_stack_bottom = paren_level\n}\n\nfn main() {\n    let candidate\
    \ = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((()))\
    \ () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_r_fpue2.rs:35:52\n   |\n\
    35 |     let mut paren_levels_stack_bottom = paren_level\n   |               \
    \                                     ^ help: add `;` here\n36 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_r_fpue2.rs:4:49\n  |\n\
    4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |    -------------------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_ptr\
    \ = &mut paren_levels_stack;\n    let mut paren_levels_ptr = &mut paren_levels;\n\
    \    let mut paren_levels_ptr_ptr = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_end\
    \ = &mut paren_levels_ptr;\n    let mut paren_levels_ptr_end_ptr = &mut paren_levels_ptr_end;\n\
    \    let mut paren_levels_ptr_end_ptr_ptr = &mut paren_levels_ptr_end_ptr;\n \
    \   let mut paren_levels_ptr_end_ptr_ptr_ptr = &mut paren_levels_ptr_end_ptr_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr = &mut paren_levels_ptr_end_ptr_ptr_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n\
    \    let mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n    let\
    \ mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = &mut\
    \ paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n    let mut\
    \ paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = \n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpwa5hcwu8.rs:24:1\n\
    \   |\n24 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr`\
    \ in this scope\n  --> /tmp/tmpwa5hcwu8.rs:21:85\n   |\n21 | ...r_ptr_ptr_ptr_ptr_ptr\
    \ = &mut paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr;\n   | \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_levels_ptr_end_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_top = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n    let mut\
    \ paren_levels_stack_top = paren_levels_stack.len();\n    let mut paren_level\n\
    }\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_2akhuc1.rs:35:24\n   |\n\
    35 |     let mut paren_level\n   |                        ^ help: add `;` here\n\
    36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_2akhuc1.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_stack = Vec::new();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let mut paren_levels_stack_top\
    \ = paren_levels_stack.len();\n    let mut paren_levels_stack_bottom = paren_levels_stack.len();\n\
    \    let mut paren_levels_stack_cur = paren_levels_stack.len();\n    let \n}\n\
    \nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp60sgh1h6.rs:36:1\n  \
    \ |\n36 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_levels_iter = paren_string.char_indices();\n    let\
    \ mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let mut paren_levels_iter\
    \ = paren_levels_iter.peekable();\n    let mut paren_levels_iter = paren_levels_iter.peekable();\n\
    \    let mut paren_levels_iter = paren_levels_iter.peekable();\n    let \n}\n\n\
    fn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpfs1wuxzn.rs:37:1\n  \
    \ |\n37 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_count = 0;\n    let mut paren_levels_iter = paren_string.char_indices().map(|i|\
    \ {\n        if paren_level_count == 0 {\n            paren_level_count = paren_level\
    \ + 1;\n        }\n        let level = paren_level_count;\n        let mut paren_levels_iter\
    \ = i.map(|j| {\n            if paren_level_count == 0 {\n                paren_level_count\
    \ = paren_level + 1;\n            }\n            paren_level_count = paren_level_count\
    \ + 1;\n            paren_level_count\n        });\n        paren_levels.push(level);\n\
    \        paren_levels_iter\n    });\n    paren_levels_iter\n}\n\nfn main() {\n\
    \    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `map` exists for tuple `(usize, char)`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmp52yegopb.rs:13:39\n   |\n13 |\
    \         let mut paren_levels_iter = i.map(|j| {\n   |                      \
    \                 ^^^ method cannot be called on `(usize, char)` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `(usize, char): Iterator`\n           which is required by `&mut (usize,\
    \ char): Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp52yegopb.rs:23:5\n\
    \   |\n4  | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n   |\
    \                                                 ---------- expected `Vec<isize>`\
    \ because of return type\n...\n23 |     paren_levels_iter\n   |     ^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `Map`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Map<CharIndices<'_>, _>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
- exit_code: 1
  program: "/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfn parse_nested_parens(paren_string: String)\
    \ -> Vec<isize> {\n    let mut paren_levels = Vec::new();\n    let mut paren_level\
    \ = 0;\n    let mut paren_level_index = 0;\n    let mut paren_levels_index = 0;\n\
    \    let mut paren_levels_index2 = 0;\n    let mut paren_levels_index3 = 0;\n\
    \    let mut paren_levels_index4 = 0;\n    let mut paren_levels_index5 = 0;\n\
    \    let mut paren_levels_index6 = 0;\n    let mut paren_levels_index7 = 0;\n\
    \    let mut paren_levels_index8 = 0;\n    let mut paren_levels_index9 = 0;\n\
    \    let mut paren_levels_index10 = 0;\n    let mut paren_levels_index11 = 0;\n\
    \    let mut paren_levels_index12 = 0;\n    let mut paren_levels_index13 = 0;\n\
    \    let mut paren_levels_index14 = 0;\n    let mut paren_levels_index15 = 0;\n\
    \    let mut paren_levels_index16 = 0;\n    let mut paren_levels_index17 = 0;\n\
    \    let mut paren_levels_index18 = 0;\n    let mut paren_levels_index19 = 0;\n\
    \    let mut paren_levels_index20 = 0;\n    let mut paren_levels_index21 = 0;\n\
    \    let mut paren_levels_index22 = 0;\n    let mut paren_levels_index23 = 0;\n\
    \    let mut paren_levels_index24 = 0;\n    let mut paren_levels_index25 = 0;\n\
    \    let mut paren_levels_index26 = 0;\n    let mut paren_levels_index27 = 0;\n\
    \    let mut paren_levels_index28 = 0;\n    let mut paren_levels_index29 = 0;\n\
    \    let mut paren_levels_index30 = 0;\n    let mut paren_levels_index31 = 0;\n\
    \    let mut paren_levels_index32 = 0;\n    let mut paren_levels_index33 = 0;\n\
    \    let mut paren_levels_index34 = 0;\n    let mut paren_levels_index35 = 0;\n\
    \    let mut paren_levels_index36 = 0;\n    let mut paren_levels_index37 = 0;\n\
    \    let mut paren_levels_index38 = 0;\n    let mut paren_levels_index39 = 0;\n\
    \    let mut paren_levels_index40 = 0;\n    let mut paren_levels_index41 = 0;\n\
    \    let mut paren_levels_index42 = 0;\n    let mut paren_levels_index43 = 0;\n\
    \    let mut paren_levels_index44 = 0;\n    let mut paren\n}\n\nfn main() {\n\
    \    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
    (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
    () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
    (()(())((())))\")), vec![4]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpuq2tph21.rs:52:18\n   |\n\
    52 |     let mut paren\n   |                  ^ help: add `;` here\n53 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpuq2tph21.rs:4:49\n\
    \  |\n4 | fn parse_nested_parens(paren_string: String) -> Vec<isize> {\n  |  \
    \  -------------------                          ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748402
