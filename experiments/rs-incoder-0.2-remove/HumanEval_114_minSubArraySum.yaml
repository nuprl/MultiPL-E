name: HumanEval_114_minSubArraySum
language: rs
prompt: "/// Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n/// of nums.\n/// Example\nfn minSubArraySum(nums: Vec<isize>) -> isize\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
  \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
  \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n\
  \    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1,\
  \ -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]),\
  \ -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100,\
  \ -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
  \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
completions: ["    let mut min_sum = nums.iter().fold(0, |sum, num| sum + num);\n\
    \    for num in nums.iter().skip(1) {\n        min_sum = min_sum - num;\n    }\n\
    \    min_sum", "    let mut min_sum = nums.iter().sum();\n    for num in nums.iter().rev()\
    \ {\n        min_sum = min_sum - num;\n        if min_sum < 0 {\n            min_sum\
    \ = 0;\n        }\n    }\n    min_sum", "    let mut min_sum = nums.iter().sum();\n\
    \    for &n in nums.iter().rev() {\n        min_sum = min_sum - n;\n    }\n  \
    \  min_sum", "    let mut min_sum = nums.iter().fold(0, |mut sum, i| sum + i);\n\
    \    for num in nums.iter() {\n        min_sum = min_sum - num;\n    }\n    min_sum",
  "    let mut min_sum = nums.iter().fold(0, |mut sum, i| sum + i);\n    for &i in\
    \ nums.iter() {\n        min_sum = min_sum - i;\n    }\n    min_sum", "    let\
    \ mut min_sum = nums.iter().sum();\n    for num in nums.iter().rev() {\n     \
    \   min_sum = min_sum - num;\n        if min_sum < 0 {\n            min_sum =\
    \ 0;\n        }\n    }\n    min_sum", "    let mut min_sum = nums.iter().sum();\n\
    \    for &n in nums.iter() {\n        min_sum = min_sum - n;\n    }\n    min_sum",
  "    let mut min_sum = nums.iter().sum();\n    for num in nums.iter() {\n      \
    \  min_sum = min_sum - num;\n    }\n    min_sum", "    let mut min_sum = nums.iter().sum();\n\
    \    for num in nums.iter().rev() {\n        min_sum = min_sum - num;\n      \
    \  if min_sum < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum",
  "    let mut min_sum = nums.iter().sum();\n    for &n in nums.iter().skip(1) {\n\
    \        min_sum = min_sum - n;\n    }\n    min_sum", "    let mut min_sum = isize::MAX;\n\
    \    for num in nums.iter() {\n        min_sum = min(min_sum, num + min_sum);\n\
    \    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0, |sum, num| sum\
    \ + num);\n    for num in nums.iter() {\n        min_sum = min_sum - num;\n  \
    \      if min_sum < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum",
  "    let mut min_sum = nums.iter().fold(0, |mut sum, i| sum + i);\n    for &i in\
    \ nums.iter().skip(1) {\n        min_sum = min_sum.min(|a, b| a + b - i);\n  \
    \  }\n    min_sum", "    let mut min_sum = nums.iter().fold(0, |sum, i| sum +\
    \ i);\n    for &i in nums.iter().skip(1) {\n        min_sum = min_sum - i;\n \
    \   }\n    min_sum", "    let mut min_sum = nums.iter().sum();\n    for num in\
    \ nums.iter() {\n        min_sum = min_sum - num;\n    }\n    min_sum", "    let\
    \ mut min_sum = nums.iter().sum();\n    for num in nums.iter() {\n        min_sum\
    \ = min_sum - num;\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0,\
    \ |sum, num| sum + num);\n    for num in nums.iter() {\n        min_sum = min_sum\
    \ - num;\n        if min_sum < 0 {\n            break;\n        }\n    }\n   \
    \ min_sum", "    let mut min_sum = nums.iter().sum();\n    for &n in nums.iter().rev()\
    \ {\n        min_sum = min_sum - n;\n    }\n    min_sum", "    let mut min = nums.iter().min().unwrap();\n\
    \    for num in nums.iter() {\n        if num < min {\n            min = num;\n\
    \        }\n    }\n    min", "    let mut min_sum = nums.iter().sum();\n    for\
    \ num in nums.iter() {\n        min_sum = min_sum - num;\n    }\n    min_sum"]
stop_tokens:
- "\n}"
