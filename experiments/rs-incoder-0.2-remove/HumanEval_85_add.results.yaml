language: rs
name: HumanEval_85_add
results:
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter().filter(|&i| i % 2 == 0) {\n     \
    \   sum += i;\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpe34jfq2j.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for &i in lst {\n        if i % 2 == 0 {\n          \
    \  sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpobl07i20.rs:5:9\n  |\n5 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp668giwte.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 1;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `93`,\n right: `88`', /tmp/tmppk0ravd0.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 1;\n    for i in lst.iter() {\n      \
    \  if i % 2 == 0 {\n            even += i;\n        } else {\n            odd\
    \ += i;\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpvj137ci9.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for &i in lst {\n        if i % 2 == 0 {\n          \
    \  sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpobl07i20.rs:5:9\n  |\n5 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for el in lst {\n        if el\
    \ % 2 == 0 {\n            even += el;\n        } else {\n            odd += el;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp436dy4d9.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 1;\n    for i in lst {\n        if i %\
    \ 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `93`,\n right: `88`', /tmp/tmp30_zq1cs.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for i in lst.iter() {\n      \
    \  if i % 2 == 0 {\n            even += i;\n        } else {\n            odd\
    \ += i;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpoqt_s7ht.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst {\n        if i % 2 == 0 {\n           \
    \ sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpbkkwirkn.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    for x in lst {\n        if x % 2 == 0 {\n          \
    \  even += x;\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp8bbm2ybx.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst {\n        if i % 2 == 0 {\n           \
    \ sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpbkkwirkn.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 1;\n    for i in lst.iter() {\n      \
    \  if i % 2 == 0 {\n            even += i;\n        } else {\n            odd\
    \ += i;\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpvj137ci9.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for &i in lst {\n        if i % 2 == 0 {\n          \
    \  sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpobl07i20.rs:5:9\n  |\n5 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst {\n        if i % 2 == 0 {\n           \
    \ sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpbkkwirkn.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpmsp7qboo.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut evens = vec![];\n    let mut odds = vec![];\n    for &i in lst {\n\
    \        if i % 2 == 0 {\n            evens.push(i);\n        } else {\n     \
    \       odds.push(i);\n        }\n    }\n    evens.iter().fold(0, |sum, i| sum\
    \ + i)\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpafwjsth8.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 1;\n    for i in lst {\n        if i %\
    \ 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `93`,\n right: `88`', /tmp/tmp30_zq1cs.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for ele in lst {\n        if ele\
    \ % 2 == 0 {\n            even += ele;\n        } else {\n            odd += ele;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpxdms76fj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 1;\n    for i in lst {\n        if i %\
    \ 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpz0enl8nv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp668giwte.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 1;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl_8j8ca_.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    for x in lst {\n        if x % 2 == 0 {\n          \
    \  even += x;\n        }\n    }\n    return even;\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpm4qov68t.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for &i in lst {\n        if i % 2 == 0 {\n          \
    \  sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpobl07i20.rs:5:9\n  |\n5 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut evens = 0;\n    for x in lst {\n        if x % 2 == 0 {\n         \
    \   evens += x;\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmptg_cug7o.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 1;\n    for i in lst.iter() {\n      \
    \  if i % 2 == 0 {\n            even += i;\n        } else {\n            odd\
    \ += i;\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpvj137ci9.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for &i in lst {\n        if i % 2 == 0 {\n          \
    \  sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpobl07i20.rs:5:9\n  |\n5 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 1;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl_8j8ca_.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp668giwte.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 1;\n    for i in lst.iter() {\n      \
    \  if i % 2 == 0 {\n            even += i;\n        } else {\n            odd\
    \ += i;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `93`,\n right: `88`', /tmp/tmpnzksr4bn.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter().filter(|&x| x % 2 == 0) {\n     \
    \   sum += i;\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp6kgp45zh.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    for &i in lst {\n        if i % 2 == 0 {\n         \
    \   even += i;\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk70etkfs.rs:5:9\n  |\n5 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst {\n        if i % 2 == 0 {\n           \
    \ sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpbkkwirkn.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for &i in lst {\n        if i % 2 == 0 {\n          \
    \  sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpobl07i20.rs:5:9\n  |\n5 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for &i in lst {\n        if i % 2 == 0 {\n          \
    \  sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpobl07i20.rs:5:9\n  |\n5 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    for x in lst {\n        if x % 2 == 0 {\n          \
    \  even += x;\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp8bbm2ybx.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter().filter(|&x| x % 2 == 1) {\n     \
    \   sum += i;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n  \
    \  assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4, 5,\
    \ 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n   \
    \ assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpxds8yser.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpmsp7qboo.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut evens = 0;\n    let mut odds = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            evens += i;\n        } else {\n            odds +=\
    \ i;\n        }\n    }\n    evens + odds\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjgnntcqt.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for n in lst {\n        if n %\
    \ 2 == 0 {\n            even += n;\n        } else {\n            odd += n;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpqpeon3xc.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst {\n        if i % 2 == 0 {\n           \
    \ sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpbkkwirkn.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 1;\n    for i in lst {\n        if i %\
    \ 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpz0enl8nv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 1;\n    for i in lst {\n        if i %\
    \ 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpz0enl8nv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for n in lst {\n        if n %\
    \ 2 == 0 {\n            even += n;\n        } else {\n            odd += n;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpqpeon3xc.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpmsp7qboo.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 1;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl_8j8ca_.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for el in lst {\n        if el\
    \ % 2 == 0 {\n            even += el;\n        } else {\n            odd += el;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp436dy4d9.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 1;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `93`,\n right: `88`', /tmp/tmppk0ravd0.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for i in lst.iter() {\n      \
    \  if i % 2 == 0 {\n            even += i;\n        } else {\n            odd\
    \ += i;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpoqt_s7ht.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for &i in lst {\n        if i % 2 == 0 {\n          \
    \  sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpobl07i20.rs:5:9\n  |\n5 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst {\n        if i % 2 == 0 {\n           \
    \ sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpbkkwirkn.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for i in lst.iter() {\n      \
    \  if i % 2 == 0 {\n            even += i;\n        } else {\n            odd\
    \ += i;\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpk08gk2kk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 1;\n    for i in lst.iter() {\n      \
    \  if i % 2 == 0 {\n            even += i;\n        } else {\n            odd\
    \ += i;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `93`,\n right: `88`', /tmp/tmpnzksr4bn.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for &i in lst {\n        if i % 2 == 0 {\n          \
    \  sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpobl07i20.rs:5:9\n  |\n5 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for i in lst {\n        if i %\
    \ 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmptq8_geos.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut evens = Vec::new();\n    let mut odds = Vec::new();\n    for &i in\
    \ lst {\n        if i % 2 == 0 {\n            evens.push(i);\n        } else {\n\
    \            odds.push(i);\n        }\n    }\n    evens.iter().fold(0, |acc, &i|\
    \ acc + i)\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp72z70kxz.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    for &i in lst {\n        if i % 2 == 0 {\n         \
    \   even += i;\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk70etkfs.rs:5:9\n  |\n5 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp668giwte.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for &i in lst {\n        if i % 2 == 0 {\n          \
    \  sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpobl07i20.rs:5:9\n  |\n5 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 1;\n    for i in lst.iter() {\n      \
    \  if i % 2 == 0 {\n            even += i;\n        } else {\n            odd\
    \ += i;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `93`,\n right: `88`', /tmp/tmpnzksr4bn.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for i in lst.iter() {\n      \
    \  if i % 2 == 0 {\n            even += i;\n        } else {\n            odd\
    \ += i;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpoqt_s7ht.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    for x in lst {\n        if x % 2 == 0 {\n          \
    \  even += x;\n        }\n    }\n    return even;\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpm4qov68t.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for i in lst {\n        if i %\
    \ 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmptq8_geos.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for &i in lst {\n        if i % 2 == 0 {\n          \
    \  sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpobl07i20.rs:5:9\n  |\n5 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    for &i in lst {\n        if i % 2 == 0 {\n         \
    \   even += i;\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk70etkfs.rs:5:9\n  |\n5 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for i in lst {\n        if i %\
    \ 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmptq8_geos.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter().skip(1) {\n        if i % 2 == 0\
    \ {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `130`,\n right: `122`', /tmp/tmpoxiv1wd_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 1;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp_ge6tifv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 1;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `93`,\n right: `88`', /tmp/tmppk0ravd0.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut evens = 0;\n    let mut odds = 0;\n    for el in lst {\n        if\
    \ el % 2 == 0 {\n            evens += el;\n        } else {\n            odds\
    \ += el;\n        }\n    }\n    evens + odds\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp7q49xcss.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyjc0h3tb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for x in lst {\n        if x %\
    \ 2 == 0 {\n            even += x;\n        } else {\n            odd += x;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpn5smg2d8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    for &i in lst {\n        if i % 2 == 0 {\n         \
    \   even += i;\n        }\n    }\n    return even;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpap4ov4el.rs:5:9\n  |\n5 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst {\n        if i % 2 == 0 {\n           \
    \ sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpbkkwirkn.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for i in lst {\n        if i %\
    \ 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmptq8_geos.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for &i in lst {\n        if i % 2 == 0 {\n          \
    \  sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpobl07i20.rs:5:9\n  |\n5 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut even = 0;\n    let mut odd = 0;\n    for &i in lst {\n        if i\
    \ % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15yy05ef.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749270
