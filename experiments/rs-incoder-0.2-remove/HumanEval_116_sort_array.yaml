name: HumanEval_116_sort_array
language: rs
prompt: "/// In this Kata, you have to sort an array of non-negative integers according\
  \ to\n/// number of ones in their binary representation in ascending order.\n///\
  \ For similar number of ones, sort based on decimal value.\n/// It must be implemented\
  \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
  \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
  \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3,\
  \ 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
  \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4,\
  \ 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]),\
  \ vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
  \ vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2,\
  \ 4, 8, 16, 32]);\n}\n"
completions: ["    let mut result = Vec::new();\n    for i in arr.iter() {\n     \
    \   let mut count = 0;\n        for j in 0..i {\n            if j % 2 == 0 {\n\
    \                count += 1;\n            }\n        }\n        if count > result.len()\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort_by_key(|x|\
    \ {\n        let mut count = 0;\n        for j in 0..x {\n            if j % 2\
    \ == 0 {\n                count += 1;\n            }\n        }\n        count\
    \ / 2\n    });\n    result", "    let mut result = Vec::new();\n    let mut ones\
    \ = Vec::new();\n    for &i in arr {\n        if i & 1 == 1 {\n            ones.push(i);\n\
    \        } else {\n            result.push(i);\n        }\n    }\n    ones = sort_array(ones);\n\
    \    let mut i = 0;\n    for &i in ones {\n        result.push(i + (*ones)[i as\
    \ usize]);\n    }\n    result", "    let mut result = vec![];\n    let mut ones\
    \ = vec![];\n    for i in arr {\n        if i & 1 == 1 {\n            ones.push(i);\n\
    \        } else {\n            result.push(i);\n        }\n    }\n    ones = sort_array(ones);\n\
    \    for i in ones {\n        result.push(i);\n    }\n    for i in result {\n\
    \        result.push(i);\n    }\n    result", "    let mut result = vec![];\n\
    \    let mut ones = vec![];\n    for x in arr {\n        if x == 0 {\n       \
    \     ones.push(x);\n        } else {\n            let mut i = 0;\n          \
    \  while i < ones.size() && ones[i] != x {\n                i += 1;\n        \
    \    }\n            result.push(i);\n            ones.push(x);\n        }\n  \
    \  }\n    result.sort_by(|a, b| {\n        let mut i = 0;\n        while i < ones.size()\
    \ && ones[i] != a {\n            i += 1;\n        }\n        i - ones[i]\n   \
    \ });\n    result", "    arr.sort_by(|a, b| {\n        if a > b {\n          \
    \  1\n        } else {\n            -1\n        }\n    });", "    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort_by_key(|x| {\n        if x == 0 {\n    \
    \        0\n        } else {\n            binary_to_decimal(x)\n        }\n  \
    \  });\n    sorted_arr", "    let mut result = Vec::new();\n    let mut i = 0;\n\
    \    while i < arr.len() {\n        let mut j = i;\n        while j < arr.len()\
    \ && arr[j] == 0 {\n            j = j + 1;\n        }\n        if j - i > 1 {\n\
    \            result.push(i + arr[j] - arr[i]);\n            i = j;\n        }\
    \ else {\n            result.push(i);\n            i = i + 1;\n        }\n   \
    \ }\n    result", "    let mut result = Vec::new();\n    let mut ones = Vec::new();\n\
    \    let mut zeros = Vec::new();\n    let mut max_ones = Vec::new();\n    let\
    \ mut max_zeros = Vec::new();\n    for &i in arr {\n        if i & 1 == 1 {\n\
    \            ones.push(i);\n        } else {\n            zeros.push(i);\n   \
    \     }\n    }\n    for i in ones {\n        if zeros.len() > 0 {\n          \
    \  max_ones.push(i);\n            max_zeros.push(zeros.pop());\n        } else\
    \ {\n            max_ones.push(i);\n        }\n    }\n    for i in max_ones {\n\
    \        result.push(i);\n    }\n    for i in max_zeros {\n        result.push(i);\n\
    \    }\n    result", "    let mut res = vec![];\n    let mut ones = vec![];\n\
    \    for i in arr {\n        if i & 1 == 1 {\n            ones.push(i);\n    \
    \    } else {\n            res.push(i);\n        }\n    }\n    ones = sort_array(ones);\n\
    \    res.sort_by(|a, b| {\n        ones[a].cmp(&ones[b])\n    });\n    res", " \
    \   arr.sort_by(|a, b| {\n        if a > b {\n            1\n        } else {\n\
    \            -1\n        }\n    })", "    let mut result = vec![];\n    for i\
    \ in arr.iter() {\n        let mut count = 0;\n        for j in i {\n        \
    \    if j == 1 {\n                count += 1;\n            }\n        }\n    \
    \    result.push(count);\n    }\n    result.sort_by_key(|x| x.to_dec());\n   \
    \ result", "    let mut result = vec![];\n    for i in arr.iter() {\n        let\
    \ mut count = 0;\n        for j in 0..i {\n            if j % 2 == 0 {\n     \
    \           count += 1;\n            }\n        }\n        result.push(count);\n\
    \    }\n    result.sort_by_key(|x| x.to_dec());\n    result", "    let mut sorted_arr\
    \ = arr.to_vec();\n    sorted_arr.sort_by(|a, b| {\n        if a > b {\n     \
    \       1\n        } else {\n            -1\n        }\n    });\n    sorted_arr",
  "    let mut sorted_arr = arr.to_vec();\n    sorted_arr.sort_by_key(|x| {\n    \
    \    let mut count = 0;\n        for i in 0..32 {\n            if x & (1 << i)\
    \ != 0 {\n                count += 1;\n            }\n        }\n        count\n\
    \    });\n    sorted_arr", "    let mut result = Vec::new();\n    for i in arr.iter()\
    \ {\n        let mut count = 0;\n        for j in i {\n            if j == 1 {\n\
    \                count += 1;\n            }\n        }\n        result.push((count\
    \ as isize).cmp(&i));\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut ones = Vec::new();\n    for &i in arr {\n        if i & 1 == 1 {\n\
    \            ones.push(i);\n        } else {\n            result.push(i);\n  \
    \      }\n    }\n    ones = sort_array(ones);\n    result = sort_array(result);\n\
    \    result.extend(ones);\n    result", "    arr.sort_by(|a, b| {\n        if\
    \ a > b {\n            1\n        } else {\n            -1\n        }\n    });",
  "    let mut sorted_arr = arr.clone();\n    sorted_arr.sort_by_key(|x| {\n     \
    \   let mut i = x;\n        let mut j = x;\n        while i > 0 && j > 0 {\n \
    \           if i & 1 == 1 {\n                i >>= 1;\n            } else {\n\
    \                j >>= 1;\n            }\n        }\n        j\n    });\n    sorted_arr",
  "    let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n \
    \       let mut j = i;\n        while j < arr.len() && arr[j] == 1 {\n       \
    \     j += 1\n        }\n        if j == i {\n            result.push(i);\n  \
    \          i += 1;\n        } else {\n            let mut k = i;\n           \
    \ while k > 0 && arr[k] == 0 {\n                k -= 1\n            }\n      \
    \      result.push(k);\n            i = k + 1;\n        }\n    }\n    result",
  "    let mut result = Vec::new();\n    let mut ones = Vec::new();\n    for &i in\
    \ arr {\n        if i & 1 == 1 {\n            ones.push(i);\n        } else {\n\
    \            result.push(i);\n        }\n    }\n    ones = sort_array(ones);\n\
    \    let mut i = 0;\n    for &i in ones {\n        result.push(i);\n    }\n  \
    \  for &i in result {\n        i += i;\n    }\n    result"]
stop_tokens:
- "\n}"
