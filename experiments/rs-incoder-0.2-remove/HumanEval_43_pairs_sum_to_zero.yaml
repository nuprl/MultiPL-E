name: HumanEval_43_pairs_sum_to_zero
language: rs
prompt: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
  \ True if there are two distinct elements in the list that\n/// sum to zero, and\
  \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
  \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n   \
  \ assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
  \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
  \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
  \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
  \ 9, -1, 4, 2, 31]), false);\n}\n"
completions: ["    let mut pairs = Vec::new();\n    for &i in l {\n        for &j\
    \ in l {\n            if i != j && i + j == 0 {\n                pairs.push((i,\
    \ j));\n            }\n        }\n    }\n    pairs.len() == l.len() / 2 && pairs.iter().all(|&(i,\
    \ j)| i + j == 0)", "    let mut pairs = Vec::new();\n    for i in l {\n     \
    \   for j in l {\n            if i != j && i + j == 0 {\n                pairs.push((i,\
    \ j));\n            }\n        }\n    }\n    pairs.len() > 1", "    let mut pairs\
    \ = Vec::new();\n    let mut sum = 0;\n    for &i in l {\n        pairs.push((i,\
    \ sum));\n        sum += i;\n    }\n    let mut seen = HashSet::new();\n    for\
    \ &(i, sum) in pairs {\n        if seen.contains(&sum) {\n            return false;\n\
    \        }\n        seen.insert(sum);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut pairs = Vec::new();\n\
    \    for i in l {\n        for j in l {\n            if i != j && i + j == 0 {\n\
    \                pairs.push((i, j));\n            }\n        }\n    }\n    pairs.len()\
    \ == l.len() / 2", "    let mut pairs = vec![];\n    let mut sum = 0;\n    for\
    \ &i in l {\n        if i != 0 {\n            pairs.push((i, sum));\n        \
    \    sum += i;\n        }\n    }\n    for &(i, sum) in pairs {\n        if sum\
    \ == 0 {\n            return true;\n        }\n    }\n    false", "    let mut\
    \ pairs = Vec::new();\n    for i in l {\n        for j in l {\n            if\
    \ i + j == 0 {\n                pairs.push((i, j));\n            }\n        }\n\
    \    }\n    pairs.len() == 2 && pairs.iter().all(|&(_, x)| x == 0)", "    let\
    \ mut seen: HashSet<isize> = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen: HashSet<isize> = HashSet::new();\n    for &i in l\
    \ {\n        if seen.contains(&i) {\n            return false;\n        }\n  \
    \      seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n    for &i in\
    \ l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == 2", "    let mut seen: HashSet<isize> = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return true;\n        }\n        seen.insert(i);\n    }\n    false", " \
    \   let mut pairs = Vec::new();\n    for &i in l {\n        for &j in l {\n  \
    \          if i == j {\n                continue;\n            }\n           \
    \ if i + j == 0 {\n                pairs.push((i, j));\n            }\n      \
    \  }\n    }\n    pairs.len() == 2 && pairs.iter().all(|&(i, j)| i == j)", "  \
    \  let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut pairs = Vec::new();\n    for &i in l {\n        for &j\
    \ in l {\n            if i + j == 0 {\n                pairs.push((i, j));\n \
    \           }\n        }\n    }\n    pairs.len() == 2 && pairs.iter().all(|&(i,\
    \ j)| i == j)", "    let mut seen = HashSet::new();\n    for &i in l {\n     \
    \   if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", "    let mut pairs = Vec::new();\n    let mut sum = 0;\n  \
    \  for x in l {\n        if pairs.iter().any(|&x| x == x) {\n            return\
    \ false;\n        }\n        pairs.push(x);\n        sum += x;\n    }\n    pairs.iter().all(|&x|\
    \ x == sum)", "    let mut pairs = Vec::new();\n    let mut sum = 0;\n    for\
    \ &i in l {\n        if i == 0 {\n            pairs.push((i, 0));\n        } else\
    \ {\n            pairs.push((i, sum));\n            sum += i;\n        }\n   \
    \ }\n    pairs.iter().all(|&(i, j)| j == 0)", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut pairs = Vec::new();\n\
    \    for &i in l {\n        for &j in l {\n            if i + j == 0 {\n     \
    \           pairs.push((i, j));\n            }\n        }\n    }\n    pairs.len()\
    \ == 2 && pairs.iter().all(|&(i, j)| i == j)", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut pairs = Vec::new();\n\
    \    for &i in l {\n        for &j in l {\n            if i == j {\n         \
    \       continue;\n            }\n            if i + j == 0 {\n              \
    \  pairs.push((i, j));\n            }\n        }\n    }\n    pairs.len() == 2\
    \ && pairs.iter().all(|&(i, j)| i == j)", "    let mut seen: HashSet<isize> =\
    \ HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n       \
    \     return false;\n        }\n        seen.insert(i);\n    }\n    true", " \
    \   let mut seen: HashSet<isize> = HashSet::new();\n    for &i in l {\n      \
    \  if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n\
    \    }\n    sum == 0", "    let mut seen = HashSet::new();\n    for i in l {\n\
    \        if seen.contains(&i) {\n            return true;\n        }\n       \
    \ seen.insert(i);\n    }\n    false", "    let mut seen = HashSet::new();\n  \
    \  for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut pairs = Vec::new();\n\
    \    for &i in l {\n        for &j in l {\n            if i != j && i + j == 0\
    \ {\n                pairs.push((i, j));\n            }\n        }\n    }\n  \
    \  pairs.len() > 1", "    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return false;\n        }\n      \
    \  seen.insert(i);\n    }\n    true", "    let mut pairs = Vec::new();\n    for\
    \ i in l {\n        for j in l {\n            if i + j == 0 {\n              \
    \  pairs.push((i, j));\n            }\n        }\n    }\n    pairs.len() == l.len()\
    \ / 2 && pairs.iter().all(|&(_, v)| v == 0)", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n    for x in l {\n        if seen.contains(&x) {\n      \
    \      return true;\n        }\n        seen.insert(x);\n    }\n    false", " \
    \   let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut pairs = Vec::new();\n    let mut sum = 0;\n    for x in\
    \ l {\n        sum += x;\n        pairs.push((x, sum));\n    }\n    let mut seen\
    \ = HashSet::new();\n    for (x, y) in pairs {\n        if seen.insert(y).is_some()\
    \ {\n            return false;\n        }\n    }\n    true", "    let mut pairs\
    \ = Vec::new();\n    for i in l {\n        for j in l {\n            if i == j\
    \ {\n                continue;\n            }\n            if i + j == 0 {\n \
    \               pairs.push((i, j));\n            }\n        }\n    }\n    pairs.len()\
    \ == 2 && pairs.iter().all(|&(_, j)| j == 0)", "    let mut pairs = Vec::new();\n\
    \    let mut sum = 0;\n    for x in l {\n        if pairs.contains(&(x+sum)) {\n\
    \            return true;\n        }\n        pairs.push((x, sum));\n        sum\
    \ += x;\n    }\n    false", "    let mut seen = HashSet::new();\n    for &i in\
    \ l {\n        if seen.contains(&i) {\n            return false;\n        }\n\
    \        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut pairs = Vec::new();\n\
    \    for &i in l {\n        for &j in l {\n            if i == j {\n         \
    \       continue;\n            }\n            if i + j == 0 {\n              \
    \  pairs.push((i, j));\n            }\n        }\n    }\n    pairs.len() == 2\
    \ && pairs.iter().all(|&(i, j)| i == j)", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut pairs = Vec::new();\n\
    \    for &i in l {\n        for &j in l {\n            if i == j {\n         \
    \       continue;\n            }\n            if i + j == 0 {\n              \
    \  pairs.push((i, j));\n            }\n        }\n    }\n    pairs.len() == 2\
    \ && pairs.iter().all(|&(i, j)| i == j)", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut pairs = Vec::new();\n\
    \    for x in l {\n        for y in l {\n            if x + y == 0 {\n       \
    \         pairs.push((x, y));\n            }\n        }\n    }\n    pairs.len()\
    \ == 2 && pairs.iter().all(|&(_, y)| y == 0)", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut pairs = Vec::new();\n\
    \    for &i in l {\n        for &j in l {\n            if i != j {\n         \
    \       pairs.push((i, j));\n            }\n        }\n    }\n    pairs.iter().all(|&(i,\
    \ j)| {\n        i != j && i != 0 && j != 0 && i != j && j != 0 && i != j && i\
    \ != 0 && j != 0\n    })", "    let mut seen: HashSet<isize> = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut pairs = vec![];\n\
    \    for i in l {\n        for j in l {\n            if i + j == 0 {\n       \
    \         pairs.push((i, j));\n            }\n        }\n    }\n    pairs.len()\
    \ == l.len() / 2", "    let mut seen = HashSet::new();\n    for &i in l {\n  \
    \      if seen.contains(&i) {\n            return true;\n        }\n        seen.insert(i);\n\
    \    }\n    false", "    let mut seen = HashSet::new();\n    for &i in l {\n \
    \       if seen.contains(&i) {\n            return false;\n        }\n       \
    \ seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n   \
    \ for &i in l {\n        if seen.contains(&i) {\n            return false;\n \
    \       }\n        seen.insert(i);\n    }\n    true", "    let mut pairs = vec![];\n\
    \    for i in l {\n        for j in l {\n            if i != j && i + j == 0 {\n\
    \                pairs.push((i, j));\n            }\n        }\n    }\n    pairs.len()\
    \ == 2 && pairs.iter().all(|&(_, v)| v == 0)", "    let mut pairs = Vec::new();\n\
    \    for &i in l {\n        for &j in l {\n            if i == j {\n         \
    \       continue;\n            }\n            if i + j == 0 {\n              \
    \  pairs.push((i, j));\n            }\n        }\n    }\n    pairs.len() == 2\
    \ && pairs.iter().all(|&(i, j)| i == j)", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut pairs = Vec::new();\n\
    \    let mut sum = 0;\n    for x in l {\n        if pairs.iter().any(|&y| x ==\
    \ y) {\n            return false;\n        }\n        pairs.push(x);\n       \
    \ sum += x;\n    }\n    pairs.iter().all(|&x| x == sum)", "    let mut pairs =\
    \ Vec::new();\n    for x in l {\n        for y in l {\n            if x + y ==\
    \ 0 {\n                pairs.push((x, y));\n            }\n        }\n    }\n\
    \    pairs.len() == 2 && pairs.iter().all(|&(_, y)| y == 0)", "    let mut seen\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return false;\n        }\n        seen.insert(i);\n    }\n    true", " \
    \   let mut pairs = Vec::new();\n    for &i in l {\n        for &j in l {\n  \
    \          if i == j {\n                continue;\n            }\n           \
    \ if i + j == 0 {\n                pairs.push((i, j));\n            }\n      \
    \  }\n    }\n    pairs.len() == 2 && pairs.iter().all(|&(_, v)| v == 0)", "  \
    \  let mut pairs = Vec::new();\n    for &i in l {\n        for &j in l {\n   \
    \         if i != j && i + j == 0 {\n                pairs.push((i, j));\n   \
    \         }\n        }\n    }\n    pairs.len() == 2 && pairs.iter().all(|&(i,\
    \ j)| i + j == 0)", "    let mut seen = HashSet::new();\n    for &i in l {\n \
    \       if seen.contains(&i) {\n            return false;\n        }\n       \
    \ seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n   \
    \ for &i in l {\n        if seen.contains(&i) {\n            return false;\n \
    \       }\n        seen.insert(i);\n    }\n    true", "    let mut pairs = Vec::new();\n\
    \    let mut sum = 0;\n    for &i in l {\n        pairs.push((i, sum));\n    \
    \    sum += i;\n    }\n    let mut seen = HashSet::new();\n    for &(i, sum) in\
    \ pairs {\n        if seen.contains(&sum) {\n            return false;\n     \
    \   }\n        seen.insert(sum);\n    }\n    true", "    let mut pairs = vec![];\n\
    \    for i in l {\n        for j in l {\n            if i + j == 0 {\n       \
    \         pairs.push((i, j));\n            }\n        }\n    }\n    pairs.len()\
    \ == l.len() / 2 && pairs.iter().all(|&(_, x)| x == 0)", "    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n    let mut pairs = Vec::new();\n    for &i in l {\n    \
    \    if seen.insert(i) {\n            pairs.push(i);\n        }\n    }\n    pairs.len()\
    \ == 2 && pairs.iter().all(|&i| seen.remove(i))", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == 2", "    let mut seen = HashSet::new();\n    for i in l {\n\
    \        if seen.contains(&i) {\n            return false;\n        }\n      \
    \  seen.insert(i);\n    }\n    true", "    let mut pairs = Vec::new();\n    for\
    \ &i in l {\n        for &j in l {\n            if i == j {\n                continue;\n\
    \            }\n            if i + j == 0 {\n                pairs.push((i, j));\n\
    \            }\n        }\n    }\n    pairs.len() == 2 && pairs.iter().all(|&(i,\
    \ j)| i == j)", "    let mut pairs = Vec::new();\n    for &i in l {\n        for\
    \ &j in l {\n            if i == j {\n                continue;\n            }\n\
    \            if i + j == 0 {\n                pairs.push((i, j));\n          \
    \  }\n        }\n    }\n    pairs.len() == l.len() / 2", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut pairs = vec![];\n\
    \    for &i in l {\n        for &j in l {\n            if i == j {\n         \
    \       continue;\n            }\n            if i + j == 0 {\n              \
    \  pairs.push((i, j));\n            }\n        }\n    }\n    pairs.len() == 2\
    \ && pairs.iter().all(|&(i, j)| i == j)", "    let mut pairs = Vec::new();\n \
    \   for i in l.iter() {\n        for j in l.iter() {\n            if i + j ==\
    \ 0 {\n                pairs.push((i, j));\n            }\n        }\n    }\n\
    \    pairs.len() == 2 && pairs.iter().all(|&(_, x)| x == 0)", "    let mut pairs\
    \ = Vec::new();\n    let mut sum = 0;\n    for &i in l {\n        pairs.push((i,\
    \ sum));\n        sum += i;\n    }\n    let mut seen = HashSet::new();\n    for\
    \ &(i, sum) in pairs {\n        if seen.contains(&sum) {\n            return false;\n\
    \        }\n        seen.insert(sum);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == 2", "    let mut seen = HashSet::new();\n    for &i in l\
    \ {\n        if seen.contains(&i) {\n            return false;\n        }\n  \
    \      seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return true;\n        }\n        seen.insert(i);\n    }\n    false", " \
    \   let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut pairs = Vec::new();\n    for &i in l {\n        for &j\
    \ in l {\n            if i == j {\n                continue;\n            }\n\
    \            if i + j == 0 {\n                pairs.push((i, j));\n          \
    \  }\n        }\n    }\n    pairs.len() == 2 && pairs.iter().all(|&(i, j)| i ==\
    \ j)", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut pairs = Vec::new();\n    for &i in l {\n        for &j\
    \ in l {\n            if i != j && i + j == 0 {\n                pairs.push((i,\
    \ j));\n            }\n        }\n    }\n    pairs.len() == l.len() / 2", "  \
    \  let mut pairs = Vec::new();\n    for &i in l {\n        for &j in l {\n   \
    \         if i + j == 0 {\n                pairs.push((i, j));\n            }\n\
    \        }\n    }\n    pairs.len() == 2 && pairs.iter().all(|&(i, j)| i == j)",
  "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    let mut pairs = Vec::new();\n    for &i in\
    \ l {\n        sum += i;\n        pairs.push(i);\n    }\n    for &i in pairs {\n\
    \        if sum == 0 {\n            return false;\n        }\n        sum -= i;\n\
    \    }\n    true", "    let mut seen = HashSet::new();\n    for &i in l {\n  \
    \      if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", "    let mut pairs = Vec::new();\n    for i in l {\n      \
    \  for j in l {\n            if i != j && i + j == 0 {\n                pairs.push((i,\
    \ j));\n            }\n        }\n    }\n    pairs.len() == l.len() / 2", "  \
    \  let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut sum = 0;\n    let mut seen = HashSet::new();\n    for x\
    \ in l {\n        if seen.insert(x).is_some() {\n            sum += x;\n     \
    \   }\n    }\n    sum == 0 && seen.len() == 2", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n    let mut pairs = Vec::new();\n    for x in l {\n     \
    \   if seen.insert(x).is_some() {\n            pairs.push(x);\n        }\n   \
    \ }\n    pairs.len() == 2 && pairs.iter().all(|x| x == 0)", "    let mut pairs\
    \ = vec![];\n    for i in l {\n        for j in l {\n            if i != j &&\
    \ i + j == 0 {\n                pairs.push((i, j));\n            }\n        }\n\
    \    }\n    pairs.len() == l.len() / 2", "    let mut pairs = vec![];\n    for\
    \ i in l {\n        for j in l {\n            if i != j && i + j == 0 {\n    \
    \            pairs.push((i, j));\n            }\n        }\n    }\n    pairs.len()\
    \ == l.len() / 2", "    let mut seen = HashSet::new();\n    for &i in l {\n  \
    \      if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", "    let mut pairs = vec![vec![], vec![]];\n    for &x in l\
    \ {\n        for &y in pairs.iter_mut() {\n            y.push(x);\n        }\n\
    \    }\n    pairs.iter().all(|x| x.len() == 2)", "    let mut pairs = Vec::new();\n\
    \    for &i in l {\n        for &j in l {\n            if i == j {\n         \
    \       continue;\n            }\n            if i + j == 0 {\n              \
    \  pairs.push((i, j));\n            }\n        }\n    }\n    pairs.len() == 2\
    \ && pairs.iter().all(|&(i, j)| i == j)", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut pairs = vec![];\n\
    \    for i in l {\n        for j in l {\n            if i == j && i != 0 {\n \
    \               pairs.push((i, j));\n            }\n        }\n    }\n    pairs.len()\
    \ == 2 && pairs.iter().all(|&(_, j)| j == 0)", "    let mut pairs = Vec::new();\n\
    \    let mut sum = 0;\n    for &i in l {\n        if i != 0 {\n            pairs.push((i,\
    \ sum));\n            sum += i;\n        }\n    }\n    pairs.len() == 1 && pairs.iter().all(|&(_,\
    \ sum)| sum == 0)", "    let mut seen = HashSet::new();\n    for &i in l {\n \
    \       if seen.contains(&i) {\n            return false;\n        }\n       \
    \ seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n   \
    \ for &i in l {\n        if seen.contains(&i) {\n            return false;\n \
    \       }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut pairs = Vec::new();\n\
    \    for i in l {\n        for j in l {\n            if i == j {\n           \
    \     continue;\n            }\n            if i + j == 0 {\n                pairs.push((i,\
    \ j));\n            }\n        }\n    }\n    pairs.len() == 2 && pairs.iter().all(|&(_,\
    \ j)| j == 0)", "    let mut seen = HashSet::new();\n    for &i in l {\n     \
    \   if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", "    let mut seen = HashSet::new();\n    for &i in l {\n  \
    \      if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", "    let mut pairs = Vec::new();\n    let mut sum = 0;\n  \
    \  for &i in l {\n        sum += i;\n        pairs.push((i, sum));\n    }\n  \
    \  let mut seen = HashSet::new();\n    for &(i, sum) in pairs {\n        if seen.contains(&sum)\
    \ {\n            return false;\n        }\n        seen.insert(sum);\n    }\n\
    \    true", "    let mut pairs = Vec::new();\n    let mut sum = 0;\n    for &i\
    \ in l {\n        sum += i;\n        pairs.push((i, sum));\n    }\n    pairs.iter().all(|&(i,\
    \ j)| j == 0)", "    let mut seen = HashSet::new();\n    for &i in l {\n     \
    \   if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", "    let mut seen = HashSet::new();\n    for &i in l {\n  \
    \      if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n\
    \    }\n    sum == l.iter().fold(0, |sum, i| sum + i)", "    let mut pairs = Vec::new();\n\
    \    for i in l {\n        for j in l {\n            if i == j {\n           \
    \     continue;\n            }\n            if i + j == 0 {\n                pairs.push((i,\
    \ j));\n            }\n        }\n    }\n    pairs.len() == l.len() / 2", "  \
    \  let mut pairs = vec![];\n    for i in l {\n        for j in l {\n         \
    \   if i != j && i + j == 0 {\n                pairs.push((i, j));\n         \
    \   }\n        }\n    }\n    pairs.len() > 1", "    let mut sum = 0;\n    for\
    \ i in l {\n        sum += i;\n    }\n    sum == 0 || sum == l.len() - l.iter().filter(|&x|\
    \ x == 0).count() == 2", "    let mut seen = HashSet::new();\n    for &i in l\
    \ {\n        if seen.contains(&i) {\n            return false;\n        }\n  \
    \      seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut pairs = Vec::new();\n\
    \    for i in l {\n        for j in l {\n            if i + j == 0 {\n       \
    \         pairs.push((i, j));\n            }\n        }\n    }\n    pairs.len()\
    \ == 2 && pairs.iter().all(|&(_, v)| v == 0)", "    let mut pairs = vec![];\n\
    \    for i in l {\n        for j in l {\n            if i == j && i != 0 {\n \
    \               pairs.push((i, j));\n            }\n        }\n    }\n    pairs.len()\
    \ == 2 && pairs.iter().all(|&(_, j)| j == 0)", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut pairs = Vec::new();\n\
    \    for &i in l {\n        for &j in l {\n            if i != j && i + j == 0\
    \ {\n                pairs.push((i, j));\n            }\n        }\n    }\n  \
    \  pairs.len() == l.len() / 2", "    let mut seen = HashSet::new();\n    for &i\
    \ in l {\n        if seen.contains(&i) {\n            return false;\n        }\n\
    \        seen.insert(i);\n    }\n    true", "    let mut pairs = Vec::new();\n\
    \    for &i in l {\n        for &j in l {\n            if i == j && i != 0 {\n\
    \                pairs.push((i, j));\n            }\n        }\n    }\n    pairs.len()\
    \ == 2 && pairs.iter().all(|&(i, j)| i == j && i != 0)", "    let mut sum = 0;\n\
    \    for i in l {\n        sum += i;\n    }\n    sum == 0", "    let mut seen\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return false;\n        }\n        seen.insert(i);\n    }\n    true", " \
    \   let mut sum = 0;\n    for i in l {\n        sum += i;\n    }\n    sum == 0",
  "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut pairs = Vec::new();\n    for &i in l {\n        for &j\
    \ in l {\n            if i != j && i + j == 0 {\n                pairs.push((i,\
    \ j));\n            }\n        }\n    }\n    pairs.len() == l.len() / 2", "  \
    \  let mut seen = HashSet::new();\n    for i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut pairs = vec![];\n    for i in l {\n        for j in l {\n\
    \            if i != j && i + j == 0 {\n                pairs.push((i, j));\n\
    \            }\n        }\n    }\n    pairs.len() == 2", "    let mut pairs =\
    \ Vec::new();\n    for &i in l {\n        for &j in l {\n            if i + j\
    \ == 0 {\n                pairs.push((i, j));\n            }\n        }\n    }\n\
    \    pairs.len() == 2", "    let mut seen = HashSet::new();\n    for i in l {\n\
    \        if seen.contains(&i) {\n            return true;\n        }\n       \
    \ seen.insert(i);\n    }\n    false", "    let mut seen = HashSet::new();\n  \
    \  for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut pairs = vec![vec![],\
    \ vec![]];\n    for x in l {\n        for y in pairs.iter_mut() {\n          \
    \  y.push(x);\n        }\n    }\n    for x in pairs.iter() {\n        if x.len()\
    \ == 1 {\n            continue;\n        }\n        for y in pairs.iter() {\n\
    \            if x.iter().zip(y).all(|(a, b)| a == b) {\n                return\
    \ false;\n            }\n        }\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n    for x in l {\n        if seen.contains(&x) {\n      \
    \      return true;\n        }\n        seen.insert(x);\n    }\n    false", " \
    \   let mut pairs = vec![(0, 0)];\n    for &i in l {\n        for &j in pairs.iter().rev()\
    \ {\n            if i + j == 0 {\n                return true;\n            }\n\
    \        }\n        pairs.push((i, 0));\n    }\n    false", "    let mut seen\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return true;\n        }\n        seen.insert(i);\n    }\n    false", " \
    \   let mut pairs = vec![];\n    for i in l {\n        for j in l {\n        \
    \    if i != j && i + j == 0 {\n                pairs.push((i, j));\n        \
    \    }\n        }\n    }\n    pairs.len() == l.len() / 2", "    let mut pairs\
    \ = Vec::new();\n    for &i in l {\n        for &j in l {\n            if i +\
    \ j == 0 {\n                pairs.push((i, j));\n            }\n        }\n  \
    \  }\n    pairs.len() == 2 && pairs.iter().all(|&(i, j)| i == j)", "    let mut\
    \ pairs = Vec::new();\n    for i in l {\n        for j in l {\n            if\
    \ i != j && i + j == 0 {\n                pairs.push((i, j));\n            }\n\
    \        }\n    }\n    pairs.len() == 2 && pairs.iter().all(|&(_, v)| v == 0)",
  "    let mut pairs = vec![];\n    for &i in l {\n        for &j in l {\n       \
    \     if i == j {\n                continue;\n            }\n            if i\
    \ + j == 0 {\n                pairs.push((i, j));\n            }\n        }\n\
    \    }\n    pairs.len() == 2 && pairs.iter().all(|&(i, j)| i == j)", "    let\
    \ mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let\
    \ mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut pairs = Vec::new();\n    for &i in l {\n        for &j\
    \ in l {\n            if i + j == 0 {\n                pairs.push((i, j));\n \
    \           }\n        }\n    }\n    pairs.len() == 2 && pairs.iter().all(|&(i,\
    \ j)| i + j == 0)", "    let mut pairs = Vec::new();\n    let mut sum = 0;\n \
    \   for &i in l {\n        pairs.push((i, sum));\n        sum += i;\n    }\n \
    \   pairs.iter().all(|&(_, s)| s == 0)", "    let mut pairs = Vec::new();\n  \
    \  for &i in l {\n        for &j in l {\n            if i != j && i + j == 0 {\n\
    \                pairs.push((i, j));\n            }\n        }\n    }\n    pairs.len()\
    \ == l.len() / 2", "    let mut seen = HashSet::new();\n    for &i in l {\n  \
    \      if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", "    let mut seen: HashSet<isize> = HashSet::new();\n    for\
    \ &i in l {\n        if seen.contains(&i) {\n            return true;\n      \
    \  }\n        seen.insert(i);\n    }\n    false", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut pairs = vec![(0,\
    \ 0)];\n    for &i in l {\n        for &j in pairs.iter().rev() {\n          \
    \  if i + j == 0 {\n                return true;\n            }\n        }\n \
    \       pairs.push((i, 0));\n    }\n    false", "    let mut pairs = Vec::new();\n\
    \    for i in l {\n        for j in l {\n            if i != j && i + j == 0 {\n\
    \                pairs.push((i, j));\n            }\n        }\n    }\n    pairs.len()\
    \ == l.len() / 2", "    let mut pairs = Vec::new();\n    let mut sum = 0;\n  \
    \  for x in l {\n        sum += x;\n        if sum == 0 {\n            pairs.push((x,\
    \ 0));\n        }\n    }\n    pairs.len() == 2 && pairs.iter().all(|&(_, y)| y\
    \ == 0)", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let\
    \ mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == 2", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut pairs = vec![];\n\
    \    for i in l {\n        for j in l {\n            if i == j {\n           \
    \     continue;\n            }\n            if i + j == 0 {\n                pairs.push((i,\
    \ j));\n            }\n        }\n    }\n    pairs.len() == 2 && pairs.iter().all(|&(_,\
    \ j)| j == 0)", "    let mut sum = 0;\n    let mut pairs = Vec::new();\n    for\
    \ x in l {\n        if x == 0 {\n            pairs.push((x, 0));\n        } else\
    \ {\n            sum += x;\n            if sum == 0 {\n                pairs.push((x,\
    \ 0));\n            } else {\n                let mut found = false;\n       \
    \         for y in pairs.iter().rev() {\n                    if y == (0, 0) {\n\
    \                        found = true;\n                        break;\n     \
    \               }\n                    if sum == y[0] {\n                    \
    \    found = true;\n                        break;\n                    }\n  \
    \              }\n                if !found {\n                    pairs.push((x,\
    \ sum));\n                }\n            }\n        }\n    }\n    pairs.len()\
    \ == 1 && pairs.iter().any(|&(_, y)| y == 0)", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut pairs = vec![vec![],\
    \ vec![]];\n    for &i in l {\n        for &j in pairs.iter_mut() {\n        \
    \    if i == j[0] {\n                j[1] = i;\n                return true;\n\
    \            }\n        }\n        pairs.push(vec![i]);\n    }\n    false", " \
    \   let mut seen: HashSet<isize> = HashSet::new();\n    for &i in l {\n      \
    \  if seen.contains(&i) {\n            return true;\n        }\n        seen.insert(i);\n\
    \    }\n    false", "    let mut seen: HashSet<isize> = HashSet::new();\n    for\
    \ &i in l {\n        if seen.contains(&i) {\n            return false;\n     \
    \   }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut pairs = Vec::new();\n\
    \    for &i in l {\n        for &j in l {\n            if i != j && i + j == 0\
    \ {\n                pairs.push((i, j));\n            }\n        }\n    }\n  \
    \  pairs.len() > 1", "    let mut seen: HashSet<isize> = HashSet::new();\n   \
    \ for &i in l {\n        if seen.contains(&i) {\n            return true;\n  \
    \      }\n        seen.insert(i);\n    }\n    false", "    let mut pairs = Vec::new();\n\
    \    let mut sum = 0;\n    for &i in l {\n        if i == 0 {\n            pairs.push((i,\
    \ 0));\n        } else {\n            pairs.push((i, sum));\n            sum +=\
    \ i;\n        }\n    }\n    pairs.iter().all(|&(i, j)| i == j)", "    let mut\
    \ seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n\
    \            return false;\n        }\n        seen.insert(i);\n    }\n    true",
  "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let\
    \ mut pairs = Vec::new();\n    let mut i = 0;\n    while i < l.len() {\n     \
    \   if l[i] == l[(i + 1) % l.len() {\n            i += 1;\n        } else {\n\
    \            pairs.push((l[i], l[(i + 1) % l.len()]);\n            i += 1;\n \
    \       }\n    }\n    pairs.len() == 2 && pairs.iter().all(|&pair| pair.0 == pair.1)",
  "    let mut seen: HashSet<isize> = HashSet::new();\n    for &i in l {\n       \
    \ if seen.contains(&i) {\n            return true;\n        }\n        seen.insert(i);\n\
    \    }\n    false", "    let mut pairs = Vec::new();\n    for &i in l {\n    \
    \    for &j in l {\n            if i + j == 0 {\n                pairs.push((i,\
    \ j));\n            }\n        }\n    }\n    pairs.len() == 2 && pairs.iter().all(|&(i,\
    \ j)| i == j)", "    let mut pairs = Vec::new();\n    for &i in l {\n        for\
    \ &j in l {\n            if i != j && i + j == 0 {\n                pairs.push((i,\
    \ j));\n            }\n        }\n    }\n    pairs.len() == l.len() / 2", "  \
    \  let mut seen = HashSet::new();\n    for i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut seen: HashSet<isize> = HashSet::new();\n    for &i in l\
    \ {\n        if seen.contains(&i) {\n            return true;\n        }\n   \
    \     seen.insert(i);\n    }\n    false", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == 2", " \
    \   let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false"]
stop_tokens:
- "\n}"
