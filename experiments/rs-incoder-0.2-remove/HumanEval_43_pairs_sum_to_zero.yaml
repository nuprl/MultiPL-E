name: HumanEval_43_pairs_sum_to_zero
language: rs
prompt: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
  \ True if there are two distinct elements in the list that\n/// sum to zero, and\
  \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
  \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n   \
  \ assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
  \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
  \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
  \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
  \ 9, -1, 4, 2, 31]), false);\n}\n"
completions: ["    let mut pairs = Vec::new();\n    for &i in l {\n        for &j\
    \ in l {\n            if i != j && i + j == 0 {\n                pairs.push((i,\
    \ j));\n            }\n        }\n    }\n    pairs.len() == l.len() / 2 && pairs.iter().all(|&(i,\
    \ j)| i + j == 0)", "    let mut pairs = Vec::new();\n    for i in l {\n     \
    \   for j in l {\n            if i != j && i + j == 0 {\n                pairs.push((i,\
    \ j));\n            }\n        }\n    }\n    pairs.len() > 1", "    let mut pairs\
    \ = Vec::new();\n    let mut sum = 0;\n    for &i in l {\n        pairs.push((i,\
    \ sum));\n        sum += i;\n    }\n    let mut seen = HashSet::new();\n    for\
    \ &(i, sum) in pairs {\n        if seen.contains(&sum) {\n            return false;\n\
    \        }\n        seen.insert(sum);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut pairs = Vec::new();\n\
    \    for i in l {\n        for j in l {\n            if i != j && i + j == 0 {\n\
    \                pairs.push((i, j));\n            }\n        }\n    }\n    pairs.len()\
    \ == l.len() / 2", "    let mut pairs = vec![];\n    let mut sum = 0;\n    for\
    \ &i in l {\n        if i != 0 {\n            pairs.push((i, sum));\n        \
    \    sum += i;\n        }\n    }\n    for &(i, sum) in pairs {\n        if sum\
    \ == 0 {\n            return true;\n        }\n    }\n    false", "    let mut\
    \ pairs = Vec::new();\n    for i in l {\n        for j in l {\n            if\
    \ i + j == 0 {\n                pairs.push((i, j));\n            }\n        }\n\
    \    }\n    pairs.len() == 2 && pairs.iter().all(|&(_, x)| x == 0)", "    let\
    \ mut seen: HashSet<isize> = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen: HashSet<isize> = HashSet::new();\n    for &i in l\
    \ {\n        if seen.contains(&i) {\n            return false;\n        }\n  \
    \      seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n    for &i in\
    \ l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == 2", "    let mut seen: HashSet<isize> = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return true;\n        }\n        seen.insert(i);\n    }\n    false", " \
    \   let mut pairs = Vec::new();\n    for &i in l {\n        for &j in l {\n  \
    \          if i == j {\n                continue;\n            }\n           \
    \ if i + j == 0 {\n                pairs.push((i, j));\n            }\n      \
    \  }\n    }\n    pairs.len() == 2 && pairs.iter().all(|&(i, j)| i == j)", "  \
    \  let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut pairs = Vec::new();\n    for &i in l {\n        for &j\
    \ in l {\n            if i + j == 0 {\n                pairs.push((i, j));\n \
    \           }\n        }\n    }\n    pairs.len() == 2 && pairs.iter().all(|&(i,\
    \ j)| i == j)", "    let mut seen = HashSet::new();\n    for &i in l {\n     \
    \   if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true"]
stop_tokens:
- "\n}"
