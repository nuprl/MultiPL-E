name: HumanEval_98_count_upper
language: rs
prompt: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
  /// For example:\nfn count_upper(s: String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
  aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
  dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
  U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
  EEEE\")), 2);\n}\n"
completions: ["    s.chars().filter(|c| c >= 'A' && c <= 'Z').filter(|c| c % 2 ==\
    \ 0).count()", "    s.chars().filter(|c| c >= 'A' && c <= 'Z').filter(|c| c %\
    \ 2 == 0).count()", "    s.chars().filter(|c| c >= 'A' && c <= 'Z').filter(|c|\
    \ c % 2 == 0).count()", '    s.chars().filter(|c| c.is_uppercase()).filter(|c|
    c % 2 == 0).count()', "    s.chars().filter(|c| c >= 'A' && c <= 'Z').filter(|c|\
    \ c % 2 == 0).count()", "    s.chars().filter(|c| c >= 'A' && c <= 'Z').filter(|c|\
    \ c % 2 == 0).count()", "    s.chars().filter(|c| c >= 'A' && c <= 'Z').filter(|c|\
    \ c % 2 == 0).count()", "    s.chars().filter(|c| c >= 'A' && c <= 'Z').filter(|c|\
    \ c % 2 == 0).count()", "    s.chars().filter(|c| c >= 'A' && c <= 'Z').filter(|c|\
    \ c % 2 == 0).count()", "    s.chars().filter(|c| c >= 'A' && c <= 'Z').filter(|c|\
    \ c % 2 == 0).count()", "    s.chars().filter(|c| c >= 'A' && c <= 'Z').filter(|c|\
    \ c % 2 == 0).count()", "    s.chars().filter(|c| c >= 'A' && c <= 'Z').filter(|c|\
    \ c % 2 == 0).count()", "    s.chars().filter(|c| c >= 'A' && c <= 'Z').filter(|c|\
    \ c % 2 == 0).count()", "    s.chars().filter(|c| c >= 'A' && c <= 'Z').filter(|c|\
    \ c % 2 == 0).count()", "    s.chars().filter(|c| c >= 'A' && c <= 'Z').filter(|c|\
    \ c % 2 == 0).count()", '    s.chars().filter(|c| c.is_uppercase()).filter(|c|
    c.is_ascii_uppercase()).count()', "    s.chars().filter(|c| c >= 'A' && c <= 'Z').filter(|c|\
    \ c % 2 == 0).count()", "    s.chars().filter(|c| c >= 'A' && c <= 'Z').filter(|c|\
    \ c % 2 == 0).count()", "    s.chars().filter(|c| c >= 'A' && c <= 'Z').filter(|c|\
    \ c % 2 == 0).count()", '    s.chars().filter(|c| c.is_uppercase()).filter(|c|
    c.is_ascii()).count()']
stop_tokens:
- "\n}"
