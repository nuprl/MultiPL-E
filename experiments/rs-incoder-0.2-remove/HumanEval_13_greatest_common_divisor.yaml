name: HumanEval_13_greatest_common_divisor
language: rs
prompt: "/// Return a greatest common divisor of two integers a and b\nfn greatest_common_divisor(a:\
  \ isize, b: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3,\
  \ 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14),\
  \ 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n"
completions: ["    let mut greatest_divisor = 1;\n    while a % greatest_divisor ==\
    \ 0 && b != 0 {\n        greatest_divisor *= b;\n        a /= b;\n    }\n    a",
  "    let mut greatest_common_divisor = a;\n    while greatest_common_divisor > b\
    \ {\n        greatest_common_divisor -= b;\n    }\n    greatest_common_divisor",
  "    let mut greatest_common_divisor = a.clone();\n    while greatest_common_divisor\
    \ < b {\n        greatest_common_divisor += a;\n    }\n    greatest_common_divisor",
  '    (a / b).floor() as isize', "    if a == 0 || b == 0 {\n        return 0;\n\
    \    }\n    if a > b {\n        (a, b) = (b, a)\n    }\n    let mut greatest_common_divisor\
    \ = a;\n    while greatest_common_divisor > b {\n        greatest_common_divisor\
    \ -= b;\n    }\n    greatest_common_divisor", "    while b != 0 {\n        let\
    \ (q, r) = divrem(a, b);\n        a = b;\n        b = r;\n    }\n    a", "   \
    \ let mut greatest_common_divisor = a % b;\n    while greatest_common_divisor\
    \ != 0 {\n        greatest_common_divisor -= b;\n    }\n    greatest_common_divisor",
  "    let mut greatest_common_divisor = a % b;\n    while greatest_common_divisor\
    \ != 0 {\n        greatest_common_divisor -= b;\n    }\n    greatest_common_divisor",
  "    if a == 0 || b == 0 {\n        return 0;\n    }\n    let mut greatest_common_divisor\
    \ = a % b;\n    while greatest_common_divisor != 0 {\n        greatest_common_divisor\
    \ -= b;\n    }\n    greatest_common_divisor", "    let mut greatest_divisor =\
    \ a % b;\n    while greatest_divisor != 0 {\n        greatest_divisor = b;\n \
    \       b = a % b;\n        a = greatest_divisor;\n    }\n    a", "    let mut\
    \ greatest_common_divisor = a;\n    while greatest_common_divisor > b {\n    \
    \    greatest_common_divisor -= b;\n    }\n    greatest_common_divisor", "   \
    \ let mut greatest_divisor: isize = 1;\n    let mut a_mod_greatest_divisor: isize\
    \ = 0;\n    let mut b_mod_greatest_divisor: isize = 0;\n    while greatest_divisor\
    \ < a && greatest_divisor < b {\n        if a % greatest_divisor == 0 && b % greatest_divisor\
    \ == 0 {\n            greatest_divisor = greatest_divisor + 1;\n            a_mod_greatest_divisor\
    \ = a_mod_greatest_divisor + 1;\n            b_mod_greatest_divisor = b_mod_greatest_divisor\
    \ + 1;\n        } else {\n            greatest_divisor = greatest_divisor + 1;\n\
    \        }\n    }\n    if greatest_divisor == a {\n        greatest_divisor\n\
    \    } else {\n        greatest_divisor\n    }", "    let mut gcd = a;\n    while\
    \ gcd != 0 {\n        if b % gcd == 0 {\n            gcd = b / gcd;\n        }\
    \ else {\n            gcd = gcd / gcd;\n        }\n    }\n    gcd", "    let mut\
    \ gcd = 1;\n    while a > 0 && b > 0 {\n        if a > b {\n            a %= b;\n\
    \        } else {\n            b %= a;\n        }\n        gcd = a % gcd < b %\
    \ gcd ? a : gcd;\n    }\n    gcd", '    (a / b).floor() as isize', "    let mut\
    \ gcd = 1;\n    while a != 0 {\n        if a % b == 0 {\n            gcd = b;\n\
    \        }\n        b /= 2;\n    }\n    gcd", "    let mut greatest_common_divisor\
    \ = a % b;\n    while greatest_common_divisor != 0 {\n        greatest_common_divisor\
    \ -= b;\n    }\n    greatest_common_divisor", '    (a / b).floor() as isize',
  "    let mut greatest_common_divisor = a;\n    while greatest_common_divisor > b\
    \ {\n        greatest_common_divisor -= b;\n    }\n    greatest_common_divisor",
  "    let mut greatest_common_divisor = 1;\n    while a > 0 && b > 0 {\n        if\
    \ a % b == 0 {\n            greatest_common_divisor = b;\n        }\n        greatest_common_divisor\
    \ /= b;\n        a = (a / b).floor();\n        b = (b / greatest_common_divisor).floor();\n\
    \    }\n    greatest_common_divisor"]
stop_tokens:
- "\n}"
