language: rs
name: HumanEval_42_incr_list
results:
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.push(l.len() + 1);\n    l\n}\n\n\
    fn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg9cf46d2.rs:4:12\n  |\n4 |\
    \     l.push(l.len() + 1);\n  |            ^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n  |\n4 |     l.push((l.len() + 1).try_into().unwrap());\n\
    \  |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747964
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.push(l.len() + 1);\n    l\n}\n\n\
    fn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg9cf46d2.rs:4:12\n  |\n4 |\
    \     l.push(l.len() + 1);\n  |            ^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n  |\n4 |     l.push((l.len() + 1).try_into().unwrap());\n\
    \  |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747964
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut list = l.to_vec();\n    list.push(list.len());\n\
    \    list\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpthfe28av.rs:4:15\n  |\n4 |\
    \     list.push(list.len());\n  |               ^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n  |\n4 |     list.push(list.len().try_into().unwrap());\n\
    \  |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747964
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    for i in l {\n        result.push(i\
    \ + 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747964
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.push(l.len() + 1);\n    l\n}\n\n\
    fn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg9cf46d2.rs:4:12\n  |\n4 |\
    \     l.push(l.len() + 1);\n  |            ^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n  |\n4 |     l.push((l.len() + 1).try_into().unwrap());\n\
    \  |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747964
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n      \
    \  result.push(i + 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747964
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747964
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747964
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747964
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.push(l.len() + 1);\n    l\n}\n\n\
    fn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg9cf46d2.rs:4:12\n  |\n4 |\
    \     l.push(l.len() + 1);\n  |            ^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n  |\n4 |     l.push((l.len() + 1).try_into().unwrap());\n\
    \  |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747964
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n      \
    \  result.push(i + 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747964
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    for i in l {\n        result.push(i\
    \ + 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747964
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.push(l.len() + 1);\n    l\n}\n\n\
    fn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg9cf46d2.rs:4:12\n  |\n4 |\
    \     l.push(l.len() + 1);\n  |            ^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n  |\n4 |     l.push((l.len() + 1).try_into().unwrap());\n\
    \  |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747964
- exit_code: 101
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.push(l.len() as isize);\n    l\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmp1n0nq4v6.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747964
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747964
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n      \
    \  result.push(i + 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747964
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747964
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747964
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747964
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747964
