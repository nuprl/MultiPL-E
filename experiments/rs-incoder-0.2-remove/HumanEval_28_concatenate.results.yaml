language: rs
name: HumanEval_28_concatenate
results:
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748777
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf_a2tlxm.rs:5:25\n  |\n5 |\
    \         result.push_str(s);\n  |                         ^\n  |            \
    \             |\n  |                         expected `&str`, found struct `String`\n\
    \  |                         help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\"\
    ,\")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x,y,z\"`,\n right: `\"xyz\"`', /tmp/tmpsuc8zlc3.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut s, s|\
    \ s + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0415]: identifier `s` is bound more than once in this parameter\
    \ list\n --> /tmp/tmp42gsf2fn.rs:3:48\n  |\n3 |     strings.iter().fold(String::new(),\
    \ |mut s, s| s + s)\n  |                                                ^ used\
    \ as parameter more than once\n\nerror[E0369]: cannot add `&String` to `&String`\n\
    \ --> /tmp/tmp42gsf2fn.rs:3:53\n  |\n3 |     strings.iter().fold(String::new(),\
    \ |mut s, s| s + s)\n  |                                                   - ^\
    \ - &String\n  |                                                   | |\n  |  \
    \                                                 | `+` cannot be used to concatenate\
    \ two `&str` strings\n  |                                                   &String\n\
    \  |\nhelp: `to_owned()` can be used to create an owned `String` from a string\
    \ reference. String concatenation appends the string on the right to the string\
    \ on the left and may require reallocation. This requires ownership of the string\
    \ on the left\n  |\n3 |     strings.iter().fold(String::new(), |mut s, s| s.to_owned()\
    \ + s)\n  |                                                   ~~~~~~~~~~~~\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0369, E0415.\nFor more information about an error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748777
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut s = String::new();\n    for s in strings\
    \ {\n        s += s;\n    }\n    s\n}\n\nfn main() {\n    let candidate = concatenate;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), String::from(\"xyz\"));\n  \
    \  assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\"), String::from(\"w\"), String::from(\"k\")]), String::from(\"xyzwk\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfn75g68x.rs:5:14\n  |\n5 |\
    \         s += s;\n  |              ^\n  |              |\n  |              expected\
    \ `&str`, found struct `String`\n  |              help: consider borrowing here:\
    \ `&s`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result = result.push_str(s);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw6azr6jm.rs:5:34\n  |\n5 |\
    \         result = result.push_str(s);\n  |                                  ^\n\
    \  |                                  |\n  |                                 \
    \ expected `&str`, found struct `String`\n  |                                \
    \  help: consider borrowing here: `&s`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpw6azr6jm.rs:5:18\n  |\n5 |         result = result.push_str(s);\n  |\
    \                  ^^^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n \
    \ |\nnote: method `push_str` modifies its receiver in-place\n --> /tmp/tmpw6azr6jm.rs:5:25\n\
    \  |\n5 |         result = result.push_str(s);\n  |                  ------ ^^^^^^^^\
    \ this call modifies `result` in-place\n  |                  |\n  |          \
    \        you probably want to use this value after calling the method...\n  =\
    \ note: ...instead of the `()` output of method `push_str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result += s;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgk6hlx34.rs:5:19\n  |\n5 |\
    \         result += s;\n  |                   ^\n  |                   |\n  |\
    \                   expected `&str`, found struct `String`\n  |              \
    \     help: consider borrowing here: `&s`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result = result.push_str(s);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw6azr6jm.rs:5:34\n  |\n5 |\
    \         result = result.push_str(s);\n  |                                  ^\n\
    \  |                                  |\n  |                                 \
    \ expected `&str`, found struct `String`\n  |                                \
    \  help: consider borrowing here: `&s`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpw6azr6jm.rs:5:18\n  |\n5 |         result = result.push_str(s);\n  |\
    \                  ^^^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n \
    \ |\nnote: method `push_str` modifies its receiver in-place\n --> /tmp/tmpw6azr6jm.rs:5:25\n\
    \  |\n5 |         result = result.push_str(s);\n  |                  ------ ^^^^^^^^\
    \ this call modifies `result` in-place\n  |                  |\n  |          \
    \        you probably want to use this value after calling the method...\n  =\
    \ note: ...instead of the `()` output of method `push_str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result = result.push_str(s);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw6azr6jm.rs:5:34\n  |\n5 |\
    \         result = result.push_str(s);\n  |                                  ^\n\
    \  |                                  |\n  |                                 \
    \ expected `&str`, found struct `String`\n  |                                \
    \  help: consider borrowing here: `&s`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpw6azr6jm.rs:5:18\n  |\n5 |         result = result.push_str(s);\n  |\
    \                  ^^^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n \
    \ |\nnote: method `push_str` modifies its receiver in-place\n --> /tmp/tmpw6azr6jm.rs:5:25\n\
    \  |\n5 |         result = result.push_str(s);\n  |                  ------ ^^^^^^^^\
    \ this call modifies `result` in-place\n  |                  |\n  |          \
    \        you probably want to use this value after calling the method...\n  =\
    \ note: ...instead of the `()` output of method `push_str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976189
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result += s;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgk6hlx34.rs:5:19\n  |\n5 |\
    \         result += s;\n  |                   ^\n  |                   |\n  |\
    \                   expected `&str`, found struct `String`\n  |              \
    \     help: consider borrowing here: `&s`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976189
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976189
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748777
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(s);\n        result.push(' ');\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgsy1e1ts.rs:5:25\n  |\n5 |\
    \         result.push_str(s);\n  |                         ^\n  |            \
    \             |\n  |                         expected `&str`, found struct `String`\n\
    \  |                         help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976188
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result = result.push_str(s);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw6azr6jm.rs:5:34\n  |\n5 |\
    \         result = result.push_str(s);\n  |                                  ^\n\
    \  |                                  |\n  |                                 \
    \ expected `&str`, found struct `String`\n  |                                \
    \  help: consider borrowing here: `&s`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpw6azr6jm.rs:5:18\n  |\n5 |         result = result.push_str(s);\n  |\
    \                  ^^^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n \
    \ |\nnote: method `push_str` modifies its receiver in-place\n --> /tmp/tmpw6azr6jm.rs:5:25\n\
    \  |\n5 |         result = result.push_str(s);\n  |                  ------ ^^^^^^^^\
    \ this call modifies `result` in-place\n  |                  |\n  |          \
    \        you probably want to use this value after calling the method...\n  =\
    \ note: ...instead of the `()` output of method `push_str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf_a2tlxm.rs:5:25\n  |\n5 |\
    \         result.push_str(s);\n  |                         ^\n  |            \
    \             |\n  |                         expected `&str`, found struct `String`\n\
    \  |                         help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut s, s|\
    \ s + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0415]: identifier `s` is bound more than once in this parameter\
    \ list\n --> /tmp/tmp42gsf2fn.rs:3:48\n  |\n3 |     strings.iter().fold(String::new(),\
    \ |mut s, s| s + s)\n  |                                                ^ used\
    \ as parameter more than once\n\nerror[E0369]: cannot add `&String` to `&String`\n\
    \ --> /tmp/tmp42gsf2fn.rs:3:53\n  |\n3 |     strings.iter().fold(String::new(),\
    \ |mut s, s| s + s)\n  |                                                   - ^\
    \ - &String\n  |                                                   | |\n  |  \
    \                                                 | `+` cannot be used to concatenate\
    \ two `&str` strings\n  |                                                   &String\n\
    \  |\nhelp: `to_owned()` can be used to create an owned `String` from a string\
    \ reference. String concatenation appends the string on the right to the string\
    \ on the left and may require reallocation. This requires ownership of the string\
    \ on the left\n  |\n3 |     strings.iter().fold(String::new(), |mut s, s| s.to_owned()\
    \ + s)\n  |                                                   ~~~~~~~~~~~~\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0369, E0415.\nFor more information about an error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\"\
    \\n\")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x\\ny\\nz\"`,\n right: `\"xyz\"`', /tmp/tmp4y41iqoe.rs:9:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976189
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf_a2tlxm.rs:5:25\n  |\n5 |\
    \         result.push_str(s);\n  |                         ^\n  |            \
    \             |\n  |                         expected `&str`, found struct `String`\n\
    \  |                         help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result = result.push_str(s);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw6azr6jm.rs:5:34\n  |\n5 |\
    \         result = result.push_str(s);\n  |                                  ^\n\
    \  |                                  |\n  |                                 \
    \ expected `&str`, found struct `String`\n  |                                \
    \  help: consider borrowing here: `&s`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpw6azr6jm.rs:5:18\n  |\n5 |         result = result.push_str(s);\n  |\
    \                  ^^^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n \
    \ |\nnote: method `push_str` modifies its receiver in-place\n --> /tmp/tmpw6azr6jm.rs:5:25\n\
    \  |\n5 |         result = result.push_str(s);\n  |                  ------ ^^^^^^^^\
    \ this call modifies `result` in-place\n  |                  |\n  |          \
    \        you probably want to use this value after calling the method...\n  =\
    \ note: ...instead of the `()` output of method `push_str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf_a2tlxm.rs:5:25\n  |\n5 |\
    \         result.push_str(s);\n  |                         ^\n  |            \
    \             |\n  |                         expected `&str`, found struct `String`\n\
    \  |                         help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf_a2tlxm.rs:5:25\n  |\n5 |\
    \         result.push_str(s);\n  |                         ^\n  |            \
    \             |\n  |                         expected `&str`, found struct `String`\n\
    \  |                         help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976189
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result = result.push_str(s);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw6azr6jm.rs:5:34\n  |\n5 |\
    \         result = result.push_str(s);\n  |                                  ^\n\
    \  |                                  |\n  |                                 \
    \ expected `&str`, found struct `String`\n  |                                \
    \  help: consider borrowing here: `&s`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpw6azr6jm.rs:5:18\n  |\n5 |         result = result.push_str(s);\n  |\
    \                  ^^^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n \
    \ |\nnote: method `push_str` modifies its receiver in-place\n --> /tmp/tmpw6azr6jm.rs:5:25\n\
    \  |\n5 |         result = result.push_str(s);\n  |                  ------ ^^^^^^^^\
    \ this call modifies `result` in-place\n  |                  |\n  |          \
    \        you probably want to use this value after calling the method...\n  =\
    \ note: ...instead of the `()` output of method `push_str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut s = String::new();\n    for s in strings\
    \ {\n        s += s;\n    }\n    s\n}\n\nfn main() {\n    let candidate = concatenate;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), String::from(\"xyz\"));\n  \
    \  assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\"), String::from(\"w\"), String::from(\"k\")]), String::from(\"xyzwk\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfn75g68x.rs:5:14\n  |\n5 |\
    \         s += s;\n  |              ^\n  |              |\n  |              expected\
    \ `&str`, found struct `String`\n  |              help: consider borrowing here:\
    \ `&s`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<String>>().join(\"\
    ,\")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x,y,z\"`,\n right: `\"xyz\"`', /tmp/tmp5pf0lpnj.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976189
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf_a2tlxm.rs:5:25\n  |\n5 |\
    \         result.push_str(s);\n  |                         ^\n  |            \
    \             |\n  |                         expected `&str`, found struct `String`\n\
    \  |                         help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748777
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result = result.push_str(s);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw6azr6jm.rs:5:34\n  |\n5 |\
    \         result = result.push_str(s);\n  |                                  ^\n\
    \  |                                  |\n  |                                 \
    \ expected `&str`, found struct `String`\n  |                                \
    \  help: consider borrowing here: `&s`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpw6azr6jm.rs:5:18\n  |\n5 |         result = result.push_str(s);\n  |\
    \                  ^^^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n \
    \ |\nnote: method `push_str` modifies its receiver in-place\n --> /tmp/tmpw6azr6jm.rs:5:25\n\
    \  |\n5 |         result = result.push_str(s);\n  |                  ------ ^^^^^^^^\
    \ this call modifies `result` in-place\n  |                  |\n  |          \
    \        you probably want to use this value after calling the method...\n  =\
    \ note: ...instead of the `()` output of method `push_str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut s = String::new();\n    for s in strings\
    \ {\n        s += s;\n    }\n    s\n}\n\nfn main() {\n    let candidate = concatenate;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), String::from(\"xyz\"));\n  \
    \  assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\"), String::from(\"w\"), String::from(\"k\")]), String::from(\"xyzwk\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfn75g68x.rs:5:14\n  |\n5 |\
    \         s += s;\n  |              ^\n  |              |\n  |              expected\
    \ `&str`, found struct `String`\n  |              help: consider borrowing here:\
    \ `&s`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result = result.push_str(s);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw6azr6jm.rs:5:34\n  |\n5 |\
    \         result = result.push_str(s);\n  |                                  ^\n\
    \  |                                  |\n  |                                 \
    \ expected `&str`, found struct `String`\n  |                                \
    \  help: consider borrowing here: `&s`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpw6azr6jm.rs:5:18\n  |\n5 |         result = result.push_str(s);\n  |\
    \                  ^^^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n \
    \ |\nnote: method `push_str` modifies its receiver in-place\n --> /tmp/tmpw6azr6jm.rs:5:25\n\
    \  |\n5 |         result = result.push_str(s);\n  |                  ------ ^^^^^^^^\
    \ this call modifies `result` in-place\n  |                  |\n  |          \
    \        you probably want to use this value after calling the method...\n  =\
    \ note: ...instead of the `()` output of method `push_str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976189
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748777
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result += s;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgk6hlx34.rs:5:19\n  |\n5 |\
    \         result += s;\n  |                   ^\n  |                   |\n  |\
    \                   expected `&str`, found struct `String`\n  |              \
    \     help: consider borrowing here: `&s`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result = result.push_str(s);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw6azr6jm.rs:5:34\n  |\n5 |\
    \         result = result.push_str(s);\n  |                                  ^\n\
    \  |                                  |\n  |                                 \
    \ expected `&str`, found struct `String`\n  |                                \
    \  help: consider borrowing here: `&s`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpw6azr6jm.rs:5:18\n  |\n5 |         result = result.push_str(s);\n  |\
    \                  ^^^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n \
    \ |\nnote: method `push_str` modifies its receiver in-place\n --> /tmp/tmpw6azr6jm.rs:5:25\n\
    \  |\n5 |         result = result.push_str(s);\n  |                  ------ ^^^^^^^^\
    \ this call modifies `result` in-place\n  |                  |\n  |          \
    \        you probably want to use this value after calling the method...\n  =\
    \ note: ...instead of the `()` output of method `push_str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748777
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result = result.push_str(s);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw6azr6jm.rs:5:34\n  |\n5 |\
    \         result = result.push_str(s);\n  |                                  ^\n\
    \  |                                  |\n  |                                 \
    \ expected `&str`, found struct `String`\n  |                                \
    \  help: consider borrowing here: `&s`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpw6azr6jm.rs:5:18\n  |\n5 |         result = result.push_str(s);\n  |\
    \                  ^^^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n \
    \ |\nnote: method `push_str` modifies its receiver in-place\n --> /tmp/tmpw6azr6jm.rs:5:25\n\
    \  |\n5 |         result = result.push_str(s);\n  |                  ------ ^^^^^^^^\
    \ this call modifies `result` in-place\n  |                  |\n  |          \
    \        you probably want to use this value after calling the method...\n  =\
    \ note: ...instead of the `()` output of method `push_str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\"\
    ,\")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x,y,z\"`,\n right: `\"xyz\"`', /tmp/tmpsuc8zlc3.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976189
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976189
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\"\
    ,\")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x,y,z\"`,\n right: `\"xyz\"`', /tmp/tmpsuc8zlc3.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result += s;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgk6hlx34.rs:5:19\n  |\n5 |\
    \         result += s;\n  |                   ^\n  |                   |\n  |\
    \                   expected `&str`, found struct `String`\n  |              \
    \     help: consider borrowing here: `&s`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result = result.push_str(s);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw6azr6jm.rs:5:34\n  |\n5 |\
    \         result = result.push_str(s);\n  |                                  ^\n\
    \  |                                  |\n  |                                 \
    \ expected `&str`, found struct `String`\n  |                                \
    \  help: consider borrowing here: `&s`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpw6azr6jm.rs:5:18\n  |\n5 |         result = result.push_str(s);\n  |\
    \                  ^^^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n \
    \ |\nnote: method `push_str` modifies its receiver in-place\n --> /tmp/tmpw6azr6jm.rs:5:25\n\
    \  |\n5 |         result = result.push_str(s);\n  |                  ------ ^^^^^^^^\
    \ this call modifies `result` in-place\n  |                  |\n  |          \
    \        you probably want to use this value after calling the method...\n  =\
    \ note: ...instead of the `()` output of method `push_str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result = result.push_str(s);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw6azr6jm.rs:5:34\n  |\n5 |\
    \         result = result.push_str(s);\n  |                                  ^\n\
    \  |                                  |\n  |                                 \
    \ expected `&str`, found struct `String`\n  |                                \
    \  help: consider borrowing here: `&s`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpw6azr6jm.rs:5:18\n  |\n5 |         result = result.push_str(s);\n  |\
    \                  ^^^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n \
    \ |\nnote: method `push_str` modifies its receiver in-place\n --> /tmp/tmpw6azr6jm.rs:5:25\n\
    \  |\n5 |         result = result.push_str(s);\n  |                  ------ ^^^^^^^^\
    \ this call modifies `result` in-place\n  |                  |\n  |          \
    \        you probably want to use this value after calling the method...\n  =\
    \ note: ...instead of the `()` output of method `push_str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<String>>().join(\"\
    \\n\")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x\\ny\\nz\"`,\n right: `\"xyz\"`', /tmp/tmp8sognmw7.rs:9:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976189
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf_a2tlxm.rs:5:25\n  |\n5 |\
    \         result.push_str(s);\n  |                         ^\n  |            \
    \             |\n  |                         expected `&str`, found struct `String`\n\
    \  |                         help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\"\
    , \")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x, y, z\"`,\n right: `\"xyz\"`', /tmp/tmpbh6_b0ng.rs:9:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976189
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf_a2tlxm.rs:5:25\n  |\n5 |\
    \         result.push_str(s);\n  |                         ^\n  |            \
    \             |\n  |                         expected `&str`, found struct `String`\n\
    \  |                         help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\"\
    ,\")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x,y,z\"`,\n right: `\"xyz\"`', /tmp/tmpsuc8zlc3.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result += s;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgk6hlx34.rs:5:19\n  |\n5 |\
    \         result += s;\n  |                   ^\n  |                   |\n  |\
    \                   expected `&str`, found struct `String`\n  |              \
    \     help: consider borrowing here: `&s`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result = result.push_str(s);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw6azr6jm.rs:5:34\n  |\n5 |\
    \         result = result.push_str(s);\n  |                                  ^\n\
    \  |                                  |\n  |                                 \
    \ expected `&str`, found struct `String`\n  |                                \
    \  help: consider borrowing here: `&s`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpw6azr6jm.rs:5:18\n  |\n5 |         result = result.push_str(s);\n  |\
    \                  ^^^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n \
    \ |\nnote: method `push_str` modifies its receiver in-place\n --> /tmp/tmpw6azr6jm.rs:5:25\n\
    \  |\n5 |         result = result.push_str(s);\n  |                  ------ ^^^^^^^^\
    \ this call modifies `result` in-place\n  |                  |\n  |          \
    \        you probably want to use this value after calling the method...\n  =\
    \ note: ...instead of the `()` output of method `push_str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\"\
    ,\")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x,y,z\"`,\n right: `\"xyz\"`', /tmp/tmpsuc8zlc3.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf_a2tlxm.rs:5:25\n  |\n5 |\
    \         result.push_str(s);\n  |                         ^\n  |            \
    \             |\n  |                         expected `&str`, found struct `String`\n\
    \  |                         help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(s);\n        result.push_str(\",\");\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpie9iftqa.rs:5:25\n  |\n5 |\
    \         result.push_str(s);\n  |                         ^\n  |            \
    \             |\n  |                         expected `&str`, found struct `String`\n\
    \  |                         help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976188
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result += s;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgk6hlx34.rs:5:19\n  |\n5 |\
    \         result += s;\n  |                   ^\n  |                   |\n  |\
    \                   expected `&str`, found struct `String`\n  |              \
    \     help: consider borrowing here: `&s`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(s);\n        result.push(',');\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3wuj_8wm.rs:5:25\n  |\n5 |\
    \         result.push_str(s);\n  |                         ^\n  |            \
    \             |\n  |                         expected `&str`, found struct `String`\n\
    \  |                         help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976188
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result = result.push_str(s);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw6azr6jm.rs:5:34\n  |\n5 |\
    \         result = result.push_str(s);\n  |                                  ^\n\
    \  |                                  |\n  |                                 \
    \ expected `&str`, found struct `String`\n  |                                \
    \  help: consider borrowing here: `&s`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpw6azr6jm.rs:5:18\n  |\n5 |         result = result.push_str(s);\n  |\
    \                  ^^^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n \
    \ |\nnote: method `push_str` modifies its receiver in-place\n --> /tmp/tmpw6azr6jm.rs:5:25\n\
    \  |\n5 |         result = result.push_str(s);\n  |                  ------ ^^^^^^^^\
    \ this call modifies `result` in-place\n  |                  |\n  |          \
    \        you probably want to use this value after calling the method...\n  =\
    \ note: ...instead of the `()` output of method `push_str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748777
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut s, s|\
    \ s + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0415]: identifier `s` is bound more than once in this parameter\
    \ list\n --> /tmp/tmp42gsf2fn.rs:3:48\n  |\n3 |     strings.iter().fold(String::new(),\
    \ |mut s, s| s + s)\n  |                                                ^ used\
    \ as parameter more than once\n\nerror[E0369]: cannot add `&String` to `&String`\n\
    \ --> /tmp/tmp42gsf2fn.rs:3:53\n  |\n3 |     strings.iter().fold(String::new(),\
    \ |mut s, s| s + s)\n  |                                                   - ^\
    \ - &String\n  |                                                   | |\n  |  \
    \                                                 | `+` cannot be used to concatenate\
    \ two `&str` strings\n  |                                                   &String\n\
    \  |\nhelp: `to_owned()` can be used to create an owned `String` from a string\
    \ reference. String concatenation appends the string on the right to the string\
    \ on the left and may require reallocation. This requires ownership of the string\
    \ on the left\n  |\n3 |     strings.iter().fold(String::new(), |mut s, s| s.to_owned()\
    \ + s)\n  |                                                   ~~~~~~~~~~~~\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0369, E0415.\nFor more information about an error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\"\
    ,\")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x,y,z\"`,\n right: `\"xyz\"`', /tmp/tmpsuc8zlc3.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(s);\n        result.push_str(\",\");\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpie9iftqa.rs:5:25\n  |\n5 |\
    \         result.push_str(s);\n  |                         ^\n  |            \
    \             |\n  |                         expected `&str`, found struct `String`\n\
    \  |                         help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976188
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748777
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result = result.push_str(s);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw6azr6jm.rs:5:34\n  |\n5 |\
    \         result = result.push_str(s);\n  |                                  ^\n\
    \  |                                  |\n  |                                 \
    \ expected `&str`, found struct `String`\n  |                                \
    \  help: consider borrowing here: `&s`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpw6azr6jm.rs:5:18\n  |\n5 |         result = result.push_str(s);\n  |\
    \                  ^^^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n \
    \ |\nnote: method `push_str` modifies its receiver in-place\n --> /tmp/tmpw6azr6jm.rs:5:25\n\
    \  |\n5 |         result = result.push_str(s);\n  |                  ------ ^^^^^^^^\
    \ this call modifies `result` in-place\n  |                  |\n  |          \
    \        you probably want to use this value after calling the method...\n  =\
    \ note: ...instead of the `()` output of method `push_str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<String>>().join(\"\
    , \")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x, y, z\"`,\n right: `\"xyz\"`', /tmp/tmpca49wn8o.rs:9:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976189
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\"\
    ,\")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x,y,z\"`,\n right: `\"xyz\"`', /tmp/tmpsuc8zlc3.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976189
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result = result.push_str(s);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw6azr6jm.rs:5:34\n  |\n5 |\
    \         result = result.push_str(s);\n  |                                  ^\n\
    \  |                                  |\n  |                                 \
    \ expected `&str`, found struct `String`\n  |                                \
    \  help: consider borrowing here: `&s`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpw6azr6jm.rs:5:18\n  |\n5 |         result = result.push_str(s);\n  |\
    \                  ^^^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n \
    \ |\nnote: method `push_str` modifies its receiver in-place\n --> /tmp/tmpw6azr6jm.rs:5:25\n\
    \  |\n5 |         result = result.push_str(s);\n  |                  ------ ^^^^^^^^\
    \ this call modifies `result` in-place\n  |                  |\n  |          \
    \        you probably want to use this value after calling the method...\n  =\
    \ note: ...instead of the `()` output of method `push_str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf_a2tlxm.rs:5:25\n  |\n5 |\
    \         result.push_str(s);\n  |                         ^\n  |            \
    \             |\n  |                         expected `&str`, found struct `String`\n\
    \  |                         help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\"\
    ,\")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x,y,z\"`,\n right: `\"xyz\"`', /tmp/tmpsuc8zlc3.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result = result.push_str(s);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw6azr6jm.rs:5:34\n  |\n5 |\
    \         result = result.push_str(s);\n  |                                  ^\n\
    \  |                                  |\n  |                                 \
    \ expected `&str`, found struct `String`\n  |                                \
    \  help: consider borrowing here: `&s`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpw6azr6jm.rs:5:18\n  |\n5 |         result = result.push_str(s);\n  |\
    \                  ^^^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n \
    \ |\nnote: method `push_str` modifies its receiver in-place\n --> /tmp/tmpw6azr6jm.rs:5:25\n\
    \  |\n5 |         result = result.push_str(s);\n  |                  ------ ^^^^^^^^\
    \ this call modifies `result` in-place\n  |                  |\n  |          \
    \        you probably want to use this value after calling the method...\n  =\
    \ note: ...instead of the `()` output of method `push_str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\"\
    ,\")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x,y,z\"`,\n right: `\"xyz\"`', /tmp/tmpsuc8zlc3.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\"\
    ,\")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x,y,z\"`,\n right: `\"xyz\"`', /tmp/tmpsuc8zlc3.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\"\
    ,\")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x,y,z\"`,\n right: `\"xyz\"`', /tmp/tmpsuc8zlc3.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut s, s|\
    \ s + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0415]: identifier `s` is bound more than once in this parameter\
    \ list\n --> /tmp/tmp42gsf2fn.rs:3:48\n  |\n3 |     strings.iter().fold(String::new(),\
    \ |mut s, s| s + s)\n  |                                                ^ used\
    \ as parameter more than once\n\nerror[E0369]: cannot add `&String` to `&String`\n\
    \ --> /tmp/tmp42gsf2fn.rs:3:53\n  |\n3 |     strings.iter().fold(String::new(),\
    \ |mut s, s| s + s)\n  |                                                   - ^\
    \ - &String\n  |                                                   | |\n  |  \
    \                                                 | `+` cannot be used to concatenate\
    \ two `&str` strings\n  |                                                   &String\n\
    \  |\nhelp: `to_owned()` can be used to create an owned `String` from a string\
    \ reference. String concatenation appends the string on the right to the string\
    \ on the left and may require reallocation. This requires ownership of the string\
    \ on the left\n  |\n3 |     strings.iter().fold(String::new(), |mut s, s| s.to_owned()\
    \ + s)\n  |                                                   ~~~~~~~~~~~~\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0369, E0415.\nFor more information about an error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf_a2tlxm.rs:5:25\n  |\n5 |\
    \         result.push_str(s);\n  |                         ^\n  |            \
    \             |\n  |                         expected `&str`, found struct `String`\n\
    \  |                         help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\"\
    ,\")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x,y,z\"`,\n right: `\"xyz\"`', /tmp/tmpsuc8zlc3.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748777
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748777
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x y z\"`,\n right: `\"xyz\"`', /tmp/tmpg4bse4ph.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748735
