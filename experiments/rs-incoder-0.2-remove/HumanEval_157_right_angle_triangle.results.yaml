language: rs
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a + b > c || b + c > a || c + a > b {\n        return false;\n    }\n\
    \    \n    let mut sum = a;\n    \n    for _ in 0..c {\n        sum += b;\n  \
    \  }\n    \n    for _ in 0..c {\n        sum += c;\n    }\n    \n    for _ in\
    \ 0..c {\n        sum += a;\n    }\n    \n    sum == b + c\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3zip4ddu.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a < b + c ? a : b + c;\n    let mut b = b < a + c ? b : a + c;\n\
    \    let mut c = c < a + b ? c : a + b;\n    \n    if a > b + c {\n        a =\
    \ b + c;\n        b = a + c;\n        c = a + b;\n    }\n    \n    if b > a +\
    \ c {\n        b = a + c;\n        a = b + c;\n        c = a + b;\n    }\n   \
    \ \n    if c > a + b {\n        c = a + b;\n        a = b + c;\n        b = a\
    \ + c;\n    }\n    \n    a == b + c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmpfk29pfl4.rs:7:29\n  |\n7 |     let mut a = a < b + c ? a : b + c;\n\
    \  |                             ^ expected one of `.`, `;`, `?`, `else`, or an\
    \ operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let mut\
    \ a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    \n    while\
    \ a > b {\n        a /= 2;\n        b /= 2;\n    }\n    while b > c {\n      \
    \  b /= 2;\n        c /= 2;\n    }\n    while c > a {\n        c /= 2;\n     \
    \   a /= 2;\n    }\n    \n    if a == b {\n        return c == a;\n    }\n   \
    \ if a == c {\n        return b == c;\n    }\n    if b == c {\n        return\
    \ a == b;\n    }\n    \n    let mut a = a / 2;\n    let mut b = b / 2;\n    let\
    \ mut c = c / 2;\n    \n    while a > b {\n        a /= 2;\n        b /= 2;\n\
    \    }\n    while b > c {\n        b /= 2;\n        c /= 2;\n    }\n    while\
    \ c > a {\n        c /= 2;\n        a /= 2;\n    }\n    \n    if a == b {\n  \
    \      return c == a;\n    }\n    if a == c {\n        return b == c;\n    }\n\
    \    if b == c {\n        return a == b;\n    }\n    \n    let mut a = a / 2;\n\
    \    let mut b = b / 2;\n    let mut c = c / 2;\n    \n    while a > b {\n   \
    \     a /= 2;\n        b /= 2;\n    }\n    while b > c {\n        b /= 2;\n  \
    \      c /= 2;\n    }\n    while c > a {\n        c /= 2;\n        a /= 2;\n \
    \   }\n    \n    if a == b {\n        return c == a;\n    }\n    if a == c {\n\
    \        return b == c;\n    }\n    if b == c {\n        return a == b;\n    }\n\
    \    \n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    \n    while a > b {\n        a /= 2;\n        b /= 2;\n    }\n    while b\
    \ > c {\n        b /= 2;\n        c /= 2;\n    }\n    while c > a {\n        c\
    \ /= 2;\n        a /= 2;\n    }\n    \n    if a == b {\n        return c == a;\n\
    \    }\n    if a == c {\n        return b == c;\n    }\n    if b == c {\n    \
    \    return a == b;\n    }\n    \n    let mut a = a / 2;\n    let mut b = b /\
    \ 2;\n    let mut c = c / 2;\n    \n    while a > b {\n        a /= 2;\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpd3_ubgy_.rs:139:3\n\
    \    |\n6   | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n122 |     while a > b {\n    |                 - this delimiter\
    \ might not be properly closed...\n123 |         a /= 2;\n124 | }\n    | - ...as\
    \ it matches this but it has different indentation\n...\n139 | }\n    |   ^\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpd3_ubgy_.rs:6:58\n  |\n6 | fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n  |    --------------------          \
    \                        ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a + b > c || a + c > b || b + c > a {\n        return false;\n    }\n\
    \    \n    let mut sum = a;\n    let mut diff = b;\n    let mut product = c;\n\
    \    \n    while sum + diff > product {\n        sum += diff;\n        diff -=\
    \ product;\n        product *= product;\n    }\n    \n    diff *= diff;\n    \n\
    \    if sum == product {\n        return true;\n    }\n    \n    return false;\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbqm8eyn3.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    (b - a).abs() >= (c - b).abs() && (c - b).abs() >= (a - c).abs()\n}\n\nfn\
    \ main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpc0dvg9az.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a + b > c || a + c > b || b + c > a {\n        return false;\n    }\n\
    \    return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8uamg_z2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a < b + c ? a : b + c;\n    let mut b = b < a + c ? b : a + c;\n\
    \    let mut c = c < a + b ? c : a + b;\n    \n    while a > b + c {\n       \
    \ a -= b;\n        b += c;\n        c += a;\n    }\n    \n    while b > a + c\
    \ {\n        b -= a;\n        a += c;\n        c += b;\n    }\n    \n    while\
    \ c > a + b {\n        c -= a;\n        a += b;\n        b += c;\n    }\n    \n\
    \    a == b + c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmprvj9xcou.rs:7:29\n  |\n7 |     let mut a = a < b + c ? a : b + c;\n\
    \  |                             ^ expected one of `.`, `;`, `?`, `else`, or an\
    \ operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpuaxsa622.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    (b - a).abs() <= (c - b).abs() * (c - a)\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8jjtfc3a.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a > b {\n        (a, b) = (b, a)\n    }\n    if b > c {\n        (b, c)\
    \ = (c, b)\n    }\n    if c > a {\n        (c, a) = (a, c)\n    }\n    \n    let\
    \ mut sum = a * b * c;\n    let mut prod = a * b * c;\n    \n    for i in 0..3\
    \ {\n        prod *= a;\n        sum += b;\n        prod *= c;\n        sum +=\
    \ c;\n        prod *= b;\n        sum += a;\n    }\n    \n    sum == prod\n}\n\
    \nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `i`\n  --> /tmp/tmpg6vbf4h3.rs:20:9\n   |\n20\
    \ |     for i in 0..3 {\n   |         ^ help: if this is intentional, prefix it\
    \ with an underscore: `_i`\n   |\n   = note: `#[warn(unused_variables)]` on by\
    \ default\n\nerror[E0384]: cannot assign to immutable argument `a`\n --> /tmp/tmpg6vbf4h3.rs:8:10\n\
    \  |\n6 | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n  |\
    \                         - help: consider making this binding mutable: `mut a`\n\
    7 |     if a > b {\n8 |         (a, b) = (b, a)\n  |          ^ cannot assign\
    \ to immutable argument\n\nerror[E0384]: cannot assign to immutable argument `b`\n\
    \ --> /tmp/tmpg6vbf4h3.rs:8:13\n  |\n6 | fn right_angle_triangle(a: isize, b:\
    \ isize, c: isize) -> bool {\n  |                                   - help: consider\
    \ making this binding mutable: `mut b`\n7 |     if a > b {\n8 |         (a, b)\
    \ = (b, a)\n  |             ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `b`\n  --> /tmp/tmpg6vbf4h3.rs:11:10\n \
    \  |\n6  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n \
    \  |                                   - help: consider making this binding mutable:\
    \ `mut b`\n...\n11 |         (b, c) = (c, b)\n   |          ^ cannot assign to\
    \ immutable argument\n\nerror[E0384]: cannot assign to immutable argument `c`\n\
    \  --> /tmp/tmpg6vbf4h3.rs:11:13\n   |\n6  | fn right_angle_triangle(a: isize,\
    \ b: isize, c: isize) -> bool {\n   |                                        \
    \     - help: consider making this binding mutable: `mut c`\n...\n11 |       \
    \  (b, c) = (c, b)\n   |             ^ cannot assign to immutable argument\n\n\
    error[E0384]: cannot assign to immutable argument `c`\n  --> /tmp/tmpg6vbf4h3.rs:14:10\n\
    \   |\n6  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                                             - help: consider making this\
    \ binding mutable: `mut c`\n...\n14 |         (c, a) = (a, c)\n   |          ^\
    \ cannot assign to immutable argument\n\nerror[E0384]: cannot assign to immutable\
    \ argument `a`\n  --> /tmp/tmpg6vbf4h3.rs:14:13\n   |\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a + b > c || a + c > b || b + c > a {\n        return false;\n    }\n\
    \    return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8uamg_z2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    \n    let mut a = a;\n    let mut b = b;\n    let mut c = c;\n    \n    if\
    \ a > b {\n        a = b;\n    }\n    if a > c {\n        a = c;\n    }\n    if\
    \ b > c {\n        b = c;\n    }\n    \n    if a == 0 || b == 0 || c == 0 {\n\
    \        return false;\n    }\n    \n    if a == b {\n        return c == 0;\n\
    \    }\n    \n    if a == c {\n        return b == 0;\n    }\n    \n    if b ==\
    \ c {\n        return a == 0;\n    }\n    \n    if a > b {\n        swap(&mut\
    \ a, &mut b);\n    }\n    if a > c {\n        swap(&mut a, &mut c);\n    }\n \
    \   if b > c {\n        swap(&mut b, &mut c);\n    }\n    \n    if a == b {\n\
    \        return c == 0;\n    }\n    \n    if a == c {\n        return b == 0;\n\
    \    }\n    \n    if b == c {\n        return a == 0;\n    }\n    \n    if a >\
    \ b {\n        swap(&mut a, &mut b);\n    }\n    if a > c {\n        swap(&mut\
    \ a, &mut c);\n    }\n    if b > c {\n        swap(&mut b, &mut c);\n    }\n \
    \   \n    if a == b {\n        return c == 0;\n    }\n    \n    if a == c {\n\
    \        return b == 0;\n    }\n    \n    if b == c {\n        return a == 0;\n\
    \    }\n    \n    if a > b {\n        swap(&mut a, &mut b);\n    }\n    if a >\
    \ c {\n        swap(&mut a, &mut c);\n    }\n    if b > c {\n        swap(&mut\
    \ b, &mut c);\n    }\n    \n    if a == b {\n        return c == 0;\n    }\n \
    \   \n    if a == c {\n        return b == 0;\n    }\n    \n    if b == c {\n\
    \        return a == 0;\n    }\n    \n    if a > b {\n        swap(&mut a, &mut\
    \ b);\n    }\n    if a > c {\n        swap(&mut a, &mut c);\n    }\n    if b >\
    \ c {\n        swap(&mut b, &mut c);\n    }\n    \n    if a == b {\n        return\
    \ c == 0;\n    }\n    \n    if a == c {\n        return b == 0;\n    }\n    \n\
    \    if b == c {\n        return a == 0;\n    }\n    \n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmp6pw4wtgg.rs:39:9\n\
    \   |\n39 |         swap(&mut a, &mut b);\n   |         ^^^^ not found in this\
    \ scope\n   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap`\
    \ in this scope\n  --> /tmp/tmp6pw4wtgg.rs:42:9\n   |\n42 |         swap(&mut\
    \ a, &mut c);\n   |         ^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing one of these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use\
    \ std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap` in this scope\n\
    \  --> /tmp/tmp6pw4wtgg.rs:45:9\n   |\n45 |         swap(&mut b, &mut c);\n  \
    \ |         ^^^^ not found in this scope\n   |\nhelp: consider importing one of\
    \ these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n\
    \   |\n\nerror[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmp6pw4wtgg.rs:61:9\n\
    \   |\n61 |         swap(&mut a, &mut b);\n   |         ^^^^ not found in this\
    \ scope\n   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap`\
    \ in this scope\n  --> /tmp/tmp6pw4wtgg.rs:64:9\n   |\n64 |         swap(&mut\
    \ a, &mut c);\n   |         ^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing one of these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use\
    \ std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap` in this scope\n\
    \  --> /tmp/tmp6pw4wtgg.rs:67:9\n   |\n67 |         swap(&mut b, &mut c);\n  \
    \ |         ^^^^ not found in this scope\n   |\nhelp: consider importing one of\
    \ these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n\
    \   |\n\nerror[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmp6pw4wtgg.rs:83:9\n\
    \   |\n83 |         swap(&mut a, &mut b);\n   |         ^^^^ not found in this\
    \ scope\n   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap`\
    \ in this scope\n  --"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a;\n    let mut b = b;\n    let mut c = c;\n    if a > b {\n\
    \        a = b;\n        b = c;\n        c = a;\n    }\n    if b > c {\n     \
    \   b = c;\n        c = a;\n        a = b;\n    }\n    if c > a {\n        c =\
    \ a;\n        a = b;\n        b = c;\n    }\n    \n    if a == b {\n        return\
    \ c == a;\n    }\n    \n    if a == c {\n        return b == c;\n    }\n    \n\
    \    if b == c {\n        return a == b;\n    }\n    \n    if a < b {\n      \
    \  return b == c;\n    }\n    \n    if a < c {\n        return c == b;\n    }\n\
    \    \n    if b < c {\n        return a == c;\n    }\n    \n    false\n}\n\nfn\
    \ main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmph4h3kslt.rs:55:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a;\n    let mut b = b;\n    let mut c = c;\n    if a > b {\n\
    \        a = b;\n    }\n    if a > c {\n        a = c;\n    }\n    if b > c {\n\
    \        b = c;\n    }\n    if a + b > c {\n        return false;\n    }\n   \
    \ if a + c > b {\n        return false;\n    }\n    if b + c > a {\n        return\
    \ false;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp15fsea3x.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    \n    let mut sum = a * b + c * b;\n    \n    if sum % 2 == 0 {\n       \
    \ return false;\n    }\n    \n    let mut sum2 = a * a + c * c;\n    \n    if\
    \ sum2 % 2 == 0 {\n        return false;\n    }\n    \n    let mut sum3 = a *\
    \ b + c * c;\n    \n    if sum3 % 2 == 0 {\n        return false;\n    }\n   \
    \ \n    sum3 /= 2;\n    \n    if sum == sum3 {\n        return true;\n    }\n\
    \    \n    return false;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpyz3natdr.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a + b > c {\n        return false;\n    }\n    if a + c > b {\n      \
    \  return false;\n    }\n    if b + c > a {\n        return false;\n    }\n  \
    \  return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpby_v7po_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sum = 0;\n    for i in 0..3 {\n        sum += (a * i) + (b * i) +\
    \ (c * i);\n    }\n    \n    if sum == 0 {\n        return false;\n    }\n   \
    \ \n    let mut sum2 = 0;\n    for i in 0..3 {\n        sum2 += (a * i) * (b *\
    \ i) + (b * i) * (c * i) + (c * i) * (a * i);\n    }\n    \n    if sum2 == 0 {\n\
    \        return false;\n    }\n    \n    let mut sum3 = 0;\n    for i in 0..3\
    \ {\n        sum3 += (a * i) * (c * i) + (b * i) * (a * i) + (c * i) * (b * i);\n\
    \    }\n    \n    if sum3 == 0 {\n        return false;\n    }\n    \n    let\
    \ mut sum4 = 0;\n    for i in 0..3 {\n        sum4 += (a * i) * (b * i) * (c *\
    \ i) + (b * i) * (a * i) * (c * i) + (c * i) * (a * i) * (b * i);\n    }\n   \
    \ \n    if sum4 == 0 {\n        return false;\n    }\n    \n    return true;\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpa_9dsqld.rs:49:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    \n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n   \
    \ \n    let mut sum = a * b * c;\n    \n    for i in 0..3 {\n        sum += a\
    \ * &b[i] - &c[i] * &b[(i + 1) % 3];\n    }\n    \n    return sum == 0;\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpyf3lp847.rs:15:21\n\
    \   |\n15 |         sum += a * &b[i] - &c[i] * &b[(i + 1) % 3];\n   |        \
    \             ^^^^\n\nerror[E0608]: cannot index into a value of type `isize`\n\
    \  --> /tmp/tmpyf3lp847.rs:15:29\n   |\n15 |         sum += a * &b[i] - &c[i]\
    \ * &b[(i + 1) % 3];\n   |                             ^^^^\n\nerror[E0608]: cannot\
    \ index into a value of type `isize`\n  --> /tmp/tmpyf3lp847.rs:15:37\n   |\n\
    15 |         sum += a * &b[i] - &c[i] * &b[(i + 1) % 3];\n   |               \
    \                      ^^^^^^^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0608`.\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a < b + c ? a : b + c;\n    let mut b = b < a + c ? b : a + c;\n\
    \    let mut c = c < a + b ? c : a + b;\n    \n    if a + b > c {\n        a =\
    \ c;\n        b = b + a - c;\n    }\n    \n    if a + c > b {\n        a = b;\n\
    \        c = c + a - b;\n    }\n    \n    if b + c > a {\n        b = c;\n   \
    \     c = c + b - a;\n    }\n    \n    if a + b > c {\n        a = c;\n      \
    \  b = b + a - c;\n    }\n    \n    if a + c > b {\n        a = b;\n        c\
    \ = c + a - b;\n    }\n    \n    if b + c > a {\n        b = c;\n        c = c\
    \ + b - a;\n    }\n    \n    if a + b > c {\n        a = c;\n        b = b + a\
    \ - c;\n    }\n    \n    if a + c > b {\n        a = b;\n        c = c + a - b;\n\
    \    }\n    \n    if b + c > a {\n        b = c;\n        c = c + b - a;\n   \
    \ }\n    \n    if a + b > c {\n        a = c;\n        b = b + a - c;\n    }\n\
    \    \n    if a + c > b {\n        a = b;\n        c = c + a - b;\n    }\n   \
    \ \n    if b + c > a {\n        b = c;\n        c = c + b - a;\n    }\n    \n\
    \    if a + b > c {\n        a = c;\n        b = b + a - c;\n    }\n    \n   \
    \ if a + c > b {\n        a = b;\n        c = c + a - b;\n    }\n    \n    if\
    \ b + c > a {\n        b = c;\n        c = c + b - a;\n    }\n    \n    if a +\
    \ b > c {\n        a = c;\n        b = b + a - c;\n    }\n    \n    if a + c >\
    \ b {\n        a = b;\n        c = c + a - b;\n    }\n    \n    if b + c > a {\n\
    \        b = c;\n        c = c + b - a;\n    }\n    \n    if a + b > c {\n   \
    \     a = c;\n        b = b + a - c;\n    }\n    \n    if a + c > b {\n      \
    \  a = b;\n        c = c + a - b;\n    }\n    \n    if b + c > a {\n        b\
    \ = c;\n        c = c + b - a;\n    }\n    \n    if a + b > c {\n        a = c;\n\
    \        b = b + a - c;\n    }\n    \n    if a + c > b {\n        a = b;\n   \
    \     c = c + a - b;\n    }\n    \n    if b + c > a {\n        b = c;\n      \
    \  c = c + b - \n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmptov933ae.rs:144:3\n\
    \    |\n6   | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n126 |     if b + c > a {\n    |                  - this delimiter\
    \ might not be properly closed...\n...\n129 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n144 | }\n    |   ^\n\nerror: expected\
    \ one of `.`, `;`, `?`, `else`, or an operator, found `a`\n --> /tmp/tmptov933ae.rs:7:29\n\
    \  |\n7 |     let mut a = a < b + c ? a : b + c;\n  |                        \
    \     ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: aborting\
    \ due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a < b + c ? a : b + c;\n    let mut b = b < a + c ? b : a + c;\n\
    \    let mut c = c < a + b ? c : a + b;\n    \n    if a + b > c {\n        a =\
    \ b;\n        b = c;\n        c = a;\n    }\n    \n    if a + c > b {\n      \
    \  a = c;\n        c = b;\n        b = a;\n    }\n    \n    if b + c > a {\n \
    \       b = c;\n        c = a;\n        a = b;\n    }\n    \n    if a + b == c\
    \ {\n        return true;\n    }\n    \n    if a + c == b {\n        return true;\n\
    \    }\n    \n    if b + c == a {\n        return true;\n    }\n    \n    return\
    \ false;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmp7m603qdl.rs:7:29\n  |\n7 |     let mut a = a < b + c ? a : b + c;\n\
    \  |                             ^ expected one of `.`, `;`, `?`, `else`, or an\
    \ operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    \n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    \n    if a + b > c {\n        a = a - b;\n        b = c - a;\n        c =\
    \ a + b;\n    }\n    \n    if a + c > b {\n        a = a - c;\n        c = c -\
    \ a;\n        b = b - c;\n    }\n    \n    if b + c > a {\n        b = b - c;\n\
    \        c = c - b;\n        a = a + c;\n    }\n    \n    if a + b > c {\n   \
    \     a = a - b;\n        b = c - a;\n        c = a + b;\n    }\n    \n    if\
    \ a + c > b {\n        a = a - c;\n        c = c - a;\n        b = b - c;\n  \
    \  }\n    \n    if b + c > a {\n        b = b - c;\n        c = c - b;\n     \
    \   a = a + c;\n    }\n    \n    if a + b > c {\n        a = a - b;\n        b\
    \ = c - a;\n        c = a + b;\n    }\n    \n    if a + c > b {\n        a = a\
    \ - c;\n        c = c - a;\n        b = b - c;\n    }\n    \n    if b + c > a\
    \ {\n        b = b - c;\n        c = c - b;\n        a = a + c;\n    }\n    \n\
    \    if a + b > c {\n        a = a - b;\n        b = c - a;\n        c = a + b;\n\
    \    }\n    \n    if a + c > b {\n        a = a - c;\n        c = c - a;\n   \
    \     b = b - c;\n    }\n    \n    if b + c > a {\n        b = b - c;\n      \
    \  c = c - b;\n        a = a + c;\n    }\n    \n    if a + b > c {\n        a\
    \ = a - b;\n        b = c - a;\n        c = a + b;\n    }\n    \n    if a + c\
    \ > b {\n        a = a - c;\n        c = c - a;\n        b = b - c;\n    }\n \
    \   \n    if b + c > a {\n        b = b - c;\n        c = c - b;\n        a =\
    \ a + c;\n    }\n    \n    if a + b > c {\n        a = a - b;\n        b = c -\
    \ a;\n        c = a + b;\n    }\n    \n    if a + c > b {\n        a = a - c;\n\
    \        c = c - a;\n        b = b - c;\n    }\n    \n    if b + c > a {\n   \
    \     b = b - c;\n        c = c - b;\n        a = a + c;\n    }\n    \n    if\
    \ a + b > c {\n        a = a - b;\n        b = c - a;\n        c = a + b;\n  \
    \  }\n    \n    if a + c > b {\n        a = a - c;\n        c = c - a;\n     \
    \   b = b - c;\n    }\n    \n    if b + c > a {\n        b = b - c;\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpzwp7i90q.rs:149:3\n\
    \    |\n6   | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n132 |     if b + c > a {\n    |                  - this delimiter\
    \ might not be properly closed...\n133 |         b = b - c;\n134 | }\n    | -\
    \ ...as it matches this but it has different indentation\n...\n149 | }\n    |\
    \   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmpzwp7i90q.rs:6:58\n  |\n\
    6 | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n  |    --------------------\
    \                                  ^^^^ expected `bool`, found `()`\n  |    |\n\
    \  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a < b + c ? a : b + c;\n    let mut b = b < a + c ? b : a + c;\n\
    \    let mut c = c < a + b ? c : a + b;\n    \n    if a + b > c {\n        a =\
    \ c;\n        b = a + b;\n    }\n    \n    if a + c > b {\n        a = b;\n  \
    \      c = a + c;\n    }\n    \n    if b + c > a {\n        b = c;\n        c\
    \ = b + c;\n    }\n    \n    if a + b > c {\n        a = c;\n        b = a + b;\n\
    \    }\n    \n    if a + c > b {\n        a = b;\n        c = a + c;\n    }\n\
    \    \n    if b + c > a {\n        b = c;\n        c = b + c;\n    }\n    \n \
    \   if a + b > c {\n        a = c;\n        b = a + b;\n    }\n    \n    if a\
    \ + c > b {\n        a = b;\n        c = a + c;\n    }\n    \n    if b + c > a\
    \ {\n        b = c;\n        c = b + c;\n    }\n    \n    if a + b > c {\n   \
    \     a = c;\n        b = a + b;\n    }\n    \n    if a + c > b {\n        a =\
    \ b;\n        c = a + c;\n    }\n    \n    if b + c > a {\n        b = c;\n  \
    \      c = b + c;\n    }\n    \n    if a + b > c {\n        a = c;\n        b\
    \ = a + b;\n    }\n    \n    if a + c > b {\n        a = b;\n        c = a + c;\n\
    \    }\n    \n    if b + c > a {\n        b = c;\n        c = b + c;\n    }\n\
    \    \n    if a + b > c {\n        a = c;\n        b = a + b;\n    }\n    \n \
    \   if a + c > b {\n        a = b;\n        c = a + c;\n    }\n    \n    if b\
    \ + c > a {\n        b = c;\n        c = b + c;\n    }\n    \n    if a + b > c\
    \ {\n        a = c;\n        b = a + b;\n    }\n    \n    if a + c > b {\n   \
    \     a = b;\n        c = a + c;\n    }\n    \n    if b + c > a {\n        b =\
    \ c;\n        c = b + c;\n    }\n    \n    if a + b > c {\n        a = c;\n  \
    \      b = a + b;\n    }\n    \n    if a + c > b {\n        a = b;\n        c\
    \ = a + c;\n    }\n    \n    if b + c > a {\n        b = c;\n        c = b + c;\n\
    \    }\n    \n    if a + b > c {\n        a = c;\n        b = a + b;\n    }\n\
    \    \n    if a + c > b {\n        a = \n}\n\nfn main() {\n    let candidate =\
    \ right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp_xznl07u.rs:153:3\n\
    \    |\n6   | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n136 |     if a + c > b {\n    |                  - this delimiter\
    \ might not be properly closed...\n137 |         a = \n138 | }\n    | - ...as\
    \ it matches this but it has different indentation\n...\n153 | }\n    |   ^\n\n\
    error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n -->\
    \ /tmp/tmp_xznl07u.rs:7:29\n  |\n7 |     let mut a = a < b + c ? a : b + c;\n\
    \  |                             ^ expected one of `.`, `;`, `?`, `else`, or an\
    \ operator\n\nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    \n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n   \
    \ \n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n \
    \   \n    while a > b + c {\n        a -= b;\n        b += c;\n        c += a;\n\
    \    }\n    \n    while b > c + a {\n        b -= c;\n        c += a;\n      \
    \  a += b;\n    }\n    \n    while c > a + b {\n        c -= a;\n        a +=\
    \ b;\n        b += c;\n    }\n    \n    if a == b + c {\n        return true;\n\
    \    }\n    \n    if a == b {\n        return c == b;\n    }\n    \n    if a ==\
    \ c {\n        return b == c;\n    }\n    \n    if b == c {\n        return a\
    \ == b;\n    }\n    \n    if b == a {\n        return c == a;\n    }\n    \n \
    \   if c == a {\n        return b == a;\n    }\n    \n    return false;\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfansfgyi.rs:63:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a < b;\n    let mut b = b < c;\n    let mut c = c < a;\n    if\
    \ a == b {\n        if b == c {\n            return true;\n        }\n       \
    \ else {\n            return false;\n        }\n    }\n    else if b == c {\n\
    \        return false;\n    }\n    else {\n        if a > b {\n            swap(&mut\
    \ a, &mut b);\n        }\n        if a > c {\n            swap(&mut a, &mut c);\n\
    \        }\n        if b > c {\n            swap(&mut b, &mut c);\n        }\n\
    \        if a == b {\n            return false;\n        }\n        else {\n \
    \           return true;\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmppedfcf6w.rs:23:13\n\
    \   |\n23 |             swap(&mut a, &mut b);\n   |             ^^^^ not found\
    \ in this scope\n   |\nhelp: consider importing one of these items\n   |\n1  |\
    \ use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0425]: cannot\
    \ find function `swap` in this scope\n  --> /tmp/tmppedfcf6w.rs:26:13\n   |\n\
    26 |             swap(&mut a, &mut c);\n   |             ^^^^ not found in this\
    \ scope\n   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap`\
    \ in this scope\n  --> /tmp/tmppedfcf6w.rs:29:13\n   |\n29 |             swap(&mut\
    \ b, &mut c);\n   |             ^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing one of these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use\
    \ std::ptr::swap;\n   |\n\nerror[E0308]: mismatched types\n --> /tmp/tmppedfcf6w.rs:9:21\n\
    \  |\n9 |     let mut c = c < a;\n  |                     ^ expected `isize`,\
    \ found `bool`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let mut\
    \ a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    let mut det\
    \ = a * c - b * b;\n    if det == 0 {\n        return false;\n    }\n    det =\
    \ det / 2;\n    if det < 0 {\n        return false;\n    }\n    let mut det =\
    \ det / 2;\n    if det < 0 {\n        return false;\n    }\n    let mut det =\
    \ det / 2;\n    if det < 0 {\n        return false;\n    }\n    return true;\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp28c024c0.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    \n    // Check that the sides are non-zero\n    if a < 0 || b < 0 || c <\
    \ 0 {\n        return false;\n    }\n    \n    // Check that the sides are equal\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    \n   \
    \ // Check that the sides are equal\n    if a + b > c || a + c > b || b + c >\
    \ a {\n        return false;\n    }\n    \n    // Check that the sides are equal\n\
    \    if a + b + c != a {\n        return false;\n    }\n    \n    // Check that\
    \ the sides are equal\n    if a + b + c != b {\n        return false;\n    }\n\
    \    \n    // Check that the sides are equal\n    if a + b + c != c {\n      \
    \  return false;\n    }\n    \n    // Check that the sides are equal\n    return\
    \ true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzqyma8hu.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a < b + c ? a : b + c;\n    let mut b = b < a + c ? b : a + c;\n\
    \    let mut c = c < a + b ? c : a + b;\n    \n    if a + b > c {\n        a =\
    \ c;\n        b = b + a;\n    }\n    \n    if a + c > b {\n        a = b;\n  \
    \      c = c + a;\n    }\n    \n    if b + c > a {\n        b = c;\n        c\
    \ = b + a;\n    }\n    \n    if a + b > c {\n        a = c;\n        b = b + a;\n\
    \    }\n    \n    if a + c > b {\n        a = b;\n        c = c + a;\n    }\n\
    \    \n    if b + c > a {\n        b = c;\n        c = b + a;\n    }\n    \n \
    \   if a + b > c {\n        a = c;\n        b = b + a;\n    }\n    \n    if a\
    \ + c > b {\n        a = b;\n        c = c + a;\n    }\n    \n    if b + c > a\
    \ {\n        b = c;\n        c = b + a;\n    }\n    \n    if a + b > c {\n   \
    \     a = c;\n        b = b + a;\n    }\n    \n    if a + c > b {\n        a =\
    \ b;\n        c = c + a;\n    }\n    \n    if b + c > a {\n        b = c;\n  \
    \      c = b + a;\n    }\n    \n    if a + b > c {\n        a = c;\n        b\
    \ = b + a;\n    }\n    \n    if a + c > b {\n        a = b;\n        c = c + a;\n\
    \    }\n    \n    if b + c > a {\n        b = c;\n        c = b + a;\n    }\n\
    \    \n    if a + b > c {\n        a = c;\n        b = b + a;\n    }\n    \n \
    \   if a + c > b {\n        a = b;\n        c = c + a;\n    }\n    \n    if b\
    \ + c > a {\n        b = c;\n        c = b + a;\n    }\n    \n    if a + b > c\
    \ {\n        a = c;\n        b = b + a;\n    }\n    \n    if a + c > b {\n   \
    \     a = b;\n        c = c + a;\n    }\n    \n    if b + c > a {\n        b =\
    \ c;\n        c = b + a;\n    }\n    \n    if a + b > c {\n        a = c;\n  \
    \      b = b + a;\n    }\n    \n    if a + c > b {\n        a = b;\n        c\
    \ = c + a;\n    }\n    \n    if b + c > a {\n        b = c;\n        c = b + a;\n\
    \    }\n    \n    if a + b > c {\n        a = c;\n        b = b + a;\n    }\n\
    \    \n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmpwtz8525g.rs:7:29\n  |\n7 |     let mut a = a < b + c ? a : b + c;\n\
    \  |                             ^ expected one of `.`, `;`, `?`, `else`, or an\
    \ operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let mut\
    \ a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    while a > b\
    \ {\n        a /= 2;\n        b /= 2;\n    }\n    while b > c {\n        b /=\
    \ 2;\n        c /= 2;\n    }\n    while c > a {\n        c /= 2;\n        a /=\
    \ 2;\n    }\n    a == b\n        && b == c\n        && a == c\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphii_teat.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2zl2ob6i.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a;\n    let mut b = b;\n    let mut c = c;\n    \n    if a >\
    \ b {\n        a = b;\n        b = c;\n        c = a;\n    }\n    \n    if b >\
    \ c {\n        b = c;\n        c = a;\n        a = b;\n    }\n    \n    if c >\
    \ a {\n        c = a;\n        a = b;\n        b = c;\n    }\n    \n    if a ==\
    \ b {\n        if a == c {\n            return true;\n        }\n    }\n    \n\
    \    if a == c {\n        if b == c {\n            return true;\n        }\n \
    \   }\n    \n    if b == c {\n        if a == c {\n            return true;\n\
    \        }\n    }\n    \n    return false;\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpixcojvpi.rs:52:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a > b + c {\n        return false;\n    }\n    if b > c + a {\n      \
    \  return false;\n    }\n    if c > a + b {\n        return false;\n    }\n  \
    \  return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9y8zekxd.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    \n\
    \    while a > b {\n        a -= b;\n        b += c;\n        c += a;\n    }\n\
    \    \n    while b > c {\n        b -= c;\n        c += a;\n        a += b;\n\
    \    }\n    \n    while c > a {\n        c -= a;\n        a += b;\n        b +=\
    \ c;\n    }\n    \n    a == b\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphuki73gy.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: -1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let mut\
    \ a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    \n    while\
    \ a > b {\n        a -= b;\n        c -= b;\n    }\n    while b > c {\n      \
    \  b -= c;\n        a -= c;\n    }\n    while c > a {\n        c -= a;\n     \
    \   b -= a;\n    }\n    \n    if a == b {\n        if a == c {\n            return\
    \ true;\n        }\n        return false;\n    }\n    if a == c {\n        return\
    \ false;\n    }\n    if b == c {\n        return true;\n    }\n    return false;\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660015969
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a < 0;\n    let mut b = b < 0;\n    let mut c = c < 0;\n    if\
    \ a || b {\n        if c {\n            return false;\n        }\n    } else {\n\
    \        if c {\n            return true;\n        }\n    }\n    let mut a = a\
    \ < b;\n    let mut b = b < c;\n    let mut c = c < a;\n    if a || b {\n    \
    \    if c {\n            return false;\n        }\n    } else {\n        if c\
    \ {\n            return true;\n        }\n    }\n    let mut a = a < c;\n    let\
    \ mut b = b < c;\n    let mut c = c < b;\n    if a || b {\n        if c {\n  \
    \          return false;\n        }\n    } else {\n        if c {\n          \
    \  return true;\n        }\n    }\n    let mut a = a < c;\n    let mut b = b <\
    \ c;\n    let mut c = c < a;\n    if a || b {\n        if c {\n            return\
    \ false;\n        }\n    } else {\n        if c {\n            return true;\n\
    \        }\n    }\n    let mut a = a < b;\n    let mut b = b < c;\n    let mut\
    \ c = c < a;\n    if a || b {\n        if c {\n            return false;\n   \
    \     }\n    } else {\n        if c {\n            return true;\n        }\n \
    \   }\n    let mut a = a < c;\n    let mut b = b < c;\n    let mut c = c < b;\n\
    \    if a || b {\n        if c {\n            return false;\n        }\n    }\
    \ else {\n        if c {\n            return true;\n        }\n    }\n    let\
    \ mut a = a < b;\n    let mut b = b < c;\n    let mut c = c < a;\n    if a ||\
    \ b {\n        if c {\n            return false;\n        }\n    } else {\n  \
    \      if c {\n            return true;\n        }\n    }\n    let mut a = a <\
    \ c;\n    let mut b = b < c;\n    let mut c = c < b;\n    if a || b {\n      \
    \  if c {\n            return false;\n        }\n    } else {\n        if c {\n\
    \            return true;\n        }\n    }\n    let mut a = a < b;\n    let mut\
    \ b = b < c;\n    let mut c = c < a;\n    if a || b {\n        if c {\n      \
    \      return false;\n        }\n    } else {\n        if c {\n            return\
    \ true;\n        }\n    }\n    let mut a = a < c;\n    let mut b = b < c;\n  \
    \  let mut c = c < b;\n    if a || b {\n        if c {\n            return false;\n\
    \        }\n    } else {\n        if c {\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpgrjhn048.rs:139:3\n\
    \    |\n6   | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n122 |     } else {\n    |            - unclosed delimiter\n\
    123 |         if c {\n    |              - this delimiter might not be properly\
    \ closed...\n124 | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n139 | }\n    |   ^\n\nerror[E0317]: `if` may be missing an `else` clause\n\
    \   --> /tmp/tmpgrjhn048.rs:119:9\n    |\n119 | /         if c {\n120 | |    \
    \         return false;\n121 | |         }\n    | |_________^ expected `()`, found\
    \ `bool`\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n\
    \    = help: consider adding an `else` block that evaluates to the expected type\n\
    \nerror[E0308]: mismatched types\n   --> /tmp/tmpgrjhn048.rs:122:12\n    |\n122\
    \ |       } else {\n    |  ____________^\n123 | |         if c {\n124 | | }\n\
    125 | |\n...   |\n138 | |     assert_eq!(candidate(2, 2, 10), false);\n139 | |\
    \ }\n    | |__^ expected `bool`, found `()`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0317.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a > b {\n        (a, b) = (b, a)\n    }\n    if a > c {\n        (a, c)\
    \ = (c, a)\n    }\n    if b > c {\n        (b, c) =(c, b)\n    }\n    \n    let\
    \ mut sum = a;\n    let mut product = b;\n    \n    while product < c {\n    \
    \    sum += product;\n        product *= b;\n    }\n    \n    sum == c\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n --> /tmp/tmpupzunbxf.rs:8:10\n\
    \  |\n6 | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n  |\
    \                         - help: consider making this binding mutable: `mut a`\n\
    7 |     if a > b {\n8 |         (a, b) = (b, a)\n  |          ^ cannot assign\
    \ to immutable argument\n\nerror[E0384]: cannot assign to immutable argument `b`\n\
    \ --> /tmp/tmpupzunbxf.rs:8:13\n  |\n6 | fn right_angle_triangle(a: isize, b:\
    \ isize, c: isize) -> bool {\n  |                                   - help: consider\
    \ making this binding mutable: `mut b`\n7 |     if a > b {\n8 |         (a, b)\
    \ = (b, a)\n  |             ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `a`\n  --> /tmp/tmpupzunbxf.rs:11:10\n \
    \  |\n6  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n \
    \  |                         - help: consider making this binding mutable: `mut\
    \ a`\n...\n11 |         (a, c) = (c, a)\n   |          ^ cannot assign to immutable\
    \ argument\n\nerror[E0384]: cannot assign to immutable argument `c`\n  --> /tmp/tmpupzunbxf.rs:11:13\n\
    \   |\n6  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                                             - help: consider making this\
    \ binding mutable: `mut c`\n...\n11 |         (a, c) = (c, a)\n   |          \
    \   ^ cannot assign to immutable argument\n\nerror[E0384]: cannot assign to immutable\
    \ argument `b`\n  --> /tmp/tmpupzunbxf.rs:14:10\n   |\n6  | fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n   |                                 \
    \  - help: consider making this binding mutable: `mut b`\n...\n14 |         (b,\
    \ c) =(c, b)\n   |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `c`\n  --> /tmp/tmpupzunbxf.rs:14:13\n \
    \  |\n6  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n \
    \  |                                             - help: consider making this\
    \ binding mutable: `mut c`\n...\n14 |         (b, c) =(c, b)\n   |           \
    \  ^ cannot assign to immutable a"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    \n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    \n    while a < b {\n        if a > c {\n            return false;\n    \
    \    }\n        \n        a += 1;\n        b -= 1;\n        c += 1;\n    }\n \
    \   \n    while b < c {\n        if b > a {\n            return false;\n     \
    \   }\n        \n        b += 1;\n        c -= 1;\n        a += 1;\n    }\n  \
    \  \n    while c < a {\n        if c > b {\n            return false;\n      \
    \  }\n        \n        c += 1;\n        a -= 1;\n        b -= 1;\n    }\n   \
    \ \n    return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpc5f3j7rb.rs:48:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    (b - a) * (b - a) + (c - a) * (c - a) <= 0\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpg_s79hb_.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let mut\
    \ a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    let mut sum\
    \ = 0;\n    while a > 0 && b > 0 && c > 0 {\n        sum += a;\n        a -= b;\n\
    \        b -= c;\n        c -= sum;\n    }\n    \n    if sum == 0 {\n        return\
    \ false;\n    }\n    \n    if a == 0 || b == 0 || c == 0 {\n        return false;\n\
    \    }\n    \n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c =\
    \ c / 2;\n    let mut sum = 0;\n    while a > 0 && b > 0 && c > 0 {\n        sum\
    \ += a;\n        a -= b;\n        b -= c;\n        c -= sum;\n    }\n    \n  \
    \  if sum == 0 {\n        return false;\n    }\n    \n    if a == 0 || b == 0\
    \ || c == 0 {\n        return false;\n    }\n    \n    true\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_n19ffyr.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a < b + c ? a : b + c;\n    let mut b = b < a + c ? b : a + c;\n\
    \    let mut c = c < a + b ? c : a + b;\n    \n    if a == b + c && b == c + a\
    \ && c == a + b {\n        return true;\n    }\n    \n    if a == b + c && b ==\
    \ c + a && c == a + b {\n        return true;\n    }\n    \n    if a == b + c\
    \ && b == c + a && c == a + b {\n        return true;\n    }\n    \n    if a ==\
    \ b + c && b == c + a && c == a + b {\n        return true;\n    }\n    \n   \
    \ if a == b + c && b == c + a && c == a + b {\n        return true;\n    }\n \
    \   \n    if a == b + c && b == c + a && c == a + b {\n        return true;\n\
    \    }\n    \n    if a == b + c && b == c + a && c == a + b {\n        return\
    \ true;\n    }\n    \n    if a == b + c && b == c + a && c == a + b {\n      \
    \  return true;\n    }\n    \n    if a == b + c && b == c + a && c == a + b {\n\
    \        return true;\n    }\n    \n    if a == b + c && b == c + a && c == a\
    \ + b {\n        return true;\n    }\n    \n    if a == b + c && b == c + a &&\
    \ c == a + b {\n        return true;\n    }\n    \n    if a == b + c && b == c\
    \ + a && c == a + b {\n        return true;\n    }\n    \n    if a == b + c &&\
    \ b == c + a && c == a + b {\n        return true;\n    }\n    \n    if a == b\
    \ + c && b == c + a && c == a + b {\n        return true;\n    }\n    \n    if\
    \ a == b + c && b == c + a && c == a + b {\n        return true;\n    }\n    \n\
    \    if a == b + c && b == c + a && c == a + b {\n        return true;\n    }\n\
    \    \n    if a == b + c && b == c + a && c == a + b {\n        return true;\n\
    \    }\n    \n    if a == b + c && b == c + a && c == a + b {\n        return\
    \ true;\n    }\n    \n    if a == b + c && b == c + a && c == a + b {\n      \
    \  return true;\n    }\n    \n    if a == b + c && b == c + a && c == a + b {\n\
    \        return true;\n    }\n    \n    if a == b + c && b == c + a && c == a\
    \ + b {\n        return true;\n    }\n    \n    if a == b + \n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmpe9usd1fl.rs:7:29\n  |\n7 |     let mut a = a < b + c ? a : b + c;\n\
    \  |                             ^ expected one of `.`, `;`, `?`, `else`, or an\
    \ operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a + b > c {\n        return false;\n    }\n    if a + c > b {\n      \
    \  return false;\n    }\n    if b + c > a {\n        return false;\n    }\n  \
    \  return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpby_v7po_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    (b - a).abs() <= (c - b).abs() && \n    (c - a).abs() <= (a - c).abs() &&\
    \ \n    (a - b).abs() <= (b - a).abs()\n}\n\nfn main() {\n    let candidate =\
    \ right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptw0nviri.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sum = 0;\n    sum += a;\n    sum += b;\n    sum += c;\n    sum ==\
    \ a.checked_add(b).checked_add(c)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for enum `Option` in\
    \ the current scope\n  --> /tmp/tmpcjlzgsbb.rs:11:29\n   |\n11 |     sum == a.checked_add(b).checked_add(c)\n\
    \   |                             ^^^^^^^^^^^ method not found in `Option<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    (b - a) * (b - a) + (c - a) * (c - a) <= 0\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpg_s79hb_.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    let\
    \ mut sum = a;\n    let mut product = 1;\n    while product > 0 {\n        if\
    \ a > b {\n            a -= b;\n            sum += a;\n        }\n        if b\
    \ > c {\n            b -= c;\n            sum += b;\n        }\n        if c >\
    \ a {\n            c -= a;\n            sum += c;\n        }\n        product\
    \ /= 2;\n    }\n    \n    if sum == 0 {\n        return false;\n    }\n    \n\
    \    if a == b {\n        return c == b;\n    }\n    \n    if a == c {\n     \
    \   return b == c;\n    }\n    \n    if b == c {\n        return a == b;\n   \
    \ }\n    \n    if a > b {\n        return b > c;\n    }\n    \n    if b > c {\n\
    \        return c > a;\n    }\n    \n    if c > a {\n        return a > b;\n \
    \   }\n    \n    return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpclk0b8th.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a + b > c {\n        return false;\n    }\n    if a + c > b {\n      \
    \  return false;\n    }\n    if b + c > a {\n        return false;\n    }\n  \
    \  return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpby_v7po_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sum = 0;\n    sum += a * b + c * b;\n    sum += a * c + b * c;\n\
    \    sum += a * b + c * c;\n    sum == 0;\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf0hss1ox.rs:6:58\n   |\n\
    6  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n   |   \
    \ --------------------                                  ^^^^ expected `bool`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n...\n11 |     sum == 0;\n   |             - help: remove\
    \ this semicolon\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    (b - a).abs() >= (c-a).abs() && \n    (b - a).abs() >= (c-b).abs() && \n\
    \    (b - a).abs() >= (c+a).abs() && \n    (b - a).abs() >= (c+b).abs() && \n\
    \    (b - a).abs() >= (c+c).abs() && \n    (b - a).abs() >= (b+a).abs() && \n\
    \    (b - a).abs() >= (b+b).abs() && \n    (b - a).abs() >= (b+c).abs() && \n\
    \    (b - a).abs() >= (b+d).abs() && \n    (b - a).abs() >= (b+e).abs() && \n\
    \    (b - a).abs() >= (b+f).abs() && \n    (b - a).abs() >= (b+g).abs() && \n\
    \    (b - a).abs() >= (b+h).abs() && \n    (b - a).abs() >= (b+i).abs() && \n\
    \    (b - a).abs() >= (b+j).abs() && \n    (b - a).abs() >= (b+k).abs() && \n\
    \    (b - a).abs() >= (b+l).abs() && \n    (b - a).abs() >= (b+m).abs() && \n\
    \    (b - a).abs() >= (b+n).abs() && \n    (b - a).abs() >= (b+o).abs() && \n\
    \    (b - a).abs() >= (b+p).abs() && \n    (b - a).abs() >= (b+q).abs() && \n\
    \    (b - a).abs() >= (b+r).abs() && \n    (b - a).abs() >= (b+s).abs() && \n\
    \    (b - a).abs() >= (b+t).abs() && \n    (b - a).abs() >= (b+u).abs() && \n\
    \    (b - a).abs() >= (b+v).abs() && \n    (b - a).abs() >= (b+w).abs() && \n\
    \    (b - a).abs() >= (b+x).abs() && \n    (b - a).abs() >= (b+y).abs() && \n\
    \    (b - a).abs() >= (b+z).abs() && \n    (b - a).abs() >= (b+a).abs() && \n\
    \    (b - a).abs() >= (b+b).abs() && \n    (b - a).abs() >= (b+c).abs() && \n\
    \    (b - a).abs() >= (b+d).abs() && \n    (b - a).abs() >= (b+e).abs() && \n\
    \    (b - a).abs() >= (b+f).abs() && \n    (b - a).abs() >= (b+g).abs() && \n\
    \    (b - a).abs() >= (b+h).abs() && \n    (b - a).abs() >= (b+i).\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmp1atehgfl.rs:47:1\n   |\n47\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `d` in this scope\n  --> /tmp/tmp1atehgfl.rs:15:25\n\
    \   |\n15 |     (b - a).abs() >= (b+d).abs() && \n   |                       \
    \  ^ help: a local variable with a similar name exists: `a`\n\nerror[E0425]: cannot\
    \ find value `e` in this scope\n  --> /tmp/tmp1atehgfl.rs:16:25\n   |\n16 |  \
    \   (b - a).abs() >= (b+e).abs() && \n   |                         ^ help: a local\
    \ variable with a similar name exists: `a`\n\nerror[E0425]: cannot find value\
    \ `f` in this scope\n  --> /tmp/tmp1atehgfl.rs:17:25\n   |\n17 |     (b - a).abs()\
    \ >= (b+f).abs() && \n   |                         ^ help: a local variable with\
    \ a similar name exists: `a`\n\nerror[E0425]: cannot find value `g` in this scope\n\
    \  --> /tmp/tmp1atehgfl.rs:18:25\n   |\n18 |     (b - a).abs() >= (b+g).abs()\
    \ && \n   |                         ^ help: a local variable with a similar name\
    \ exists: `a`\n\nerror[E0425]: cannot find value `h` in this scope\n  --> /tmp/tmp1atehgfl.rs:19:25\n\
    \   |\n19 |     (b - a).abs() >= (b+h).abs() && \n   |                       \
    \  ^ help: a local variable with a similar name exists: `a`\n\nerror[E0425]: cannot\
    \ find value `i` in this scope\n  --> /tmp/tmp1atehgfl.rs:20:25\n   |\n20 |  \
    \   (b - a).abs() >= (b+i).abs() && \n   |                         ^ help: a local\
    \ variable with a similar name exists: `a`\n\nerror[E0425]: cannot find value\
    \ `j` in this scope\n  --> /tmp/tmp1atehgfl.rs:21:25\n   |\n21 |     (b - a).abs()\
    \ >= (b+j).abs() && \n   |                         ^ help: a local variable with\
    \ a similar name exists: `a`\n\nerror[E0425]: cannot find value `k` in this scope\n\
    \   --> /tmp/tmp1atehgfl.rs:22:25\n    |\n22  |     (b - a).abs() >= (b+k).abs()\
    \ && \n    |                         ^ help: a tuple variant with a similar name\
    \ exists: `Ok`\n\nerror[E0425]: cannot find value `l` in this scope\n  --> /tmp/tmp1atehgfl.rs:23:25\n\
    \   |\n23 |     (b - a).abs() >= (b+l).abs() && \n   |                       \
    \  ^ help: a local variable with a similar name exists: `a`\n\nerror[E0425]: cannot"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a < b + c ? a : b;\n    let mut b = b < a + c ? b : a;\n    let\
    \ mut c = c < a + b ? c : a;\n    \n    if a + b > c {\n        a = b;\n     \
    \   b = c;\n        c = a;\n    }\n    \n    if a + c > b {\n        a = c;\n\
    \        c = b;\n        b = a;\n    }\n    \n    if b + c > a {\n        b =\
    \ c;\n        c = a;\n        a = b;\n    }\n    \n    if a + b == c && b + c\
    \ == a && c + a == b {\n        return true;\n    }\n    \n    return false;\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmpveojwm77.rs:7:29\n  |\n7 |     let mut a = a < b + c ? a : b;\n\
    \  |                             ^ expected one of `.`, `;`, `?`, `else`, or an\
    \ operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let mut\
    \ sum = a * b * c;\n    if sum < 0 {\n        sum = -sum;\n    }\n    \n    if\
    \ sum > b * c {\n        sum = b * c;\n    }\n    \n    if sum > a * c {\n   \
    \     sum = a * c;\n    }\n    \n    if sum > b * c {\n        sum = b * c;\n\
    \    }\n    \n    if sum > a * c {\n        sum = a * c;\n    }\n    \n    if\
    \ sum > b * c {\n        sum = b * c;\n    }\n    \n    if sum > a * c {\n   \
    \     sum = a * c;\n    }\n    \n    if sum > b * c {\n        sum = b * c;\n\
    \    }\n    \n    if sum > a * c {\n        sum = a * c;\n    }\n    \n    if\
    \ sum > b * c {\n        sum = b * c;\n    }\n    \n    if sum > a * c {\n   \
    \     sum = a * c;\n    }\n    \n    if sum > b * c {\n        sum = b * c;\n\
    \    }\n    \n    if sum > a * c {\n        sum = a * c;\n    }\n    \n    if\
    \ sum > b * c {\n        sum = b * c;\n    }\n    \n    if sum > a * c {\n   \
    \     sum = a * c;\n    }\n    \n    if sum > b * c {\n        sum = b * c;\n\
    \    }\n    \n    if sum > a * c {\n        sum = a * c;\n    }\n    \n    if\
    \ sum > b * c {\n        sum = b * c;\n    }\n    \n    if sum > a * c {\n   \
    \     sum = a * c;\n    }\n    \n    if sum > b * c {\n        sum = b * c;\n\
    \    }\n    \n    if sum > a * c {\n        sum = a * c;\n    }\n    \n    if\
    \ sum > b * c {\n        sum = b * c;\n    }\n    \n    if sum > a * c {\n   \
    \     sum = a * c;\n    }\n    \n    if sum > b * c {\n        sum = b * c;\n\
    \    }\n    \n    if sum > a * c {\n        sum = a * c;\n    }\n    \n    if\
    \ sum > b * c {\n        sum = b * c;\n    }\n    \n    if sum > a * c {\n   \
    \     sum = a * c;\n    }\n    \n    if sum > b * c {\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpx5pm4mqe.rs:135:3\n\
    \    |\n6   | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n119 |     if sum > b * c {\n    |                    - this\
    \ delimiter might not be properly closed...\n120 | }\n    | - ...as it matches\
    \ this but it has different indentation\n...\n135 | }\n    |   ^\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpx5pm4mqe.rs:6:58\n  |\n6 | fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n  |    --------------------          \
    \                        ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a + b > c || b + c > a || c + a > b {\n        return false;\n    }\n\
    \    \n    let mut sum = a;\n    \n    for i in 0..(b - a).rev() {\n        sum\
    \ += b;\n    }\n    \n    for i in 0..(c - b).rev() {\n        sum += c;\n   \
    \ }\n    \n    for i in 0..(a - b).rev() {\n        sum += a;\n    }\n    \n \
    \   sum == b\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n  \
    \  assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n\
    \    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2, 2, 2),\
    \ false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `isize` is not an iterator\n  --> /tmp/tmpcxw6tni3.rs:13:25\n\
    \   |\n13 |     for i in 0..(b - a).rev() {\n   |                         ^^^\
    \ `isize` is not an iterator\n   |\n   = note: the following trait bounds were\
    \ not satisfied:\n           `isize: Iterator`\n           which is required by\
    \ `&mut isize: Iterator`\n\nerror[E0599]: `isize` is not an iterator\n  --> /tmp/tmpcxw6tni3.rs:17:25\n\
    \   |\n17 |     for i in 0..(c - b).rev() {\n   |                         ^^^\
    \ `isize` is not an iterator\n   |\n   = note: the following trait bounds were\
    \ not satisfied:\n           `isize: Iterator`\n           which is required by\
    \ `&mut isize: Iterator`\n\nerror[E0599]: `isize` is not an iterator\n  --> /tmp/tmpcxw6tni3.rs:21:25\n\
    \   |\n21 |     for i in 0..(a - b).rev() {\n   |                         ^^^\
    \ `isize` is not an iterator\n   |\n   = note: the following trait bounds were\
    \ not satisfied:\n           `isize: Iterator`\n           which is required by\
    \ `&mut isize: Iterator`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    \n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n   \
    \ \n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n \
    \   \n    while a > b {\n        a -= b;\n        c -= b;\n    }\n    \n    while\
    \ b > c {\n        b -= c;\n        a -= c;\n    }\n    \n    while c > a {\n\
    \        c -= a;\n        b -= a;\n    }\n    \n    if a == b {\n        return\
    \ c == 0;\n    }\n    \n    if a == c {\n        return b == 0;\n    }\n    \n\
    \    if b == c {\n        return a == 0;\n    }\n    \n    if a > b {\n      \
    \  swap(&mut a, &mut b);\n    }\n    \n    if b > c {\n        swap(&mut b, &mut\
    \ c);\n    }\n    \n    if c > a {\n        swap(&mut c, &mut a);\n    }\n   \
    \ \n    true\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n  \
    \  assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n\
    \    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2, 2, 2),\
    \ false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmpa91o4i9c.rs:44:9\n\
    \   |\n44 |         swap(&mut a, &mut b);\n   |         ^^^^ not found in this\
    \ scope\n   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap`\
    \ in this scope\n  --> /tmp/tmpa91o4i9c.rs:48:9\n   |\n48 |         swap(&mut\
    \ b, &mut c);\n   |         ^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing one of these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use\
    \ std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap` in this scope\n\
    \  --> /tmp/tmpa91o4i9c.rs:52:9\n   |\n52 |         swap(&mut c, &mut a);\n  \
    \ |         ^^^^ not found in this scope\n   |\nhelp: consider importing one of\
    \ these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n\
    \   |\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    \n    // If sides are equal, triangle is right angled.\n    if a == b {\n\
    \        return c == b;\n    }\n    \n    // If sides are equal, triangle is right\
    \ angled.\n    if a == c {\n        return b == c;\n    }\n    \n    // If sides\
    \ are equal, triangle is right angled.\n    if b == c {\n        return true;\n\
    \    }\n    \n    // If sides are equal, triangle is right angled.\n    if a ==\
    \ b {\n        return true;\n    }\n    \n    // If sides are equal, triangle\
    \ is right angled.\n    if a == c {\n        return true;\n    }\n    \n    //\
    \ If sides are equal, triangle is right angled.\n    if b == c {\n        return\
    \ true;\n    }\n    \n    // If sides are equal, triangle is right angled.\n \
    \   if a == b {\n        return true;\n    }\n    \n    // If sides are equal,\
    \ triangle is right angled.\n    if a == c {\n        return true;\n    }\n  \
    \  \n    // If sides are equal, triangle is right angled.\n    if b == c {\n \
    \       return true;\n    }\n    \n    // If sides are equal, triangle is right\
    \ angled.\n    if a == b {\n        return true;\n    }\n    \n    // If sides\
    \ are equal, triangle is right angled.\n    if a == c {\n        return true;\n\
    \    }\n    \n    // If sides are equal, triangle is right angled.\n    if b ==\
    \ c {\n        return true;\n    }\n    \n    // If sides are equal, triangle\
    \ is right angled.\n    if a == b {\n        return true;\n    }\n    \n    //\
    \ If sides are equal, triangle is right angled.\n    if a == c {\n        return\
    \ true;\n    }\n    \n    // If sides are equal, triangle is right angled.\n \
    \   if b == c {\n        return true;\n    }\n    \n    // If sides are equal,\
    \ triangle is right angled.\n    if a == b {\n        return true;\n    }\n  \
    \  \n    // If sides are equal, triangle is right angled.\n    if a == c {\n \
    \       return true;\n    }\n    \n    // If sides are equal, triangle is right\
    \ angled.\n    if b == c {\n        return true;\n    }\n    \n    // If sides\
    \ are equal, triangle is right angled.\n    if a == b {\n        return true;\n\
    \    }\n    \n    // If sides are equal, triangle is right angled.\n    if a ==\
    \ c {\n        return true;\n    }\n    \n    // If sides are equal, triangle\
    \ is right angled.\n    if b == c {\n\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpqtqsy3ar.rs:126:3\n\
    \    |\n6   | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n109 |     if b == c {\n    |               - this delimiter\
    \ might not be properly closed...\n110 | \n111 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n126 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpqtqsy3ar.rs:6:58\n  |\n6 | fn right_angle_triangle(a: isize,\
    \ b: isize, c: isize) -> bool {\n  |    --------------------                 \
    \                 ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a < b + c ? a : b;\n    let mut b = b < a + c ? b : a;\n    let\
    \ mut c = c < a + b ? c : a;\n    \n    if a + b > c {\n        a = b;\n     \
    \   b = c;\n        c = a;\n    }\n    \n    if a + c > b {\n        a = c;\n\
    \        c = b;\n        b = a;\n    }\n    \n    if b + c > a {\n        b =\
    \ c;\n        c = a;\n        a = b;\n    }\n    \n    if a + b == c {\n     \
    \   return true;\n    }\n    \n    if a + c == b {\n        return true;\n   \
    \ }\n    \n    if b + c == a {\n        return true;\n    }\n    \n    return\
    \ false;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmpjdigzdlp.rs:7:29\n  |\n7 |     let mut a = a < b + c ? a : b;\n\
    \  |                             ^ expected one of `.`, `;`, `?`, `else`, or an\
    \ operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sum = a;\n    sum += b;\n    sum += c;\n    sum == 0 || sum == a\
    \ || sum == b\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n \
    \   assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmppqrbp84j.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a > 0 ? a : -a;\n    let mut b = b > 0 ? b : -b;\n    let mut\
    \ c = c > 0 ? c : -c;\n    let mut delta = b * b - 4 * a * c;\n    if delta <\
    \ 0 {\n        return false;\n    }\n    let mut root: isize = 0;\n    let mut\
    \ t = b + b - 4 * a;\n    while t > 0 {\n        root = t;\n        t /= 2;\n\
    \    }\n    delta = root * root;\n    if delta > 0 {\n        return false;\n\
    \    }\n    delta = b * b - 4 * a * c;\n    if delta < 0 {\n        return false;\n\
    \    }\n    delta = b * b - 4 * a * c;\n    if delta < 0 {\n        return false;\n\
    \    }\n    delta = b * b - 4 * a * c;\n    if delta < 0 {\n        return false;\n\
    \    }\n    delta = b * b - 4 * a * c;\n    if delta < 0 {\n        return false;\n\
    \    }\n    delta = b * b - 4 * a * c;\n    if delta < 0 {\n        return false;\n\
    \    }\n    delta = b * b - 4 * a * c;\n    if delta < 0 {\n        return false;\n\
    \    }\n    delta = b * b - 4 * a * c;\n    if delta < 0 {\n        return false;\n\
    \    }\n    delta = b * b - 4 * a * c;\n    if delta < 0 {\n        return false;\n\
    \    }\n    delta = b * b - 4 * a * c;\n    if delta < 0 {\n        return false;\n\
    \    }\n    delta = b * b - 4 * a * c;\n    if delta < 0 {\n        return false;\n\
    \    }\n    delta = b * b - 4 * a * c;\n    if delta < 0 {\n        return false;\n\
    \    }\n    delta = b * b - 4 * a * c;\n    if delta < 0 {\n        return false;\n\
    \    }\n    delta = b * b - 4 * a * c;\n    if delta < 0 {\n        return false;\n\
    \    }\n    delta = b * b - 4 * a * c;\n    if delta < 0 {\n        return false;\n\
    \    }\n    delta = b * b - 4 * a * c;\n    if delta < 0 {\n        return false;\n\
    \    }\n    delta = b * b - 4 * a * c;\n    if delta < 0 {\n        return false;\n\
    \    }\n    delta = b * b - 4 * a * c;\n    if delta < 0 {\n        return false;\n\
    \    }\n    delta = b * b - 4 * a * c;\n    if delta < 0 {\n        return false;\n\
    \    }\n    delta = b * b - 4 * a * c;\n    if delta < 0 {\n        return false;\n\
    \    }\n    delta = b * b - 4 * a * c;\n    if delta < 0 {\n        return false;\n\
    \    }\n    delta = b * b - 4 * a * c;\n    if delta < 0 {\n        return false;\n\
    \    }\n    delta = b\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmpzvmikhoe.rs:7:25\n  |\n7 |     let mut a = a > 0 ? a : -a;\n  |\
    \                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    \n   \
    \ let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    \n \
    \   while a > 0 && b > 0 && c > 0 {\n        if a + b > c {\n            c -=\
    \ a;\n            a -= b;\n            b -= c;\n        } else {\n           \
    \ c -= b;\n            b -= a;\n            a -= c;\n        }\n    }\n    \n\
    \    a /= 2;\n    b /= 2;\n    c /= 2;\n    \n    if a == 0 && b == 0 && c ==\
    \ 0 {\n        return true;\n    }\n    \n    if a > 0 && b > 0 && c > 0 {\n \
    \       return false;\n    }\n    \n    if a > 0 && b > 0 && c < 0 {\n       \
    \ return true;\n    }\n    \n    if a < 0 && b > 0 && c > 0 {\n        return\
    \ false;\n    }\n    \n    if a < 0 && b > 0 && c < 0 {\n        return true;\n\
    \    }\n    \n    if a < 0 && b < 0 && c > 0 {\n        return false;\n    }\n\
    \    \n    if a < 0 && b < 0 && c < 0 {\n        return true;\n    }\n    \n \
    \   if a > 0 && b < 0 && c > 0 {\n        return false;\n    }\n    \n    if a\
    \ > 0 && b < 0 && c < 0 {\n        return true;\n    }\n    \n    if a < 0 &&\
    \ b < 0 && c > 0 {\n        return false;\n    }\n    \n    if a < 0 && b < 0\
    \ && c < 0 {\n        return true;\n    }\n    \n    if a > 0 && b > 0 && c <\
    \ 0 {\n        return false;\n    }\n    \n    if a > 0 && b > 0 && c > 0 {\n\
    \        return true;\n    }\n    \n    if a < 0 && b > 0 && c < 0 {\n       \
    \ return false;\n    }\n    \n    if a < 0 && b > 0 && c > 0 {\n        return\
    \ true;\n    }\n    \n    if a < 0 && b < 0 && c < 0 {\n        return false;\n\
    \    }\n    \n    if a < 0 && b < 0 && c > 0 {\n        return true;\n    }\n\
    \    \n    if a > 0 && b < 0 && c < 0 {\n        return false;\n    }\n    \n\
    \    if a > 0 && b < 0 && c > 0 {\n        return true;\n    }\n    \n    if a\
    \ < 0 && b < 0 && c < 0 {\n        return false;\n    }\n    \n    if a < 0 &&\
    \ b < 0 && c > 0 {\n        return true;\n    }\n    \n    if a > 0 && b > 0 &&\
    \ c > 0 {\n        return false;\n    }\n    \n    if a > 0 && b > 0 && c < 0\
    \ {\n        return true;\n    }\n    \n    if a < 0 && b > 0 && c > 0 {\n   \
    \     return false;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp83nipffm.rs:140:3\n\
    \    |\n6   | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n123 |     if a < 0 && b > 0 && c > 0 {\n    |              \
    \                  - this delimiter might not be properly closed...\n124 |   \
    \      return false;\n125 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n140 | }\n    |   ^\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp83nipffm.rs:6:58\n  |\n6 | fn right_angle_triangle(a: isize, b: isize,\
    \ c: isize) -> bool {\n  |    --------------------                           \
    \       ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a < b;\n    let mut b = b < c;\n    let mut c = c < a;\n    if\
    \ a == b {\n        if b == c {\n            return true;\n        }\n       \
    \ else {\n            return false;\n        }\n    }\n    else if b == c {\n\
    \        return false;\n    }\n    else {\n        if a == c {\n            return\
    \ false;\n        }\n        else {\n            return true;\n        }\n   \
    \ }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcyzl6ns2.rs:9:21\n  |\n9 |\
    \     let mut c = c < a;\n  |                     ^ expected `isize`, found `bool`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    (b * b) - (a * c) == (a * a + b * b - c * c)\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpob7b55mm.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let mut\
    \ sum = a * b + c * b;\n    if sum < 0 {\n        return false;\n    }\n    let\
    \ mut product = a * b * c;\n    if product < 0 {\n        return false;\n    }\n\
    \    product /= sum;\n    if product > 1.0 {\n        return false;\n    }\n \
    \   product = product - 1.0;\n    if product < 0.0 {\n        return false;\n\
    \    }\n    product = product * product;\n    if product < 1.0 {\n        return\
    \ false;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpixbf1alx.rs:19:18\n   |\n\
    19 |     if product > 1.0 {\n   |                  ^^^ expected `isize`, found\
    \ floating-point number\n\nerror[E0277]: cannot subtract `{float}` from `isize`\n\
    \  --> /tmp/tmpixbf1alx.rs:22:23\n   |\n22 |     product = product - 1.0;\n  \
    \ |                       ^ no implementation for `isize - {float}`\n   |\n  \
    \ = help: the trait `Sub<{float}>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpixbf1alx.rs:23:18\n   |\n23 |     if product < 0.0 {\n\
    \   |                  ^^^ expected `isize`, found floating-point number\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpixbf1alx.rs:27:18\n   |\n27 |     if product\
    \ < 1.0 {\n   |                  ^^^ expected `isize`, found floating-point number\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    \n    // Check that the sides are non-zero\n    if a < 0 || b < 0 || c <\
    \ 0 {\n        return false;\n    }\n    \n    // Check that the sides are equal\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    \n   \
    \ // Check that the sides are equal\n    if a == b && b == c {\n        return\
    \ true;\n    }\n    \n    // Check that the sides are equal\n    if a == c {\n\
    \        return true;\n    }\n    \n    // Check that the sides are equal\n  \
    \  if b == c {\n        return true;\n    }\n    \n    // Check that the sides\
    \ are equal\n    if a == b {\n        return true;\n    }\n    \n    // Check\
    \ that the sides are equal\n    if a == c {\n        return true;\n    }\n   \
    \ \n    // Check that the sides are equal\n    if b == c {\n        return true;\n\
    \    }\n    \n    // Check that the sides are equal\n    if a == b {\n       \
    \ return true;\n    }\n    \n    // Check that the sides are equal\n    if a ==\
    \ c {\n        return true;\n    }\n    \n    // Check that the sides are equal\n\
    \    if b == c {\n        return true;\n    }\n    \n    // Check that the sides\
    \ are equal\n    if a == b {\n        return true;\n    }\n    \n    // Check\
    \ that the sides are equal\n    if a == c {\n        return true;\n    }\n   \
    \ \n    // Check that the sides are equal\n    if b == c {\n        return true;\n\
    \    }\n    \n    // Check that the sides are equal\n    if a == b {\n       \
    \ return true;\n    }\n    \n    // Check that the sides are equal\n    if a ==\
    \ c {\n        return true;\n    }\n    \n    // Check that the sides are equal\n\
    \    if b == c {\n        return true;\n    }\n    \n    // Check that the sides\
    \ are equal\n    if a == b {\n        return true;\n    }\n    \n    // Check\
    \ that the sides are equal\n    if a == c {\n        return true;\n    }\n   \
    \ \n    // Check that the sides are equal\n    if b == c {\n        return true;\n\
    \    }\n    \n    // Check that the sides are equal\n    if a == b {\n       \
    \ return true;\n    }\n    \n    // Check that the sides are equal\n    if a ==\
    \ c {\n        return true;\n    }\n    \n    // Check that the sides are equal\n\
    \    if b == c {\n        return true;\n    }\n    \n    // Check that the sides\
    \ are equal\n    if a == b {\n        return true;\n    }\n    \n    // Check\
    \ that the sides are equal\n    if a == c {\n        return true;\n    }\n   \
    \ \n    // Check that the sides are equal\n    if b == c {\n        return true;\n\
    \    }\n    \n    // Check that the sides are equal\n    if a == b {\n       \
    \ return true;\n    }\n    \n    // \n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0317]: `if` may be missing an `else` clause\n   --> /tmp/tmpvcfit35b.rs:139:5\n\
    \    |\n6   |   fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    |                                                            ---- expected\
    \ `bool` because of this return type\n...\n139 | /     if a == b {\n140 | |  \
    \       return true;\n141 | |     }\n    | |_____^ expected `bool`, found `()`\n\
    \    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help:\
    \ consider adding an `else` block that evaluates to the expected type\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0317`.\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    (b - a).abs() >= (c - b).abs() - (c - a).abs()\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd0oui7q1.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a < b;\n    let mut b = b < c;\n    let mut c = c < a;\n    if\
    \ a == b {\n        return a == c;\n    }\n    if a == c {\n        return b ==\
    \ c;\n    }\n    if b == c {\n        return a == b;\n    }\n    let mut a = a\
    \ < b;\n    let mut b = b < c;\n    let mut c = c < a;\n    if a == b {\n    \
    \    return a == c;\n    }\n    if a == c {\n        return b == c;\n    }\n \
    \   if b == c {\n        return a == b;\n    }\n    let mut a = a < b;\n    let\
    \ mut b = b < c;\n    let mut c = c < a;\n    if a == b {\n        return a ==\
    \ c;\n    }\n    if a == c {\n        return b == c;\n    }\n    if b == c {\n\
    \        return a == b;\n    }\n    let mut a = a < b;\n    let mut b = b < c;\n\
    \    let mut c = c < a;\n    if a == b {\n        return a == c;\n    }\n    if\
    \ a == c {\n        return b == c;\n    }\n    if b == c {\n        return a ==\
    \ b;\n    }\n    let mut a = a < b;\n    let mut b = b < c;\n    let mut c = c\
    \ < a;\n    if a == b {\n        return a == c;\n    }\n    if a == c {\n    \
    \    return b == c;\n    }\n    if b == c {\n        return a == b;\n    }\n \
    \   let mut a = a < b;\n    let mut b = b < c;\n    let mut c = c < a;\n    if\
    \ a == b {\n        return a == c;\n    }\n    if a == c {\n        return b ==\
    \ c;\n    }\n    if b == c {\n        return a == b;\n    }\n    let mut a = a\
    \ < b;\n    let mut b = b < c;\n    let mut c = c < a;\n    if a == b {\n    \
    \    return a == c;\n    }\n    if a == c {\n        return b == c;\n    }\n \
    \   if b == c {\n        return a == b;\n    }\n    let mut a = a < b;\n    let\
    \ mut b = b < c;\n    let mut c = c < a;\n    if a == b {\n        return a ==\
    \ c;\n    }\n    if a == c {\n        return b == c;\n    }\n    if b == c {\n\
    \        return a == b;\n    }\n    let mut a = a < b;\n    let mut b = b < c;\n\
    \    let mut c = c < a;\n    if a == b {\n        return a == c;\n    }\n    if\
    \ a == c {\n\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n  \
    \  assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n\
    \    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2, 2, 2),\
    \ false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpqkyr5gqd.rs:126:3\n\
    \    |\n6   | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n109 |     if a == c {\n    |               - this delimiter\
    \ might not be properly closed...\n110 | \n111 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n126 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpqkyr5gqd.rs:9:21\n  |\n9 |     let mut c = c < a;\n  | \
    \                    ^ expected `isize`, found `bool`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpqkyr5gqd.rs:6:58\n  |\n6 | fn right_angle_triangle(a: isize,\
    \ b: isize, c: isize) -> bool {\n  |    --------------------                 \
    \                 ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a < b + c ? a : b + c;\n    let mut b = b < a + c ? b : a + c;\n\
    \    let mut c = c < a + b ? c : a + b;\n    \n    if a == b + c && b == a + c\
    \ && c == a + b {\n        return true;\n    }\n    \n    if a == b + c && b ==\
    \ c + a && c == c + b {\n        return true;\n    }\n    \n    if a == b + c\
    \ && b == c + a && c == b + c {\n        return true;\n    }\n    \n    if a ==\
    \ b + c && b == c + a && c == a + b {\n        return true;\n    }\n    \n   \
    \ if a == b + c && b == a + c && c == b + c {\n        return true;\n    }\n \
    \   \n    if a == b + c && b == c + a && c == a + b {\n        return true;\n\
    \    }\n    \n    if a == b + c && b == c + a && c == b + c {\n        return\
    \ true;\n    }\n    \n    if a == b + c && b == a + c && c == a + b {\n      \
    \  return true;\n    }\n    \n    if a == b + c && b == c + a && c == a + b {\n\
    \        return true;\n    }\n    \n    if a == b + c && b == a + c && c == b\
    \ + c {\n        return true;\n    }\n    \n    if a == b + c && b == c + a &&\
    \ c == a + b {\n        return true;\n    }\n    \n    if a == b + c && b == c\
    \ + a && c == b + c {\n        return true;\n    }\n    \n    if a == b + c &&\
    \ b == a + c && c == a + b {\n        return true;\n    }\n    \n    if a == b\
    \ + c && b == c + a && c == a + b {\n        return true;\n    }\n    \n    if\
    \ a == b + c && b == a + c && c == b + c {\n        return true;\n    }\n    \n\
    \    if a == b + c && b == c + a && c == a + b {\n        return true;\n    }\n\
    \    \n    if a == b + c && b == a + c && c == b + c {\n        return true;\n\
    \    }\n    \n    if a == b + c && b == c + a && c == a + b {\n        return\
    \ true;\n    }\n    \n    if a == b + c && b == c + a && c == b + c {\n      \
    \  return true;\n    }\n    \n    if a == b + c && b == a + c && c == a + b {\n\
    \        return true;\n    }\n    \n    if a == b + c && b == c + a && c == a\
    \ + b {\n        return true;\n\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp10v32zw9.rs:109:3\n\
    \    |\n6   | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n91  |     if a == b + c && b == c + a && c == a + b {\n    |\
    \                                               - this delimiter might not be\
    \ properly closed...\n...\n94  | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n109 | }\n    |   ^\n\nerror: expected one of `.`, `;`, `?`,\
    \ `else`, or an operator, found `a`\n --> /tmp/tmp10v32zw9.rs:7:29\n  |\n7 | \
    \    let mut a = a < b + c ? a : b + c;\n  |                             ^ expected\
    \ one of `.`, `;`, `?`, `else`, or an operator\n\nerror: aborting due to 2 previous\
    \ errors\n\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    \n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    \n    if a + b > c {\n        a = a - b;\n        b = c - a;\n        c =\
    \ a + b;\n    }\n    \n    if a + c > b {\n        a = a - c;\n        c = c -\
    \ a;\n        b = b + c;\n    }\n    \n    if b + c > a {\n        b = b - c;\n\
    \        c = c - b;\n        a = a + c;\n    }\n    \n    if a + b > c {\n   \
    \     a = a - b;\n        b = c - a;\n        c = a + b;\n    }\n    \n    if\
    \ a + c > b {\n        a = a - c;\n        c = c - a;\n        b = b + c;\n  \
    \  }\n    \n    if b + c > a {\n        b = b - c;\n        c = c - b;\n     \
    \   a = a + c;\n    }\n    \n    if a + b > c {\n        a = a - b;\n        b\
    \ = c - a;\n        c = a + b;\n    }\n    \n    if a + c > b {\n        a = a\
    \ - c;\n        c = c - a;\n        b = b + c;\n    }\n    \n    if b + c > a\
    \ {\n        b = b - c;\n        c = c - b;\n        a = a + c;\n    }\n    \n\
    \    if a + b > c {\n        a = a - b;\n        b = c - a;\n        c = a + b;\n\
    \    }\n    \n    if a + c > b {\n        a = a - c;\n        c = c - a;\n   \
    \     b = b + c;\n    }\n    \n    if b + c > a {\n        b = b - c;\n      \
    \  c = c - b;\n        a = a + c;\n    }\n    \n    if a + b > c {\n        a\
    \ = a - b;\n        b = c - a;\n        c = a + b;\n    }\n    \n    if a + c\
    \ > b {\n        a = a - c;\n        c = c - a;\n        b = b + c;\n    }\n \
    \   \n    if b + c > a {\n        b = b - c;\n        c = c - b;\n        a =\
    \ a + c;\n    }\n    \n    if a + b > c {\n        a = a - b;\n        b = c -\
    \ a;\n        c = a + b;\n    }\n    \n    if a + c > b {\n        a = a - c;\n\
    \        c = c - a;\n        b = b + c;\n    }\n    \n    if b + c > a {\n   \
    \     b = b - c;\n        c = c - b;\n        a = a + c;\n    }\n    \n    if\
    \ a + b > c {\n        a = a - b;\n        b = c - a;\n        c = a + b;\n  \
    \  }\n    \n    if a + c > b {\n        a = a - c;\n        c = c - a;\n     \
    \   b = b + c;\n    }\n    \n    if b + c > a {\n        b = b - c;\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpt8hyrk_o.rs:149:3\n\
    \    |\n6   | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n132 |     if b + c > a {\n    |                  - this delimiter\
    \ might not be properly closed...\n133 |         b = b - c;\n134 | }\n    | -\
    \ ...as it matches this but it has different indentation\n...\n149 | }\n    |\
    \   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmpt8hyrk_o.rs:6:58\n  |\n\
    6 | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n  |    --------------------\
    \                                  ^^^^ expected `bool`, found `()`\n  |    |\n\
    \  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    (b - a).abs() <= (c - b).abs() * (c - a).abs() + a * b\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphuw1ga66.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a + b > c || a + c > b || b + c > a {\n        return false;\n    }\n\
    \    return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8uamg_z2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a < b + c ? a : b + c;\n    let mut b = b < a + c ? b : a + c;\n\
    \    let mut c = c < a + b ? c : a + b;\n    \n    if a == b + c && b == a + c\
    \ && c == a + b {\n        return true;\n    }\n    \n    if a == b + c || b ==\
    \ a + c || c == a + b {\n        return false;\n    }\n    \n    if a > b + c\
    \ && b > a + c && c > a + b {\n        return true;\n    }\n    \n    if a > b\
    \ + c || b > a + c || c > a + b {\n        return false;\n    }\n    \n    if\
    \ a > b + c && b > a + c && c > a + b {\n        return true;\n    }\n    \n \
    \   if a > b + c || b > a + c || c > a + b {\n        return false;\n    }\n \
    \   \n    if a > b + c && b > a + c && c > a + b {\n        return true;\n   \
    \ }\n    \n    if a > b + c || b > a + c || c > a + b {\n        return false;\n\
    \    }\n    \n    if a > b + c && b > a + c && c > a + b {\n        return true;\n\
    \    }\n    \n    if a > b + c || b > a + c || c > a + b {\n        return false;\n\
    \    }\n    \n    if a > b + c && b > a + c && c > a + b {\n        return true;\n\
    \    }\n    \n    if a > b + c || b > a + c || c > a + b {\n        return false;\n\
    \    }\n    \n    if a > b + c && b > a + c && c > a + b {\n        return true;\n\
    \    }\n    \n    if a > b + c || b > a + c || c > a + b {\n        return false;\n\
    \    }\n    \n    if a > b + c && b > a + c && c > a + b {\n        return true;\n\
    \    }\n    \n    if a > b + c || b > a + c || c > a + b {\n        return false;\n\
    \    }\n    \n    if a > b + c && b > a + c && c > a + b {\n        return true;\n\
    \    }\n    \n    if a > b + c || b > a + c || c > a + b {\n        return false;\n\
    \    }\n    \n    if a > b + c && b > a + c && c > a + b {\n        return true;\n\
    \    }\n    \n    if a > b + c || b > a + c || c > \n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmpf6tws_yx.rs:7:29\n  |\n7 |     let mut a = a < b + c ? a : b + c;\n\
    \  |                             ^ expected one of `.`, `;`, `?`, `else`, or an\
    \ operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a + b > c || b + c > a || c + a > b {\n        return false;\n    }\n\
    \    \n    let mut a = a < b + c ? a : b + c;\n    let mut b = b < a + c ? b :\
    \ a + c;\n    let mut c = c < a + b ? c : a + b;\n    \n    while a > b + c {\n\
    \        a -= c;\n        b -= c;\n    }\n    while b > a + c {\n        b -=\
    \ c;\n        a -= c;\n    }\n    while c > a + b {\n        c -= b;\n       \
    \ a -= b;\n    }\n    \n    a == b + c\n}\n\nfn main() {\n    let candidate =\
    \ right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmp5ognnheu.rs:11:29\n   |\n11 |     let mut a = a < b + c ? a : b\
    \ + c;\n   |                             ^ expected one of `.`, `;`, `?`, `else`,\
    \ or an operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    \n\
    \    if a + b > c {\n        a = a - b;\n        b = c - a;\n        c = a + b;\n\
    \    }\n    \n    if a + c > b {\n        a = a - c;\n        c = c - a;\n   \
    \     b = b + c;\n    }\n    \n    if b + c > a {\n        b = b - c;\n      \
    \  c = c - b;\n        a = a + c;\n    }\n    \n    if a + b + c > 1 {\n     \
    \   return false;\n    }\n    \n    return true;\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgqw04vik.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    let\
    \ mut sum = 0;\n    while a > 0 && b > 0 && c > 0 {\n        sum += a;\n     \
    \   sum += b;\n        sum += c;\n        a -= b;\n        b -= c;\n        c\
    \ -= a;\n    }\n    sum == 0;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwjxg7jlp.rs:6:58\n   |\n\
    6  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n   |   \
    \ --------------------                                  ^^^^ expected `bool`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n...\n19 |     sum == 0;\n   |             - help: remove\
    \ this semicolon\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a + b > c {\n        return false;\n    }\n    if a + c > b {\n      \
    \  return false;\n    }\n    if b + c > a {\n        return false;\n    }\n  \
    \  return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpby_v7po_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    \n   \
    \ let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    \n \
    \   if a + b > c {\n        a = a - b;\n        b = c - a;\n        c = a + b;\n\
    \    }\n    \n    if a + c > b {\n        a = a - c;\n        c = c - a;\n   \
    \     b = b + c;\n    }\n    \n    if b + c > a {\n        b = b - c;\n      \
    \  c = c - b;\n        a = a + c;\n    }\n    \n    if a + b == c {\n        return\
    \ true;\n    }\n    \n    if a + c == b {\n        return true;\n    }\n    \n\
    \    if b + c == a {\n        return true;\n    }\n    \n    return false;\n}\n\
    \nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxf1_366r.rs:51:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let mut\
    \ a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    let mut sum\
    \ = 0;\n    while a > 0 && b > 0 && c > 0 {\n        sum += a;\n        a -= b;\n\
    \        b -= c;\n        c -= sum;\n    }\n    sum == 0 || sum == a || sum ==\
    \ b || sum == c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsnz7lxjp.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    \n    if a > b {\n        return false;\n    }\n    if b > c {\n        return\
    \ false;\n    }\n    if c > a {\n        return false;\n    }\n    \n    let mut\
    \ a = a;\n    let mut b = b;\n    let mut c = c;\n    \n    while a < b {\n  \
    \      if a > c {\n            return false;\n        }\n        \n        a +=\
    \ 1;\n        c -= 1;\n    }\n    \n    while b < c {\n        if b > a {\n  \
    \          return false;\n        }\n        \n        b += 1;\n        a -= 1;\n\
    \    }\n    \n    while c > a {\n        if c > b {\n            return false;\n\
    \        }\n        \n        c -= 1;\n        b -= 1;\n    }\n    \n    return\
    \ true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvwcenhgc.rs:54:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a + b > c || a + c > b || b + c > a {\n        return false;\n    }\n\
    \    \n    let mut a = a;\n    let mut b = b;\n    let mut c = c;\n    \n    while\
    \ a < b + c && b < c + a {\n        a += 1;\n        b += 1;\n        c += 1;\n\
    \    }\n    \n    if a + b > c || a + c > b || b + c > a {\n        return false;\n\
    \    }\n    \n    true\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpiclbydzm.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a + b > c || a + c > b || b + c > a {\n        return false;\n    }\n\
    \    else if a + b == c || a + c == b || b + c == a {\n        return true;\n\
    \    }\n    else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpms4uphci.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let mut\
    \ sum = 0;\n    for i in 0..3 {\n        sum += (a * i) + (b * i) + c;\n    }\n\
    \    \n    if sum % 2 == 0 {\n        return false;\n    }\n    \n    let mut\
    \ sum2 = 0;\n    for i in 0..3 {\n        sum2 += (a * i) + (b * i) + c;\n   \
    \ }\n    \n    if sum2 % 2 == 0 {\n        return true;\n    }\n    \n    return\
    \ false;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdp8_dmox.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: -1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    \n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n   \
    \ \n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n \
    \   \n    while a < b + c {\n        if a > b + c {\n            a += c;\n   \
    \     }\n        if b > a + c {\n            b += c;\n        }\n        if c\
    \ > a + b {\n            c += a;\n        }\n    }\n    \n    if a == b + c {\n\
    \        return true;\n    }\n    \n    if a == b {\n        return c == b;\n\
    \    }\n    \n    if a == c {\n        return b == c;\n    }\n    \n    if b ==\
    \ c {\n        return a == b;\n    }\n    \n    return false;\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660015970
- exit_code: -1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let mut\
    \ a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    let mut sum\
    \ = 0;\n    while a > 0 && b > 0 && c > 0 {\n        if a > b {\n            a\
    \ -= b;\n            sum += c;\n        }\n        if b > c {\n            b -=\
    \ c;\n            sum += a;\n        }\n        if c > a {\n            c -= a;\n\
    \            sum += b;\n        }\n    }\n    sum == a || sum == b || sum == c\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660015970
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    (b * b) - (a * c) == a * b\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmppwdr323x.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    \n    if a + b > c || a + c > b || b + c > a {\n        return false;\n \
    \   }\n    \n    let mut sum = a;\n    let mut prod = b;\n    \n    for i in 0..3\
    \ {\n        sum += prod;\n        prod *= c;\n    }\n    \n    sum == c\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpd741a6fc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a;\n    let mut b = b;\n    let mut c = c;\n    if a > b {\n\
    \        a = b;\n    }\n    if a > c {\n        a = c;\n    }\n    if b > c {\n\
    \        b = c;\n    }\n    if a + b > c {\n        return false;\n    }\n   \
    \ if a + c > b {\n        return false;\n    }\n    if b + c > a {\n        return\
    \ false;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp15fsea3x.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a;\n    let mut b = b;\n    let mut c = c;\n    if a > b {\n\
    \        a = b;\n        b = c;\n        c = a;\n    }\n    if a > c {\n     \
    \   a = c;\n        c = b;\n        b = a;\n    }\n    if b > c {\n        b =\
    \ c;\n        c = a;\n        a = b;\n    }\n    if a == 0 || b == 0 || c == 0\
    \ {\n        return false;\n    }\n    let mut a = a / 2;\n    let mut b = b /\
    \ 2;\n    let mut c = c / 2;\n    let mut sum = 0;\n    while a > 0 && b > 0 &&\
    \ c > 0 {\n        sum += c;\n        if sum > b {\n            sum -= b;\n  \
    \          c -= b;\n            b -= a;\n            a /= 2;\n        }\n    \
    \    if sum > c {\n            sum -= c;\n            c -= a;\n            a /=\
    \ 2;\n        }\n        if sum > a {\n            sum -= a;\n            a /=\
    \ 2;\n        }\n    }\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n\
    \    }\n    return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpy31und6f.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a + b > c || b + c > a || c + a > b {\n        return false;\n    }\n\
    \    \n    let mut sum = a;\n    \n    for i in 0..(b - a).rev() {\n        sum\
    \ += b;\n    }\n    \n    for i in 0..(c - b).rev() {\n        sum += c;\n   \
    \ }\n    \n    for i in 0..(a - b).rev() {\n        sum += a;\n    }\n    \n \
    \   sum == b\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n  \
    \  assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n\
    \    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2, 2, 2),\
    \ false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `isize` is not an iterator\n  --> /tmp/tmpcxw6tni3.rs:13:25\n\
    \   |\n13 |     for i in 0..(b - a).rev() {\n   |                         ^^^\
    \ `isize` is not an iterator\n   |\n   = note: the following trait bounds were\
    \ not satisfied:\n           `isize: Iterator`\n           which is required by\
    \ `&mut isize: Iterator`\n\nerror[E0599]: `isize` is not an iterator\n  --> /tmp/tmpcxw6tni3.rs:17:25\n\
    \   |\n17 |     for i in 0..(c - b).rev() {\n   |                         ^^^\
    \ `isize` is not an iterator\n   |\n   = note: the following trait bounds were\
    \ not satisfied:\n           `isize: Iterator`\n           which is required by\
    \ `&mut isize: Iterator`\n\nerror[E0599]: `isize` is not an iterator\n  --> /tmp/tmpcxw6tni3.rs:21:25\n\
    \   |\n21 |     for i in 0..(a - b).rev() {\n   |                         ^^^\
    \ `isize` is not an iterator\n   |\n   = note: the following trait bounds were\
    \ not satisfied:\n           `isize: Iterator`\n           which is required by\
    \ `&mut isize: Iterator`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2zl2ob6i.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c || a + c > b || b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5jlc9ssb.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a < b + c ? a : b + c;\n    let mut b = b < a + c ? b : a + c;\n\
    \    let mut c = c < a + b ? c : a + b;\n    \n    if a == b + c && b == a + c\
    \ && c == a + b {\n        return true;\n    }\n    \n    if a == b + c || a ==\
    \ c + b || b == c + a {\n        return false;\n    }\n    \n    if a > b + c\
    \ || a > c + b || b > c + a {\n        return false;\n    }\n    \n    return\
    \ true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmp0w0rydrs.rs:7:29\n  |\n7 |     let mut a = a < b + c ? a : b + c;\n\
    \  |                             ^ expected one of `.`, `;`, `?`, `else`, or an\
    \ operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    (b - a).abs() == (b + c).abs() == (b - c).abs()\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n --> /tmp/tmptm1sa8ff.rs:7:19\n\
    \  |\n7 |     (b - a).abs() == (b + c).abs() == (b - c).abs()\n  |           \
    \        ^^               ^^\n  |\nhelp: split the comparison into two\n  |\n\
    7 |     (b - a).abs() == (b + c).abs() && (b + c).abs() == (b - c).abs()\n  |\
    \                                    ++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmptm1sa8ff.rs:7:39\n  |\n7 |     (b - a).abs() == (b + c).abs()\
    \ == (b - c).abs()\n  |                                       ^^^^^^^^^^^^^ expected\
    \ `bool`, found `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    \n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    \n    if a + b > c {\n        a = a - b;\n        b = c - a;\n        c =\
    \ a + b;\n    }\n    \n    if a + c > b {\n        a = a - c;\n        c = c -\
    \ a;\n        b = b + c;\n    }\n    \n    if b + c > a {\n        b = b - c;\n\
    \        c = c - b;\n        a = a + c;\n    }\n    \n    if a + b + c > 0 {\n\
    \        return true;\n    }\n    \n    return false;\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptbjms5o3.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let mut\
    \ a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    while a > b\
    \ {\n        a = a / 2;\n        b = b / 2;\n    }\n    while b > c {\n      \
    \  b = b / 2;\n        c = c / 2;\n    }\n    while c > a {\n        c = c / 2;\n\
    \        a = a / 2;\n    }\n    if a + b > c {\n        return true;\n    }\n\
    \    if b + c > a {\n        return true;\n    }\n    if c + a > b {\n       \
    \ return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmph0j6b2u4.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2zl2ob6i.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a + b > c {\n        return false;\n    }\n    if a + c > b {\n      \
    \  return false;\n    }\n    if b + c > a {\n        return false;\n    }\n  \
    \  return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpby_v7po_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a + b > c || a + c > b || b + c > a {\n        return false;\n    }\n\
    \    \n    let mut a = a < b ? a : b;\n    let mut b = b < c ? b : c;\n    let\
    \ mut c = c < a ? c : a;\n    \n    while a > b {\n        a -= b;\n        b\
    \ -= c;\n        c -= a;\n    }\n    \n    while b > c {\n        b -= c;\n  \
    \      c -= a;\n        a -= b;\n    }\n    \n    while c > a {\n        c -=\
    \ a;\n        a -= b;\n        b -= c;\n    }\n    \n    a == b == c\n}\n\nfn\
    \ main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmp0x6o6n8a.rs:11:25\n   |\n11 |     let mut a = a < b ? a : b;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a < b;\n    let mut b = b < c;\n    let mut c = c < a;\n    if\
    \ a && b {\n        c = !c;\n    }\n    if c && b {\n        b = !b;\n    }\n\
    \    if a && c {\n        a = !a;\n    }\n    if a && c {\n        c = !c;\n \
    \   }\n    if b && c {\n        b = !b;\n    }\n    return a && b && c;\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp84w81x3i.rs:9:21\n  |\n9 |\
    \     let mut c = c < a;\n  |                     ^ expected `isize`, found `bool`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    \n    let mut a = a < b;\n    let mut b = b < c;\n    let mut c = c < a;\n\
    \    \n    if a == b {\n        if a == c {\n            return true;\n      \
    \  }\n        \n        b = b < c;\n        c = c < a;\n    }\n    \n    if a\
    \ == c {\n        if b == c {\n            return true;\n        }\n        \n\
    \        a = a < b;\n        b = b < c;\n        c = c < a;\n    }\n    \n   \
    \ if b == c {\n        if a == c {\n            return true;\n        }\n    \
    \    \n        a = a < b;\n        b = b < c;\n        c = c < a;\n    }\n   \
    \ \n    if a == b {\n        if b == c {\n            return true;\n        }\n\
    \        \n        a = a < b;\n        b = b < c;\n        c = c < a;\n    }\n\
    \    \n    if b == c {\n        if a == c {\n            return true;\n      \
    \  }\n        \n        a = a < b;\n        b = b < c;\n        c = c < a;\n \
    \   }\n    \n    if c == a {\n        if b == c {\n            return true;\n\
    \        }\n        \n        a = a < b;\n        b = b < c;\n        c = c <\
    \ a;\n    }\n    \n    if c == b {\n        if a == c {\n            return true;\n\
    \        }\n        \n        a = a < b;\n        b = b < c;\n        c = c <\
    \ a;\n    }\n    \n    if c == c {\n        return true;\n    }\n    \n    return\
    \ false;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp08m36z4r.rs:10:21\n   |\n\
    10 |     let mut c = c < a;\n   |                     ^ expected `isize`, found\
    \ `bool`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let mut\
    \ a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    while a > b\
    \ + c {\n        a /= 2;\n        b /= 2;\n        c /= 2;\n    }\n    while b\
    \ > a + c {\n        b /= 2;\n        a /= 2;\n        c /= 2;\n    }\n    while\
    \ c > a + b {\n        c /= 2;\n        a /= 2;\n        b /= 2;\n    }\n    if\
    \ a + b > c {\n        return true;\n    }\n    if a + c > b {\n        return\
    \ true;\n    }\n    if b + c > a {\n        return true;\n    }\n    return false;\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnnw3qhql.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    (b * b) - (a * c) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpyc_pa5ph.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a < b + c ? a : b;\n    let mut b = b < a + c ? b : a;\n    let\
    \ mut c = c < a + b ? c : a;\n    \n    if a + b > c {\n        a = b;\n     \
    \   b = c;\n        c = a;\n    }\n    \n    if a + c > b {\n        a = c;\n\
    \        c = b;\n        b = a;\n    }\n    \n    if b + c > a {\n        b =\
    \ c;\n        c = a;\n        a = b;\n    }\n    \n    if a + b == c {\n     \
    \   return true;\n    }\n    \n    if a + c == b {\n        return true;\n   \
    \ }\n    \n    if b + c == a {\n        return true;\n    }\n    \n    return\
    \ false;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmpjdigzdlp.rs:7:29\n  |\n7 |     let mut a = a < b + c ? a : b;\n\
    \  |                             ^ expected one of `.`, `;`, `?`, `else`, or an\
    \ operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a < b + c ? a : b;\n    let mut b = b < a + c ? b : a;\n    let\
    \ mut c = c < a + b ? c : a;\n    \n    if a + b > c {\n        a = b;\n     \
    \   b = c;\n        c = a;\n    }\n    \n    if a + c > b {\n        a = c;\n\
    \        c = b;\n        b = a;\n    }\n    \n    if b + c > a {\n        b =\
    \ c;\n        c = a;\n        a = b;\n    }\n    \n    if a + b == c {\n     \
    \   return true;\n    }\n    \n    if a + c == b {\n        return true;\n   \
    \ }\n    \n    if b + c == a {\n        return true;\n    }\n    \n    return\
    \ false;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmpjdigzdlp.rs:7:29\n  |\n7 |     let mut a = a < b + c ? a : b;\n\
    \  |                             ^ expected one of `.`, `;`, `?`, `else`, or an\
    \ operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    (b - a).abs() >= (c - b).abs() - (c - a).abs()\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd0oui7q1.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    if\
    \ a + b > c {\n        a = a - b;\n        b = c - a;\n        c = a + b;\n  \
    \  }\n    if a + c > b {\n        a = a - c;\n        c = c - a;\n        b =\
    \ b + c;\n    }\n    if b + c > a {\n        b = b - c;\n        c = c - b;\n\
    \        a = a + c;\n    }\n    if a + b > c {\n        a = a - b;\n        b\
    \ = c - a;\n        c = a + b;\n    }\n    if a + c > b {\n        a = a - c;\n\
    \        c = c - a;\n        b = b + c;\n    }\n    if b + c > a {\n        b\
    \ = b - c;\n        c = c - b;\n        a = a + c;\n    }\n    if a + b > c {\n\
    \        a = a - b;\n        b = c - a;\n        c = a + b;\n    }\n    if a +\
    \ c > b {\n        a = a - c;\n        c = c - a;\n        b = b + c;\n    }\n\
    \    if b + c > a {\n        b = b - c;\n        c = c - b;\n        a = a + c;\n\
    \    }\n    if a + b > c {\n        a = a - b;\n        b = c - a;\n        c\
    \ = a + b;\n    }\n    if a + c > b {\n        a = a - c;\n        c = c - a;\n\
    \        b = b + c;\n    }\n    if b + c > a {\n        b = b - c;\n        c\
    \ = c - b;\n        a = a + c;\n    }\n    if a + b > c {\n        a = a - b;\n\
    \        b = c - a;\n        c = a + b;\n    }\n    if a + c > b {\n        a\
    \ = a - c;\n        c = c - a;\n        b = b + c;\n    }\n    if b + c > a {\n\
    \        b = b - c;\n        c = c - b;\n        a = a + c;\n    }\n    if a +\
    \ b > c {\n        a = a - b;\n        b = c - a;\n        c = a + b;\n    }\n\
    \    if a + c > b {\n        a = a - c;\n        c = c - a;\n        b = b + c;\n\
    \    }\n    if b + c > a {\n        b = b - c;\n        c = c - b;\n        a\
    \ = a + c;\n    }\n    if a + b > c {\n        a = a - b;\n        b = c - a;\n\
    \        c = a + b;\n    }\n    if a + c > b {\n        a = a - c;\n        c\
    \ = c - a;\n        b = b + c;\n    }\n    if b + c > a {\n        b = b - c;\n\
    \        c = c - b;\n        a = a + c;\n    }\n    if a + b > c {\n        a\
    \ = a - b;\n        b = c - a;\n        c = a + b;\n    }\n    if a + c > b {\n\
    \        a = a - c;\n        c = \n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp0bm474gn.rs:138:3\n\
    \    |\n6   | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n120 |     if a + c > b {\n    |                  - this delimiter\
    \ might not be properly closed...\n...\n123 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n138 | }\n    |   ^\n\nerror: expected\
    \ expression, found `}`\n   --> /tmp/tmp0bm474gn.rs:123:1\n    |\n123 | }\n  \
    \  | ^ expected expression\n\nerror[E0308]: mismatched types\n --> /tmp/tmp0bm474gn.rs:6:58\n\
    \  |\n6 | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n  |\
    \    --------------------                                  ^^^^ expected `bool`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2zl2ob6i.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let mut\
    \ a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    \n    if a >\
    \ b {\n        a = b;\n        b = c;\n        c = a;\n    }\n    \n    if a >\
    \ c {\n        a = c;\n        c = b;\n        b = a;\n    }\n    \n    if b >\
    \ c {\n        b = c;\n        c = a;\n        a = b;\n    }\n    \n    if a ==\
    \ b {\n        return c == a;\n    }\n    \n    if a == c {\n        return b\
    \ == c;\n    }\n    \n    if b == c {\n        return a == b;\n    }\n    \n \
    \   if a > b {\n        a = b;\n        b = c;\n        c = a;\n    }\n    \n\
    \    if a > c {\n        a = c;\n        c = b;\n        b = a;\n    }\n    \n\
    \    if b > c {\n        b = c;\n        c = a;\n        a = b;\n    }\n    \n\
    \    if a == b {\n        return c == a;\n    }\n    \n    if a == c {\n     \
    \   return b == c;\n    }\n    \n    if b == c {\n        return a == b;\n   \
    \ }\n    \n    if a > b {\n        a = b;\n        b = c;\n        c = a;\n  \
    \  }\n    \n    if a > c {\n        a = c;\n        c = b;\n        b = a;\n \
    \   }\n    \n    if b > c {\n        b = c;\n        c = a;\n        a = b;\n\
    \    }\n    \n    if a == b {\n        return c == a;\n    }\n    \n    if a ==\
    \ c {\n        return b == c;\n    }\n    \n    if b == c {\n        return a\
    \ == b;\n    }\n    \n    if a > b {\n        a = b;\n        b = c;\n       \
    \ c = a;\n    }\n    \n    if a > c {\n        a = c;\n        c = b;\n      \
    \  b = a;\n    }\n    \n    if b > c {\n        b = c;\n        c = a;\n     \
    \   a = b;\n    }\n    \n    if a == b {\n        return c == a;\n    }\n    \n\
    \    if a == c {\n        return b == c;\n    }\n    \n    if b == c {\n     \
    \   return a == b;\n    }\n    \n    if a > b {\n        a = b;\n        b = c;\n\
    \        c = a;\n    }\n    \n    if a > c {\n        a = c;\n        c = b;\n\
    \        b = a;\n    }\n    \n    if b > c {\n        b = c;\n        c = a;\n\
    \        a = b;\n    }\n    \n    if a == b {\n        return c == a;\n    }\n\
    \    \n    if a == c {\n        return b == c;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0317]: `if` may be missing an `else` clause\n   --> /tmp/tmp0_pbgbzj.rs:156:5\n\
    \    |\n6   |   fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    |                                                            ---- expected\
    \ `bool` because of this return type\n...\n156 | /     if a == c {\n157 | |  \
    \       return b == c;\n158 | |     }\n    | |_____^ expected `bool`, found `()`\n\
    \    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help:\
    \ consider adding an `else` block that evaluates to the expected type\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0317`.\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a + b > c {\n        return false;\n    }\n    if a + c > b {\n      \
    \  return false;\n    }\n    if b + c > a {\n        return false;\n    }\n  \
    \  return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpby_v7po_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    (b - a).abs() >= (c - b).abs() && (c - b).abs() >= (a - c).abs()\n}\n\nfn\
    \ main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpc0dvg9az.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a;\n    let mut b = b;\n    let mut c = c;\n    if a > b {\n\
    \        a = b;\n        b = c;\n        c = a;\n    }\n    if a > c {\n     \
    \   a = c;\n        c = b;\n        b = a;\n    }\n    if b > c {\n        b =\
    \ c;\n        c = a;\n        a = b;\n    }\n    if a == b {\n        return c\
    \ == 0;\n    }\n    if a == c {\n        return b == 0;\n    }\n    if b == c\
    \ {\n        return a == 0;\n    }\n    if a < b {\n        a = b;\n        b\
    \ = c;\n        c = a;\n    }\n    if a < c {\n        a = c;\n        c = b;\n\
    \        b = a;\n    }\n    if b < c {\n        b = c;\n        c = a;\n     \
    \   a = b;\n    }\n    if a == b {\n        return c == 0;\n    }\n    if a ==\
    \ c {\n        return b == 0;\n    }\n    if b == c {\n        return a == 0;\n\
    \    }\n    if a < b {\n        a = b;\n        b = c;\n        c = a;\n    }\n\
    \    if a < c {\n        a = c;\n        c = b;\n        b = a;\n    }\n    if\
    \ b < c {\n        b = c;\n        c = a;\n        a = b;\n    }\n    if a ==\
    \ b {\n        return c == 0;\n    }\n    if a == c {\n        return b == 0;\n\
    \    }\n    if b == c {\n        return a == 0;\n    }\n    if a < b {\n     \
    \   a = b;\n        b = c;\n        c = a;\n    }\n    if a < c {\n        a =\
    \ c;\n        c = b;\n        b = a;\n    }\n    if b < c {\n        b = c;\n\
    \        c = a;\n        a = b;\n    }\n    if a == b {\n        return c == 0;\n\
    \    }\n    if a == c {\n        return b == 0;\n    }\n    if b == c {\n    \
    \    return a == 0;\n    }\n    if a < b {\n        a = b;\n        b = c;\n \
    \       c = a;\n    }\n    if a < c {\n        a = c;\n        c = b;\n      \
    \  b = a;\n    }\n    if b < c {\n        b = c;\n        c = a;\n        a =\
    \ b;\n    }\n    if a == b {\n        return c == 0;\n    }\n    if a == c {\n\
    \        return b == 0;\n    }\n    if b == c {\n        return a == 0;\n    }\n\
    \    if a < b {\n        a = b;\n        b = c;\n        c = a;\n    }\n    if\
    \ a < c {\n        a = c;\n        c = b;\n        b = a;\n    }\n    if b < c\
    \ {\n        b = c;\n        c = a;\n        a = b;\n    }\n    if a == b {\n\
    \        return c == 0;\n    }\n    if a == \n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n   --> /tmp/tmps2ijc74c.rs:149:1\n\
    \    |\n149 | }\n    | ^ expected expression\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a < b + c ? a : b + c;\n    let mut b = b < a + c ? b : a + c;\n\
    \    let mut c = c < a + b ? c : a + b;\n    \n    if a == b + c && b == a + c\
    \ && c == a + b {\n        return true;\n    }\n    \n    if a == b + c || a ==\
    \ c + b || a == b + c || a == c + b {\n        return false;\n    }\n    \n  \
    \  if b == c + a || c == a + b || c == b + a || c == a + c {\n        return false;\n\
    \    }\n    \n    if a == b + c || a == c + b || a == b + c || a == c + b {\n\
    \        return true;\n    }\n    \n    if b == c + a || c == a + b || c == b\
    \ + a || c == a + c {\n        return true;\n    }\n    \n    if a == b + c ||\
    \ a == c + b || a == b + c || a == c + b {\n        return true;\n    }\n    \n\
    \    if b == c + a || c == a + b || c == b + a || c == a + c {\n        return\
    \ true;\n    }\n    \n    if a == b + c || a == c + b || a == b + c || a == c\
    \ + b {\n        return true;\n    }\n    \n    if b == c + a || c == a + b ||\
    \ c == b + a || c == a + c {\n        return true;\n    }\n    \n    if a == b\
    \ + c || a == c + b || a == b + c || a == c + b {\n        return true;\n    }\n\
    \    \n    if b == c + a || c == a + b || c == b + a || c == a + c {\n       \
    \ return true;\n    }\n    \n    if a == b + c || a == c + b || a == b + c ||\
    \ a == c + b {\n        return true;\n    }\n    \n    if b == c + a || c == a\
    \ + b || c == b + a || c == a + c {\n        return true;\n    }\n    \n    if\
    \ a == b + c || a == c + b || a == b + c || a == c + b {\n        return true;\n\
    \    }\n    \n    if b == c + a || c == a + b || c == b + a || c == a + c {\n\
    \        return true;\n    }\n    \n    if a == b + c || a == c + b || a == b\
    \ + c || a == c + b {\n        return true;\n    }\n    \n    if b == c + a ||\
    \ c == a + b || c == b + a || c == a + c {\n        return true;\n    }\n    \n\
    \    if a == b + c || a == c + b || a == b + c || a == c + b {\n        return\
    \ true;\n    }\n    \n    if b\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmp9y1i9k5b.rs:7:29\n  |\n7 |     let mut a = a < b + c ? a : b + c;\n\
    \  |                             ^ expected one of `.`, `;`, `?`, `else`, or an\
    \ operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a + b > c {\n        return false;\n    }\n    if a + c > b {\n      \
    \  return false;\n    }\n    if b + c > a {\n        return false;\n    }\n  \
    \  return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpby_v7po_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a < b + c ? a : b + c;\n    let mut b = b < a + c ? b : a + c;\n\
    \    let mut c = c < a + b ? c : a + b;\n    \n    if a + b > c {\n        a =\
    \ c;\n        b = a + b;\n    }\n    if b + c > a {\n        b = a;\n        c\
    \ = b + c;\n    }\n    if c + a > b {\n        c = b;\n        a = c + a;\n  \
    \  }\n    \n    a == b + c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmpe7salez1.rs:7:29\n  |\n7 |     let mut a = a < b + c ? a : b + c;\n\
    \  |                             ^ expected one of `.`, `;`, `?`, `else`, or an\
    \ operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw97b4on2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015964
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    a + b > c || a + c > b || b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5jlc9ssb.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015965
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut a = a > 0 ? a : -a;\n    let mut b = b > 0 ? b : -b;\n    let mut\
    \ c = c > 0 ? c : -c;\n    \n    if a + b > c {\n        return false;\n    }\n\
    \    \n    if a + c > b {\n        return false;\n    }\n    \n    if b + c >\
    \ a {\n        return false;\n    }\n    \n    return true;\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmpv0w_162n.rs:7:25\n  |\n7 |     let mut a = a > 0 ? a : -a;\n  |\
    \                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660015965
