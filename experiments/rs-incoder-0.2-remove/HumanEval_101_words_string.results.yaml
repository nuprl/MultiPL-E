language: rs
name: HumanEval_101_words_string
results:
- exit_code: -1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::from(\"\");\n        while !s.is_empty() &&\
    \ s.chars().next().unwrap() != ',' {\n            word.push(s.chars().next().unwrap());\n\
    \        }\n        words.push(word);\n        s = String::from(s.chars().next().unwrap());\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659748081
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::new();\n        while\
    \ i < s.len() && s.chars().any(|c| c == ',' || c == ' ') {\n            word.push(s.chars().next().unwrap());\n\
    \            i += 1;\n        }\n        words.push(word);\n    }\n    words\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"HHHHHHHHHHHHHHHHHHH\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"]`', /tmp/tmpgs16bs_t.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    for\
    \ word in words {\n        words.push_back(word);\n    }\n    return words;\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_back` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmppqujh0ek.rs:8:15\n  |\n8 |         words.push_back(word);\n\
    \  |               ^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppqujh0ek.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        while !s.is_empty() {\n  \
    \          if s.is_whitespace() {\n                break;\n            }\n   \
    \         word.push(s.chars().next().unwrap());\n        }\n        words.push(word);\n\
    \        s = String::from(word.as_str());\n    }\n    words\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_whitespace` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp534nc90y.rs:10:18\n   |\n10 |          \
    \   if s.is_whitespace() {\n   |                  ^^^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `split_whitespace`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        while !s.is_empty() {\n  \
    \          if s.is_whitespace() {\n                break;\n            }\n   \
    \         word.push(s.chars().next().unwrap());\n            s.next();\n     \
    \   }\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_whitespace` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpc4gxued4.rs:10:18\n   |\n10 |          \
    \   if s.is_whitespace() {\n   |                  ^^^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `split_whitespace`\n\nerror[E0599]:\
    \ no method named `next` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpc4gxued4.rs:14:15\n   |\n14 |             s.next();\n   |          \
    \     ^^^^ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    for\
    \ word in words {\n        words.push(word);\n    }\n    return words;\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpmupb6a84.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmupb6a84.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut words = s.split_whitespace();\n    for word\
    \ in words {\n        words.push(word);\n    }\n    return words;\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp78xytpwn.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp78xytpwn.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        while !s.is_empty() {\n  \
    \          if s.is_whitespace() {\n                break;\n            }\n   \
    \         word.push(s.chars().next().unwrap());\n            s.next();\n     \
    \   }\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_whitespace` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpc4gxued4.rs:10:18\n   |\n10 |          \
    \   if s.is_whitespace() {\n   |                  ^^^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `split_whitespace`\n\nerror[E0599]:\
    \ no method named `next` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpc4gxued4.rs:14:15\n   |\n14 |             s.next();\n   |          \
    \     ^^^^ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split(\",\");\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmphz14bz4z.rs:7:11\n  |\n7 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `std::str::Split<'_, &str>`\n\
    \nerror[E0599]: no method named `as_slice` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmphz14bz4z.rs:7:34\n  |\n7 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `std::str::Split<'_,\
    \ &str>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmphz14bz4z.rs:8:5\n  |\n\
    4 | fn words_string(s: String) -> Vec<String> {\n  |                         \
    \      ----------- expected `Vec<String>` because of return type\n...\n8 |   \
    \  words\n  |     ^^^^^ expected struct `Vec`, found struct `std::str::Split`\n\
    \  |\n  = note: expected struct `Vec<String>`\n             found struct `std::str::Split<'_,\
    \ &str>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut split\
    \ = false;\n    while !s.is_empty() {\n        if s.is_whitespace() {\n      \
    \      split = true;\n        } else {\n            if split {\n             \
    \   words.push(s.trim_end());\n                split = false;\n            }\n\
    \            s.trim_end();\n        }\n    }\n    words\n}\n\nfn main() {\n  \
    \  let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_whitespace` found for struct `String`\
    \ in the current scope\n --> /tmp/tmpnbx1pltl.rs:9:14\n  |\n9 |         if s.is_whitespace()\
    \ {\n  |              ^^^^^^^^^^^^^ help: there is an associated function with\
    \ a similar name: `split_whitespace`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpnbx1pltl.rs:19:5\n   |\n4  | fn words_string(s: String) -> Vec<String>\
    \ {\n   |                               ----------- expected `Vec<String>` because\
    \ of return type\n...\n19 |     words\n   |     ^^^^^ expected struct `String`,\
    \ found `&str`\n   |\n   = note: expected struct `Vec<String>`\n             \
    \ found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::from(\"\");\n       \
    \ let mut j = i;\n        while j < s.len() && s.chars().any(|c| c == ',' || c\
    \ == ' ') {\n            word.push(s.chars().nth(j).unwrap());\n            j\
    \ = j + 1;\n        }\n        word.push(s.chars().nth(j).unwrap());\n       \
    \ words.push(word);\n        i = j;\n    }\n    words\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpavpocsih.rs:15:36

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut word\
    \ = \"\";\n    while !s.is_empty() {\n        let c = s.chars().next().unwrap();\n\
    \        if c == ',' || c == ' ' {\n            words.push(word);\n          \
    \  word = \"\";\n        } else {\n            word += c;\n        }\n    }\n\
    \    words.push(word);\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n  --> /tmp/tmpnl4m_nh8.rs:14:13\n   |\n14 |             word += c;\n\
    \   |             ----^^^^^\n   |             |\n   |             cannot use `+=`\
    \ on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnl4m_nh8.rs:18:5\n\
    \   |\n4  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \               ----------- expected `Vec<String>` because of return type\n...\n\
    18 |     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::new();\n        word.push_str(&s[i\
    \ .. i + 1]);\n        i += 1;\n        words.push(word);\n    }\n    words\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"H\", \"i\", \",\", \" \", \"m\", \"y\", \" \", \"n\", \"a\", \"m\", \"e\"\
    , \" \", \"i\", \"s\", \" \", \"J\", \"o\", \"h\", \"n\"]`,\n right: `[\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]`', /tmp/tmpyu6dpl9a.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    for\
    \ word in words {\n        words.push(word);\n    }\n    return words;\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpmupb6a84.rs:8:15\n  |\n8 |         words.push(word);\n\
    \  |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmupb6a84.rs:10:12\n   |\n4  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n10 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    words.collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60j79l4s.rs:8:5\n  |\n4 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n...\n8 |     words\n\
    \  |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected struct `Vec<String>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748076
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        let mut c = false;\n     \
    \   while !s.is_empty() {\n            if c == false {\n                if s.is_empty()\
    \ {\n                    break;\n                }\n                word.push(*s);\n\
    \                c = true;\n            } else {\n                word.push(*s);\n\
    \                c = false;\n            }\n            s = s.chars().next();\n\
    \        }\n        words.push(word);\n    }\n    return words;\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb907qeo7.rs:15:27\n   |\n\
    15 |                 word.push(*s);\n   |                           ^^ expected\
    \ `char`, found `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb907qeo7.rs:18:27\n\
    \   |\n18 |                 word.push(*s);\n   |                           ^^\
    \ expected `char`, found `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb907qeo7.rs:21:17\n\
    \   |\n21 |             s = s.chars().next();\n   |                 ^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found enum `Option`\n   |\n   = note: expected struct\
    \ `String`\n                found enum `Option<char>`\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748076
